<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Polyglot]]></title>
  <link href="http://markfussell.emenar.com/atom.xml" rel="self"/>
  <link href="http://markfussell.emenar.com/"/>
  <updated>2015-10-20T11:06:12-07:00</updated>
  <id>http://markfussell.emenar.com/</id>
  <author>
    <name><![CDATA[Mark Fussell]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ADD Stack [Part-7]]]></title>
    <link href="http://markfussell.emenar.com/blog/addstack-7/"/>
    <updated>2015-10-19T01:00:00-07:00</updated>
    <id>http://markfussell.emenar.com/blog/addstack-7</id>
    <content type="html"><![CDATA[<p>This is the second series describing the ADD: a radically more productive development and delivery environment.  The
first article is here: <a href="http://markfussell.emenar.com/blog/addstack-1/">Intro</a> and described the truth and lies about developing software.
The second article dealt with &#8216;Testing&#8217;.  The third dealt with the application stack (Grails and other technologies).
The fourth discussed UI alternatives.  The fifth added some major aspects to the stack: Semi-Structured Data, Templates,
and Dual or Isomorphic scripting. The sixth discussed UI frameworks in a bit more detail and ended with an Angular vs.
Ember as a core choice.</p>

<h2>Logging, Analytics, and Monitoring</h2>

<p>Returning to a bit more of an &#8216;IT&#8217; issue, how do we handle logging, monitoring, and analytics on our collection of
machines?  There are a number of choices:</p>

<ol>
<li>Run our own infrastructure</li>
<li>Go with an inexpensive provider</li>
<li>Go with a more capable provider</li>
<li>Don&#8217;t</li>
</ol>


<p>Of the above, I believe #3 is usually worth it until your scale gets to the point of needing #1.  Downgrading
from #3 to #2 is fine <em>after</em> you have learned the capabilities you are giving up.</p>

<!--more-->


<h3>Logging: SumoLogic</h3>

<p>The longest standing, very successful, and SaaS capable company is Splunk (<a href="http://splunk.com/">http://splunk.com/</a>) .  But their prices are crazy.  Have no
idea how they can charge that much.  So instead I will demo SumoLogic (<a href="http://SumoLogic.com/">http://SumoLogic.com/</a>) as the &#8216;3B&#8217; tier.</p>

<p>Installing SumoLogic is incredibly easy:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>wget <span class="s2">&quot;https://collectors.us2.sumologic.com/rest/download/linux/64&quot;</span> -O SumoCollector.sh <span class="o">&amp;&amp;</span> chmod +x SumoCollector.sh <span class="o">&amp;&amp;</span> ./SumoCollector.sh -q -VskipDefaultSources<span class="o">=</span><span class="nb">true</span> -Vsumo.token_and_url<span class="o">={</span>token<span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And the collector is on the machine.  If you tell it what you want to aggregate, it starts collecting and indexing files in those paths.  In our case, the nodes
all have files in &#8216;/root/log&#8217; which it would be nice to have aggregated.</p>

<p>The results are visible here:</p>

<p><img src="http://markfussell.emenar.com/images/addstack-7/addstack7_sumo1.png" /></p>

<p><img src="http://markfussell.emenar.com/images/addstack-7/addstack7_sumo2.png" /></p>

<p><img src="http://markfussell.emenar.com/images/addstack-7/addstack7_sumo3.png" /></p>

<h4>Logging Alternative: Graylog</h4>

<p>For Rumble, we had a Graylog (<a href="http://graylog.com/">http://graylog.com/</a>) cluster that dealt with a tremendous amount of data (half a
terabyte a day if memory serves, due to over-enthusiastic logging) and was relatively stable under that load.
Elasticsearch had issues if a node failed (just due to the stress of moving data to another backup), but this
is under pretty extreme load levels.  So if you wanted to roll your own, the Graylog path would be a very
inexpensive and powerful path.</p>

<h3>Analytics and Monitoring: NewRelic</h3>

<p>NewRelic (<a href="http://newrelic.com/">http://newrelic.com/</a>) started out as a Ruby-oriented monitoring service, and basically came about because Ruby/Rails developers
(a) wanted a lot of information about why their apps were running slowly, (b) had very little knowledge about
operations and other ways of monitoring things, and (c) Ruby itself has little support for monitoring.  NewRelic
came along and provided the metrics (as you would expect for Java and similar mature languages) <em>outside</em> the
Ruby environment.  Initially this could be viewed as a crutch for Ruby where Java didn&#8217;t need it, but ultimately
by putting the metrics outside the application everyone&#8217;s life was simpler.</p>

<p>To install NewRelic, you need to get the agent onto the machine.  In our case we are going to leverage the annex:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#====================================================</span>
</span><span class='line'><span class="c">#=== Install NewRelic</span>
</span><span class='line'><span class="c">#====================================================</span>
</span><span class='line'>
</span><span class='line'><span class="c">#===================================</span>
</span><span class='line'><span class="c">#=== Server</span>
</span><span class='line'><span class="c">#===================================</span>
</span><span class='line'>
</span><span class='line'>rpm -Uvh http://download.newrelic.com/pub/newrelic/el5/i386/newrelic-repo-5-3.noarch.rpm
</span><span class='line'>yes | yum -y install newrelic-sysmond
</span><span class='line'>nrsysmond-config --set <span class="nv">license_key</span><span class="o">=</span>key
</span><span class='line'>
</span><span class='line'>/etc/init.d/newrelic-sysmond start
</span><span class='line'>
</span><span class='line'><span class="c">#===================================</span>
</span><span class='line'><span class="c">#=== Java</span>
</span><span class='line'><span class="c">#===================================</span>
</span><span class='line'>
</span><span class='line'><span class="nb">export </span><span class="nv">APP_VERSION</span><span class="o">=</span>3.21.0
</span><span class='line'><span class="nb">export </span><span class="nv">APP_FULL_VERSION</span><span class="o">=</span>newrelic-java-<span class="k">${</span><span class="nv">APP_VERSION</span><span class="k">}</span>
</span><span class='line'>
</span><span class='line'>mkdir -p .temp
</span><span class='line'>cp it/resource/<span class="k">${</span><span class="nv">APP_FULL_VERSION</span><span class="k">}</span>.zip .temp/
</span><span class='line'>
</span><span class='line'>./bin/inflatePaths.sh .temp/<span class="k">${</span><span class="nv">APP_FULL_VERSION</span><span class="k">}</span>.zip
</span><span class='line'>
</span><span class='line'>mkdir -p /opt
</span><span class='line'>cp -fr .temp/newrelic /opt/
</span><span class='line'>
</span><span class='line'>cp -fr <span class="k">${</span><span class="nv">RESOURCE</span><span class="k">}</span>/newrelic.yml /opt/newrelic/newrelic.yml
</span></code></pre></td></tr></table></div></figure>


<p>The first section puts on the system-monitoring agent for newrelic.
The second section has two parts.  The first part puts the general NewRelic agent onto the machine, and the second part
enables us to override (overlay) the default configuration with our own.  The most important part is to replace the
license, but there are many things that can be configured within the NewRelic agent.</p>

<p>Finally, we need to launch with the agent configuration into the java / &#8216;gradew&#8217; launcher:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.</span>
</span><span class='line'><span class="nv">DEFAULT_JVM_OPTS</span><span class="o">=</span><span class="s2">&quot;-javaagent:/opt/newrelic/newrelic.jar&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>After doing this and waiting for the metrics to hit the NewRelic servers, we get some nice visuals:</p>

<p><img src="http://markfussell.emenar.com/images/addstack-7/addstack7_newrelic2.png" />
<img src="http://markfussell.emenar.com/images/addstack-7/addstack7_newrelic4.png" />
<img src="http://markfussell.emenar.com/images/addstack-7/addstack7_newrelic5.png" />
<img src="http://markfussell.emenar.com/images/addstack-7/addstack7_newrelic6.png" />
<img src="http://markfussell.emenar.com/images/addstack-7/addstack7_newrelic7.png" />
<img src="http://markfussell.emenar.com/images/addstack-7/addstack7_newrelic7.png" /></p>

<h3>Operational Monitoring: Nagios and Icinga</h3>

<p>The above monitoring is not &#8216;alert&#8217; oriented.  It lets you drill into the details of what is happening
in operations both currently and somewhat into the past.  To be a bit more alert oriented, you need
to go down a different path.  The most mature open source path is the Nagios / Icinga double path (<a href="http://nagios.org/">http://nagios.org/</a>,
 <a href="http://icinga.org/">http://icinga.org/</a>).</p>

<p>An important aspect of monitoring is to have <em>multiple</em> monitors on your network.  And, in general, for the monitors
to be outside the data center.  Agents within the data center can relay information out, but if your monitors fail
inside the data center, you are (unknowingly) blind.</p>

<p>So for Nagios, we can demonstrate monitoring from the developers (or operations dashboard) machine vs.
within the data center.  Because of the presence being visible from anywhere, monitoring configuration can happen
anywhere that you can pull out a git repository.</p>

<p>Examples of Nagios views are:</p>

<p><img src="http://markfussell.emenar.com/images/addstack-7/addstack7_nagios1.png" /></p>

<p><img src="http://markfussell.emenar.com/images/addstack-7/addstack7_nagios2.png" /></p>

<p>Where the lists of hosts to monitor and what to monitor comes from text configuration files.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>define host <span class="o">{</span>
</span><span class='line'>   host_name   <span class="o">{</span>host_name<span class="o">}</span>
</span><span class='line'>   use         <span class="o">{</span>node_type<span class="o">}</span>
</span><span class='line'>   <span class="nb">alias</span>       <span class="o">{</span>node_id<span class="o">}</span>
</span><span class='line'>   address     <span class="o">{</span>node_public_address<span class="o">}</span>
</span><span class='line'>   register    <span class="o">{</span>registration_order<span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And these files can trivially be generated from the presence information, and updated if
anything changes.  An important aspect is to make sure to turn off the monitoring system
when a node is going down <em>intentionally</em>.  So the &#8216;node_state&#8217; status and &#8216;node_app_state&#8217;
status are critical to have come through the presence information for monitoring to
not be &#8216;noisy&#8217;.  A noisy monitor is a monitor that will quickly be forever ignored.</p>

<p>Although Nagios and Icinga have dashboards, everything should go into HipChat so everyone
can see the history and stability/instability of the system.  You can even publish the status
  publicly so your users will know there is a production problem. If you enable public chat
  in either HipChat or elsewhere, the users can both see the status and ask for predictions
  of when issues are resolved.  A much higher-touch relationship with users can make them
  longer users (this retention aspect was very true of Winster where the CEO was <em>online</em>
  and could be chatted with a good portion of the evening.  Kind of like walking the floors
  of the casino or Tim Cook being in the University Apple Store.).</p>

<h2>Conclusion</h2>

<p>Although it is more operational than &#8220;application stack&#8221;, the ability to monitor and analyze your
application&#8217;s performance and behavior is critical to any production deployment of it.  So you
should think about it early and not as an afterthought.  All logging should go into the logging pipeline
(no System.println or equivalent) and be searchable through that pipeline at one or more aggregators.
Start out with a metrics system like NewRelic to get a bunch  of valuable things for free
and you can later add in new application-specific metrics.
And get the basics of operational monitoring up early and you will know if the application and the
IT is reliable long before it gets into the production data center.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ADD Stack [Part-6]]]></title>
    <link href="http://markfussell.emenar.com/blog/addstack-6/"/>
    <updated>2015-10-17T01:00:00-07:00</updated>
    <id>http://markfussell.emenar.com/blog/addstack-6</id>
    <content type="html"><![CDATA[<p>This is the second series describing the ADD: a radically more productive development and delivery environment.  The
first article is here: <a href="http://markfussell.emenar.com/blog/addstack-1/">Intro</a> and described the truth and lies about developing software.
The second article dealt with &#8216;Testing&#8217;.  The third dealt with the application stack (Grails and other technologies).
The fourth discussed UI alternatives.  The fifth added some major aspects to the stack: Semi-Structured Data, Templates,
and Dual or Isomorphic scripting.</p>

<h2>Which UI framework?</h2>

<p>The fourth article discussed UI alternatives, but they were mostly &#8216;architectural&#8217; alternatives and did not
specify a particular framework to use.  I believe that is correct in that <em>how you use</em> the framework can be more
important than the framework itself.  People can correctly and badly use all kinds of different technology.
Use a hammer correctly and you might have a slight penalty (rubber vs. metal) if it is a bit weaker of a tool, but
use it wrong (have thumb be accessible) and you can be seriously hurt.</p>

<p>There are a number of popular frameworks:</p>

<ul>
<li>Angular</li>
<li>Ember</li>
<li>Backbone</li>
<li>Sencha</li>
<li>etc.</li>
</ul>


<p>And deciding between them may seem like &#8220;which has the best features?&#8221; but unless something has a killer feature
(Sencha can run the same code on the desktop and mobile) that you care about, and is worth its penalties (Sencha
is proprietary and very &#8216;different&#8217;) then &#8216;best features&#8217; is basically meaningless.  A better question is &#8220;Which
one do I understand the best?&#8221; and &#8220;Which one can other people learn and share-code the best?&#8221;.</p>

<!--more-->


<p>Taking out &#8216;Sencha&#8217; from the above and you get a few different viewpoints on the web:</p>

<ul>
<li>&lt;http://blog.yodersolutions.com/why-i-recommend-emberjs-over-angularjs/ ></li>
<li><a href="https://www.airpair.com/js/javascript-framework-comparison">https://www.airpair.com/js/javascript-framework-comparison</a></li>
<li><a href="https://www.quora.com/Is-Angular-js-or-Ember-js-the-better-choice-for-JavaScript-frameworks">https://www.quora.com/Is-Angular-js-or-Ember-js-the-better-choice-for-JavaScript-frameworks</a></li>
</ul>


<p>And dropping Backbone, the distinction is really:</p>

<ul>
<li>Angular – Powerful, dry, and scale-limited framework</li>
<li>Ember – Less dry, more opinionated, and more scalable</li>
</ul>


<p>With Angular you have the ability to shoot yourself more and get confused more.  With Ember you will likely
have to be more explicit, but the convention and the explicitness should make the code more readable and
maintainable.</p>

<p>Angular is so similar to Flex that it is very intuitive to me (even directives), but I have seen it used
in ways I think the Angular team would be shocked by.  Sencha is confusing but is so mature, documented,
and powerfully-fragile (do something wrong and you get a terribly visible break) that you can&#8217;t really use it wrong.
Ember appears to have the advantages of Rails and Grails&#8230; as the framework innately &#8216;works&#8217; you can&#8217;t
really deviate very much.  Also, Ember causes certain ripples (handlebars vs. dust) so you need to
decide early whether you want complete alignment</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ADD Stack [Part-5]]]></title>
    <link href="http://markfussell.emenar.com/blog/addstack-5/"/>
    <updated>2015-10-16T01:00:00-07:00</updated>
    <id>http://markfussell.emenar.com/blog/addstack-5</id>
    <content type="html"><![CDATA[<p>This is the second series describing the ADD: a radically more productive development and delivery environment.  The
first article is here: <a href="http://markfussell.emenar.com/blog/addstack-1/">Intro</a> and described the truth and lies about developing software.
The second article dealt with &#8216;Testing&#8217;.  The third dealt with the application stack (Grails and other technologies).
The fourth discussed UI alternatives.</p>

<p>This article is about some fairly advanced capabilities, but capabilities that many projects find useful,
and so should be considered within the context of the overall context.  They are:</p>

<ul>
<li> Data Flexibility and Templating</li>
<li> Server Side Scripting</li>
</ul>


<h2>Data Flexibility and Template Systems</h2>

<p>One of the more interesting capability of an application is when users can control the content and presentation
of information.  Content is relatively easy given pure structured information is trivial to store in most
any database.  As the content becomes more unstructured you need to shift models and store it in a &#8216;meta&#8217;
structure like JSON.  As the content becomes bigger, you need the flexibility of very large objects (BLOBs and CLOBs)
stored either in the database or potentially within content repositories like S3.  Using the Annex model
discussed earlier, you can simply store a hash in the database and the actual content on S3, and then
<em>the client</em> can pull down the information without taxing your server network at all.</p>

<p>Having flexible data is not very useful unless you can present it.  If the data is in JSON, you need to
be able to take JSON and render it into text, HTML, or something the programming language can work with.
There are a number of template systems out there:</p>

<ul>
<li> Mustache</li>
<li> Jade</li>
<li> Dust</li>
</ul>


<!--more-->


<p>Deciding amongst them depends on who is going to be writing the template and &#8216;where&#8217; it is
going to execute.  But I recommend (a) making it language agnostic, (b) making it output agnostic,
and (c) making writing HTML templates a lot like writing HTML (and not something weird even if &#8220;more
powerful&#8221;).  I have seen a lot of developers argue that you should write HTML in some YAML like language.
That is like saying you should write Java in some LISP-like language.  It makes no sense to change
syntax that dramatically even if every language is computationally equivalent.  HTML is verbose
because people like that lack of ambiguity (The original SGML was much more ambiguous and powerful).
There are plenty of auto-complete tools out there that help with HTML.  And everyone can follow
&#8216;fragments&#8217; of HTML better because the fragment has so much redundant information.</p>

<p>Among the above, it seems that Dust <a href="http://dustjs.com/">http://dustjs.com/</a> is a well supported successor to Mustache / Handlebars.
Besides having LinkedIn support, it appears the company <a href="http://cloudcms.com/">http://cloudcms.com/</a> is using it as well.  There is
a comparison of frameworks at <a href="https://engineering.linkedin.com/frontend/client-side-templating-throwdown-mustache-handlebars-dustjs-and-more">Templating Throwdown</a></p>

<p>By combining an ability to retrieve arbitrary information with arbitrary templates, we can enable
a user to generate any page they want&#8230; either for themselves or for other people.</p>

<h3>Scary!</h3>

<p>OK, the above should seem both epic and <em>scary</em>.  A user can generate arbitrary HTML pages
including JavaScript?  Doesn&#8217;t that mean they could do <em>anything</em> including hijack another user?  Get
their password?  Stuff like that?</p>

<p>If you do it wrong&#8230; yes&#8230; yes they can.  Fortunately we have Facebook, MySpace and other companies that
show how to do it wrong and then fix the problem.  The general solution is:</p>

<ul>
<li>Users never authenticate with &#8216;The Page&#8217;.  They only authenticate with you.</li>
<li>You give the page a valid one-time token for that third party to contact you on behalf of a user</li>
<li>You make sure to verify the token before doing anything for the user, and only allow the page / third party to do things you (or the user) approve</li>
</ul>


<p>This model makes sure the third party is not doing anything dangerous to your site&#8230;
or at least not successfully doing anything.</p>

<h2>Server-Side Scripting</h2>

<p>Along with the data flexibility combined with templating described above, there is an even scarier and more powerful
option to enable within-server scripting.  This ability to have code be mutable at run-time enables some easy upgrades
and &#8216;forks&#8217; (customers doing their own thing) in exchange for much less surety that the code is running, some performance
trades, a more complex system model (flowing back and forth between JavaScript and Java), and potential for security
holes.  I have seen a number of systems have scripting and the most successful variations have been:</p>

<ul>
<li>Limited scripting to support customizing very controlled situations (e.g. Templating, Workflow, etc.)</li>
<li>Hog-wild scripting that enables customers to &#8216;fork&#8217; the code base, where that code base is being run on un-shared servers</li>
</ul>


<p>If you want to have a customizable product, the second approach is definitely very powerful.  Otherwise, the first is probably
safer and simpler.  An example of the benefits to server-side (and ultimately hybrid or &#8216;isomorphic&#8217;) is described well here:</p>

<ul>
<li> <a href="https://www.youtube.com/watch?v=pgvlHGi9VXM">https://www.youtube.com/watch?v=pgvlHGi9VXM</a></li>
<li> <a href="http://isomorphic.net">http://isomorphic.net</a></li>
</ul>


<h3>What scripting language?</h3>

<p>The obvious modern scripting language to use is JavaScript.  Because of its&#8217; pervasiveness in the browser, it is among
the better understood languages out there.  It also has a ridiculously simple and powerful language model (JS is a
(maybe accidental?) descendant of Self, which was an amazingly simple and powerful language too).  And although it does
not have a lot of libraries, running JavaScript via Nashorn enables you to call into the Java world.  A tutorial on
Nashorn is here:</p>

<ul>
<li><a href="http://winterbe.com/posts/2014/04/05/java8-nashorn-tutorial/">http://winterbe.com/posts/2014/04/05/java8-nashorn-tutorial/</a></li>
</ul>


<h2>Summary</h2>

<p>This article described augmenting both the server and the client by putting in three stack
&#8216;ingredients&#8217; that enable a lot of power (either broadly or in limited situations):</p>

<ul>
<li>Flexible/Semi-structured Data – JSON – On both the client and the server (and the database)</li>
<li>Templating – Dust – On both the client and the server (by the next one)</li>
<li>Scripting: Dual and Isomorphic – JavaScript / Nashorn – Both client and server can then have leverage the same scripting technologies, and potentially chose whether to run something on the server or on the client (or both to enhance SEO)</li>
</ul>


<p>These ingredients make for a much more powerful and flexible application.  These may be overkill for some projects, but
 they are definitely <em>generally useful</em> and whether &#8216;utilized&#8217; they should be considered &#8216;available&#8217; when needed.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ADD Stack [Part-4]]]></title>
    <link href="http://markfussell.emenar.com/blog/addstack-4/"/>
    <updated>2015-10-15T03:00:00-07:00</updated>
    <id>http://markfussell.emenar.com/blog/addstack-4</id>
    <content type="html"><![CDATA[<p>This is the second series describing the ADD: a radically more productive development and delivery environment.  The
first article is here: <a href="http://markfussell.emenar.com/blog/addstack-1/">Intro</a> and described the truth and lies about developing software.
The second article dealt with &#8216;Testing&#8217;.  The third with the application stack (Grails and other technologies).</p>

<h2>User Interface</h2>

<p>Of all the technologies that change, the User Interface is by far the most diverse and most evolved.  Modern
databases are actually pretty old technology.  Modern languages are not significantly different from ancestors
in the 1970s.  Computers have the same main components.  Programmers interact with them with keyboards and screens.
If you picked well, you are programming better (tens of thousands of hours help) but are sadly
on pretty much the same core concepts you learned in your first five thousand hours.  Sigh.</p>

<p>Except.  Except the User Interface.  The implementation of user interfaces has grown since the 70s (the
first bit-mapped and mouse-based UIs were built way back then) through Smalltalk, Objective-C, Flash, Flex,
Angular, and other paths.  But even the devices have changed.  An iPhone is not a computer.  An Apple Watch
is not an iPhone.  Times they are a changing&#8230; at least for &#8216;devices&#8217;.</p>

<h3>It&#8217;s your face</h3>

<p>The User Interface is also the &#8216;face&#8217; of a company.  It sells the company.  Whether to new customers, existing
customers, employees, stock holders, or potential investors.  A web site like Rumble&#8217;s:</p>

<ul>
<li><a href="http://rumblegames.com/">http://rumblegames.com/</a></li>
</ul>


<p><img src="http://markfussell.emenar.com/images/addstack-4/addstack4_ui1.png" /></p>

<p>And Rumble&#8217;s actual games are trying to appeal to a particular audience (middle aged men) and give
them something they want (to feel powerful and sophisticated).</p>

<p>A web site like PortaPlanter:</p>

<ul>
<li><a href="http://PortaPlanter.com/">http://PortaPlanter.com/</a></li>
</ul>


<p><img src="http://markfussell.emenar.com/images/addstack-4/addstack4_ui2.png" /></p>

<!--more-->


<p>is targeting a different audience (very broad, green-conscious, etc.) and trying to give them something they want
(to help the planet) where hopefully the product speaks mostly for itself so there are no &#8220;frills&#8221; on
the page.  The PortaPlanter site is currently a bit under-skinned, but even sophisticated product sites tend to
mostly <em>show the product</em> in isolation and in use.</p>

<p>The expense of the UI should never be under-estimated.  It is <em>by far</em> the most variable expense/investment a company
can control about their software products.  Like marketing.  Build everything <em>perfectly</em> and the UI will be
the only thing that can change the cost.  Well, next to &#8216;rapid feature changes&#8217; but that is more controllable
because you can turn it on and off.  The PortaPlanter web site cost a few thousand (mostly the pictures),
is trivial to maintain, and costs nothing to run (static hosting by GitHub).
The Rumble web site cost nearly a million dollars, is made from a very sophisticated PHP package
which costs thousands of dollars to do significant changes to, and hosting it costs thousands of dollars.
That is just the web site of the company, not the games themselves.</p>

<h3>What face do you want?</h3>

<p>The million-dollar Rumble site was primarily done by a company called Viget who came into Rumble and
showed us a bunch of different web sites based on certain aspects we told them we wanted.  The CEO
and his right hand were the primary &#8216;Customers&#8217; but we also had a graphic artist that has a great
eye for these things.  Working among the Rumble and Viget teams, we got what you see above.  It is
  implemented in Expression Engine (a PHP engine), but <em>the design</em> and <em>the capabilities</em> are the
  driving factor behind it&#8217;s cost not the implementation technology (although EE is overkill).</p>

<p>Using a firm like Viget is one approach, but another is to simply figure out what you want to look like.
Jerry Kaplan founded &#8216;Winster&#8217; to be an online gambling company.  That was originally illegal, so he
pivoted a bit, but if you look at the site&#8230; it looks like Vegas or Reno:</p>

<ul>
<li><a href="http://www.winster.com/">http://www.winster.com/</a></li>
</ul>


<p><img src="http://markfussell.emenar.com/images/addstack-4/addstack4_ui3.png" /></p>

<p>This is exactly what Jerry wanted.  He (the CEO) was the designer and the rest of us just implemented
 his vision (or face his wrath&#8230;)</p>

<p>Turns out this web site is somewhat expensive because it was initially built in Flash and Flex (and
when &#8216;converted&#8217; Jerry wanted to keep the feel).  So it needs to be quirkier than most web sites
 in spite of its graphic and content simplicity.</p>

<p>For all of my most recent startups, the Face was a huge part:</p>

<ul>
<li>Rumble – Powerful games for powerful people</li>
<li>PeerCase – Modern (iPad caliber), graphically elegant, but intuitive and medical (especially appealing to doctors)</li>
<li>Vive – Must make exercise seem like fun</li>
<li>FooMojo – Make sure virtual pets look as fun as real pets</li>
<li>Winster – Vegas or bust!</li>
</ul>


<p>and each one had a different front-end technology <em>in spite of</em> being written mostly by me and having fairly similar
 back-end technologies (Java, Rails, and Grails).  This isn&#8217;t because I like swapping out the front-end.  I offered
 to use Flex for all of them.  But Flex isn&#8217;t mobile.  And the mobile space was of concern to everyone but &#8216;Winster&#8217;.</p>

<h3>How do you implement?</h3>

<p>By now you may be groaning:</p>

<blockquote><p>OK. OK. I need to decide what &#8216;face&#8217; I want.  I will&#8230; I promise&#8230;
But what are the choices for implementation?
What is &#8216;plausibly&#8217; in the picture as a best implementation approach for the UI.</p></blockquote>

<p>This is pretty easy.  There are simply three productive and effective choices&#8230; with some variants within them.</p>

<ul>
<li>Static web site.  By far the most productive and effective if it fills your needs.  You don&#8217;t write HTML, but the site gets generated from a technology like Markdown.  This site is made that way.</li>
<li>Server-side rendering.  The next most productive and very effective if it fills your needs.  You don&#8217;t write HTML, you write something like GSPs which are templates that get expanded for each server hit.  The &#8216;petclinic&#8217; example is this kind of site.

<ul>
<li>Note this does not mean the client is doing nothing.  It may be doing a lot.  But the server is frequently interacted with to generate pages or partial-pages.</li>
</ul>
</li>
<li>Client-side rendering.  The most sophisticated (sort of) and if this can&#8217;t fill your need, you can always use either of the above.</li>
</ul>


<p>Some other approaches are &#8216;Native Application&#8217; or a &#8216;Native-enhanced web-app&#8217; but those need only be considered for very
particular needs.</p>

<p>Among the three main choices, only &#8216;Server&#8217; vs. &#8216;Client&#8217; lead down interesting paths.  There are lots of &#8216;static&#8217; tools so
that is more an experience and &#8216;taste&#8217; issue.  Markdown is great, but it isn&#8217;t for everyone.  And SAAS like SquareSpace
are very nice if they fill your needs.</p>

<h4>Server-side</h4>

<p>The interesting part about server-side rendering is it says <em>nothing</em> about the sophistication of the page.  Or the number
of pages (could be one&#8230; could be 1000).  I actually believe that server-side rendering must be considered the default
and then you can decide how much to branch off from there.  PeerCase was mostly a one-page-application (in Sencha) and
most of the client-server interaction was JSON.  But there were different versions of the one-page-application depending
on what kind of client hit the server.  The server bundled up the appropriate resources together and down-they-went.
Desktop clients made a lot a &#8216;asset&#8217; requests because they can handle them concurrently and cache them.
Mobile devices got a manifest and did an update in the background.</p>

<p>Grails is great at server-side rendering and can easily use Angular or any framework within each page.</p>

<p>An example of this is the &#8216;angular-grails3&#8217; project.  This is just a grails application that includes angular like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class='line'><span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">&quot;en&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;head&gt;</span>
</span><span class='line'>      <span class="nt">&lt;meta</span> <span class="na">http-equiv=</span><span class="s">&quot;Content-Type&quot;</span> <span class="na">content=</span><span class="s">&quot;text/html; charset=UTF-8&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;meta</span> <span class="na">http-equiv=</span><span class="s">&quot;X-UA-Compatible&quot;</span> <span class="na">content=</span><span class="s">&quot;IE=edge,chrome=1&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;title&gt;&lt;g:layoutTitle</span> <span class="na">default=</span><span class="s">&quot;Grails&quot;</span><span class="nt">/&gt;&lt;/title&gt;</span>
</span><span class='line'>      <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;viewport&quot;</span> <span class="na">content=</span><span class="s">&quot;width=device-width, initial-scale=1.0&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>          <span class="nt">&lt;asset:stylesheet</span> <span class="na">src=</span><span class="s">&quot;application.css&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;asset:script</span> <span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            angular.module(&#39;myApp.core.constants&#39;)
</span><span class='line'>                .constant(&#39;rootUrl&#39;, &#39;${grailsApplication.config.angular.rootUrl}&#39;)
</span><span class='line'>                .constant(&#39;pageSize&#39;, &#39;${grailsApplication.config.angular.pageSize}&#39;)
</span><span class='line'>                .constant(&#39;dateFormat&#39;, &#39;${grailsApplication.config.angular.dateFormat}&#39;);
</span><span class='line'>        <span class="nt">&lt;/asset:script&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;asset:javascript</span> <span class="na">src=</span><span class="s">&quot;application.js&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;asset:deferredScripts</span> <span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;g:layoutHead/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/head&gt;</span>
</span><span class='line'>  <span class="nt">&lt;body</span> <span class="na">id=</span><span class="s">&quot;ng-app&quot;</span> <span class="na">ng-app=</span><span class="s">&quot;${pageProperty(name: &#39;body.ng-app&#39;) ?: &#39;myApp&#39;}&quot;</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>and voilà, we have Angular running in a page that can access Grails configuration and application capabilities.</p>

<h4>Client-side</h4>

<p>Client-side rendering is really more like &#8216;separate client from server&#8217; development.
It is making &#8220;building the client&#8221; into somthing
that makes sense independent of the server.  Picking this over server-side rendering is making a few statements:</p>

<ul>
<li>We want to leverage &#8216;separate-client&#8217; technology</li>
<li>We may have people who are comfortable with &#8216;separate-client&#8217; technology and not with the server technology</li>
<li>We want to increase the chance that we don&#8217;t do something stupid that prevents us from swapping server or client</li>
</ul>


<p>An example of this approach is the &#8216;grails3-angular-duo&#8217; project which has a:</p>

<ul>
<li>backend – In grails</li>
<li>frontend – In Angular + Gulp, Bower, Karma, etc.</li>
</ul>


<p>And although you &#8216;hit the backend&#8217; to get your first web page, that actual page comes from
the frontend build system.  And in this case the &#8216;api&#8217; is pure REST.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kd">class</span> <span class="nc">UrlMappings</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">static</span> <span class="n">mappings</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>        <span class="s2">&quot;/$controller/$action?/$id?(.$format)?&quot;</span><span class="o">{</span>
</span><span class='line'>            <span class="n">constraints</span> <span class="o">{</span>
</span><span class='line'>                <span class="c1">// apply constraints here</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="s2">&quot;/&quot;</span><span class="o">(</span><span class="nl">redirect:</span><span class="s2">&quot;/frontend/index.html&quot;</span><span class="o">)</span>
</span><span class='line'>        <span class="s2">&quot;500&quot;</span><span class="o">(</span><span class="nl">view:</span><span class="s1">&#39;/error&#39;</span><span class="o">)</span>
</span><span class='line'>        <span class="s2">&quot;404&quot;</span><span class="o">(</span><span class="nl">view:</span><span class="s1">&#39;/notFound&#39;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="s2">&quot;/api/books&quot;</span><span class="o">(</span><span class="nl">resources:</span><span class="s2">&quot;book&quot;</span><span class="o">)</span>
</span><span class='line'>        <span class="s2">&quot;/api/authors&quot;</span><span class="o">(</span><span class="nl">resources:</span><span class="s2">&quot;author&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Interestingly, the front-end is now a mostly-static web site.  The content isn&#8217;t static because it depends on JSON,
but most everything else is locked down.  So this is in some ways <em>less</em> flexible than the server side rendering.
Fewer things can change without building another page and sending it out (deploying and referencing it).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!doctype html&gt;</span>
</span><span class='line'>  <span class="nt">&lt;head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">&quot;utf-8&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;meta</span> <span class="na">http-equiv=</span><span class="s">&quot;X-UA-Compatible&quot;</span> <span class="na">content=</span><span class="s">&quot;IE=edge&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;title&gt;&lt;/title&gt;</span>
</span><span class='line'>    <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;description&quot;</span> <span class="na">content=</span><span class="s">&quot;&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;viewport&quot;</span> <span class="na">content=</span><span class="s">&quot;width=device-width&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;shortcut icon&quot;</span> <span class="na">href=</span><span class="s">&quot;favicon.ico&quot;</span> <span class="na">type=</span><span class="s">&quot;image/x-icon&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- build:css styles/vendor.css --&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- bower:css --&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- endbower --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;bower_components/bootstrap/dist/css/bootstrap.css&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- endbuild --&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- build:css({.tmp,app}) styles/main.css --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;styles/main.css&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- endbuild --&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/head&gt;</span>
</span><span class='line'>  <span class="nt">&lt;body</span> <span class="na">ng-app=</span><span class="s">&quot;duo&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="c">&lt;!--[if lt IE 7]&gt;</span>
</span><span class='line'><span class="c">      &lt;p class=&quot;browsehappy&quot;&gt;You are using an &lt;strong&gt;outdated&lt;/strong&gt; browser. Please &lt;a href=&quot;http://browsehappy.com/&quot;&gt;upgrade your browser&lt;/a&gt; to improve your experience.&lt;/p&gt;</span>
</span><span class='line'><span class="c">    &lt;![endif]--&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;header&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;ul</span> <span class="na">class=</span><span class="s">&quot;nav nav-pills pull-right&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">&quot;active&quot;</span><span class="nt">&gt;&lt;a</span> <span class="na">ng-href=</span><span class="s">&quot;#&quot;</span><span class="nt">&gt;</span>Home<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'>        <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">ng-href=</span><span class="s">&quot;#&quot;</span><span class="nt">&gt;</span>About<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'>        <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">ng-href=</span><span class="s">&quot;#&quot;</span><span class="nt">&gt;</span>Contact<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'>      <span class="nt">&lt;h3</span> <span class="na">class=</span><span class="s">&quot;text-muted&quot;</span><span class="nt">&gt;</span>DUO<span class="nt">&lt;/h3&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;jumbotron&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;h1&gt;</span>Grails Angular Duo Sample<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">&lt;!-- Add your site or application content here --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;container&quot;</span> <span class="na">ng-view=</span><span class="s">&quot;&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;footer&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;p&gt;</span>Using : AngularJS, ngRoute, Restangular<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">&lt;!-- build:js scripts/vendor.js --&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- bower:js --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;bower_components/jquery/dist/jquery.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;bower_components/angular/angular.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;bower_components/angular-animate/angular-animate.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;bower_components/angular-aria/angular-aria.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;bower_components/angular-cookies/angular-cookies.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;bower_components/angular-messages/angular-messages.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;bower_components/angular-route/angular-route.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;bower_components/angular-sanitize/angular-sanitize.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;bower_components/angular-touch/angular-touch.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;bower_components/bootstrap/dist/js/bootstrap.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;bower_components/lodash/lodash.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;bower_components/restangular/dist/restangular.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- endbower --&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- endbuild --&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">&lt;!-- build:js({.tmp,app}) scripts/scripts.js --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;scripts/app.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;scripts/controllers/list-author.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;scripts/controllers/create-author.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;scripts/controllers/edit-author.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- endbuild --&gt;</span>
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Hybrid</h4>

<p>OK, so I simplified above to get through the main concepts.  Both server-side and separate-client can be
transformed into the most powerful approach known to man&#8230; the &#8216;anything goes&#8217; or &#8216;hybrid&#8217; approach.</p>

<p>Render client, render server, send JSON, receive JSON, send POST, receive POST, open up a direct socket,
send data or HTML both directions, hook into the device&#8217;s capabilities. take over the camera and capture
 photos of the user, post to twitter, etc.</p>

<p>The problems with Hybrid approaches are:</p>

<ul>
<li>To quantify &#8220;What is allowed&#8221; and &#8220;What is not&#8221;</li>
<li>To have a coherent model</li>
<li>To have people understand the model</li>
</ul>


<p>Winster had a very good hybrid model by the time I left (product development had basically ended and Jerry was working solely on Marketing)</p>

<ul>
<li>You hit a Java server</li>
<li>It sends you a Flex application</li>
<li>Most communication is based on JSON calls to the server</li>
<li>But updates to games, chats, and presence come through an open socket</li>
</ul>


<p>The reason for the socket is that you needed to be told of <em>other people&#8217;s</em> actions.  Some technology (e.g. comet or the socket)
that can &#8220;push&#8221; updates to the client had to be used for this.  Early on, a previous architect picked sockets, and although the protocol through the socket
improved / evolved, the actual use-of-socket was not swapped out.</p>

<p>Rumble had an extreme hybrid model involving mostly open sockets to game servers,
but also ejabberd (XMPP), JSON, and a slew of different technologies solving different problems.
The drawback of using third-party technologies is that they bring in different approaches to client-server
communication.</p>

<h3>Conclusion</h3>

<p>The goal of the UI is to present a good, cost-effective, consistent, and sufficiently capable &#8216;face&#8217; to your
 users and prospects.  There are a number of different approaches that have different benefits.</p>

<p> I recommend
 starting from the position of server-side rendering because that gives a lot of power with almost no extra cost.  It makes people
 work with the entire application and reduces chances of &#8216;schisms&#8217; within the development team.  On the
 other hand, &#8216;separate client&#8217; technologies are quite good and by thinking &#8216;separate client&#8217; you may produce
 a somewhat better API.  But a &#8216;schism&#8217; is more likely, testing is harder, and the separate client is
 less flexible in how it can integrate with the server (at least for &#8216;free&#8217;).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ADD Stack [Part-3]]]></title>
    <link href="http://markfussell.emenar.com/blog/addstack-3/"/>
    <updated>2015-10-15T02:00:00-07:00</updated>
    <id>http://markfussell.emenar.com/blog/addstack-3</id>
    <content type="html"><![CDATA[<p>This is the second series describing the ADD: a radically more productive development and delivery environment.  The
first article is here: <a href="http://markfussell.emenar.com/blog/addstack-1/">Intro</a> and described the truth and lies about developing software.
The second article dealt with &#8216;Testing&#8217;.</p>

<h2>Grails, Groovy, and Java</h2>

<p>The primary stack I believe is a &#8220;Best Practice&#8221; is Grails.  It is in it&#8217;s third full generation, and with
each generation it gets better, easier, more powerful, and more &#8216;aligned&#8217;.  This last part is not that
common with frameworks.  A lot of people start writing a framework and it does more and more.  With more and more
code.  The Grails team has been great at &#8216;pruning&#8217; and &#8216;aligning&#8217; with Spring and other frameworks.</p>

<p>Using Spring alone is certainly a reasonable practice.  The problem is people tend to use Spring wrong.  I don&#8217;t
know why.  Either they don&#8217;t read the tutorials&#8230; or they get confused and a deadline is approaching&#8230; or they
are cowboys (or cowgirls) that wander off into new territory of abuse to the tools that are in front of them.
I used Grails at a company that committed to Spring.  So I simply switched to Spring and my code was simple,
functional, well-tested, and clean.  But the rest of the code base was a complete mess.  So there is nothing
wrong with Spring but it is harder to use properly than Grails.  Spring Boot is trying to help with that.  Grails
is just better.</p>

<p>Grails is &#8216;opinionated&#8217; and &#8216;functional&#8217; and has plenty of examples to show you these opinions and capabilities.
We can see a lot of it in the &#8216;petclinic&#8217; example.</p>

<h3>Build with Gradle</h3>

<p>Grails uses Gradle to build the project.  It used to have it&#8217;s own system, but it pruned that away when Gradle
became stable and capable.  Gradle won a war against other build systems so Grails honored the winner.</p>

<p><img src="http://markfussell.emenar.com/images/addstack-3/addstack3_grails1.png" /></p>

<h3>Align with Spring Boot</h3>

<!--more-->


<p>Spring Boot (<a href="http://projects.spring.io/spring-boot/">http://projects.spring.io/spring-boot/</a>)
is a relatively recent effort to &#8216;default&#8217; a lot of the flexibility within Spring.  So Grails
is now leveraging that effort.  Developing with Grails vs. Spring is becoming just a &#8216;small&#8217; step up
conceptually so it should be easier for people to &#8216;level up&#8217; and also &#8216;wander down&#8217; depending on the needs
of the project.</p>

<p><img src="http://markfussell.emenar.com/images/addstack-3/addstack3_grails2.png" /></p>

<h3>Align with Hibernate, but allow others (include NoSQL)</h3>

<p>Grails has always used Hibernate as the primary database mapping system but it is actually capable of mapping
through GORM to other systems.  Some capabilities go away but basic schema and query capability (CRUD)
is always there.  And depending on the product, some higher level query capabilities may also be present.</p>

<h3>Use modern testing frameworks</h3>

<p>As mentioned before: &#8216;geb&#8217; and &#8216;spock&#8217; are the default testing frameworks included, along with the default
phantomjsdriver and selenium-htmlunit-driver (headless).  This is out-of-the-box, and other testing frameworks
could be used instead or in addition, but there would have to be a compelling reason for it.</p>

<h3>Modern asset pipeline</h3>

<p>Asset management is a big deal for performant websites.  Although the internet is pretty quick, the behavior
of mobile devices is a bit different from (and back a few years from) desktops.  Grails has its own asset
pipeline system that leverages the well-defined layout of a Grails project.</p>

<h3>Good IDE integration</h3>

<p>Grails integrates with IDEA and Eclipse, which are the best (IMO) and most-pervasive (I believe) IDEs
for Java development.</p>

<h3>Plugins!</h3>

<p>Grails has a very simple and powerful plugin system that adds lots of great capabilities.
With the move to 3.x some plugins may not yet be ready, but every month several more should be migrated.</p>

<h3>Standard Layout: assets, controllers, services, views, &#8230;</h3>

<p>Grails has a very clean layout that is mostly aligned with Spring Boot (I believe) and has been mostly
the same over all three generations.  The &#8216;src&#8217; directory is for things outside the Grails world.  And
the &#8216;grails-app&#8217; directory is for things inside the Grails world.  The grails layout is very intuitive
for a modern web application:</p>

<ul>
<li>assets – Assets to go through the pipeline</li>
<li>conf - Configuration of the application</li>
<li>controllers – The UI (or web-api) interaction layer of the application</li>
<li>domain – The business model layer of the application, and the persistent state model</li>
<li>i18n – Internationalization</li>
<li>init – Things to do at startup</li>
<li>services – One or more &#8216;services&#8217; layers to pull logic from controllers and domain into</li>
<li>views – GSP to be used by controllers for rendering (if desired)</li>
</ul>


<p>For the petclinic this layout looks like this when expanded:</p>

<p><img src="http://markfussell.emenar.com/images/addstack-3/addstack3_grails3.png" /></p>

<h3>Modern logging with &#8216;logback&#8217;</h3>

<p>Logging is one of the easiest things to swap out, but Grails defaults to the relatively modern &#8216;logback&#8217;
<a href="http://logback.qos.ch">http://logback.qos.ch</a> framework.</p>

<p><img src="http://markfussell.emenar.com/images/addstack-3/addstack3_grails4.png" /></p>

<h3>Incredibly terse</h3>

<p>One of the horrors of moving from Smalltalk to Java was about 4-8x the number of words were required to
accomplish the same task.  Writing more is painful.  Painful to write.  Painful to read.  Painful to edit.</p>

<p>With Groovy and Grails, the power of meaning actually leap-frogged both Smalltalk and (amazingly) LISP.
Or at least LISP without a really powerful set of macros.</p>

<p>As an example, the &#8216;PetController&#8217; is the main UI functionality of the &#8216;petclinic&#8217;.  But it has only 53 lines,
a third of them are blank.  And a total of 150 &#8216;words&#8217;.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kn">package</span> <span class="n">org</span><span class="o">.</span><span class="na">grails</span><span class="o">.</span><span class="na">samples</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">PetController</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">def</span> <span class="n">petclinicService</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">def</span> <span class="nf">add</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">request</span><span class="o">.</span><span class="na">method</span> <span class="o">==</span> <span class="s1">&#39;GET&#39;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="o">[</span><span class="nl">pet:</span> <span class="k">new</span> <span class="n">Pet</span><span class="o">(</span><span class="nl">owner:</span> <span class="n">Owner</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">params</span><span class="o">.</span><span class="na">owner</span><span class="o">?.</span><span class="na">id</span><span class="o">)),</span> <span class="nl">types:</span> <span class="n">PetType</span><span class="o">.</span><span class="na">list</span><span class="o">()]</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="kt">def</span> <span class="n">pet</span> <span class="o">=</span> <span class="n">petclinicService</span><span class="o">.</span><span class="na">createPet</span><span class="o">(</span><span class="n">params</span><span class="o">.</span><span class="na">pet_name</span><span class="o">,</span> <span class="n">params</span><span class="o">.</span><span class="na">pet</span><span class="o">?.</span><span class="na">birthDate</span><span class="o">,</span>
</span><span class='line'>          <span class="o">(</span><span class="n">params</span><span class="o">.</span><span class="na">pet</span><span class="o">?.</span><span class="na">type</span><span class="o">?.</span><span class="na">id</span> <span class="o">?:</span> <span class="mi">0</span><span class="o">)</span> <span class="k">as</span> <span class="n">Long</span><span class="o">,</span> <span class="o">(</span><span class="n">params</span><span class="o">.</span><span class="na">pet_owner_id</span> <span class="o">?:</span> <span class="mi">0</span><span class="o">)</span> <span class="k">as</span> <span class="n">Long</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">pet</span><span class="o">.</span><span class="na">hasErrors</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="o">[</span><span class="nl">pet:</span> <span class="n">pet</span><span class="o">,</span> <span class="nl">types:</span> <span class="n">PetType</span><span class="o">.</span><span class="na">list</span><span class="o">()]</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">redirect</span> <span class="nl">controller:</span> <span class="s1">&#39;owner&#39;</span><span class="o">,</span> <span class="nl">action:</span> <span class="s1">&#39;show&#39;</span><span class="o">,</span> <span class="nl">id:</span> <span class="n">pet</span><span class="o">.</span><span class="na">owner</span><span class="o">.</span><span class="na">id</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">def</span> <span class="nf">edit</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">request</span><span class="o">.</span><span class="na">method</span> <span class="o">==</span> <span class="s1">&#39;GET&#39;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">render</span> <span class="nl">view:</span> <span class="s1">&#39;add&#39;</span><span class="o">,</span> <span class="nl">model:</span> <span class="o">[</span><span class="nl">pet:</span> <span class="n">Pet</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">params</span><span class="o">.</span><span class="na">id</span><span class="o">),</span> <span class="nl">types:</span> <span class="n">PetType</span><span class="o">.</span><span class="na">list</span><span class="o">()]</span>
</span><span class='line'>          <span class="k">return</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="kt">def</span> <span class="n">pet</span> <span class="o">=</span> <span class="n">Pet</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">params</span><span class="o">.</span><span class="na">id</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">petclinicService</span><span class="o">.</span><span class="na">updatePet</span><span class="o">(</span><span class="n">pet</span><span class="o">,</span> <span class="n">params</span><span class="o">.</span><span class="na">pet_name</span><span class="o">,</span> <span class="n">params</span><span class="o">.</span><span class="na">pet</span><span class="o">?.</span><span class="na">birthDate</span><span class="o">,</span>
</span><span class='line'>          <span class="o">(</span><span class="n">params</span><span class="o">.</span><span class="na">pet</span><span class="o">?.</span><span class="na">type</span><span class="o">?.</span><span class="na">id</span> <span class="o">?:</span> <span class="mi">0</span><span class="o">)</span> <span class="k">as</span> <span class="n">Long</span><span class="o">,</span> <span class="o">(</span><span class="n">params</span><span class="o">.</span><span class="na">pet_owner_id</span> <span class="o">?:</span> <span class="mi">0</span><span class="o">)</span> <span class="k">as</span> <span class="n">Long</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">pet</span><span class="o">.</span><span class="na">hasErrors</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">render</span> <span class="nl">view:</span> <span class="s1">&#39;add&#39;</span><span class="o">,</span> <span class="nl">model:</span> <span class="o">[</span><span class="nl">pet:</span> <span class="n">pet</span><span class="o">,</span> <span class="nl">types:</span> <span class="n">PetType</span><span class="o">.</span><span class="na">list</span><span class="o">()]</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">redirect</span> <span class="nl">controller:</span> <span class="s1">&#39;owner&#39;</span><span class="o">,</span> <span class="nl">action:</span> <span class="s1">&#39;show&#39;</span><span class="o">,</span> <span class="nl">id:</span> <span class="n">pet</span><span class="o">.</span><span class="na">owner</span><span class="o">.</span><span class="na">id</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">def</span> <span class="nf">addVisit</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">request</span><span class="o">.</span><span class="na">method</span> <span class="o">==</span> <span class="s1">&#39;GET&#39;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="o">[</span><span class="nl">visit:</span> <span class="k">new</span> <span class="n">Visit</span><span class="o">(</span><span class="nl">pet:</span> <span class="n">Pet</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">params</span><span class="o">.</span><span class="na">id</span><span class="o">))]</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="kt">def</span> <span class="n">visit</span> <span class="o">=</span> <span class="n">petclinicService</span><span class="o">.</span><span class="na">createVisit</span><span class="o">((</span><span class="n">params</span><span class="o">.</span><span class="na">visit</span><span class="o">?.</span><span class="na">pet</span><span class="o">?.</span><span class="na">id</span> <span class="o">?:</span> <span class="mi">0</span><span class="o">)</span> <span class="k">as</span> <span class="n">Long</span><span class="o">,</span> <span class="n">params</span><span class="o">.</span><span class="na">visit</span><span class="o">?.</span><span class="na">description</span><span class="o">,</span> <span class="n">params</span><span class="o">.</span><span class="na">visit</span><span class="o">?.</span><span class="na">date</span><span class="o">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">visit</span><span class="o">.</span><span class="na">hasErrors</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="o">[</span><span class="nl">visit:</span> <span class="n">visit</span><span class="o">]</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">redirect</span> <span class="nl">controller:</span> <span class="s1">&#39;owner&#39;</span><span class="o">,</span> <span class="nl">action:</span> <span class="s1">&#39;show&#39;</span><span class="o">,</span> <span class="nl">id:</span> <span class="n">visit</span><span class="o">.</span><span class="na">pet</span><span class="o">.</span><span class="na">owner</span><span class="o">.</span><span class="na">id</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>It&#8217;s functionality is not amazing.  But most things people need to do on the web <em>are not amazing</em>.  They are
basically CRUD (Create, Read, Update, Delete).  Include dealing with all kinds of media (documents, images, videos, etc.)
and 99%+ of the web is just doing CRUD.  90%+ is just Read.</p>

<h4>Automatic Wiring</h4>

<p>A lot of things are happening with this controller.  The simple statement</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kt">def</span> <span class="n">petclinicService</span>
</span></code></pre></td></tr></table></div></figure>


<p>gets automatically wired to PetclinicService in the services folder.</p>

<h4>Automatic Rendering</h4>

<p>The line</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'>       <span class="k">return</span> <span class="o">[</span><span class="nl">pet:</span> <span class="k">new</span> <span class="n">Pet</span><span class="o">(</span><span class="nl">owner:</span> <span class="n">Owner</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">params</span><span class="o">.</span><span class="na">owner</span><span class="o">?.</span><span class="na">id</span><span class="o">)),</span> <span class="nl">types:</span> <span class="n">PetType</span><span class="o">.</span><span class="na">list</span><span class="o">()]</span>
</span></code></pre></td></tr></table></div></figure>


<p>causes the view &#8216;pet/add.gsp&#8217; to render with that &#8216;pet&#8217; and &#8216;types&#8217; property set.  So the HTML can also be
quite terse:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'>  <span class="nt">&lt;head&gt;</span>
</span><span class='line'>      <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;layout&quot;</span> <span class="na">content=</span><span class="s">&quot;main&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;title&gt;</span>${ pet.id ? &#39;Update&#39; : &#39;Add&#39;} Pet<span class="nt">&lt;/title&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/head&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;body</span> <span class="na">id=</span><span class="s">&quot;add&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;h2&gt;&lt;g:if</span> <span class="na">test=</span><span class="s">&quot;${!pet.id}&quot;</span><span class="nt">&gt;</span>New <span class="nt">&lt;/g:if&gt;</span>Pet<span class="nt">&lt;/h2&gt;</span>
</span><span class='line'>
</span><span class='line'>      <span class="nt">&lt;b&gt;</span>Owner:<span class="nt">&lt;/b&gt;</span> ${pet.owner?.firstName} ${pet.owner?.lastName}
</span><span class='line'>      <span class="nt">&lt;br/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Powerful redirect and delegation</h4>

<p>Grails can control the client with redirects or delegate to other controllers behind the scenes.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'>   <span class="n">redirect</span> <span class="nl">controller:</span> <span class="s1">&#39;owner&#39;</span><span class="o">,</span> <span class="nl">action:</span> <span class="s1">&#39;show&#39;</span><span class="o">,</span> <span class="nl">id:</span> <span class="n">pet</span><span class="o">.</span><span class="na">owner</span><span class="o">.</span><span class="na">id</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Very flexibly Services</h4>

<p>The PetclinicService is transactional so it can save objects within an automatic transaction.  But this
is optional and can be controlled.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kd">class</span> <span class="nc">PetclinicService</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// PetController</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">Pet</span> <span class="nf">createPet</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="n">Date</span> <span class="n">birthDate</span><span class="o">,</span> <span class="kt">long</span> <span class="n">petTypeId</span><span class="o">,</span> <span class="kt">long</span> <span class="n">ownerId</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="kt">def</span> <span class="n">pet</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Pet</span><span class="o">(</span><span class="nl">name:</span> <span class="n">name</span><span class="o">,</span> <span class="nl">birthDate:</span> <span class="n">birthDate</span><span class="o">,</span> <span class="nl">type:</span> <span class="n">PetType</span><span class="o">.</span><span class="na">load</span><span class="o">(</span><span class="n">petTypeId</span><span class="o">),</span> <span class="nl">owner:</span> <span class="n">Owner</span><span class="o">.</span><span class="na">load</span><span class="o">(</span><span class="n">ownerId</span><span class="o">))</span>
</span><span class='line'>      <span class="n">pet</span><span class="o">.</span><span class="na">save</span><span class="o">()</span>
</span><span class='line'>      <span class="n">pet</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Super-clean domain classes</h4>

<p>A modern tendency is to have domain classes mostly represent the data side of the Domain object and pull the
higher level logic out into other classes.  Although I dislike this (why have two classes), it does work
better with automatic schema generation and migration.  You are less likely to have to restart the container
and make the system check for data migration issues.</p>

<p>Grails supports a very simple, rich, mapping system called GORM.  And with it, the Domain class is very terse
but also very powerful.  And GORM works on multiple database <em>kinds</em> let alone products.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kn">package</span> <span class="n">org</span><span class="o">.</span><span class="na">grails</span><span class="o">.</span><span class="na">samples</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Simple domain object representing a pet.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * @author Graeme Rocher</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">class</span> <span class="nc">Pet</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">String</span> <span class="n">name</span>
</span><span class='line'>  <span class="n">Date</span> <span class="n">birthDate</span>
</span><span class='line'>  <span class="n">PetType</span> <span class="n">type</span>
</span><span class='line'>  <span class="n">Owner</span> <span class="n">owner</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">static</span> <span class="n">hasMany</span> <span class="o">=</span> <span class="o">[</span><span class="nl">visits:</span> <span class="n">Visit</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">static</span> <span class="n">constraints</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">name</span> <span class="nl">blank:</span> <span class="kc">false</span><span class="o">,</span> <span class="nl">validator:</span> <span class="o">{</span> <span class="n">name</span><span class="o">,</span> <span class="n">pet</span> <span class="o">-&gt;</span>
</span><span class='line'>          <span class="k">if</span> <span class="o">(!</span><span class="n">pet</span><span class="o">.</span><span class="na">id</span> <span class="o">&amp;&amp;</span> <span class="n">pet</span><span class="o">.</span><span class="na">owner</span><span class="o">?.</span><span class="na">pets</span><span class="o">?.</span><span class="na">find</span> <span class="o">{</span> <span class="n">it</span><span class="o">.</span><span class="na">name</span> <span class="o">==</span> <span class="n">name</span> <span class="o">})</span>  <span class="o">{</span>
</span><span class='line'>              <span class="k">return</span> <span class="s1">&#39;pet.duplicate&#39;</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Apparently Graeme doesn&#8217;t want people to have duplicate pet names :-/</p>

<h2>Summary</h2>

<p>There is much more functionality to Grails than described above, but that is a good, quick, walk-through.  There
are also certain conventions I believe are best practices on top of the Grails framework (e.g. &#8216;RepoService&#8217; classes
for Domain objects so functionality is easily and consistently located), but again that is an augmentation vs. being
a requirement to getting a good picture of the system.</p>

<p>Next I will go into the UI portion and options for that.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ADD Stack [Part-2]]]></title>
    <link href="http://markfussell.emenar.com/blog/addstack-2/"/>
    <updated>2015-10-15T01:00:00-07:00</updated>
    <id>http://markfussell.emenar.com/blog/addstack-2</id>
    <content type="html"><![CDATA[<p>This is the second series describing the ADD: a radically more productive development and delivery environment.  The
first article is here: <a href="http://markfussell.emenar.com/blog/addstack-1/">Intro</a> and described the truth and lies about developing software.
Basically, assuming you are doing everything in the first series, and are using relatively modern technologies
and techniques, the &#8216;language&#8217;, &#8216;framework&#8217;, &#8216;stack&#8217;, and &#8216;methodology&#8217; does not matter very much.
And how it matters has a lot to do with the development team and the customer.
Customer happiness is the ultimate goal, so if you are not making your customer happy, you should make incremental
adjustments (Educated Guesses) to do so.  And if you can not &#8220;continuously&#8221; deliver valuable products to the
customer, you need to figure out what is the bottleneck and get rid of it (e.g. google Throughput Accounting).</p>

<h2>Testing</h2>

<blockquote><p>&#8220;Hey&#8230; you said testing wasn&#8217;t important&#8221;</p></blockquote>

<p>No, I said automated testing was not <em>necessary</em>.  At times it is not even <em>valuable</em>, but at other times it is.</p>

<p>There is no way to avoid &#8216;Testing&#8217; unless no one is going to use your product.  &#8216;Using&#8217; is &#8216;Testing&#8217;, so everything
useful is continuously tested.  You have one user, you have one tester.  A million users, a million testers.
So you can&#8217;t avoid testing you software.  You can only augment/change <em>who</em> or <em>what</em> tests your software.  There
 are a number of options:</p>

<!--more-->


<ul>
<li>Users – Guaranteed unless you have none</li>
<li>Developers – Should, unless they are crazy.  Not &#8216;testing&#8217; your software is equivalent to not reading (and editing) what you wrote.</li>
<li>Product Management – Should, unless they are crazy or really confident in the development team.  Product management is the Customer and represents the Users.  They are supposed to know what the users want and need to verify the product is doing the right thing</li>
<li>Quality Assurance – Useful if they are really good at being a &#8216;Black Hat&#8217;.  This is a different skill from &#8216;Developing&#8217; and some people are very good at it

<ul>
<li>QA should report to Product Management in spite of having technical skills similar to software developers</li>
</ul>
</li>
</ul>


<p>You could have a few more kinds of people that are stake holders, but the above is the core sources.  These are
people who could know what the software is supposed to do, and then test whether it is doing it.  They have
different talents, different tolerance for failure, and different price-points (or time restrictions).  So choosing
the right balance is again a &#8216;Make Customer Happy&#8217; (given a particular budget) ratio of utilization.</p>

<h3>Automation</h3>

<p>The above lists people.  This is because people have to do the hard work of figuring out &#8216;What should it do?&#8217; and
&#8216;How do I tell it is doing it?&#8217;.  It is true there are some automated test generators&#8230; but they are a rare
and limited breed that do a little bit more than a &#8216;static typed&#8217; language would do.  The benefits for most project
are minimal.</p>

<p>So &#8216;automated testing&#8217; is rarely about generation, but more about repetition.  Doing a manual test over and over
by a human is much more expensive, time consuming, and failure prone to getting a computer to run a similar test
against software.  The problem is someone has to &#8216;spend time&#8217; writing the test.  And time is both money and delay.</p>

<p>But maybe the tests are (magically) free.  Are they worth it?  Are they valuable?  Possibly &#8220;No!&#8221;.
Testing does not make software better.
Testing just proves software does something that passes the test.  Just like in academics a student could
prep for the SAT but be bad at math, software can pass the test and be horrible.  Fragile.  Complex.  Incoherent.
And the tests themselves could be Fragile.  Complex.  Incoherent.  And Obsolete.</p>

<p>Automated tests are neither good nor bad.  Only good tests are good and bad tests are bad.  I have had products with
tens of thousands of great tests.  And very successful products with basically no tests.  And been on teams with
hundreds of horrible tests that made them go slower and produce a worse product than if they just threw all the
tests away.</p>

<h3>Automation with Frameworks</h3>

<p>Because testing can be useful, your frameworks should support it.  And should support it as <em>easily</em> as possible.
They should be easy to read.  Easy to write.  Easy to maintain.  Powerful.  And as much as possible be &#8220;from the outside&#8221;.</p>

<p>Strangely this last truth has been replaced by a lie:</p>

<blockquote><p>&#8220;You should test each unit, each module, each integration, etc.&#8221;</p></blockquote>

<p>It is a variant of the XP &#8216;test first&#8217; mentality.  And it is completely idiotic.  Because it makes you focus on
the &#8216;how&#8217; instead of the &#8216;what&#8217;.  Your customer does not care you wrote something in Java or C.  With Spring
or Netty.  MySQL or Mongo.  Object-Oriented or functional.  They want the food.
And they want it to taste good.  Everything about making that food <em>you</em> can care about, but <em>you can&#8217;t be</em> continuously
testing it or you are wasting your customers time and money.  Testing the knife before each cut.  Testing the pan to see if it is solid.  If something breaks you
might investigate why it broke and do a periodic check in the future.  But you <em>do</em> by <em>doing</em>, and not with a
fear of failing on each step of the way.  You are paid to <em>do</em> not to <em>be afraid</em>.  <em>Do</em>, <em>Fail</em>, <em>Learn</em>, <em>Do</em></p>

<p>I am not saying you can&#8217;t test a few things on the inside.  Sometimes I do that as I bring a system up so it is
obvious (a) whether it is working, and (b) how it is supposed to be working.  A little &#8216;extra documentation&#8217; beyond
the code itself.  But these are a limited set that covers a slice of the system, not the whole thing.</p>

<h3>Automation with Grails</h3>

<p>The team behind Grails leverages other technologies as much as possible when they work.  Among the best technologies
for automated testing in Spring / Java are:</p>

<ul>
<li> Spock – https://code.google.com/p/spock/</li>
<li> Geb – https://github.com/geb/geb</li>
</ul>


<p>So Grails leverages these and has testing built-in to the framework.  It can automatically generate test stubs for
Controllers (the UI interaction classes) and Domain classes (Business Logic).  And it generates both integration
and unit tests. I prefer integration tests as they are the most &#8220;from the outside&#8221;, but all the different tests
are useful in different amounts (some are faster to run).</p>

<p>For our &#8216;petclinic&#8217;, it has a number of tests of two different kinds:</p>

<p><img src="http://markfussell.emenar.com/images/addstack-2/addstack2_grails1.png" /></p>

<h4>Spock / Unit-ty tests</h4>

<p><img src="http://markfussell.emenar.com/images/addstack-2/addstack2_grails2.png" /></p>

<h4>Grub / Integration tests</h4>

<p><img src="http://markfussell.emenar.com/images/addstack-2/addstack2_grails3.png" /></p>

<p><img src="http://markfussell.emenar.com/images/addstack-2/addstack2_grails4.png" /></p>

<p><img src="http://markfussell.emenar.com/images/addstack-2/addstack2_grails5.png" /></p>

<p>The separation of Unit and Integration is somewhat more complex than this because Spock especially has
the ability to be lots of different kinds of tests.  But the basic idea is above.</p>

<h4>When to run?</h4>

<p>So we have some tests in a nice testing framework.  Now the critical questions:</p>

<ul>
<li>When should we run them?  As much as possible without wasting people&#8217;s time.</li>
<li>Should they be run before deploying a new version?  If they are fast enough, sure.  If not, then something should &#8216;go live&#8217; <em>before</em> the tests.

<ul>
<li>I don&#8217;t mean &#8216;go live&#8217; to end users, but go live to a server where others can see it.  Just like the &#8216;fed1_app1&#8217; deployment.</li>
<li>And you can have another server that is &#8216;post-test&#8217; so it is gated by tests being successful.  It is more stable but slightly behind in time and version.  Say &#8216;fed2&#8217;.</li>
</ul>
</li>
<li>Should developers run tests before checking in?  If they want to and are nervous, sure.  Especially tests in the area they are touching.  But breaking &#8216;fed1&#8217; is not a big deal unless you walk away afterwards.  Break it.  Fix it.  Carry on.</li>
</ul>


<p>The tests for the &#8216;petclinic&#8217; are quite fast, so we might as well run them before deploying and let people know the status.  Returning to our deployment script:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">pushd</span> <span class="nv">$APP_PATH</span>
</span><span class='line'>./gradlew <span class="nb">test</span>
</span><span class='line'>
</span><span class='line'><span class="c">### if success then continue with &#39;run&#39;, otherwise leave the current version running.</span>
</span><span class='line'>
</span><span class='line'><span class="nb">popd</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ADD Stack [Part-1]]]></title>
    <link href="http://markfussell.emenar.com/blog/addstack-1/"/>
    <updated>2015-10-14T01:00:00-07:00</updated>
    <id>http://markfussell.emenar.com/blog/addstack-1</id>
    <content type="html"><![CDATA[<p>This is the second series describing the ADD: a radically more productive development and delivery environment.</p>

<h2>Review of the first series</h2>

<p>The first series starts here: <a href="http://markfussell.emenar.com/blog/add-1/">Intro</a> and ends here: <a href="http://markfussell.emenar.com/blog/add-11/">Voilà!</a>.  The bulk of the
series was describing how to combine four ingredients:</p>

<ul>
<li>Amazon EC2 <a href="http://aws.amazon.com/">http://aws.amazon.com/</a></li>
<li>Amazon S3  <a href="http://aws.amazon.com/">http://aws.amazon.com/</a></li>
<li>GitHub.com <a href="http://github.com/">http://github.com/</a></li>
<li>HipChat    <a href="http://HipChat.com/">http://HipChat.com/</a></li>
</ul>


<p>in a way that gives individuals and teams 4x or more productivity.  These resulting environment solves problems for
all three roles in a development team:</p>

<ul>
<li>Changers</li>
<li>Watchers</li>
<li>Machines</li>
</ul>


<p>And can be envisioned as so:</p>

<p><img width="432" height="414" src="http://markfussell.emenar.com/images/add-1/ADD_FourIngredients_ThreeRoles_mlf1a1.png" /></p>

<p>Along the way, the ingredients combined to make:</p>

<ul>
<li>Machines automatically launch and configure themselves, including hooking them up to each other (auto-wire)</li>
<li>Changes to IT roll out automatically to all the running machines.</li>
<li>Changes to the application roll out automatically to all the running machines.</li>
<li>Creating new environments to be as easy providing a simple parameter (e.g. &#8220;fed2&#8221;) to a CloudFormation</li>
<li>The whole thing working on EC2 or inside a Vagrant container&#8230; or even on bare metal (but that was not shown)</li>
<li>Incredible visibility into everything that happens within HipChat&#8230; for the whole team.</li>
</ul>


<p>By the end, we had machines tell us when they launched, when they were operational, when they were deploying a new
version, and whether that new version deployed successfully.</p>

<p><img src="http://markfussell.emenar.com/images/add-11/add11_autodeploy1.png" /></p>

<p>and finally, we had a running application at a human-usable URL:</p>

<p><img src="http://markfussell.emenar.com/images/add-11/add11_dns1.png" /></p>

<p>That could be scaled to any number of servers as load demands.</p>

<h2>Second series</h2>

<p>The above is the core of the ADD and enabling team productivity and customer visibility (even happiness)
to shoot through the roof.  It by itself is basically &#8216;complete&#8217;.  It is missing some details, nuances,
augmentation, and such.  But it alone is the core of a 4x productivity.</p>

<blockquote><p>&#8220;Complete! What nonsense!  Where are your automated tests!  How do you check for code quality!
What kind of programming language do you use!  And where is your description of Scrum, XP, Waterfall, etc. methodology
to use with this ADD?!!&#8221;</p></blockquote>

<p>Ah&#8230; yes.  Over my <em>thirty five years</em> and estimated <em>thirty five thousand hours</em> of developing software,
I have encountered all these things.  I do have opinions
on a lot of these things.  Preferences.  Best practices.  You may be interested.  They matter.  A little.</p>

<p>How little?  Maybe&#8230; maybe&#8230; 2x.</p>

<!--more-->


<p>I mentioned in the first series that when I shifted to Java from Smalltalk, I lost
a lot of productivity.  Part of it was in going from a hyper-productive language (Smalltalk) to a mediocre language.
Most of it was going from a hyper-productive development model (tweak and clone) to a horrible development model (build
most of it from scratch&#8230; because there are no libraries).  I bet I lost 4x in productivity.  And then another 2x
when people started mucking with my code.  4x is a lot.  2x is a little.
And if you try to get the &#8216;2x&#8217; but lose the &#8216;4x&#8217; you just did a win-LOSE bad tradeoff.</p>

<h3>Lies</h3>

<p>There are a lot of lies or confusions in the software industry.  During the nineties we tried to get rid of a lot of them
through actual research-based observations (e.g. &#8220;The Mythical Man-Month&#8221; by Fred Brooks) and experience-based
 observations (e.g. &#8220;The Agile Manifesto&#8221; by Kent, Ken, Ward, etc.).  The <em>truth</em> of software
is available&#8230; but the lies hide it.  And people can&#8217;t tell the difference.  And don&#8217;t believe the science.  Or are
too scared of losing their jobs (or having a more boring job) if they believe and speak the truth vs. the lie.</p>

<h4>Truth: One Brain</h4>

<p>I will first start with among the best researched truth there is:</p>

<ul>
<li>The best software is created by one primary, talented, and skilled &#8216;brain&#8217;

<ul>
<li>Potentially accompanied by some number of &#8216;assistants&#8217;</li>
</ul>
</li>
</ul>


<p>This is the &#8216;surgical team&#8217; model.  You want one primary, talented, and skilled &#8216;Surgeon&#8217;.  A &#8216;Surgeon&#8217; with many thousands
if not many tens-of-thousands of hours of experience.  Nurses can help.  Support doctors can help.  Even other surgeons can
help.  If the operation is long enough, you might need multiple primary surgeons who pass the baton along to each other.
But if someone is opening your body&#8230; you want that person to be fully responsible, fully accountable, insanely competent,
and insanely skilled.  An insanely great surgeon.  She will charge you a lot, and you will get a lot in return.</p>

<p>Software is the same.  The best software is create by one primary, talented, and skilled &#8216;Engineer&#8217;. An &#8216;Engineer&#8217; with
many thousands if not many tens-of-thousands of hours of experience.  QA can help.  Support programmers can help.  Software is
 never needed so quickly as to require a hourly baton, but that can happen if the &#8216;Engineer&#8217; moves on to other things.</p>

<p>If someone is writing an application that you want to be valuable to you&#8230; you want that person to be fully responsible,
fully accountable, insanely competent, and insanely skilled.  An insanely great engineer.
She will charge you a lot, and you will get a lot in return.</p>

<h4>Lie: All together now!</h4>

<p>But software developers don&#8217;t like this truth.  They think they (after less than 5000 hours) can be the point person
for building an application.  I don&#8217;t mean 5000 hours <em>of work</em> I mean 5000 hours <em>in surgery</em> and that is after say
2x the amount of hours of <em>studying surgery</em>.  So 10,000 hours of studying how to build software applications and 5,000
hours of writing code that builds actual production-worthy software applications.  If you work 2000 hours a year and
spend half of it actually on either of those tasks&#8230; it would take you about 15 years to be &#8216;an Engineer&#8217;.  Ten years
of reading and five years of writing.  Done concurrently, where reading dominates early and writing dominates later.</p>

<p>But again, developers don&#8217;t like this truth and instead they say: &#8220;If a bunch of us get together we can reproduce that
surgeon with each of our individual skills.&#8221;</p>

<p>But this is saying: &#8220;Nine people who can dissect frogs can perform brain surgery&#8221;, or
&#8220;Nine club tennis players can beat Roger Federer if they tag-team&#8221;.  Or &#8220;Nine people who are good in the
kitchen can together produce a better meal than Gordon Ramsey in a throw down&#8221;.  Or&#8230;</p>

<p>Hopefully by shifting the context you can see the impossibility of it.  It makes absolutely no sense, yet the lie is
propagated so much as to be systemically the status quo.  Even the smallest XP version of the lie &#8220;You need two people to write better software&#8221; is
ludicrous.  Better to have <em>two surgeons</em> perform <em>two different operations</em> at the same time&#8230; and save <em>two</em> lives.
There is nothing wrong with having an apprentice watch / help.  But that is <em>training</em> (somewhat to both parties) not
<em>doing</em></p>

<h4>Truth: Customer Rules</h4>

<p>The second truth is that the <em>customer</em> rules.  If the customer is happy&#8230; WIN!  If they are not happy&#8230; :-(</p>

<p>Given this is <em>sort of</em> in the Agile Manifesto you would think it would be well known now that everyone is &#8216;Going Agile&#8217;.
But reviewing the <a href="http://www.agilemanifesto.org">Agile Manifesto</a>, I see that it &#8220;backed off&#8221; saying what it should say.
The lines that it should have within it are:</p>

<ul>
<li>Working software over &#8230;everything&#8230;</li>
<li>Customer happiness over &#8230;everything&#8230;</li>
</ul>


<p>But because software developers think they are special&#8230; unusually talented in a way that is beyond the customer&#8230; like &#8216;artists&#8217;&#8230;
they think these two lines do not apply to them.  Again, the insanity of it is evident when you shift industry.  Say &#8216;Food&#8217;:</p>

<ul>
<li> Working food (e.g. good produce, a cooked meal, etc.) over ???</li>
<li> Customer happiness over ???</li>
</ul>


<p>Pretty sure if you nail the second bullet, you nailed the first one (and maybe some more).  And not nailing both these
bullets is a path to failure.  The question marks
are replaceable with &#8216;everything not mentioned&#8217;.  So the actual pyramid is this:</p>

<ul>
<li>Happy Customer (100%)

<ul>
<li>Delivered good product (80%)

<ul>
<li>All the stuff needed to do the above</li>
</ul>
</li>
<li>Other aspects of delivering (20%) –  E.g. customer interaction, appearance of product or delivery person, etc.

<ul>
<li>All the stuff needed to do the above</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>You are allowed to have less than totally happy customers.  But you should try to fix that.  You should care.
Otherwise you are resigning yourself to  being content with the quality of your product being sub-par.  And likely
headed downward.</p>

<p>You are allowed to hate making your customers happy.  You can change industries.  Change role.  Continually grumble about how
bad your job is (but google &#8220;Worst Jobs&#8221; to see you don&#8217;t have it so bad).  But you are not allowed to say that
<em>your customer</em> shouldn&#8217;t be 100% happy&#8230; or at least as happy as you can make them.</p>

<h4>Lie: Automated Testing and Quality Verification</h4>

<p>The second lie is that <em>instead of</em> trying to make the customer 100% happy, we are going to make our automated
tests and our QA verification servers happy.  We are going to make them <em>more</em> happy than our customer and
<em>before</em> we make our customer happy.</p>

<p>This actually pops up as a &#8216;truth&#8217; in education too.  We try to make the tests happy as opposed to the students,
except in exceptional schools that Think Different.  But
in most any <em>normal</em> industry, making a &#8216;test&#8217; happy instead of a customer is a crazy and effective way to
go out of business.  Say we inspected and tested <em>every</em> hamburger before it went out the door.  Fast food would
take on a whole new meaning as it took minutes per-person to do the inspection.  And things like &#8216;salad&#8217; would
be unservable.  Salad almost always has something weird in it, and finding it takes about the same amount of time
as eating it.  And it would basically destroy / consume the salad as you checked each leaf, fruit, and nut.</p>

<p>Again, automated testing is <em>useful</em>.  But it is not <em>necessary</em>.  And it doesn&#8217;t trump releasing to a customer
so they can see the &#8216;Delivered good product&#8217;.</p>

<h3>Conclusion : Customer&#8217;s One Powerful Right and Responsibility</h3>

<p>The ADD described so far, efficiently, effectively, and production-worthy scalably enabled one simple thing:</p>

<p><img src="http://markfussell.emenar.com/images/add-11/add11_dns1.png" /></p>

<p>That is a delivered good product (if you want to run a Pet Clinic).  What the application is beneath that, and
what processes were used to develop it, are all &#8220;of little importance&#8221;.  There are many ways to develop
an identical web site.  The stack and method I will describe is just one of them.  It is a reference
that I consider a &#8220;Best Practice&#8221; among alternative &#8220;Best Practice&#8221; possibilities.  And all of these alternatives
get measured by exactly one macro criteria: &#8220;Customer Satisfaction&#8221;.  For example:</p>

<ul>
<li>Buggy in production, customer is less happy.</li>
<li>Take longer to build, customer is less happy.</li>
</ul>


<p>Neither of the above trumps the other.  The ratio between them &#8216;depends&#8217;.  And that ratio is totally under
the customer&#8217;s control.  They may not know the ratio before the fact, but while &#8216;driving&#8217; the system they
<em>have every right and even responsibility</em> to complain.  The development team can make an &#8216;Educated Guess&#8217;
at the start of the project
but if the customer complains, they need to address that complaint and <em>change</em> the process, tools, people,
or office space <em>as much as possible and reasonable</em> to make the customer more happy.  Maybe just a little
change to become a little more happy: we aren&#8217;t prescient and you don&#8217;t know if the change will cause havoc
(everyone quits) or even address the issue.  But you address the complaint with an another &#8216;Educated Guess&#8217;.
Over and over.</p>

<p>What should your development process be?  It depends&#8230; on your customer and your product and your team and
&#8230; The reason you need an Engineer is they make great &#8216;Educated Guesses&#8217;.  And can iterate incredibly
quickly to fine tune the process and tools to what will work for the customer and the development team.</p>

<p>But the following parts of this series will be a good start.  It is my best recommendation in 2015 for a modern,
JVM-based, web-delivered, set of development methods, tools, frameworks, and other components.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Advanced Development and Delivery (ADD) [Part-11]]]></title>
    <link href="http://markfussell.emenar.com/blog/add-11/"/>
    <updated>2015-10-14T01:00:00-07:00</updated>
    <id>http://markfussell.emenar.com/blog/add-11</id>
    <content type="html"><![CDATA[<p>This is the elevent installment of describing a radically more productive development and delivery environment.</p>

<p>The first part is here: <a href="http://markfussell.emenar.com/blog/add-1/">Intro</a>.  In the previous parts I described the big picture, Vagrant and EC2,
node initialization, the one minute configuration HeartBeat, HipChat integration, presence, EC2, configuring nodes, inter-machine presence,
and configuring an application server and its&#8217; stack.</p>

<h2>It&#8217;s Alive!</h2>

<p>We are close to having a viable semi-production environment running the latest version of our code, and with an incredible
capability of configuring, controlling, and being informed of that environment.  With the simple line:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mkdir -p /root/app/
</span><span class='line'><span class="nb">cd</span> /root/app
</span><span class='line'>
</span><span class='line'>git clone git@github.com:grails-samples/grails-petclinic.git
</span><span class='line'><span class="nb">cd </span>grails-petclinic
</span><span class='line'>./gradlew run
</span></code></pre></td></tr></table></div></figure>


<p>We got:</p>

<p><img src="http://markfussell.emenar.com/images/add-10/add10_grails2.png" /></p>

<!-- more -->


<p>Which is almost what we want&#8230; except.</p>

<ul>
<li> We need that IP address to be a stable domain name</li>
<li> We need the &#8216;clone&#8217; to be augmented with subsequent &#8216;git pull&#8217; in case there are subsequent updates</li>
</ul>


<p>In reverse order</p>

<h2>Pulling the Application</h2>

<p>Going back to the one-minute heartbeat, we had this &#8216;cron&#8217; job:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mkdir -p /root/bin
</span><span class='line'>cp <span class="k">${</span><span class="nv">RESOURCE</span><span class="k">}</span>/cron_1m.sh /root/bin/cron_1m.sh
</span><span class='line'>chmod +x /root/bin/cron_1m.sh
</span><span class='line'>
</span><span class='line'>cat <span class="s">&lt;&lt;EOS &gt; /var/spool/cron/root</span>
</span><span class='line'><span class="s">MAILTO=&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="s">* * * * *  /root/bin/cron_1m.sh</span>
</span><span class='line'><span class="s">EOS</span>
</span></code></pre></td></tr></table></div></figure>


<p>Where part of the cron was described as:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>        bash_ifexist bin/nodework/common/work.sh
</span><span class='line'>        bash_ifexist bin/nodework/part/<span class="sb">`</span>cat /root/nodeinfo/nodepart.txt<span class="sb">`</span>/work.sh
</span><span class='line'>        bash_ifexist bin/nodework/stacktype/<span class="sb">`</span>cat /root/nodeinfo/stacktype.txt<span class="sb">`</span>/work.sh
</span><span class='line'>        bash_ifexist bin/nodework/stacktype/<span class="sb">`</span>cat /root/nodeinfo/stacktype.txt<span class="sb">`</span>/part/<span class="sb">`</span>cat /root/nodeinfo/nodepart.txt<span class="sb">`</span>/work.sh
</span></code></pre></td></tr></table></div></figure>


<p>That is both too much code and too little to understand what is going on.  It is too much because we don&#8217;t need to put anything but
the first line in the &#8216;cron_1b.sh&#8217;.  It is &#8220;fine&#8221; to do so, but if we add some new concept we have to rebuild machines (or
dynamically copy in new &#8216;cron_1m.sh&#8217;) vs. the simpler option of just having the first &#8216;work&#8217; cal the rest of the &#8216;work&#8217;.</p>

<p>The part that is too little is the part where a bunch of git repositories are getting updated.  The full &#8216;cron_1m.sh&#8217; looks
like this:</p>

<h4>cron_1m.sh</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#! /bin/bash</span>
</span><span class='line'><span class="c">#================================</span>
</span><span class='line'><span class="c">#=== Simple worker example</span>
</span><span class='line'><span class="c">#================================</span>
</span><span class='line'>
</span><span class='line'><span class="nb">export </span><span class="nv">ME</span><span class="o">=</span><span class="sb">`</span>basename <span class="nv">$0</span><span class="sb">`</span>
</span><span class='line'><span class="nb">export </span><span class="nv">LOG</span><span class="o">=</span>/root/log/<span class="k">${</span><span class="nv">ME</span><span class="k">}</span>_log.txt
</span><span class='line'><span class="nb">export </span><span class="nv">ERROR</span><span class="o">=</span>/root/log/<span class="k">${</span><span class="nv">ME</span><span class="k">}</span>_error.txt
</span><span class='line'><span class="nb">export </span><span class="nv">START_TSS</span><span class="o">=</span><span class="s2">&quot;`date +%Y%m%d-%H%M%S`&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">export </span><span class="nv">CURRENT_ACTION_FILE</span><span class="o">=</span>./.temp/nodeinfo/currentaction.txt
</span><span class='line'>
</span><span class='line'>bash_ifexist <span class="o">()</span> <span class="o">{</span> <span class="k">if</span> <span class="o">[[</span> -f <span class="s2">&quot;$1&quot;</span> <span class="o">]]</span>; <span class="k">then </span>bash <span class="s2">&quot;$1&quot;</span>; <span class="k">else </span><span class="nb">echo</span> <span class="s2">&quot;Skipped missing: $1&quot;</span>; <span class="k">fi</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>mkdir -p /root/log/
</span><span class='line'>
</span><span class='line'><span class="nb">exec </span>1&gt;&gt; <span class="k">${</span><span class="nv">LOG</span><span class="k">}</span>
</span><span class='line'><span class="nb">exec </span>2&gt;&gt; <span class="k">${</span><span class="nv">ERROR</span><span class="k">}</span>
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;${ME}: Start  ${START_TSS}&quot;</span> &gt;&gt; <span class="k">${</span><span class="nv">LOG</span><span class="k">}</span>
</span><span class='line'>
</span><span class='line'><span class="nb">export </span><span class="nv">REPOS</span><span class="o">=</span><span class="sb">`</span>find /root/gitrepo/ -maxdepth 1 -mindepth 1 <span class="sb">`</span>
</span><span class='line'><span class="k">for </span>REPO in <span class="k">${</span><span class="nv">REPOS</span><span class="k">}</span>; <span class="k">do</span>
</span><span class='line'><span class="k">    </span><span class="nb">pushd</span> <span class="k">${</span><span class="nv">REPO</span><span class="k">}</span>
</span><span class='line'>        git pull
</span><span class='line'>    <span class="nb">popd</span>
</span><span class='line'><span class="k">done</span>
</span><span class='line'>
</span><span class='line'><span class="k">for </span>REPO in <span class="k">${</span><span class="nv">REPOS</span><span class="k">}</span>; <span class="k">do</span>
</span><span class='line'><span class="k">    </span><span class="nb">pushd</span> <span class="k">${</span><span class="nv">REPO</span><span class="k">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">[[</span> -e <span class="k">${</span><span class="nv">CURRENT_ACTION_FILE</span><span class="k">}</span> <span class="o">]]</span>; <span class="k">then</span>
</span><span class='line'>            : <span class="c">#Don&#39;t do anything until the current action completes</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'><span class="k">            </span>bash_ifexist bin/nodework/common/work.sh
</span><span class='line'>        <span class="k">fi</span>
</span><span class='line'><span class="k">    </span><span class="nb">popd</span>
</span><span class='line'><span class="k">done</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nb">export </span><span class="nv">FINISH_TSS</span><span class="o">=</span><span class="s2">&quot;`date +%Y%m%d-%H%M%S`&quot;</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;${ME}: Finish ${FINISH_TSS}&quot;</span> &gt;&gt; <span class="k">${</span><span class="nv">LOG</span><span class="k">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The reason for the double loop is to make sure inter-repository interactions are all &#8220;at the same time&#8221;.  After the set
of &#8216;pulls&#8217;, everything is stable.  We could even slow down the tempo of the system by simply pulling less often and
could jitter before the set of &#8216;pulls&#8217; which would jitter the whole system.</p>

<h3>Where to work?</h3>

<p>So if we have our &#8216;IT&#8217; repo as &#8216;repo2_petulant-cyril&#8217; and our application repo as &#8216;repo3_miniature-ironman&#8217;, where should
we do our &#8216;work.sh&#8217;?  The answer is unfortunatly simple: &#8220;where ever you want&#8221;.  The more you do work in &#8216;repo2&#8217; the
more &#8216;functional&#8217; your system.  Like classic functional / imperative programming.  The more you do work in &#8216;repo3&#8217; the
more &#8216;object-oriented&#8217; your system.  The more &#8216;repo3&#8217; is alive vs. being acted-upon.  On the other hand, the more you
do work in &#8216;repo2&#8217;, the more you can leverage similarities in the work (like knowing directory structures, git versions,
etc.) and the less &#8216;repo3&#8217; is complicated by these things.  Ultimately it would be ideal to be &#8216;aspect-oriented&#8217; and
add a &#8216;trait&#8217; to &#8216;repo3&#8217;.  But for the moment, I will keep things simple and do all the work in &#8216;repo2&#8217; where depending
on the kind of node you are, you <em>know about</em> &#8216;repo3&#8217; vs. &#8216;repo3&#8217; knowing it could be alive.</p>

<h3>&#8216;repo3:miniature-ironman&#8217;</h3>

<p>Why does &#8216;repo3&#8217; have two names?  The first is a simple identifier: it is a &#8216;repo&#8217; and it is the third of its kind.
This simplicity makes sure things like &#8216;find&#8217; produce a simple in-order answer.  If we have a lot of repositories, we
might start with &#8216;101&#8217; to make sure sorting works for a few hundred repositories.  The second part is a human-memorable
name, and to help associate the repository with its purpose.  You shouldn&#8217;t name a repository <em>after</em> its purpose, because
it&#8217;s purpose could change.  Outright change or simply grow.  Or another repo could have the same purpose and now we
can&#8217;t figure out which is right.  It would be like naming a kid &#8216;toddler&#8217;.  At first it might
not even be a toddler yet, but more importantly, eventually it will clearly no longer be a toddler.  And we would have
  a lot of &#8216;toddler&#8217;s so we can&#8217;t figure out which is what.</p>

<p>So instead, each repo just has a unique name.  We have to look at it and interact with it to figure out what it is.  Or
each has a README that we can try to keep current.</p>

<h3>app1/work.sh</h3>

<p>We can fetch &#8216;repo3&#8217; from &#8216;repo2&#8217; within the work of an application server:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#====================================================</span>
</span><span class='line'><span class="c">#=== lad1/app1</span>
</span><span class='line'><span class="c">#====================================================</span>
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;Doing App1 work&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c">#====================================================</span>
</span><span class='line'><span class="c">#=== checkout the application repository</span>
</span><span class='line'><span class="c">#=== if it doesn&#39;t exist</span>
</span><span class='line'><span class="c">#====================================================</span>
</span><span class='line'>
</span><span class='line'><span class="nb">export </span><span class="nv">APP_REPO</span><span class="o">=</span>repo3_miniature-ironman
</span><span class='line'><span class="nb">export </span><span class="nv">APP_NAME</span><span class="o">=</span>app2
</span><span class='line'><span class="nb">export </span><span class="nv">APP_PATH</span><span class="o">=</span><span class="nv">$REPO_ROOT</span>/<span class="nv">$APP_NAME</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> ! -d <span class="s2">&quot;$APP_PATH&quot;</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">  </span><span class="nb">echo</span> <span class="s2">&quot;git clone git@github.com:shaklee/${APP_REPO}.git $APP_PATH&quot;</span>
</span><span class='line'>  git clone git@github.com:shaklee/<span class="k">${</span><span class="nv">APP_REPO</span><span class="k">}</span>.git <span class="nv">$APP_PATH</span>
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure>


<p>The rest of the script looks identical to our main &#8216;work.sh&#8217; except our directory has switched from &#8216;common&#8217; to
something more specific.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#====================================================</span>
</span><span class='line'><span class="c">#=== Temporary files location</span>
</span><span class='line'><span class="c">#=== Override the &#39;TEMP&#39; directory to be for this part</span>
</span><span class='line'><span class="c">#====================================================</span>
</span><span class='line'>
</span><span class='line'><span class="nb">export </span><span class="nv">ADD_TEMP</span><span class="o">=</span><span class="k">${</span><span class="nv">GIT_ROOT</span><span class="k">}</span>/.temp/add/lad1_app1b/
</span><span class='line'><span class="nb">export </span><span class="nv">MY_DIR</span><span class="o">=</span><span class="s2">&quot;$( cd -P &quot;</span><span class="k">$(</span> dirname <span class="s2">&quot;${BASH_SOURCE[0]}&quot;</span> <span class="k">)</span><span class="s2">&quot; &amp;&amp; pwd )&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And we have to push/pop to get in the right directory for the &#8216;GIT&#8217; commands to work.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">pushd</span> <span class="nv">$APP_PATH</span>
</span><span class='line'><span class="nb">export </span><span class="nv">GIT_VERSION</span><span class="o">=</span><span class="sb">`</span>git rev-parse HEAD<span class="sb">`</span>
</span><span class='line'><span class="nb">export </span><span class="nv">DETECT_GIT_CHANGE</span><span class="o">=</span><span class="sb">`</span>git log --pretty<span class="o">=</span>oneline <span class="k">${</span><span class="nv">PREV_WORK_VERSION</span><span class="k">}</span>..  -- <span class="k">${</span><span class="nv">WORK_WATCH_VALUE</span><span class="k">}</span> | awk <span class="s1">&#39;{print $1}&#39;</span><span class="sb">`</span>
</span><span class='line'><span class="nb">popd</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Start / restart</h3>

<p>Ultimately we will run from a Tomcat or similar container, but currently we just have to:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">pushd</span> <span class="nv">$APP_PATH</span>
</span><span class='line'>./gradlew run &amp;
</span><span class='line'><span class="nb">popd</span>
</span></code></pre></td></tr></table></div></figure>


<p>Except for a couple issues</p>

<ul>
<li>We would like the error and standard output to go somewhere in case something goes wrong</li>
<li>We need to not collide with an previous &#8216;run&#8217; because they hold onto the same port</li>
</ul>


<p>Solving these is pretty trivial if we are allowed to be &#8216;brutal&#8217; and accept downtime.  Ultimately this won&#8217;t be
a problem because we will first &#8216;shutdown&#8217; and let the load balancer pull us out of rotation before we actually
upgrade versions.</p>

<h4>Launching</h4>

<p>Making something into a daemon is a common approach, but an even simpler approach is just redirect stdout and stderr
on a detached process.  Trying this from a terminal appears to not work, because everything is a child
of the terminal login process.  But to get out of that problem, you can just use &#8216;screen&#8217; and
create a non-terminal-connected screen.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>screen
</span><span class='line'>./gradlew run &amp;
</span><span class='line'><span class="c">#Control-D</span>
</span><span class='line'>ps aux | grep java
</span></code></pre></td></tr></table></div></figure>


<p>This is just for testing with a manual launch.  Our cron job doesn&#8217;t have this issue and can start and restart
things without the extra effort.</p>

<h4>Logging</h4>

<p>The heartbeat cron job has its own logs, so everything would appear there by default.  We can change the destination to
something more informative / isolated by redirecting stdout and stderr.  Ultimately we would use a logging
framework and infrastructure (e.g. Graylog) to get everything off the machine and into a central logger.</p>

<h4>Killing</h4>

<p>Again, because we will ultimate decommission ourselves, we can be quite brutal to the running application.  Whenever
we are going offline, we mark ourselves as decommissioned and drain out all &#8216;clients&#8217;.  For a web server this is
very quick.  For other servers (like a game server with shared game state), this can take a while.  So the states are:</p>

<ul>
<li>Running

<ul>
<li>Add Users</li>
<li>Keep Steady</li>
<li>Drain Users</li>
</ul>
</li>
<li>Decommissioning

<ul>
<li>Drain Users</li>
<li>Drained</li>
</ul>
</li>
<li>Decommission

<ul>
<li>Graceful shutdown</li>
<li>Kill application</li>
</ul>
</li>
</ul>


<p>The last one is the critical one.  Although &#8216;tomcat&#8217; and others have a graceful shutdown, <em>it does not always work</em>.
We must be able to decommission properly, or we have to kill the application.  If we can&#8217;t decommission a node
successfully, we can not bring it back to &#8216;running&#8217; and so our instance pool has shrunk.  Ideally our infrastructure
recognizes this and either (a) kills the node or (b) marks the node as permanently unavailable and bumps the count
of expected nodes in the array (say from 4 to 5 to include one being permanently unavailable).
The benefit of &#8216;b&#8217; is we can investigate the node later.  But either is operationally reasonable.</p>

<p>So for the moment, lets just do the last one to decommission:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Log what we are killing... could also test whether &#39;kill&#39; is needed</span>
</span><span class='line'>
</span><span class='line'>ps aux | grep java | grep -v grep
</span><span class='line'>ps aux | grep java | grep -v grep | awk <span class="s1">&#39;{print $2}&#39;</span> | xargs <span class="nb">kill</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Are we alive?</h4>

<p>Finally, we should at least reasonably check whether we are alive with the new version.  The load balancer is
checking our URL, so it knows.  But the load balancer can&#8217;t tell the world (HipChat) whether the deploy was
successful.</p>

<p>A simple &#8216;curl&#8217; to our local port can though.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl localhost:8080 &gt; <span class="nv">$ADD_TEMP</span>/curl_test.html
</span><span class='line'><span class="nb">export </span><span class="nv">CURL_TEST</span><span class="o">=</span><span class="sb">`</span>cat  <span class="nv">$ADD_TEMP</span>/curl_test.html<span class="sb">`</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">[[</span> -z <span class="s2">&quot;$CURL_TEST&quot;</span> <span class="o">]]</span> ;
</span><span class='line'><span class="k">then</span>
</span><span class='line'><span class="k">    </span><span class="nb">echo</span> <span class="s1">&#39;Deployment failed!&#39;</span>;
</span><span class='line'><span class="k">else</span>
</span><span class='line'><span class="k">    </span><span class="nb">echo</span> <span class="s1">&#39;Success!&#39;</span>;
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure>


<h2>DNS Stability</h2>

<p>The DNS stability is a trivial thing on EC2 and basically any modern DNS system.  Trivial as long as we understand
one fatal flaw:</p>

<ul>
<li>Everyone caches</li>
</ul>


<p>We can have stability so long as we accept that everyone is trying to cache the DNS to IP address for as long as
possible.  This can be minutes or even longer <em>in spite</em> of our DNS records saying otherwise.  This is actually
 one of the reason load balancers are so important.  Load balancing is a very simple concept.  Your load balancers
 should be simple enough to &#8216;keep running&#8217; and be rarely flipped.  So their IP addresses will be stable: like the person
 who is always hanging out on their front porch.  You can always find them there and ask them to ask someone else
 a question.  They will take care of the rest.</p>

<p>So ultimately we don&#8217;t want the application server obtaining a domain-name, we want it to register with a load
balancer.  But for the moment (and for some useful internal capabilities) we will have each application server
take-a-name.</p>

<h3>How to take a name?</h3>

<p>Before the cloud, the common ways to take a name were:</p>

<ul>
<li>To assign a name via the console of the domain name server</li>
<li>To dynamically attach an IP address to a name via various protocols</li>
</ul>


<p>Pre-cloud, these work fairly well.  If you DN server is smart enough, it can take failed servers out of rotation
with a health check.  And even early versions of cloud computing used a similar model where servers took
possession of a pre-allocated IP address that the DN server knew about.  But these models don&#8217;t scale as
well as a much simpler model.  Route-53.</p>

<p>Route-53 takes the &#8216;dynamically&#8217; to a whole new level.  You can dynamically add / change / delete most anything
and the common latency for the change to take affect is very short.  The rest of the world <em>still caches</em> but
at least you know the DN servers are up to date.  In the following, you can see the &#8216;gaps2c&#8217; project I created
a while ago as a demonstration of this ability.  The main domain registry for &#8216;gaps2c.com&#8217; is elsewhere, but
the subdomain of &#8216;aws.gaps2c.com&#8217; is managed by route53.  The last entry works and says <a href="google.aws.gaps2c.com">google.aws.gaps2c.com</a>
knows where the google servers are.</p>

<p><img src="http://markfussell.emenar.com/images/add-11/add11_route53_1.png" /></p>

<h3>Registering with Route-53</h3>

<p>There are a lot of ways to register with Route-53:</p>

<ul>
<li> Via the console</li>
<li> Via an XML-based payload update</li>
<li> Via adding some elements to a CloudFormation</li>
</ul>


<p>The first is easy, but not scalable.  The second is not hard, but a bit &#8216;peculiar&#8217; in how the payload works.  The
third is trivial and scalable.</p>

<p>So lets start with the third</p>

<h4>Registering via a CloudFormation template</h4>

<p>The good news is it is simple in a CloudFormation.  The bad news is it requires a bit more infrastructure to appear, so
it isn&#8217;t a one-liner.  The issue with CloudFormations is that they must be <em>complete</em>.  They can only auto-wire things
they know about.  So they are relatively monolithic.  It is possible to compose them somewhat, but that is really
just embedding one formation into another vs. wiring two independent formations up.  Ultimately to wire up independent
formations, you need to &#8216;know what you said&#8217; and tell two or more formations enough information that they can find
each other.  That is not hard but it isn&#8217;t free.</p>

<p>But for free, we can add three things to our application stack and get a DNS registration for our application tier.</p>

<ul>
<li> A HostedZone entry – Pointing into the Route 53 database</li>
<li> An ElasticLoadBalancer – Which enables the CloudFormation to know about IP addresses</li>
<li> A PrimaryDnsZone – Which defines the FQDN of the application tier</li>
</ul>


<p>And we need to augment our AutoScalingGroup to know about the ELB.  Adding all this gives:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="s2">&quot;HostedZone&quot;</span> <span class="err">:</span> <span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;Type&quot;</span> <span class="p">:</span> <span class="s2">&quot;String&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;Default&quot;</span> <span class="p">:</span> <span class="s2">&quot;aws.gaps2c.com&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;Description&quot;</span> <span class="p">:</span> <span class="s2">&quot;The DNS name of an existing Amazon Route 53 hosted zone&quot;</span>
</span><span class='line'><span class="p">}</span><span class="err">,</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="s2">&quot;PrimaryElb&quot;</span> <span class="err">:</span> <span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;Type&quot;</span> <span class="p">:</span> <span class="s2">&quot;AWS::ElasticLoadBalancing::LoadBalancer&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;Metadata&quot;</span> <span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;Comment&quot;</span> <span class="p">:</span> <span class="s2">&quot;Configure the Load Balancer with a simple health check and cookie-based stickiness&quot;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nt">&quot;Properties&quot;</span> <span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;AvailabilityZones&quot;</span> <span class="p">:</span> <span class="p">{</span> <span class="nt">&quot;Fn::GetAZs&quot;</span> <span class="p">:</span> <span class="s2">&quot;&quot;</span> <span class="p">},</span>
</span><span class='line'>    <span class="nt">&quot;LBCookieStickinessPolicy&quot;</span> <span class="p">:</span> <span class="p">[</span> <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;PolicyName&quot;</span> <span class="p">:</span> <span class="s2">&quot;CookieBasedPolicy&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;CookieExpirationPeriod&quot;</span> <span class="p">:</span> <span class="s2">&quot;30&quot;</span>
</span><span class='line'>    <span class="p">}</span> <span class="p">],</span>
</span><span class='line'>    <span class="nt">&quot;Listeners&quot;</span> <span class="p">:</span> <span class="p">[</span> <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;LoadBalancerPort&quot;</span> <span class="p">:</span> <span class="s2">&quot;8080&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;InstancePort&quot;</span> <span class="p">:</span> <span class="s2">&quot;8080&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;Protocol&quot;</span> <span class="p">:</span> <span class="s2">&quot;HTTP&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;PolicyNames&quot;</span> <span class="p">:</span> <span class="p">[</span> <span class="s2">&quot;CookieBasedPolicy&quot;</span> <span class="p">]</span>
</span><span class='line'>    <span class="p">}</span> <span class="p">]</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span><span class="err">,</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&quot;PrimaryDnsZone&quot;</span> <span class="err">:</span> <span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;Type&quot;</span> <span class="p">:</span> <span class="s2">&quot;AWS::Route53::RecordSet&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;Properties&quot;</span> <span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;HostedZoneName&quot;</span> <span class="p">:</span> <span class="p">{</span> <span class="nt">&quot;Fn::Join&quot;</span> <span class="p">:</span> <span class="p">[</span> <span class="s2">&quot;&quot;</span><span class="p">,</span> <span class="p">[{</span><span class="nt">&quot;Ref&quot;</span> <span class="p">:</span> <span class="s2">&quot;HostedZone&quot;</span><span class="p">},</span> <span class="s2">&quot;.&quot;</span> <span class="p">]]},</span>
</span><span class='line'>    <span class="nt">&quot;Comment&quot;</span> <span class="p">:</span> <span class="s2">&quot;CNAME redirect to aws.amazon.com.&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;Name&quot;</span> <span class="p">:</span> <span class="p">{</span> <span class="nt">&quot;Fn::Join&quot;</span> <span class="p">:</span> <span class="p">[</span> <span class="s2">&quot;&quot;</span><span class="p">,</span> <span class="p">[{</span> <span class="nt">&quot;Fn::FindInMap&quot;</span> <span class="p">:</span> <span class="p">[</span> <span class="s2">&quot;TemplateConstant&quot;</span><span class="p">,</span> <span class="s2">&quot;deployment&quot;</span><span class="p">,</span> <span class="s2">&quot;value&quot;</span> <span class="p">]</span> <span class="p">},</span> <span class="s2">&quot;-&quot;</span><span class="p">,</span> <span class="p">{</span> <span class="nt">&quot;Fn::FindInMap&quot;</span> <span class="p">:</span> <span class="p">[</span> <span class="s2">&quot;TemplateConstant&quot;</span><span class="p">,</span> <span class="s2">&quot;nodepart&quot;</span><span class="p">,</span> <span class="s2">&quot;value&quot;</span> <span class="p">]</span> <span class="p">},</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="p">{</span><span class="nt">&quot;Ref&quot;</span> <span class="p">:</span> <span class="s2">&quot;HostedZone&quot;</span><span class="p">},</span> <span class="s2">&quot;.&quot;</span><span class="p">]]},</span>
</span><span class='line'>    <span class="nt">&quot;Type&quot;</span> <span class="p">:</span> <span class="s2">&quot;CNAME&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;TTL&quot;</span> <span class="p">:</span> <span class="s2">&quot;900&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;ResourceRecords&quot;</span> <span class="p">:</span> <span class="p">[{</span> <span class="nt">&quot;Fn::GetAtt&quot;</span> <span class="p">:</span> <span class="p">[</span><span class="s2">&quot;PrimaryElb&quot;</span><span class="p">,</span><span class="s2">&quot;CanonicalHostedZoneName&quot;</span><span class="p">]</span> <span class="p">}]</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span><span class="err">,</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&quot;PrimaryServerGroup&quot;</span> <span class="err">:</span> <span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;Type&quot;</span> <span class="p">:</span> <span class="s2">&quot;AWS::AutoScaling::AutoScalingGroup&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;Properties&quot;</span> <span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;Tags&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>      <span class="p">{</span> <span class="nt">&quot;Key&quot;</span><span class="p">:</span> <span class="s2">&quot;add:deployment&quot;</span><span class="p">,</span> <span class="nt">&quot;Value&quot;</span><span class="p">:</span> <span class="p">{</span> <span class="nt">&quot;Fn::FindInMap&quot;</span> <span class="p">:</span> <span class="p">[</span> <span class="s2">&quot;TemplateConstant&quot;</span><span class="p">,</span> <span class="s2">&quot;deployment&quot;</span><span class="p">,</span> <span class="s2">&quot;value&quot;</span> <span class="p">]</span> <span class="p">},</span> <span class="nt">&quot;PropagateAtLaunch&quot;</span> <span class="p">:</span> <span class="s2">&quot;true&quot;</span> <span class="p">},</span>
</span><span class='line'>      <span class="p">{</span> <span class="nt">&quot;Key&quot;</span><span class="p">:</span> <span class="s2">&quot;add:nodepart&quot;</span><span class="p">,</span> <span class="nt">&quot;Value&quot;</span><span class="p">:</span> <span class="p">{</span> <span class="nt">&quot;Fn::FindInMap&quot;</span> <span class="p">:</span> <span class="p">[</span> <span class="s2">&quot;TemplateConstant&quot;</span><span class="p">,</span> <span class="s2">&quot;nodepart&quot;</span><span class="p">,</span> <span class="s2">&quot;value&quot;</span> <span class="p">]</span> <span class="p">},</span> <span class="nt">&quot;PropagateAtLaunch&quot;</span> <span class="p">:</span> <span class="s2">&quot;true&quot;</span> <span class="p">},</span>
</span><span class='line'>      <span class="p">{</span> <span class="nt">&quot;Key&quot;</span><span class="p">:</span> <span class="s2">&quot;add:stacktype&quot;</span><span class="p">,</span> <span class="nt">&quot;Value&quot;</span><span class="p">:</span> <span class="p">{</span> <span class="nt">&quot;Fn::FindInMap&quot;</span> <span class="p">:</span> <span class="p">[</span> <span class="s2">&quot;TemplateConstant&quot;</span><span class="p">,</span> <span class="s2">&quot;stacktype&quot;</span><span class="p">,</span> <span class="s2">&quot;value&quot;</span> <span class="p">]</span> <span class="p">},</span> <span class="nt">&quot;PropagateAtLaunch&quot;</span> <span class="p">:</span> <span class="s2">&quot;true&quot;</span> <span class="p">},</span>
</span><span class='line'>      <span class="p">{</span> <span class="nt">&quot;Key&quot;</span><span class="p">:</span> <span class="s2">&quot;add:statelog&quot;</span><span class="p">,</span> <span class="nt">&quot;Value&quot;</span><span class="p">:</span> <span class="p">{</span> <span class="nt">&quot;Fn::FindInMap&quot;</span> <span class="p">:</span> <span class="p">[</span> <span class="s2">&quot;TemplateConstant&quot;</span><span class="p">,</span> <span class="s2">&quot;statelog&quot;</span><span class="p">,</span> <span class="s2">&quot;value&quot;</span> <span class="p">]</span> <span class="p">},</span> <span class="nt">&quot;PropagateAtLaunch&quot;</span> <span class="p">:</span> <span class="s2">&quot;true&quot;</span> <span class="p">},</span>
</span><span class='line'>      <span class="p">{</span> <span class="nt">&quot;Key&quot;</span><span class="p">:</span> <span class="s2">&quot;add:state&quot;</span><span class="p">,</span> <span class="nt">&quot;Value&quot;</span><span class="p">:</span> <span class="p">{</span> <span class="nt">&quot;Fn::FindInMap&quot;</span> <span class="p">:</span> <span class="p">[</span> <span class="s2">&quot;TemplateConstant&quot;</span><span class="p">,</span> <span class="s2">&quot;state&quot;</span><span class="p">,</span> <span class="s2">&quot;value&quot;</span> <span class="p">]</span> <span class="p">},</span> <span class="nt">&quot;PropagateAtLaunch&quot;</span> <span class="p">:</span> <span class="s2">&quot;true&quot;</span> <span class="p">},</span>
</span><span class='line'>      <span class="p">{</span> <span class="nt">&quot;Key&quot;</span><span class="p">:</span> <span class="s2">&quot;add:statetss&quot;</span><span class="p">,</span> <span class="nt">&quot;Value&quot;</span><span class="p">:</span> <span class="p">{</span> <span class="nt">&quot;Fn::FindInMap&quot;</span> <span class="p">:</span> <span class="p">[</span> <span class="s2">&quot;TemplateConstant&quot;</span><span class="p">,</span> <span class="s2">&quot;statetss&quot;</span><span class="p">,</span> <span class="s2">&quot;value&quot;</span> <span class="p">]</span> <span class="p">},</span> <span class="nt">&quot;PropagateAtLaunch&quot;</span> <span class="p">:</span> <span class="s2">&quot;true&quot;</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">],</span>
</span><span class='line'>    <span class="nt">&quot;AvailabilityZones&quot;</span> <span class="p">:</span> <span class="p">{</span> <span class="nt">&quot;Fn::GetAZs&quot;</span> <span class="p">:</span> <span class="s2">&quot;&quot;</span> <span class="p">},</span>
</span><span class='line'>    <span class="nt">&quot;LaunchConfigurationName&quot;</span> <span class="p">:</span> <span class="p">{</span> <span class="nt">&quot;Ref&quot;</span> <span class="p">:</span> <span class="s2">&quot;PrimaryLaunchConfig&quot;</span> <span class="p">},</span>
</span><span class='line'>    <span class="nt">&quot;MinSize&quot;</span> <span class="p">:</span> <span class="s2">&quot;1&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;MaxSize&quot;</span> <span class="p">:</span> <span class="s2">&quot;1&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;DesiredCapacity&quot;</span> <span class="p">:</span> <span class="s2">&quot;1&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;LoadBalancerNames&quot;</span> <span class="p">:</span> <span class="p">[</span> <span class="p">{</span> <span class="nt">&quot;Ref&quot;</span> <span class="p">:</span> <span class="s2">&quot;PrimaryElb&quot;</span> <span class="p">}</span> <span class="p">]</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span><span class="err">,</span>
</span></code></pre></td></tr></table></div></figure>


<p>After adding all that, we get a new Route53 entry</p>

<p><img src="http://markfussell.emenar.com/images/add-11/add11_route53_2.png" /></p>

<p>And can also look at our load balancer:</p>

<p><img src="http://markfussell.emenar.com/images/add-11/add11_route53_3.png" /></p>

<p>And the instance associated with it:</p>

<p><img src="http://markfussell.emenar.com/images/add-11/add11_route53_4.png" /></p>

<p>And the rule we use to figure out whether the instance is alive</p>

<p><img src="http://markfussell.emenar.com/images/add-11/add11_route53_5.png" /></p>

<h2>Voilà!</h2>

<h3>Domain-Based, Auto-Scaling, IT and Application Stack</h3>

<p>We now have a stable domain name for our stack: &#8216;fed1-app1.aws.gapcom.com&#8217;</p>

<p><img src="http://markfussell.emenar.com/images/add-11/add11_dns1.png" /></p>

<p>which can scale up and down machines automatically.  Ideally there are at least four in production to make sure
all the availability zones under &#8216;US East&#8217; are covered.  But for anything else, one or two is sufficient depending
on what you are testing.</p>

<h3>Autodeploying IT and Application</h3>

<p>We now have a completely automated upgrade system for both our IT (servers) and
for the applications those servers are running.  Whenever we touch the code base
and &#8216;push&#8217; the changes so the servers can see/pull them (PushMePullYou), they automatically
decommission, deploy and confirm the deploy was successful.</p>

<p><img src="http://markfussell.emenar.com/images/add-11/add11_autodeploy1.png" /></p>

<h3>What Next?</h3>

<p>Basically nothing is left for the core of the ADD.  This series has described how the four ingredients
are cooked/hooked together and shown what that looks like on EC2.  Other topics are just filling in details
that are really just nuances and flavors of the ADD. For example:</p>

<ul>
<li>What is the Grails application stack like?</li>
<li>How does Vagrant handle the one minute crons and other more advanced features?</li>
<li>Should you <em>develop in Vagrant</em> or on the host operating system?

<ul>
<li>Answer: Either depending on what you are doing and how productive you are, but the closer you are to production, the more likely you are to catch issues</li>
</ul>
</li>
<li>How does HAProxy and the database configuration using presence work?</li>
<li>What about NewRelic and other monitoring tools</li>
<li>Where is Angular in all this?</li>
</ul>


<p>The first and last topic I will cover in the next multi-part series called the &#8216;AddStack&#8217;.  The others are more specific topics that I may get to eventually, but
are not critical to understanding and using the ADD.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Advanced Development and Delivery (ADD) [Part-10]]]></title>
    <link href="http://markfussell.emenar.com/blog/add-10/"/>
    <updated>2015-10-10T02:00:00-07:00</updated>
    <id>http://markfussell.emenar.com/blog/add-10</id>
    <content type="html"><![CDATA[<p>This is the tenth installment of describing a radically more productive development and delivery environment.</p>

<p>The first part is here: <a href="http://markfussell.emenar.com/blog/add-1/">Intro</a>.  In the previous parts I described the big picture, Vagrant and EC2,
node initialization, the one minute configuration HeartBeat, HipChat integration, presence, EC2, configuring nodes, and inter-machine presence.</p>

<h2>A good, opinionated, framework</h2>

<p>Back in 1972, Smalltalk became the first Object-Oriented Programming Language (Simula was Object-Based but there is a difference).
For decades this kind of language was &#8216;esoteric&#8217;.  It was like LISP or Prolog or APL: somehow exotic and inaccessible.
I was lucky: I had access to Smalltalk at Caltech.  I had access to lots of crazy expensive things at Caltech and that
made the exotic (e.g. making your own chips) into the mundane (e.g. made lots of chips, they were commonly broken,
had to be re-fabricated, and I eventually got bored with all that and moved a level up).</p>

<!-- more -->


<p>But back to the language of Smalltalk.  The problem with Smalltalk is that it appears to be a language when it is
actually a computer. &#8216;C&#8217; was a language.  It made programs. &#8216;Pascal&#8217;, &#8216;Lisp&#8217; (sans Machine), &#8216;Fortan&#8217;, and so on&#8230;
they were all languages.  Smalltalk <em>contains</em> a language.  It is named Smalltalk (darn).  But Smalltalk-80 was not
<em>just</em> a language, it was an <em>entire running operating system with applications and full source</em>  It could boot on
most any machine that you made the &#8216;bootstrap&#8217; code work on.  To make a new Smalltalk-80 machine, you cloned either
the primordial Smalltalk-80 &#8216;image&#8217; from PARC, or you cloned your own modified &#8216;image&#8217;.  And by &#8216;image&#8217; this is
basically the same concept as cloning a disk&#8230; bit by bit identical copy that happens to be on a different disk / computer.</p>

<p>Eventually OOP became mainstream with Java, C++, Objective-C, Ruby, Python, and the like.  So people thought they
were getting the &#8220;Smalltalk&#8221; (or LISP Machine) benefits.  But they left out the &#8216;computer&#8217; that went with the language.</p>

<h3>Why opinionated?</h3>

<p>The Smalltalk computer was quite functional and thoroughly opinionated.  It <em>already did</em> a bunch of things and showed
you how it did them.  It wasn&#8217;t opinionated like a human usually uses the term: &#8220;You should build that house out of bricks, not straw&#8221;.
It was opinionated like the planet is: &#8220;I have already created lots of flora and fauna&#8230; please use them wisely&#8221;.  Even
how humans on the planet are: &#8220;We have already created plenty of roads&#8230; please use them instead of driving through yards&#8221;</p>

<p>Opinionated is basically a synonym for &#8220;Working&#8221;.  Smalltalk computers &#8220;worked&#8221; so don&#8217;t break it.  They work, so you
should probably copy them for anything similar.  And they work, so you might want to study how they work even if you
are going to be creative later.</p>

<h3>Modern &#8216;working&#8217; frameworks</h3>

<p>Early frameworks (say for Java) &#8216;kind-of-worked&#8217;.  They didn&#8217;t fully work, but you could &#8216;configure&#8217; them to work.
That is like getting all &#8216;IKEA&#8217; furniture for your house.  You could easily build it wrong.  It could not work
together.  Yes, you get to &#8216;tweak&#8217; it, but if someone simply offered &#8220;a furnished house&#8221; you would save a lot of
time and leverage their full sense of design.  Or you could go to a different furnished house that more closely matched your tastes.</p>

<p>The later fully-working / opinionated frameworks (like Ruby/Rails) truly worked out of the box.  They would come up with a UI, Business/Domain
layer, and a Database layer.  You could add things to the UI and it would go down the whole stack.  Add things to the database
or Domain, and it would bubble up/down.  For the framework to do these things it had to have a model for what software (in its full form)
looks like.  These frameworks had patterns/templates/rules for building things at command.  This isn&#8217;t quite as good as Smalltalk (&#8220;it already exists&#8221;)
but it is getting close, especially with sample applications available.
It also gets rid of the one problem / hurdle with Smalltalk full-computers: you had to strip them
of things you didn&#8217;t want customers to see / use / clone.</p>

<h3>Languages</h3>

<p>There are many modern languages.  They are mostly quite similar and boring in the language themselves.  The community around the
language makes much more of a difference, and the libraries / frameworks that exist based on that community&#8217;s interest.</p>

<p>I mentioned that I switched to Java pretty early on, which cost me productivity.  But I wanted the community and their
libraries.  Java was popular enough that it had multiple communities associated with it.  Some were crazy stupid and
created things (even tried to mandate use of things) that were completely stupid.  But other communities continued
to plug along and evolve libraries and frameworks that are better than you can get in other languages.  On the whole,
I believe the Java ecosystem is by far the best &#8216;hub&#8217; to build most custom development and to pair
with other tools/components in other languages.  And by Java, I mean Java, Groovy, and potentially other JVM-targeting
languages.  The less Java-like the language, the less likely I would consider it acceptably an &#8216;other&#8217;.</p>

<h3>Framework</h3>

<p>I believe the best (general) application framework in Java is Grails, which lives on top of the Spring stack.  It is
very mature and has good minds in the drivers seat.  It gets simpler and more powerful every generation.  If Spring
does something right, Grails simply uses it.  If not, Grails augments it.  Very rational.  Very powerful.</p>

<h2>The first application</h2>

<p>The first application will simply be the default applications with a grails &#8216;create-app&#8217;.  To get the application we
need to get grails on the &#8216;app1&#8217; nodes, create the application, and then run it.</p>

<p>Grails needs Java, but ec2 instances automatically have that.  In other environments we would use something like:</p>

<h3>installJava.sh</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'><span class="c">#================================================</span>
</span><span class='line'><span class="c">#=== Java</span>
</span><span class='line'><span class="c">#================================================</span>
</span><span class='line'>
</span><span class='line'><span class="nb">export </span><span class="nv">JAVA_VERSION</span><span class="o">=</span>7u79
</span><span class='line'><span class="nb">export </span><span class="nv">JAVA_FULL_VERSION</span><span class="o">=</span>jdk-<span class="k">${</span><span class="nv">JAVA_VERSION</span><span class="k">}</span>-linux-x64
</span><span class='line'>
</span><span class='line'>mkdir -p .temp
</span><span class='line'>cp it/resource/<span class="k">${</span><span class="nv">JAVA_FULL_VERSION</span><span class="k">}</span>.rpm .temp/
</span><span class='line'>
</span><span class='line'>./bin/inflatePaths.sh .temp/<span class="k">${</span><span class="nv">JAVA_FULL_VERSION</span><span class="k">}</span>.rpm
</span><span class='line'>
</span><span class='line'>rpm -i .temp/<span class="k">${</span><span class="nv">JAVA_FULL_VERSION</span><span class="k">}</span>.rpm
</span></code></pre></td></tr></table></div></figure>


<p>The advantage of storing the RPM within our own system is speed of access and reliability.  EC2 to S3 communication
is very fast.  And S3 has never been down (AFAIK) at all, let alone when EC2 is running.  We also lock down on the
version we want vs. using &#8216;yum&#8217; without an explicit version.</p>

<h3>installGrails3_x.sh</h3>

<p>For grails we will get the latest version</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'><span class="c">#==========================================================</span>
</span><span class='line'><span class="c">#=== Install Grails 3.x</span>
</span><span class='line'><span class="c">#==========================================================</span>
</span><span class='line'>
</span><span class='line'>curl -s get.sdkman.io | bash
</span><span class='line'><span class="nb">source</span> <span class="s2">&quot;$HOME/.sdkman/bin/sdkman-init.sh&quot;</span>
</span><span class='line'>yes | sdk install grails
</span><span class='line'>
</span><span class='line'><span class="nb">source</span> ~/.bashrc
</span><span class='line'>grails -version
</span></code></pre></td></tr></table></div></figure>


<p>We need to source &#8216;~/.bashrc&#8217; so we get the additions to our path.</p>

<h3>Create &#8216;test&#8217; application</h3>

<p>At this point we have grails on the machine and can simply</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mkdir -p /root/app/
</span><span class='line'><span class="nb">cd</span> /root/app
</span><span class='line'>
</span><span class='line'>grails create-app <span class="nb">test</span>
</span><span class='line'><span class="nb">cd test</span>
</span><span class='line'>grails run-app
</span></code></pre></td></tr></table></div></figure>


<p>The application will come up at &#8216;localhost:8080&#8217; and if you wget/curl it, it returns the generated &#8216;index.html&#8217; file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!doctype html&gt;</span>
</span><span class='line'><span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">&quot;en&quot;</span> <span class="na">class=</span><span class="s">&quot;no-js&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;head&gt;</span>
</span><span class='line'>        <span class="nt">&lt;meta</span> <span class="na">http-equiv=</span><span class="s">&quot;Content-Type&quot;</span> <span class="na">content=</span><span class="s">&quot;text/html; charset=UTF-8&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;meta</span> <span class="na">http-equiv=</span><span class="s">&quot;X-UA-Compatible&quot;</span> <span class="na">content=</span><span class="s">&quot;IE=edge&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;title&gt;</span>Welcome to Grails<span class="nt">&lt;/title&gt;</span>
</span><span class='line'>        <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;viewport&quot;</span> <span class="na">content=</span><span class="s">&quot;width=device-width, initial-scale=1&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>...
</span><span class='line'>        <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;page-body&quot;</span> <span class="na">role=</span><span class="s">&quot;main&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;h1&gt;</span>Welcome to Grails<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>            <span class="nt">&lt;p&gt;</span>Congratulations, you have successfully started your first Grails application! At the moment
</span><span class='line'>               this is the default page, feel free to modify it to either redirect to a controller or display whatever
</span><span class='line'>               content you may choose. Below is a list of controllers that are currently deployed in this application,
</span><span class='line'>               click on each to execute its default action:<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'>            <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;controller-list&quot;</span> <span class="na">role=</span><span class="s">&quot;navigation&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                <span class="nt">&lt;h2&gt;</span>Available Controllers:<span class="nt">&lt;/h2&gt;</span>
</span><span class='line'>                <span class="nt">&lt;ul&gt;</span>
</span><span class='line'>
</span><span class='line'>                <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;footer&quot;</span> <span class="na">role=</span><span class="s">&quot;contentinfo&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'>        <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;spinner&quot;</span> <span class="na">class=</span><span class="s">&quot;spinner&quot;</span> <span class="na">style=</span><span class="s">&quot;display:none;&quot;</span><span class="nt">&gt;</span>Loading<span class="ni">&amp;hellip;</span><span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Firewalls</h3>

<p>Unfortunately, you won&#8217;t be able to test this app from the outside unless you open the &#8216;8080&#8217; port.</p>

<p>If we open that port either initially or through commands:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;IpProtocol&quot;</span><span class="p">:</span><span class="s2">&quot;tcp&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;FromPort&quot;</span><span class="p">:</span><span class="s2">&quot;8080&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;ToPort&quot;</span><span class="p">:</span><span class="s2">&quot;8080&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;CidrIp&quot;</span><span class="p">:</span><span class="s2">&quot;0.0.0.0/0&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We get the latest and greatest &#8216;Grails&#8217; application (3.0.8 as of this writing)</p>

<p><img src="http://markfussell.emenar.com/images/add-10/add10_grails1.png" /></p>

<h3>Demo2: PetClinic</h3>

<p>There is a PetClinic demo at: https://github.com/grails-samples/grails-petclinic .  Doing the same simple launch procedure you would get something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mkdir -p /root/app/
</span><span class='line'><span class="nb">cd</span> /root/app
</span><span class='line'>
</span><span class='line'>git clone git@github.com:grails-samples/grails-petclinic.git
</span><span class='line'><span class="nb">cd </span>grails-petclinic
</span><span class='line'>./gradlew run
</span></code></pre></td></tr></table></div></figure>


<p>And you get:</p>

<p><img src="http://markfussell.emenar.com/images/add-10/add10_grails2.png" /></p>

<p>But an important difference between the two: the second is now <em>wired</em> into the git repository and can &#8216;pull&#8217; or &#8216;push&#8217; to it as needed.
We now have a live server with both alive &#8216;IT&#8217; and alive &#8216;APP&#8217;!  It will happily and automatically bend to our will and needs.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Advanced Development and Delivery (ADD) [Part-9]]]></title>
    <link href="http://markfussell.emenar.com/blog/add-9/"/>
    <updated>2015-10-08T02:00:00-07:00</updated>
    <id>http://markfussell.emenar.com/blog/add-9</id>
    <content type="html"><![CDATA[<p>This is the ninth installment of describing a radically more productive development and delivery environment.</p>

<p>The first part is here: <a href="http://markfussell.emenar.com/blog/add-1/">Intro</a>.  In the previous parts I described the big picture, Vagrant and EC2,
node initialization, the one minute configuration HeartBeat, HipChat integration, presence, EC2, and configuring nodes.</p>

<h2>Using Presence for configuration</h2>

<p>So far, presence has been just information that &#8216;humans&#8217; consume.  It shows up on dashboards, in chat rooms, and so on,
but nothing has acted upon it.  Until now!</p>

<p>We have &#8216;app&#8217; and &#8216;db&#8217; nodes.  Clearly the &#8216;app&#8217; nodes need to find the &#8216;db&#8217; nodes or the app is not going to be
able to persist much.  The &#8216;db&#8217; here happens to be &#8216;Maria&#8217; but it could be anything from a single DB node to a
cluster of Riak nodes.  At the moment, I just want to get the information that a &#8216;db&#8217; node knows (&#8220;I exist!&#8221;, &#8220;My IP is this!&#8221;)
over to the &#8216;app&#8217; nodes so they can process it.</p>

<h3>It is already there?</h3>

<p>But wait?  All nodes have &#8216;repo4&#8217; for writing?  Don&#8217;t they already have everything in &#8216;repo4&#8217; for reading as well?</p>

<p>And so they do.  The presence information is already there waiting patiently for somebody or someboty to read it.</p>

<!-- more -->


<p>As of this writing, repo4 looks like this:</p>

<p><img src="http://markfussell.emenar.com/images/add-9/add9_all.png" /></p>

<p>And the live hipchat still looks like this:</p>

<p><img src="http://markfussell.emenar.com/images/add-8/add8_demo1.png" /></p>

<p>So the DB server is definitely there:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>i-4e7cb59a:fed1/db1: Launched!</span></code></pre></td></tr></table></div></figure>


<p>And the information is there:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;filetype&quot;</span><span class="p">:</span> <span class="s2">&quot;nodepresence&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;value&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;a&quot;</span><span class="p">:</span> <span class="s2">&quot;a&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;deployment&quot;</span><span class="p">:</span> <span class="s2">&quot;fed1&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;initgitrepo&quot;</span><span class="p">:</span> <span class="s2">&quot;repo2_petulant-cyril&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;instance-id&quot;</span><span class="p">:</span> <span class="s2">&quot;i-4e7cb59a&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;nodepart&quot;</span><span class="p">:</span> <span class="s2">&quot;db1&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;stacktype&quot;</span><span class="p">:</span> <span class="s2">&quot;lad1&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;state&quot;</span><span class="p">:</span> <span class="s2">&quot;done&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;statelog&quot;</span><span class="p">:</span> <span class="s2">&quot;setup:20151008-174646;initdone:20151008-174830;&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;statetss&quot;</span><span class="p">:</span> <span class="s2">&quot;20151008-174830&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>So the only issue is for nodes to &#8216;find their partners&#8217;</p>

<h3>Finding the partners</h3>

<p>By the HipChat there are only three nodes alive, so problem one is finding live nodes vs. dead nodes.  There are
two levels to that:</p>

<ul>
<li> Finding plausibly live nodes</li>
<li> Finding truly awake nodes</li>
</ul>


<p>The simplest approach to the first is to make sure there is some kind of heartbeat within &#8216;statetss&#8217;.  Every-minute
is clearly possible, but a bit noisy if done in the main part of repo4.  It would be nice to not to see the heartbeat
block out the actual state change information that is already there. An interesting alternative is to &#8216;flatten time&#8217;
and have an alternative branch that stores information as &#8216;it/presence/flattime/timestamp&#8217;.  Or given we are storing
the information differently, we could use the main branch and just change the comment to mention &#8216;flattime&#8217;.
Yes, the information in the files would not change very often.  But Git stores files separate from paths,
so there is very little overhead to adding new paths to identical files.</p>

<h4>Time flattened</h4>

<p>repo4 has folder under &#8216;presence&#8217; called &#8216;flattime&#8217; which contains the presence information where every checkin is a new path.
To keep things manageable the timestamp is complete &#8216;YYYYMMDDHHMM&#8217;, but year/month/day/hour/ is used to organize it.
Seconds are not used because we want everything to be together and there is no guarantee the seconds would match
between machines.</p>

<p>Looking at a few minutes of time, we get something like this:</p>

<p><img src="http://markfussell.emenar.com/images/add-9/add9_flattime1.png" /></p>

<p>The files change a bit because the machines are switching states and at the &#8216;capture&#8217; moment could be in almost any state
of their &#8216;state machine&#8217;.</p>

<h4>How precise?</h4>

<p>So this is quite precise in time and you could certainly slow it down.  Sometimes providers get annoyed if you use
git this way, but the software itself is thoroughly comfortable with it.  You can get some impressive merge graphs
as the machine count goes up.</p>

<p><img src="http://markfussell.emenar.com/images/add-9/add9_merge1.png" /></p>

<p>So making things less often and more jittered will help alleviate some stress.  Since
this is only the first stage of presence (what exists and is plausibly alive), we will deal with stale data in the
second stage.</p>

<h3>Who is what?</h3>

<p>So we have a directory of JSON files and we want to find certain kinds of partners.  It is simplest to just
run through all the files and see what is inside them.  The files can be loaded one-by-one or concatenated together
into a working temporary file.</p>

<p>A basic python script could look like this:</p>

<h4>buildLiveServerJson.py</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/env python</span>
</span><span class='line'>
</span><span class='line'><span class="c">#========================================================</span>
</span><span class='line'><span class="c">#=== buildLiveServerJson.py</span>
</span><span class='line'><span class="c">#=== This builds a JSON structure of server presence data</span>
</span><span class='line'><span class="c">#=== from a directory of presence data</span>
</span><span class='line'><span class="c">#=========================================================</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">json</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">string</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">os</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">optparse</span> <span class="kn">import</span> <span class="n">OptionParser</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">datetime</span> <span class="kn">import</span> <span class="n">datetime</span><span class="p">,</span><span class="n">timedelta</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">now</span> <span class="o">=</span> <span class="n">datetime</span><span class="o">.</span><span class="n">utcnow</span><span class="p">()</span>
</span><span class='line'><span class="n">tss</span> <span class="o">=</span> <span class="n">now</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s">&quot;%Y%m</span><span class="si">%d</span><span class="s">%H%M%S&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">backminute</span> <span class="o">=</span> <span class="n">timedelta</span><span class="p">(</span><span class="n">minutes</span><span class="o">=-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="n">before</span> <span class="o">=</span> <span class="n">now</span> <span class="o">+</span> <span class="n">backminute</span>
</span><span class='line'>
</span><span class='line'><span class="n">tsm</span> <span class="o">=</span> <span class="n">before</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s">&quot;%Y%m</span><span class="si">%d</span><span class="s">%H%M&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">datepath</span> <span class="o">=</span> <span class="n">before</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s">&quot;%Y/%m/</span><span class="si">%d</span><span class="s">/%H&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">USAGE_STRING</span> <span class="o">=</span> <span class="s">&quot;usage: %prog [options]&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">parser</span> <span class="o">=</span> <span class="n">OptionParser</span><span class="p">(</span><span class="n">usage</span><span class="o">=</span><span class="n">USAGE_STRING</span><span class="p">)</span>
</span><span class='line'><span class="n">parser</span><span class="o">.</span><span class="n">set_defaults</span><span class="p">(</span><span class="n">verbose</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'><span class="n">parser</span><span class="o">.</span><span class="n">add_option</span><span class="p">(</span><span class="s">&quot;--source&quot;</span><span class="p">,</span> <span class="n">action</span><span class="o">=</span><span class="s">&quot;store&quot;</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="s">&quot;string&quot;</span><span class="p">,</span> <span class="n">dest</span><span class="o">=</span><span class="s">&quot;source&quot;</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="s">&quot;The source directories of the presence files.  Use a comma to separate multiple source directories.&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">parser</span><span class="o">.</span><span class="n">add_option</span><span class="p">(</span><span class="s">&quot;--adddatepath&quot;</span><span class="p">,</span> <span class="n">action</span><span class="o">=</span><span class="s">&quot;store_true&quot;</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">dest</span><span class="o">=</span><span class="s">&quot;adddatepath&quot;</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="s">&quot;Whether to add the current datetime path to the source&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">parser</span><span class="o">.</span><span class="n">add_option</span><span class="p">(</span><span class="s">&quot;--suffix&quot;</span><span class="p">,</span> <span class="n">action</span><span class="o">=</span><span class="s">&quot;store&quot;</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="s">&quot;string&quot;</span><span class="p">,</span> <span class="n">dest</span><span class="o">=</span><span class="s">&quot;suffix&quot;</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="s">&quot;A suffix to add at the end of the source&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="n">options</span><span class="p">,</span> <span class="n">args</span><span class="p">)</span> <span class="o">=</span> <span class="n">parser</span><span class="o">.</span><span class="n">parse_args</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">source</span> <span class="o">=</span> <span class="n">options</span><span class="o">.</span><span class="n">source</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span>
</span><span class='line'><span class="n">adddatepath</span> <span class="o">=</span> <span class="n">options</span><span class="o">.</span><span class="n">adddatepath</span>
</span><span class='line'><span class="n">suffix</span> <span class="o">=</span> <span class="n">options</span><span class="o">.</span><span class="n">suffix</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="ow">not</span> <span class="n">source</span><span class="p">:</span>
</span><span class='line'>    <span class="n">parser</span><span class="o">.</span><span class="n">print_help</span><span class="p">()</span>
</span><span class='line'>    <span class="nb">exit</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">full_source</span> <span class="o">=</span> <span class="n">source</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">adddatepath</span><span class="p">:</span>
</span><span class='line'>   <span class="n">full_source</span> <span class="o">=</span> <span class="n">full_source</span> <span class="o">+</span> <span class="n">datepath</span> <span class="o">+</span> <span class="s">&#39;/&#39;</span> <span class="o">+</span> <span class="n">tsm</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">suffix</span><span class="p">:</span>
</span><span class='line'>   <span class="n">full_source</span> <span class="o">=</span> <span class="n">full_source</span> <span class="o">+</span> <span class="n">suffix</span>
</span><span class='line'>
</span><span class='line'><span class="c">#=========================================================</span>
</span><span class='line'><span class="c">#=========================================================</span>
</span><span class='line'><span class="c">#=========================================================</span>
</span><span class='line'>
</span><span class='line'><span class="n">sys</span><span class="o">.</span><span class="n">stdout</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">&#39;{&quot;source&quot;:&quot;&#39;</span><span class="o">+</span><span class="n">source</span><span class="o">+</span><span class="s">&#39;&quot;,&quot;suffix&quot;:&quot;&#39;</span><span class="o">+</span><span class="n">suffix</span><span class="o">+</span><span class="s">&#39;&quot;,&quot;full_source&quot;:&quot;&#39;</span><span class="o">+</span><span class="n">full_source</span><span class="o">+</span><span class="s">&#39;&quot;,&quot;tss&quot;:&quot;&#39;</span><span class="o">+</span><span class="n">tss</span><span class="o">+</span><span class="s">&#39;&quot;,&quot;tsm&quot;:&quot;&#39;</span><span class="o">+</span><span class="n">tsm</span><span class="o">+</span><span class="s">&#39;&quot;,&quot;datepath&quot;:&quot;&#39;</span><span class="o">+</span><span class="n">datepath</span><span class="o">+</span><span class="s">&#39;&quot;,&quot;nodes&quot;:[&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">isfirst</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class='line'><span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="n">os</span><span class="o">.</span><span class="n">listdir</span><span class="p">(</span><span class="n">full_source</span><span class="p">):</span>
</span><span class='line'>  <span class="n">f_json</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="nb">open</span><span class="p">(</span><span class="n">full_source</span><span class="o">+</span><span class="n">f</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="n">isfirst</span><span class="p">:</span>
</span><span class='line'>     <span class="n">isfirst</span> <span class="o">=</span> <span class="bp">False</span>
</span><span class='line'>  <span class="k">else</span><span class="p">:</span>
</span><span class='line'>     <span class="n">sys</span><span class="o">.</span><span class="n">stdout</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">&quot;,&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">sys</span><span class="o">.</span><span class="n">stdout</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">f_json</span><span class="p">))</span>
</span><span class='line'><span class="n">sys</span><span class="o">.</span><span class="n">stdout</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">&quot;]}&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">sys</span><span class="o">.</span><span class="n">stdout</span><span class="o">.</span><span class="n">flush</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Our first stage is to get a list of plausible nodes and store that:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>python buildLiveServerJson.py --source<span class="o">=</span>/root/gitrepo/repo4_sagacious-adventure/it/presence/flattime/ --adddatepath --suffix /all/ | python -mjson.tool &gt; /root/nodeinfo/liveserver.json
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://markfussell.emenar.com/images/add-9/add9_json1.png" /></p>

<p>Next we can filter out the ones that don&#8217;t respond to our &#8216;awake&#8217; check.  That leaves
us with one or more remaining.  Depending on the kind of system you may actually want to know a bunch of nodes vs.
just one (e.g. ZooKeeper).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Advanced Development and Delivery (ADD) [Part-8]]]></title>
    <link href="http://markfussell.emenar.com/blog/add-8/"/>
    <updated>2015-10-08T01:00:00-07:00</updated>
    <id>http://markfussell.emenar.com/blog/add-8</id>
    <content type="html"><![CDATA[<p>This is the eighth installment of describing a radically more productive development and delivery environment.</p>

<p>The first part is here: <a href="http://markfussell.emenar.com/blog/add-1/">Intro</a>.  In the previous parts I described the big picture, Vagrant and EC2,
node initialization, the one minute configuration HeartBeat, HipChat integration, presence, and EC2 integration.</p>

<h2>Configuring Node Parts and even fuller Presence and visibility</h2>

<p>So far our node was a generic &#8216;ControlNode&#8217;.  A ControlNode is a node that is in your data center
(to be near the other nodes), similar to your actual nodes, and configured to be able to do interesting tasks.
It is not a critical part of anything, so you can fiddle with it and just throw it away.  Say you want to
start configuring a database node.  You launch and login to a ControlNode and then try to install a database
(for example Maria).</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cat &gt; /etc/yum.repos.d/mariadb10.repo <span class="s">&lt;&lt;EOS</span>
</span><span class='line'><span class="s"># MariaDB 10.0 CentOS repository list - created 2015-10-08 15:16 UTC</span>
</span><span class='line'><span class="s"># http://mariadb.org/mariadb/repositories/</span>
</span><span class='line'><span class="s">[mariadb]</span>
</span><span class='line'><span class="s">name = MariaDB</span>
</span><span class='line'><span class="s">baseurl = http://yum.mariadb.org/10.0/centos7-amd64</span>
</span><span class='line'><span class="s">gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB</span>
</span><span class='line'><span class="s">gpgcheck=1</span>
</span><span class='line'><span class="s">EOS</span>
</span><span class='line'>
</span><span class='line'>yum install MariaDB-server MariaDB-client
</span></code></pre></td></tr></table></div></figure>


<p>Assuming you changed to root for the instance:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo bash
</span></code></pre></td></tr></table></div></figure>


<p>This works!  After confirming some things along the way&#8230;</p>

<p>OK, so now we want to have our database servers install MariaDB.  We first need an &#8216;installMaria&#8217; script with the above
in it.  Say</p>

<h3>installMaria10.sh</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'><span class="c">#================================================</span>
</span><span class='line'><span class="c">#=== Java</span>
</span><span class='line'><span class="c">#================================================</span>
</span><span class='line'>
</span><span class='line'>cat &gt; /etc/yum.repos.d/mariadb10.repo <span class="s">&lt;&lt;EOS</span>
</span><span class='line'><span class="s"># MariaDB 10.0 CentOS repository list - created 2015-10-08 15:16 UTC</span>
</span><span class='line'><span class="s"># http://mariadb.org/mariadb/repositories/</span>
</span><span class='line'><span class="s">[mariadb]</span>
</span><span class='line'><span class="s">name = MariaDB</span>
</span><span class='line'><span class="s">baseurl = http://yum.mariadb.org/10.0/centos7-amd64</span>
</span><span class='line'><span class="s">gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB</span>
</span><span class='line'><span class="s">gpgcheck=1</span>
</span><span class='line'><span class="s">EOS</span>
</span><span class='line'>
</span><span class='line'>yum install MariaDB-server MariaDB-client
</span></code></pre></td></tr></table></div></figure>


<h3>adding init</h3>

<p>And unless you want every node to install Maria, you need to add an &#8216;init&#8217; for the type of node we are dealing with.
In our case, the StackType is &#8216;lad1&#8217; (Load,App,Db,1) and the node type / part is &#8216;db1&#8217;.</p>

<p>So we get this hierarchy:</p>

<p><img src="http://markfussell.emenar.com/images/add-8/add8_hierarchy1.png" /></p>

<p>And the content of the &#8216;init.sh&#8217; file is simply:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="c">#====================================================</span>
</span><span class='line'><span class="c">#=== fed1/db1</span>
</span><span class='line'><span class="c">#====================================================</span>
</span><span class='line'>
</span><span class='line'>bash <span class="k">${</span><span class="nv">COMMON</span><span class="k">}</span>/installMaria10.sh
</span></code></pre></td></tr></table></div></figure>


<h3>CloudFormation</h3>

<p>We have a new CloudFormation named &#8216;awscf4_Fed1Db1&#8217; with the simple change of the nodepart being &#8216;db1&#8217;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="s2">&quot;TemplateConstant&quot;</span> <span class="err">:</span> <span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;stacktype&quot;</span> <span class="p">:</span> <span class="p">{</span> <span class="nt">&quot;value&quot;</span> <span class="p">:</span> <span class="s2">&quot;lad1&quot;</span> <span class="p">},</span>
</span><span class='line'>  <span class="nt">&quot;initgitrepo&quot;</span> <span class="p">:</span> <span class="p">{</span> <span class="nt">&quot;value&quot;</span> <span class="p">:</span> <span class="s2">&quot;repo2_petulant-cyril&quot;</span> <span class="p">},</span>
</span><span class='line'>  <span class="nt">&quot;nodepart&quot;</span> <span class="p">:</span> <span class="p">{</span> <span class="nt">&quot;value&quot;</span> <span class="p">:</span> <span class="s2">&quot;db1&quot;</span> <span class="p">},</span>
</span><span class='line'>  <span class="nt">&quot;state&quot;</span> <span class="p">:</span> <span class="p">{</span> <span class="nt">&quot;value&quot;</span> <span class="p">:</span> <span class="s2">&quot;presetup&quot;</span> <span class="p">},</span>
</span><span class='line'>  <span class="nt">&quot;statetss&quot;</span> <span class="p">:</span> <span class="p">{</span> <span class="nt">&quot;value&quot;</span> <span class="p">:</span> <span class="s2">&quot;&quot;</span> <span class="p">},</span>
</span><span class='line'>  <span class="nt">&quot;statelog&quot;</span> <span class="p">:</span> <span class="p">{</span> <span class="nt">&quot;value&quot;</span> <span class="p">:</span> <span class="s2">&quot;&quot;</span> <span class="p">},</span>
</span><span class='line'>  <span class="nt">&quot;deployment&quot;</span> <span class="p">:</span> <span class="p">{</span> <span class="nt">&quot;value&quot;</span> <span class="p">:</span> <span class="s2">&quot;fed1&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span><span class="err">,</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Demo or Die!</h3>

<p>Since the previous presence description, the presence system has upped itself and now nodes check-in with
more information than before.  After launching two &#8216;app&#8217; stack and one &#8216;db&#8217; stack we get this:</p>

<p><img src="http://markfussell.emenar.com/images/add-8/add8_demo1.png" /></p>

<p>So clearly our nodes know who they are, what deployment they are in, what the &#8216;part&#8217; in that deployment is, and how to
&#8220;do work&#8221;. But are they actually what they say they are?</p>

<h2>Being the &#8216;user&#8217;, fixing the &#8216;user&#8217;</h2>

<p>If you use the installMaria script above, it will not work.  Because I said: &#8220;This works!  After confirming some things along the way&#8230;&#8221;
During &#8216;boot&#8217; there is no user to confirm anything.  So the &#8216;yum&#8217; part fails although the yum repository is there
(the user is &#8216;root&#8217; so it has permission).  It ran the script but it didn&#8217;t work under &#8216;automation&#8217;.
The three annoying issues in automation:</p>

<ul>
<li> The user could be different from the user you think it is (say &#8216;ec2&#8217; vs. &#8216;root&#8217;)</li>
<li> The user is not interactive</li>
<li> The user did not &#8220;launch a login shell&#8221; and so some launch things that happen for you did not happen for them.</li>
</ul>


<p>There are trivial and super-effective solutions to all of these, but until you get them right, you can bang your head
quite a bit.</p>

<h3>Who is the user?  &#8216;root&#8217;</h3>

<p>The user provisioning a machine should always be &#8216;root&#8217;.  Yes, &#8216;root&#8217; is dangerous.  Because &#8216;root&#8217; is powerful.  And
given (a) if you mess up you simply kill the machine, and (b) everything is from version-controlled source files&#8230;
you can handle that power.  So don&#8217;t add silly hoops to jump through.  On a ControlNode, immediately &#8216;sudo bash&#8217;.
And if for some reason the default user isn&#8217;t &#8216;root&#8217; in a launch or cron script, &#8216;su root&#8217; or &#8216;sudo bash&#8217; to fix that.</p>

<h3>Is the user interactive? &#8216;no&#8217;</h3>

<p>We are doing production automation that is designed to scale into thousands of machines.  No one is going to answer
questions for thousands of machines.  That is not &#8216;scalable&#8217; or at all valuable.  You should always know all the
answers when a machine launches.  So script any UI that really requires some value put in, or use the variant of
a command that has default answers.</p>

<p>The true script for &#8216;installMaria&#8217; has this line.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>yes | yum -y install MariaDB-server MariaDB-client
</span></code></pre></td></tr></table></div></figure>


<p>The &#8216;yum -y&#8217; <em>should</em> never ask any questions.  But just in case it does, I give it a &#8216;y&#8217; for every answer.  If you
are testing something and get a question, check if it has a flag like &#8216;-y&#8217;</p>

<p><img src="http://markfussell.emenar.com/images/add-8/add8_yes.png" /></p>

<h3>Has the user launch as a login shel? &#8216;yes&#8217;</h3>

<p>Since getting on a machine without &#8216;logging in&#8217; is quite a bit more painful than &#8216;ssh&#8217; into the machine, just make sure
any &#8216;init&#8217; and &#8216;work&#8217; script has read the files a login shell would automatically read.</p>

<p>A simple &#8216;source /root/.bashrc&#8217; fixes the problem immediately</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#========================================</span>
</span><span class='line'><span class="c">#=== Do the work for this repository</span>
</span><span class='line'><span class="c">#========================================</span>
</span><span class='line'>
</span><span class='line'><span class="nb">source</span> /root/.bashrc
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<h2>Node Work</h2>

<p>Just like the &#8216;init&#8217; hierarchy, the &#8216;db1&#8217; nodes can have their own work items to do regularly by simply adding the &#8216;work.sh&#8217;
into the hierarchy:</p>

<p><img src="http://markfussell.emenar.com/images/add-8/add8_hierarchy2.png" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Advanced Development and Delivery (ADD) [Part-7]]]></title>
    <link href="http://markfussell.emenar.com/blog/add-7/"/>
    <updated>2015-10-04T01:00:00-07:00</updated>
    <id>http://markfussell.emenar.com/blog/add-7</id>
    <content type="html"><![CDATA[<p>This is the seventh installment of describing a radically more productive development and delivery environment.</p>

<p>The first part is here: <a href="http://markfussell.emenar.com/blog/add-1/">Intro</a>.  In the previous parts I described the big picture, Vagrant and EC2,
node initialization, the one minute configuration HeartBeat, HipChat integration, and presence.</p>

<h2>Fuller Presence and EC2 Integration</h2>

<p>In the previous part, I went through a very simple but powerful model of &#8216;presence&#8217; using simply GitHub repositories.
The content of those presence statements was enough to figure out what nodes exist, but not much more about them.
The second level of presence is to update the state of the node as it changes.  For example, a node goes through
a few bootstrap steps:</p>

<ul>
<li> presetup – The node before any updates are possible (no ability to change status)</li>
<li> setup – The beginning of the &#8216;setup&#8217; phase where the node is alive enough to change it&#8217;s status</li>
<li> initdone – The time a node is done are initialization and can start doing &#8216;work&#8217; as the &#8216;nodepart&#8217; it is</li>
</ul>


<p>A node getting to &#8216;setup&#8217; is pretty important: before that it may be a zombie!  And we don&#8217;t want zombie&#8217;s in
our federation!</p>

<!-- more -->


<p>So far for the ADD we now have four resources within which track node states:</p>

<ul>
<li> On the node (say &#8216;/root/log&#8217; or &#8216;/root/nodeinfo/state.txt)</li>
<li> Within the presence system</li>
<li> Within HipChat</li>
<li> On EC2 itself</li>
</ul>


<p>I recommend using <em>all</em> of them.</p>

<h3>On node</h3>

<p> On the node is very helpful in that it is isolated from any other failures.  You
 can &#8216;tail&#8217; the logs or &#8216;cat&#8217; the state file.  This tangibility helps understand things and debug if there is failure.</p>

<h3>Within Presence</h3>

<p> Within the presence system is the most powerful and flexible.  It is easy to see history and all the activity of your
 nodegrid.  And the nodegrid can use the presence system to figure out what nodes are present and in full &#8216;working&#8217;
 mode.</p>

<h3>HipChat</h3>

<p> Within HipChat lets everyone see and talk about the changes.  It can get noisy though, so you need
 to separate the &#8216;chatty&#8217; state changes from the &#8216;critical&#8217; ones.  An example of &#8216;critical&#8217; is when a machine realizes
 it is broken.  It is running the cron job, but something is wrong and it can tell that the &#8216;work&#8217; is not completable.
 I call this being &#8216;wedged&#8217;.  If a machine is &#8216;wedged&#8217;, it should tell people and then we can work on improving its
 DNA so it can unwedge itself in the future.  And then kill the machine.</p>

<h3>EC2</h3>

<p> By using EC2 tags you can leverage the EC2 dashboard.  I view &#8216;tags&#8217; as read-only because the ADD should not get
 attached (be dependent) on EC2, but it is helpful for visibility.</p>

<h3>Examples</h3>

<p>The following show two machines initializing through Presence, HipChat, and EC2.  The only trigger for this was
killing the existing two instances: the AutoScalingGroup automatically replaced them.</p>

<h4>Launching viewed within EC2 Dashboard</h4>

<p>Nicely the &#8216;add:&#8217; prefix makes all the properties that are most important appear on the left.  Some of the names
of concepts are intentionally alphabetically &#8216;sorted&#8217; so they appear in the correct column.</p>

<p><img src="http://markfussell.emenar.com/images/add-7/add7_ec2_cv1b.png" /></p>

<p>Click here: <a target="add7_ec2_cv1b" href="http://markfussell.emenar.com/images/add-7/add7_ec2_cv1b.png" >add7_ec2_cv1b</a> to expand.</p>

<p>The ‘stacktype’ of ‘lad1’ in the capture is short for a stack of</p>

<ul>
<li>Load Balancer</li>
<li>Application</li>
<li>Database</li>
</ul>


<h4>Working viewed within HipChat</h4>

<p><img src="http://markfussell.emenar.com/images/add-7/add7_hipchat_cv1.png" /></p>

<h4>Working viewed within Presence / SourceTree</h4>

<p><img src="http://markfussell.emenar.com/images/add-7/add7_presence_cv1.png" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Advanced Development and Delivery (ADD) [Part-6]]]></title>
    <link href="http://markfussell.emenar.com/blog/add-6/"/>
    <updated>2015-10-02T01:00:00-07:00</updated>
    <id>http://markfussell.emenar.com/blog/add-6</id>
    <content type="html"><![CDATA[<p>This is the sixth installment of describing a radically more productive development and delivery environment.</p>

<p>The first part is here: <a href="http://markfussell.emenar.com/blog/add-1/">Intro</a>.  In the previous parts I described the big picture, Vagrant and EC2,
node initialization, the one minute configuration HeartBeat, and HipChat integration.</p>

<h2>&#8216;Part&#8217; Provisioning</h2>

<p>Each node plays a singular &#8216;Part&#8217;.  A &#8216;part&#8217; is a unique combination of roles (in the chef sense) that identifies
exactly how the node should be provisioned, usually globally, but at least for each stacktype.  A standard array
of parts would be the LAMP stack:</p>

<ul>
<li> Load Balancer (lb)</li>
<li> Application Server (app)</li>
<li> Database Server  (db)</li>
</ul>


<!-- more -->


<p>The most interesting thing about parts is hooking them together.  Load balancers need to know about application servers.
Application servers need to know where the databases are.  This feature I call &#8216;presence&#8217;.  There are a lot
of fancy ways to solve &#8216;presence&#8217;.  There could be &#8216;presence&#8217; servers that servers register with.  Or &#8216;presence&#8217; servers
that poll AWS registries.  Certain products keep their &#8216;CI&#8217; (Configuration Item) information in databases: both SQL and
other kinds.</p>

<p>All of this is stupidly complex and treats the nodes as if they are idiots.  Pretty sure these nodes can be made about
as smart as a young student (say elementary school or even younger).  A young person is perfectly capable of putting
their name on a list.  And then listing some other interesting things about them.  A node can do the same.  So all
we need is a list.  The classic list for a computer?  A folder.  A folder containing files.  A file named after a node&#8217;s
unique name.  And a file containing information about the node.  Voila.  No SPOF (can have two folders stored differently),
and no additional nodes doing something stupidly simple.</p>

<h2>Demo or Die!</h2>

<p>So we already have a &#8216;HeartBeat&#8217; server, all we need are for it to write somewhere what it&#8217;s state is.  That is
quite simple:</p>

<h3>updatePresence.sh</h3>

<p>This simply writes information in ~/nodeinfo into a JSON file.  To make that JSON file a little nicer we python
format it.  What gets written into the JSON file?  Basically anything we want!  When?  Every minute!  Ta Da&#8230;
the trick is done.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'>...
</span><span class='line'>
</span><span class='line'><span class="c">#====================================================</span>
</span><span class='line'><span class="c">#=== Generate file</span>
</span><span class='line'><span class="c">#====================================================</span>
</span><span class='line'>
</span><span class='line'><span class="nb">export </span><span class="nv">INSTANCE_ID</span><span class="o">=</span><span class="s2">&quot;`cat /root/nodeinfo/instance-id.txt`&quot;</span>
</span><span class='line'><span class="nb">echo</span> <span class="nv">$INSTANCE_ID</span>
</span><span class='line'>
</span><span class='line'>cat <span class="s">&lt;&lt;EOS &gt;&gt;$PRESENCE_TEMP</span>
</span><span class='line'><span class="s">{</span>
</span><span class='line'><span class="s">&quot;filetype&quot;:&quot;nodepresence&quot;,</span>
</span><span class='line'><span class="s">&quot;value&quot;: {</span>
</span><span class='line'><span class="s">    &quot;a&quot;:&quot;a&quot;</span>
</span><span class='line'><span class="s">EOS</span>
</span><span class='line'>
</span><span class='line'><span class="nv">FILES</span><span class="o">=(</span> <span class="s2">&quot;initgitrepo&quot;</span> <span class="s2">&quot;instance-id&quot;</span> <span class="s2">&quot;nodepart&quot;</span> <span class="s2">&quot;stacktype&quot;</span> <span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">for </span>i in <span class="s2">&quot;${FILES[@]}&quot;</span>
</span><span class='line'><span class="k">do</span>
</span><span class='line'><span class="k">    </span>cat <span class="s">&lt;&lt;EOS &gt;&gt;$PRESENCE_TEMP</span>
</span><span class='line'><span class="s">    ,</span>
</span><span class='line'><span class="s">    &quot;$i&quot;:&quot;`cat /root/nodeinfo/${i}.txt`&quot;</span>
</span><span class='line'><span class="s">EOS</span>
</span><span class='line'><span class="k">done</span>
</span><span class='line'>
</span><span class='line'>cat <span class="s">&lt;&lt;EOS &gt;&gt;$PRESENCE_TEMP</span>
</span><span class='line'><span class="s">}</span>
</span><span class='line'><span class="s">}</span>
</span><span class='line'><span class="s">EOS</span>
</span><span class='line'>
</span><span class='line'>cat <span class="nv">$PRESENCE_TEMP</span> | python -mjson.tool &gt; <span class="nv">$PRESENCE_TEMP2</span>
</span><span class='line'>cat <span class="nv">$PRESENCE_TEMP2</span>
</span><span class='line'>
</span><span class='line'><span class="c">#| bash ${COMMON}/send_hipchat.sh -c green</span>
</span><span class='line'>
</span><span class='line'><span class="c">#====================================================</span>
</span><span class='line'><span class="c">#=== Switch to the presence repository and copy file</span>
</span><span class='line'><span class="c">#====================================================</span>
</span><span class='line'>
</span><span class='line'><span class="nb">pushd</span> <span class="nv">$REPO_ROOT</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> ! -d <span class="s2">&quot;$PRESENCE_REPO&quot;</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">  </span><span class="nb">echo</span> <span class="s2">&quot;git clone git@github.com:shaklee/${PRESENCE_REPO}.git&quot;</span>
</span><span class='line'>  git clone git@github.com:shaklee/<span class="k">${</span><span class="nv">PRESENCE_REPO</span><span class="k">}</span>.git
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> -d <span class="s2">&quot;$PRESENCE_REPO&quot;</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">  </span><span class="nb">cd</span> <span class="nv">$PRESENCE_REPO</span>
</span><span class='line'>  git pull
</span><span class='line'>
</span><span class='line'>  <span class="c">#Now splat it out to all the proper places</span>
</span><span class='line'>  <span class="nv">TARGETS</span><span class="o">=(</span> <span class="s2">&quot;it/presence/all&quot;</span> <span class="o">)</span>
</span><span class='line'>  <span class="k">for </span>i in <span class="s2">&quot;${TARGETS[@]}&quot;</span>
</span><span class='line'>  <span class="k">do</span>
</span><span class='line'><span class="k">    </span>mkdir -p <span class="nv">$i</span>
</span><span class='line'>    cp -f <span class="nv">$PRESENCE_TEMP2</span> <span class="nv">$i</span>/<span class="k">${</span><span class="nv">INSTANCE_ID</span><span class="k">}</span>.json
</span><span class='line'>  <span class="k">done</span>
</span><span class='line'>
</span><span class='line'><span class="k">  </span>git add .
</span><span class='line'>  git commit -m <span class="s2">&quot;Updated by $INSTANCE_ID&quot;</span>; git push
</span><span class='line'>  <span class="c">#Now need to see if this works... but the following is an easy trick in the small</span>
</span><span class='line'>  git pull; git push; git pull; git push
</span><span class='line'>
</span><span class='line'>  <span class="c">#Repeat until push succeeds</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'><span class="k">  </span><span class="nb">echo</span> <span class="s2">&quot;Not working!&quot;</span>
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="nb">popd</span>
</span></code></pre></td></tr></table></div></figure>


<p>And with the above script we get this simple and beautiful view:</p>

<p><img src="http://markfussell.emenar.com/images/add-6/add6_sourceTree_cv1.png" /></p>

<h2>Collisions</h2>

<p>OK, updating a GitHub repository every minute is not the smartest thing to do at scale&#8230; but: if the file
is the same, Git won&#8217;t do anything.  And if we want, we can always turn down the noise.</p>

<h2>Death</h2>

<p>A machine can die or be killed, so presence information could be out of date.  The solution is just to
broadcast a &#8216;HeartBeat&#8217; in either the presence repository or another repository.  Or to make sure to
check if the machine is actually responsive (e.g. HAProxy will interact with the machine to make sure it
is actually alive) vs. being present.  This final interaction is pretty critical (no Zombies in my data center),
so that is the best way to figure out who is alive and alert vs. just being present.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Advanced Development and Delivery (ADD) [Part-5]]]></title>
    <link href="http://markfussell.emenar.com/blog/add-5/"/>
    <updated>2015-10-02T01:00:00-07:00</updated>
    <id>http://markfussell.emenar.com/blog/add-5</id>
    <content type="html"><![CDATA[<p>This is the fifth installment of describing a radically more productive development and delivery environment.</p>

<p>The first part is here: <a href="http://markfussell.emenar.com/blog/add-1/">Intro</a>.  In the previous parts I described the big picture, Vagrant and EC2,
node initialization, and the one minute configuration HeartBeat.</p>

<h2>HipChat</h2>

<p>The fourth ingredient to the ADD is HipChat.  HipChat is meant to help people communicate and see the state of the world.
It is an excellent communication program with a plethora of integrations.  But for ADD the critical capability is
to mix notifications of machines with communication between people.  You can also have it be used to drive the ADD
system (kind of like a command line) but that isn&#8217;t very important since it would just make changes in GitHub
which can be made in lots of different ways.</p>

<p>The demo of this is very simple:</p>

<p><img src="http://markfussell.emenar.com/images/add-5/add5_hipchat_cv1.png" /></p>

<!-- more -->


<p>The GitHub part is an integration that works out of the box, and the AddBot1 notification is a minor addition
to the working script:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">echo</span> <span class="s2">&quot;Doing the work for ${GIT_VERSION}&quot;</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;Doing the work for ${GIT_VERSION}&quot;</span> | bash <span class="k">${</span><span class="nv">COMMON</span><span class="k">}</span>/send_hipchat.sh
</span><span class='line'>sleep 121
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;Done the work for ${GIT_VERSION}&quot;</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;Done the work for ${GIT_VERSION}&quot;</span> | bash <span class="k">${</span><span class="nv">COMMON</span><span class="k">}</span>/send_hipchat.sh -c green
</span></code></pre></td></tr></table></div></figure>


<p>So now we have &#8216;Action in GitHub&#8217; and visibility to all the activities of the machines that reacted to
that action.  Finally we can have human augmentation like &#8220;@Team New version is up on the development server&#8221;
to transform something technical to something more meaningful.  With proper use of colors, the state
of the world is fairly well communicated at a glance (e.g. Reds, Yellows, Greens, and Blues).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Advanced Development and Delivery (ADD) [Part-4]]]></title>
    <link href="http://markfussell.emenar.com/blog/add-4/"/>
    <updated>2015-10-01T03:00:00-07:00</updated>
    <id>http://markfussell.emenar.com/blog/add-4</id>
    <content type="html"><![CDATA[<p>This is the fourth installment of describing a radically more productive development and delivery environment.</p>

<p>The first part is here: <a href="http://markfussell.emenar.com/blog/add-1/">Intro</a>.  In the previous parts I described the big picture and the Vagrant and EC2 bootstrap.</p>

<h2>Node initialization</h2>

<p>The previous parts described getting Vagrant and EC2 to have an operational node.  For Vagrant it leverages &#8216;host&#8217; virtual
disk access to configure and bootstrap itself.  For EC2, it leverages CloudFormation to configure and bootstrap itself.
In both cases the very last thing the node does in the bootstrap is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd</span> /root/gitrepo/<span class="sb">`</span>cat /root/nodeinfo/initgitrepo.txt<span class="sb">`</span>
</span><span class='line'>include <span class="o">()</span> <span class="o">{</span> <span class="k">if</span> <span class="o">[[</span> -f <span class="se">\&quot;</span><span class="nv">$1</span><span class="se">\&quot;</span> <span class="o">]]</span>; <span class="k">then </span><span class="nb">source</span> <span class="se">\&quot;</span><span class="nv">$1</span><span class="se">\&quot;</span>; <span class="k">else </span><span class="nb">echo</span> <span class="se">\&quot;</span>Skipped missing: <span class="nv">$1</span><span class="se">\&quot;</span>; <span class="k">fi</span> <span class="o">}</span>
</span><span class='line'>include it/nodeinit/common/init.sh
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<p>It is an &#8216;include/source&#8217; to make sure it is at the same level as the initial bootstrap script.  For EC2 this affects
logging, so continual sourcing is preferred.  In other cases, the &#8216;source&#8217; enables sub-scripts to set values for subsequent
scripts where subshells are more isolated.</p>

<h3>init.sh</h3>

<p>The init script first figures out where it is and sets up some important paths.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="c">#===================================================</span>
</span><span class='line'><span class="c">#=== Want DIR to be root of the &#39;nodeinit&#39; directory</span>
</span><span class='line'><span class="c">#===================================================</span>
</span><span class='line'>
</span><span class='line'><span class="nb">export </span><span class="nv">DIR</span><span class="o">=</span><span class="s2">&quot;$( cd -P &quot;</span><span class="k">$(</span> dirname <span class="s2">&quot;${BASH_SOURCE[0]}&quot;</span> <span class="k">)</span><span class="s2">&quot; &amp;&amp; pwd )/../&quot;</span>
</span><span class='line'><span class="nb">export </span><span class="nv">RESOURCE</span><span class="o">=</span><span class="k">${</span><span class="nv">DIR</span><span class="k">}</span>/resource
</span><span class='line'><span class="nb">export </span><span class="nv">COMMON</span><span class="o">=</span><span class="k">${</span><span class="nv">DIR</span><span class="k">}</span>/common
</span></code></pre></td></tr></table></div></figure>


<h3>cron_1m.sh</h3>

<p>It then gets some AWS resources, sets up a shared &#8216;cron&#8217;, and so on.  I like a single &#8216;cron&#8217; job running every minute
so it is easy to understand what is going on.  This is the &#8216;heartbeat&#8217; of the server configuration infrastructure: a
server can want to change any &#8216;minute&#8217;.  They look every minute for something that makes them want to change and
then they launch an activity.  The look need to be fast: take about a second or two per &#8216;look&#8217; and not cause much load.
But the &#8216;change&#8217; does not have to be fast: it could take minutes to reconfigure based on the change.  So while
changing, the &#8216;looking&#8217; is disabled.  For example, deploying a new WAR can take a while.  The server stops looking
for new WARs when deploying a WAR.  Then starts looking again when it is back online.</p>

<p>At scale (say 100 servers) with servers all on NTP this one-minute rhythm can cause resource rushing.  To
counter that we need to &#8216;jitter&#8217; the servers so they work on a different
second of the minute, or even as much as minutes later at super-scale (1000 servers).
That is done within the cron_1m.sh script after the look has established something needs to be done.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mkdir -p /root/bin
</span><span class='line'>cp <span class="k">${</span><span class="nv">RESOURCE</span><span class="k">}</span>/cron_1m.sh /root/bin/cron_1m.sh
</span><span class='line'>chmod +x /root/bin/cron_1m.sh
</span><span class='line'>
</span><span class='line'>cat <span class="s">&lt;&lt;EOS &gt; /var/spool/cron/root</span>
</span><span class='line'><span class="s">MAILTO=&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="s">* * * * *  /root/bin/cron_1m.sh</span>
</span><span class='line'><span class="s">EOS</span>
</span></code></pre></td></tr></table></div></figure>


<h3>More specific initialization</h3>

<p>The above activities are done for any node.  They all need to have heartbeats and some other common resources.
But beyond that, it depends on the type of node and the type of stack what should be put on a particular node.
This is done by simple &#8216;includes&#8217; with the &#8216;nodeinfo&#8217; that came from the configuration.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>include <span class="k">${</span><span class="nv">DIR</span><span class="k">}</span>part/<span class="sb">`</span>cat /root/nodeinfo/nodepart.txt<span class="sb">`</span>/init.sh
</span><span class='line'>include <span class="k">${</span><span class="nv">DIR</span><span class="k">}</span>stacktype/<span class="sb">`</span>cat /root/nodeinfo/stacktype.txt<span class="sb">`</span>/init.sh
</span><span class='line'>include <span class="k">${</span><span class="nv">DIR</span><span class="k">}</span>stacktype/<span class="sb">`</span>cat /root/nodeinfo/stacktype.txt<span class="sb">`</span>/part/<span class="sb">`</span>cat /root/nodeinfo/nodepart.txt<span class="sb">`</span>/init.sh
</span></code></pre></td></tr></table></div></figure>


<p>You can see the layout in the directory picture.</p>

<p><img src="http://markfussell.emenar.com/images/add-2/vag1_20151001b.png" /></p>

<p>As of that picture, no &#8216;part&#8217; or &#8216;stacktype&#8217; exists.  So a machine that is brought up is simply a heart-beating server,
but a heart-beating server that can mutate on command every minute.</p>

<h2>What are nodes doing every minute?</h2>

<p>The next cool feature of ADD is that nodes do work based on the state of git repositories.  For any given repository, they
look for a &#8216;work.sh&#8217; file within a &#8216;nodework&#8217; directory for either all types of nodes (i.e. common again), or the specific
type of node they are.  So just like the other &#8216;include&#8217; we get:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>        bash_ifexist bin/nodework/common/work.sh
</span><span class='line'>        bash_ifexist bin/nodework/part/<span class="sb">`</span>cat /root/nodeinfo/nodepart.txt<span class="sb">`</span>/work.sh
</span><span class='line'>        bash_ifexist bin/nodework/stacktype/<span class="sb">`</span>cat /root/nodeinfo/stacktype.txt<span class="sb">`</span>/work.sh
</span><span class='line'>        bash_ifexist bin/nodework/stacktype/<span class="sb">`</span>cat /root/nodeinfo/stacktype.txt<span class="sb">`</span>/part/<span class="sb">`</span>cat /root/nodeinfo/nodepart.txt<span class="sb">`</span>/work.sh
</span></code></pre></td></tr></table></div></figure>


<p>where the only change is these are not &#8216;sourced&#8217; but executed within a sub-shell since they could do weird things to each other, and
also this enables them not to block each other (if desired).</p>

<p>All of these &#8216;work&#8217; scripts should quickly determine if anything has changed and then release themselves.  While &#8216;work&#8217; is going on,
 the main cron script is locked out.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>     <span class="k">if</span> <span class="o">[[</span> -e <span class="k">${</span><span class="nv">CURRENT_ACTION_FILE</span><span class="k">}</span> <span class="o">]]</span>; <span class="k">then</span>
</span><span class='line'>         : <span class="c">#Don&#39;t do anything until the current action completes</span>
</span></code></pre></td></tr></table></div></figure>


<h3>work.sh</h3>

<p>The main purpose of &#8216;work.sh&#8217; is to detect changes.  Any actual work will be in &#8216;work_ActualWork.sh&#8217;.  In reverse, the ActualWork is
simply:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">echo</span> <span class="s2">&quot;Doing the work for ${GIT_VERSION}&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>So a one-liner appears in the log for the cron job just to prove the &#8216;ActualWork&#8217; was done.</p>

<p>But &#8216;work.sh&#8217; has to do a few things (very quickly) to detect if there are changes of relevance.  It stores files in the &#8216;repo/.temp/add&#8217;
directory that keeps track of state.  The example &#8216;work.sh&#8217; will detect changes to the repository based on a watched &#8216;path&#8217;.  This
allows multiple things to use the same git repository but be looking at different parts.  By default they look at the root, but it
can be changed.  No matter what &#8216;path&#8217; is watched, the version of the &#8216;work&#8217; is always the version of the git repository&#8230; not the path itself.
In total, there are four &#8216;outer&#8217; states possible:</p>

<ul>
<li>The version of the work previously done is identical to the version of git now</li>
<li>The version of the work previously done is different from the version of git now, but the version of the watched path is the same</li>
<li>The version of the work previously done is different from the version of git now, and the watched path has changed</li>
<li>There is no work previously done (the first run of the work)</li>
</ul>


<p>Of the above, only the last two should trigger work.  You can branch differently based on the first run or subsequent runs, but
generally it is best to be &#8216;idempotent&#8217; with the work: you change the state of the server to a new state without caring
what the previous state is/was.</p>

<p>The &#8216;inner&#8217; state issue is the server could already be doing &#8216;ActualWork&#8217;, so you have to wait until that is done.</p>

<p>The core of the work.sh script is</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">export </span><span class="nv">WORK_VERSION</span><span class="o">=</span><span class="nv">$ADD_TEMP</span>/work.sh_VERSION
</span><span class='line'><span class="nb">export </span><span class="nv">WORK_DOING_VERSION</span><span class="o">=</span><span class="nv">$ADD_TEMP</span>/work.sh_DOING_VERSION
</span><span class='line'><span class="nb">export </span><span class="nv">WORK_WATCH_PATH</span><span class="o">=</span><span class="nv">$ADD_TEMP</span>/work.sh_WATCH_PATH.txt
</span><span class='line'>
</span><span class='line'><span class="nb">export </span><span class="nv">WORK_WATCH_VALUE</span><span class="o">=</span><span class="sb">`</span>cat <span class="nv">$WORK_WATCH_PATH</span><span class="sb">`</span>
</span><span class='line'><span class="nb">export </span><span class="nv">PREV_WORK_VERSION</span><span class="o">=</span><span class="sb">`</span>cat <span class="nv">$WORK_VERSION</span><span class="sb">`</span>
</span><span class='line'>
</span><span class='line'><span class="c">#====================================================</span>
</span><span class='line'><span class="c">#=== Now do comparison</span>
</span><span class='line'><span class="c">#====================================================</span>
</span><span class='line'>
</span><span class='line'><span class="nb">export </span><span class="nv">GIT_VERSION</span><span class="o">=</span><span class="sb">`</span>git rev-parse HEAD<span class="sb">`</span>
</span><span class='line'>
</span><span class='line'><span class="nb">export </span><span class="nv">DETECT_GIT_CHANGE</span><span class="o">=</span><span class="sb">`</span>git log --pretty<span class="o">=</span>oneline <span class="k">${</span><span class="nv">PREV_WORK_VERSION</span><span class="k">}</span>..  -- <span class="k">${</span><span class="nv">WORK_WATCH_VALUE</span><span class="k">}</span> | awk <span class="s1">&#39;{print $1}&#39;</span><span class="sb">`</span>
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;Compared ${PREV_WORK_VERSION} to ${GIT_VERSION} for ${WORK_WATCH_VALUE} and got ${DETECT_GIT_CHANGE}&quot;</span>
</span><span class='line'>
</span><span class='line'>mkdir -p <span class="k">${</span><span class="nv">ADD_TEMP</span><span class="k">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">[[</span> -n <span class="s2">&quot;${DETECT_GIT_CHANGE}&quot;</span> <span class="o">]]</span> ;
</span><span class='line'><span class="k">then</span>
</span><span class='line'><span class="k">    </span><span class="nb">echo</span> <span class="s2">&quot;Detected Change in Git Version!&quot;</span>;
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="o">[[</span> -e <span class="k">${</span><span class="nv">WORK_DOING_VERSION</span><span class="k">}</span> <span class="o">]]</span> ;
</span><span class='line'>    <span class="k">then</span>
</span><span class='line'><span class="k">       </span><span class="nb">echo</span> <span class="s2">&quot;Already doing `cat ${WORK_DOING_VERSION}`&quot;</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'><span class="k">       </span><span class="nb">echo</span> <span class="nv">$GIT_VERSION</span> &gt; <span class="k">${</span><span class="nv">WORK_DOING_VERSION</span><span class="k">}</span>
</span><span class='line'>       <span class="nb">source</span> <span class="k">${</span><span class="nv">COMMON</span><span class="k">}</span>/work_ActualWork.sh
</span><span class='line'>
</span><span class='line'>       <span class="c">#Update the state.  This also does a clean startup on first run</span>
</span><span class='line'>
</span><span class='line'>       <span class="nb">echo</span> <span class="nv">$GIT_VERSION</span> &gt; <span class="k">${</span><span class="nv">WORK_VERSION</span><span class="k">}</span>
</span><span class='line'>       <span class="nb">echo</span> <span class="nv">$WORK_WATCH_VALUE</span> &gt; <span class="k">${</span><span class="nv">WORK_WATCH_PATH</span><span class="k">}</span>
</span><span class='line'>
</span><span class='line'>       rm -fr <span class="k">${</span><span class="nv">WORK_DOING_VERSION</span><span class="k">}</span>
</span><span class='line'>    <span class="k">fi</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'><span class="k">    </span><span class="nb">echo</span> <span class="s2">&quot;No change, move along&quot;</span>;
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Speed!</h3>

<p>How fast does this detection take? Basically one second for it to figure out which of the variations it is in, plus the time of the &#8216;git pull&#8217;.  With a
&#8216;small&#8217; server and a small change, this a single second and basically no load:</p>

<h4>Difference detected: start the work</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cron_1m.sh: Start  20151002-013401
</span><span class='line'>~/gitrepo/repo2_petulant-cyril ~
</span><span class='line'>
</span><span class='line'><span class="o">==</span>&gt; /root/log/cron_1m.sh_error.txt &lt;<span class="o">==</span>
</span><span class='line'>From github.com:shaklee/repo2_petulant-cyril
</span><span class='line'>   57f20ff..6f85e76  master     -&gt; origin/master
</span><span class='line'>
</span><span class='line'><span class="o">==</span>&gt; /root/log/cron_1m.sh_log.txt &lt;<span class="o">==</span>
</span><span class='line'>Updating 57f20ff..6f85e76
</span><span class='line'>Fast-forward
</span><span class='line'> bin/nodework/common/work.sh | 2 ++
</span><span class='line'> 1 file changed, 2 insertions<span class="o">(</span>+<span class="o">)</span>
</span><span class='line'>Compared 57f20ff734c8836fa34f938bcc540a89bad9215c to 6f85e76a507ce599f42762ad7bf4ae639884ae12 <span class="k">for  </span>and got 6f85e76a507ce599f42762ad7bf4ae639884ae12
</span><span class='line'>Detected Change in Git Version!
</span><span class='line'>Starting ActualWork at 20151002-013402
</span><span class='line'>Doing the work <span class="k">for </span>6f85e76a507ce599f42762ad7bf4ae639884ae12
</span></code></pre></td></tr></table></div></figure>


<h4>Difference detected (but already doing something)</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cron_1m.sh: Start  20151002-012301
</span><span class='line'>~/gitrepo/repo2_petulant-cyril ~
</span><span class='line'>Already up-to-date.
</span><span class='line'>Compared 7916053bb9f8bc3d952588a87a48da96dda7abe6 to 57f20ff734c8836fa34f938bcc540a89bad9215c <span class="k">for  </span>and got 57f20ff734c8836fa34f938bcc540a89bad9215c
</span><span class='line'>Detected Change in Git Version!
</span><span class='line'>Already doing 57f20ff734c8836fa34f938bcc540a89bad9215c
</span><span class='line'>Skipped missing: bin/nodework/part/controlnode/work.sh
</span><span class='line'>Skipped missing: bin/nodework/stacktype/ControlServer1/work.sh
</span><span class='line'>Skipped missing: bin/nodework/stacktype/ControlServer1/part/controlnode/work.sh
</span><span class='line'>~
</span><span class='line'>cron_1m.sh: Finish 20151002-012302
</span></code></pre></td></tr></table></div></figure>


<h4>No Difference</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cron_1m.sh: Start  20151002-012801
</span><span class='line'>~/gitrepo/repo2_petulant-cyril ~
</span><span class='line'>Already up-to-date.
</span><span class='line'>Compared 57f20ff734c8836fa34f938bcc540a89bad9215c to 57f20ff734c8836fa34f938bcc540a89bad9215c <span class="k">for  </span>and got
</span><span class='line'>No change, move along
</span><span class='line'>Skipped missing: bin/nodework/part/controlnode/work.sh
</span><span class='line'>Skipped missing: bin/nodework/stacktype/ControlServer1/work.sh
</span><span class='line'>Skipped missing: bin/nodework/stacktype/ControlServer1/part/controlnode/work.sh
</span><span class='line'>~
</span><span class='line'>cron_1m.sh: Finish 20151002-012802
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Advanced Development and Delivery (ADD) [Part-3]]]></title>
    <link href="http://markfussell.emenar.com/blog/add-3/"/>
    <updated>2015-10-01T02:00:00-07:00</updated>
    <id>http://markfussell.emenar.com/blog/add-3</id>
    <content type="html"><![CDATA[<p>This is the third installment of describing a radically more productive development and delivery environment.</p>

<p>The first part is here: <a href="http://markfussell.emenar.com/blog/add-1/">Intro</a>.  In the previous parts I described the big picture and the
first part of the Vagrant bootstrap.</p>

<h2>EC2</h2>

<p>The Vagrant bootstrap occurred through &#8216;bash&#8217; files that shaped (put shape information into files) and
the &#8216;init&#8217; itself to get access to the repo (repo2) that contains the true configuration.  For EC2
the same thing happens within a CloudFormation template.  The code of the &#8216;init&#8217; is almost identical, but because
it is in a JSON file there is a lot of noise as the string gets concatenated together.</p>

<!-- more -->


<h3>Shaping</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="s2">&quot;TemplateConstant&quot;</span> <span class="err">:</span> <span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;stacktype&quot;</span> <span class="p">:</span> <span class="p">{</span> <span class="nt">&quot;value&quot;</span> <span class="p">:</span> <span class="s2">&quot;ControlServer1&quot;</span> <span class="p">},</span>
</span><span class='line'>  <span class="nt">&quot;initgitrepo&quot;</span> <span class="p">:</span> <span class="p">{</span> <span class="nt">&quot;value&quot;</span> <span class="p">:</span> <span class="s2">&quot;repo2_petulant-cyril&quot;</span> <span class="p">},</span>
</span><span class='line'>  <span class="nt">&quot;nodepart&quot;</span> <span class="p">:</span> <span class="p">{</span> <span class="nt">&quot;value&quot;</span> <span class="p">:</span> <span class="s2">&quot;controlnode&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span><span class="err">,</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'>        <span class="s2">&quot;files&quot;</span> <span class="err">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="nt">&quot;/root/nodeinfo/stacktype.txt&quot;</span> <span class="p">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="nt">&quot;content&quot;</span> <span class="p">:</span> <span class="p">{</span> <span class="nt">&quot;Fn::Join&quot;</span> <span class="p">:</span> <span class="p">[</span><span class="s2">&quot;&quot;</span><span class="p">,</span> <span class="p">[</span>
</span><span class='line'>              <span class="p">{</span> <span class="nt">&quot;Fn::FindInMap&quot;</span> <span class="p">:</span> <span class="p">[</span> <span class="s2">&quot;TemplateConstant&quot;</span><span class="p">,</span> <span class="s2">&quot;stacktype&quot;</span><span class="p">,</span> <span class="s2">&quot;value&quot;</span> <span class="p">]</span> <span class="p">},</span>
</span><span class='line'>              <span class="s2">&quot;&quot;</span>
</span><span class='line'>            <span class="p">]]},</span>
</span><span class='line'>            <span class="nt">&quot;mode&quot;</span>  <span class="p">:</span> <span class="s2">&quot;000700&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="nt">&quot;owner&quot;</span> <span class="p">:</span> <span class="s2">&quot;root&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="nt">&quot;group&quot;</span> <span class="p">:</span> <span class="s2">&quot;root&quot;</span>
</span><span class='line'>          <span class="p">},</span>
</span><span class='line'>          <span class="nt">&quot;/root/nodeinfo/initgitrepo.txt&quot;</span> <span class="p">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="nt">&quot;content&quot;</span> <span class="p">:</span> <span class="p">{</span> <span class="nt">&quot;Fn::Join&quot;</span> <span class="p">:</span> <span class="p">[</span><span class="s2">&quot;&quot;</span><span class="p">,</span> <span class="p">[</span>
</span><span class='line'>              <span class="p">{</span> <span class="nt">&quot;Fn::FindInMap&quot;</span> <span class="p">:</span> <span class="p">[</span> <span class="s2">&quot;TemplateConstant&quot;</span><span class="p">,</span> <span class="s2">&quot;initgitrepo&quot;</span><span class="p">,</span> <span class="s2">&quot;value&quot;</span> <span class="p">]</span> <span class="p">},</span>
</span><span class='line'>              <span class="s2">&quot;&quot;</span>
</span><span class='line'>            <span class="p">]]},</span>
</span><span class='line'>            <span class="nt">&quot;mode&quot;</span>  <span class="p">:</span> <span class="s2">&quot;000700&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="nt">&quot;owner&quot;</span> <span class="p">:</span> <span class="s2">&quot;root&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="nt">&quot;group&quot;</span> <span class="p">:</span> <span class="s2">&quot;root&quot;</span>
</span><span class='line'>          <span class="p">},</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Init</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'>    <span class="s2">&quot;UserData&quot;</span>       <span class="err">:</span> <span class="p">{</span> <span class="nt">&quot;Fn::Base64&quot;</span> <span class="p">:</span> <span class="p">{</span> <span class="nt">&quot;Fn::Join&quot;</span> <span class="p">:</span> <span class="p">[</span><span class="s2">&quot;&quot;</span><span class="p">,</span> <span class="p">[</span>
</span><span class='line'>      <span class="s2">&quot;#!/bin/bash -v\n&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;yum update -y aws-cfn-bootstrap\n&quot;</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>      <span class="s2">&quot;# Helper function\n&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;function error_exit\n&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;{\n&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;  /opt/aws/bin/cfn-signal -e 1 -r \&quot;$1\&quot; &#39;&quot;</span><span class="p">,</span> <span class="p">{</span> <span class="nt">&quot;Ref&quot;</span> <span class="p">:</span> <span class="s2">&quot;WaitHandle&quot;</span> <span class="p">},</span> <span class="s2">&quot;&#39;\n&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;  exit 1\n&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;}\n&quot;</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>      <span class="s2">&quot;# Install LAMP packages\n&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;/opt/aws/bin/cfn-init -s &quot;</span><span class="p">,</span> <span class="p">{</span> <span class="nt">&quot;Ref&quot;</span> <span class="p">:</span> <span class="s2">&quot;AWS::StackName&quot;</span> <span class="p">},</span> <span class="s2">&quot; -r PrimaryLaunchConfig &quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;    --access-key &quot;</span><span class="p">,</span>  <span class="p">{</span> <span class="nt">&quot;Ref&quot;</span> <span class="p">:</span> <span class="s2">&quot;HostKeys&quot;</span> <span class="p">},</span>
</span><span class='line'>      <span class="s2">&quot;    --secret-key &quot;</span><span class="p">,</span> <span class="p">{</span><span class="nt">&quot;Fn::GetAtt&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;HostKeys&quot;</span><span class="p">,</span> <span class="s2">&quot;SecretAccessKey&quot;</span><span class="p">]},</span>
</span><span class='line'>      <span class="s2">&quot;    --region &quot;</span><span class="p">,</span> <span class="p">{</span> <span class="nt">&quot;Ref&quot;</span> <span class="p">:</span> <span class="s2">&quot;AWS::Region&quot;</span> <span class="p">},</span> <span class="s2">&quot; || error_exit &#39;Failed to run cfn-init&#39;\n&quot;</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>      <span class="s2">&quot;yum -y install git \n&quot;</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>      <span class="s2">&quot;echo &#39;Fetch s3cmd to get credentials&#39; \n&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;mkdir /root/download/ \n&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;pushd /root/download/ \n&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;git clone git://github.com/s3tools/s3cmd.git \n&quot;</span><span class="p">,</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Launching and Clusters</h3>

<p>A CloudFormation can provision a single server, but it is used more for clusters.  Instead of creating a server, we create
a server definition and then say how many servers we want.  The &#8216;PrimaryServerGroup&#8217; defines this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="s2">&quot;PrimaryServerGroup&quot;</span> <span class="err">:</span> <span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;Type&quot;</span> <span class="p">:</span> <span class="s2">&quot;AWS::AutoScaling::AutoScalingGroup&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;Properties&quot;</span> <span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;Tags&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>      <span class="p">{</span> <span class="nt">&quot;Key&quot;</span><span class="p">:</span> <span class="s2">&quot;add:stacktype&quot;</span><span class="p">,</span> <span class="nt">&quot;Value&quot;</span><span class="p">:</span> <span class="p">{</span> <span class="nt">&quot;Fn::FindInMap&quot;</span> <span class="p">:</span> <span class="p">[</span> <span class="s2">&quot;TemplateConstant&quot;</span><span class="p">,</span> <span class="s2">&quot;stacktype&quot;</span><span class="p">,</span> <span class="s2">&quot;value&quot;</span> <span class="p">]</span> <span class="p">},</span> <span class="nt">&quot;PropagateAtLaunch&quot;</span> <span class="p">:</span> <span class="s2">&quot;true&quot;</span> <span class="p">},</span>
</span><span class='line'>      <span class="p">{</span> <span class="nt">&quot;Key&quot;</span><span class="p">:</span> <span class="s2">&quot;add:nodepart&quot;</span><span class="p">,</span> <span class="nt">&quot;Value&quot;</span><span class="p">:</span> <span class="p">{</span> <span class="nt">&quot;Fn::FindInMap&quot;</span> <span class="p">:</span> <span class="p">[</span> <span class="s2">&quot;TemplateConstant&quot;</span><span class="p">,</span> <span class="s2">&quot;nodepart&quot;</span><span class="p">,</span> <span class="s2">&quot;value&quot;</span> <span class="p">]</span> <span class="p">},</span> <span class="nt">&quot;PropagateAtLaunch&quot;</span> <span class="p">:</span> <span class="s2">&quot;true&quot;</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">],</span>
</span><span class='line'>    <span class="nt">&quot;AvailabilityZones&quot;</span> <span class="p">:</span> <span class="p">{</span> <span class="nt">&quot;Fn::GetAZs&quot;</span> <span class="p">:</span> <span class="s2">&quot;&quot;</span> <span class="p">},</span>
</span><span class='line'>    <span class="nt">&quot;LaunchConfigurationName&quot;</span> <span class="p">:</span> <span class="p">{</span> <span class="nt">&quot;Ref&quot;</span> <span class="p">:</span> <span class="s2">&quot;PrimaryLaunchConfig&quot;</span> <span class="p">},</span>
</span><span class='line'>    <span class="nt">&quot;MinSize&quot;</span> <span class="p">:</span> <span class="s2">&quot;1&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;MaxSize&quot;</span> <span class="p">:</span> <span class="s2">&quot;1&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;DesiredCapacity&quot;</span> <span class="p">:</span> <span class="s2">&quot;1&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span><span class="err">,</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that it ends with &#8216;1&#8217;, &#8216;1&#8217;, &#8216;1&#8217; meaning this is just a single server.  But those numbers can be changed at any time.</p>

<p>Given the DesiredCapacity is &#8216;1&#8217;, if you ever kill a server, a new one will be spun up.</p>

<h3>EC2 Keypairs</h3>

<p>Another difference of the EC2 model is that EC2 holds onto the keypair that is used for logging into it.  So that information
doesn&#8217;t need to be exposed.  And further, the EC2 version creates a special &#8216;IAM&#8217; agent for the machine.</p>

<h3>EC2 Dashboard</h3>

<p>The dashboard shows some standard EC2 properties along with the add:stacktype and add:nodepart.  The nodepart shows the
kind of node it is (say a load-balancer vs. a game server) and is used within the bootstrap to put the right software
onto the machine.  The &#8216;nodepart&#8217; and the &#8216;stacktype&#8217; are the core DNA switches of a server.  Later we will add in
&#8216;federation&#8217; which primarily configures the size of the node (e.g. no &#8216;small&#8217; in production)</p>

<p><img src="http://markfussell.emenar.com/images/add-3/add3_ec2_cv1.png" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Advanced Development and Delivery (ADD) [Part-2]]]></title>
    <link href="http://markfussell.emenar.com/blog/add-2/"/>
    <updated>2015-10-01T01:00:00-07:00</updated>
    <id>http://markfussell.emenar.com/blog/add-2</id>
    <content type="html"><![CDATA[<p>This is the second installment of describing a radically more productive development and delivery environment.</p>

<p>The first part is here: <a href="http://markfussell.emenar.com/blog/add-1/">Intro</a>, but to summarize: since the 1970s, the most productive way
to develop and deliver software was present in Smalltalk, Lisp, and other languages (Mesa/Cedar at Xerox)
by using a very simple and powerful model.  You take a computer with a fully running environment, you tweak it,
and then you clone that.  This way you: (a) minimize what could go wrong, and (b) maximize what will continue to work.
It is very tangible and very instructive (you have full source for everything that is running).  You tweak other
people&#8217;s masterpieces until they do what you want, and you learn from their masterpieces to create your own.</p>

<h2>ADD: How Better?</h2>

<p>As described before, ADD has four ingredients:</p>

<ul>
<li>Amazon EC2 <a href="http://aws.amazon.com/">http://aws.amazon.com/</a></li>
<li>Amazon S3  <a href="http://aws.amazon.com/">http://aws.amazon.com/</a></li>
<li>GitHub.com <a href="http://github.com/">http://github.com/</a></li>
<li>HipChat    <a href="http://HipChat.com/">http://HipChat.com/</a></li>
</ul>


<p>And these are hooked together to enable &#8216;Changers&#8217;, &#8216;Watchders&#8217;, and &#8216;Machines&#8217; to be super-productive.  How
is the ADD <em>more productive</em> than the tweak and clone model?  It is because it solves the core problems
of the clone model:</p>

<ul>
<li>How do we clone to <em>different</em> environments?  Different hardware or configuration changes?</li>
<li>How do we reduce the amount of information we have to clone?</li>
<li>How do we reduce the time it takes to transport the clone?</li>
<li>How do we know what version of the clone is on any machine?</li>
<li>How do we create thousands of clones?</li>
<li>How do we know what is different about the different clones?</li>
<li>&#8230;</li>
</ul>


<!-- more -->


<p>The first three ingredients are the most powerful and enables a fantastic improvement to the tweak and clone model.
The last ingredient is mainly for people to be able to enjoy the ADD more easily.  It is like the &#8216;salt-to-taste&#8217;
and how much you integrate HipChat in with the rest of the ecosystem is up to your team.  But the more it is integrated,
the more your team will know what is going on, the more easily your team will solve problems/issues, and the more easily
you will onboard new people.</p>

<h2>ADD: GitHub</h2>

<p>GitHub will become your primary resource for <em>everything</em> related to &#8216;information&#8217;.  Human notes&#8230; go into GitHub
in Markdown format (like this blog).  Meeting notes.  GitHub.  Images to go with Meeting notes.  GitHub.  Your first,
most important, repository will be called &#8216;repo1&#8217; and will be all the notes you want the team to see.  No more
arguing about the best Wiki, blogger, file store, etc.  The answer will always be the same.  It is in GitHub.  Because
<em>everything</em> is in GitHub.</p>

<p>Why?  Because it is simple.  It is accessible.  It is powerful.  Keeps history.  Takes almost no space.
It works offline (on an airplane).  And it works with multiple writers.  And if GitHub dies&#8230;
you have a complete copy of everything you need to bring up your own &#8216;Git&#8217;.  Asking &#8216;Why?&#8217; is silly.  First
move to GitHub for all of this, and then ask &#8216;Why?&#8217; to everything else.</p>

<h2>ADD: S3 : Annexed Repositories</h2>

<p>Git and GitHub are not good with large binary assets.  They get stored in a notably raw way and just make the
repository huge for no benefit.  So don&#8217;t store large binary assets in GitHub.  Instead store a reference to
the binary object up in S3.  Retrieve it as needed.  See <a href="http://markfussell.emenar.com/blog/git-about-everything-annex">Annex</a></p>

<h2>ADD: EC2 and Vagrant and GitHub and S3</h2>

<p>Using EC2 and Vagrant with a &#8216;PushMe-PullYou&#8217; model (see <a href="http://markfussell.emenar.com/blog/git-about-everything-it-automation-2">PushMePullYou</a>)
solves a host of development, delivery, and operations issues.  The benefits are:</p>

<ul>
<li>Complete version control of machines – both operations and developers&#8217; machines (or part of a developers&#8217; machines)</li>
<li>A very simple model that enables machines to be provisioned rapidly and to change their state every minute (if needed)</li>
<li>An impressive fan-out of activity</li>
<li>An ability to work offline (say GitHub goes down) or to have complete redundancy (use both GitHub and BitBucket to avoid SPOF)</li>
<li>Inherently no SPOF</li>
<li>Dependent on <em>nothing</em> - Not EC2, Not Vagrant, not GitHub, not S3.  These may be gold standards, but they can all be swapped out</li>
</ul>


<p>This is where the ADD just shoots through the roof.  The ADD uses particular technology to show &#8220;How it is done&#8221; and
get you doing it right.  But it is not dependent on those technologies.  No Chef.  Unless you want it (and I recommend &#8216;Solo&#8217;).
No Linux unless you want it.  No Grails or Groovy unless you want it.  Use Google Compute if you want to.  Or even your
own Big Iron.  The ADD is a set of tools and methods that work well together and is most easily seen with the Gold Standard.
But it is beyond them: like a mathematical formula (the Golden Ratio) that can be present in many forms.</p>

<h2>Demo or Die!</h2>

<p>The core demo for this article will walk through bringing up a server on EC2 <em>and</em> Vagrant.  If you are not familiar
with EC2 and Vagrant, please read some of my other articles or meeting notes, or look to the web for resources.</p>

<h3>Vagrant</h3>

<p>The demo in Vagrant is slightly simpler than in EC2 because you are dealing with a machine at a time.  On EC2 you
should be thinking &#8216;Clusters&#8217; of machines that work together in &#8216;Federations&#8217;, and the technology to do that is
more complicated and more EC2-centric.</p>

<p>In Vagrant, you have a &#8216;Box&#8217; definition and then an actual virtual instance.  To provision an instance you have
to &#8216;init&#8217; it, bring it up, and then configure it.  Except you don&#8217;t.  As long as the instance knows how to
bootstrap itself.  Demo:</p>

<h4>Vagrantfile</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">provision</span> <span class="s2">&quot;shell&quot;</span><span class="p">,</span> <span class="ss">inline</span><span class="p">:</span> <span class="o">&lt;&lt;-</span><span class="no">SHELL</span>
</span><span class='line'><span class="sh">     su root</span>
</span><span class='line'><span class="sh">     source /vagrant/resource/centos7a_cf2_ControlServer1.sh</span>
</span><span class='line'><span class="sh">     source /vagrant/resource/centos7a_cred_bot1.sh</span>
</span><span class='line'><span class="sh">     source /vagrant/resource/centos7a_boot1.sh</span>
</span><span class='line'><span class="no">  SHELL</span>
</span></code></pre></td></tr></table></div></figure>


<p>As the last step of the Vagrantfile, the (linux) server does three things:</p>

<ul>
<li>It &#8216;shapes&#8217; itself to be a ControlServer</li>
<li>It &#8216;shapes&#8217; itself to be &#8216;bot1&#8217; for it&#8217;s credentials</li>
<li>It configures itself with a boot script</li>
</ul>


<p>By the end of the boot script it will be fully alive and running.  Watching for changes to repositories that
indicate it should do something.  You should never have to SSH into the machine&#8230; ever.  You can to look around
(like the Magic Schoolbus) but you should treat it like it is a living creature and <em>never</em> touch anything inside
it.  If you have to touch something, fix the &#8216;DNA&#8217; (that boot script), kill the server, and launch a new one.</p>

<p>Given this is a Vagrant file on the developer&#8217;s machine, they can certainly feel free to fiddle with things.  But that is
to learn to <em>understand</em> the server.  Some EC2 servers may even be for &#8216;fiddling&#8217;.  But QA and production servers should
never be touched and should only be looked at if they are confusing people (who already understand the fiddling and Vagrant servers).</p>

<p>Both &#8216;ControlServer1.sh&#8217; and &#8216;cred_bot1.sh&#8217; simply put information into files under &#8216;/root/nodeinfo/&#8217;.  This is an
amazingly flexible approach that works very simply for Vagrant and EC2.</p>

<h4>ControlServer1.sh</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash -v</span>
</span><span class='line'>
</span><span class='line'><span class="nb">export </span><span class="nv">stacktype</span><span class="o">=</span><span class="s2">&quot;ControlServer1&quot;</span>
</span><span class='line'><span class="nb">export </span><span class="nv">initgitrepo</span><span class="o">=</span><span class="s2">&quot;repo2_petulant-cyril&quot;</span>
</span><span class='line'><span class="nb">export </span><span class="nv">nodepart</span><span class="o">=</span><span class="s2">&quot;controlnode&quot;</span>
</span><span class='line'>
</span><span class='line'>mkdir /root/nodeinfo
</span><span class='line'><span class="nb">echo</span> <span class="nv">$stacktype</span> &gt; /root/nodeinfo/stacktype.txt
</span><span class='line'><span class="nb">echo</span> <span class="nv">$initgitrepo</span> &gt; /root/nodeinfo/initgitrepo.txt
</span><span class='line'><span class="nb">echo</span> <span class="nv">$nodepart</span> &gt; /root/nodeinfo/nodepart.txt
</span></code></pre></td></tr></table></div></figure>


<h4>cred_bot1.sh</h4>

<p>The actual version of this would contain real credential information.  The actual version would be developer-specific and not in version control.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash -v</span>
</span><span class='line'>
</span><span class='line'><span class="nb">export </span><span class="nv">access_key</span><span class="o">=</span><span class="s2">&quot;access_key&quot;</span>
</span><span class='line'><span class="nb">export </span><span class="nv">secret_key</span><span class="o">=</span><span class="s2">&quot;secret_key&quot;</span>
</span><span class='line'><span class="nb">export </span><span class="nv">keyname</span><span class="o">=</span><span class="s2">&quot;keyname&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> <span class="nv">$access_key</span> &gt; /root/nodeinfo/access_key.txt
</span><span class='line'><span class="nb">echo</span> <span class="nv">$secret_key</span> &gt; /root/nodeinfo/secret_key.txt
</span><span class='line'><span class="nb">echo</span> <span class="nv">$keyname</span> &gt; /root/nodeinfo/keyname.txt
</span><span class='line'>
</span><span class='line'>cat &gt;&gt; /root/.s3cfg <span class="s">&lt;&lt;EOS</span>
</span><span class='line'><span class="s">[default]</span>
</span><span class='line'><span class="s">access_key = $access_key</span>
</span><span class='line'><span class="s">secret_key = $secret_key</span>
</span><span class='line'>
</span><span class='line'><span class="s">EOS</span>
</span></code></pre></td></tr></table></div></figure>


<h4>centos7a_boot1.sh</h4>

<p>This script mirrors most of how EC2 works: we need this machine to be able to checkout a repository from GitHub but
we only have Amazon credentials.  So we put the full credentials into S3 and check them out.  Then we can clone
the &#8216;repo2&#8217; provisioning repo and go from there.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash -v</span>
</span><span class='line'>
</span><span class='line'>yum -y install git
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> <span class="s1">&#39;Fetch s3cmd to get credentials&#39;</span>
</span><span class='line'>mkdir /root/download/
</span><span class='line'><span class="nb">pushd</span> /root/download/
</span><span class='line'>git clone git://github.com/s3tools/s3cmd.git
</span><span class='line'><span class="nb">cd </span>s3cmd
</span><span class='line'>git checkout a91c40fcd14772fa48297e676c8c6efa1aabc3c0
</span><span class='line'>python --version
</span><span class='line'>python setup.py install
</span><span class='line'>mkdir /root/bin/
</span><span class='line'>mv /root/download/s3cmd /root/bin/s3cmd
</span><span class='line'><span class="nb">popd</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> <span class="s1">&#39;Retrieve SSH keys for Github&#39;</span>
</span><span class='line'><span class="nb">pushd</span> /root/.ssh
</span><span class='line'>/root/bin/s3cmd/s3cmd --config /root/.s3cfg get s3://gapshaklee/it/key/shakbot1key2/*
</span><span class='line'>chmod 600 id*
</span><span class='line'><span class="nb">cd</span> /root
</span><span class='line'>ssh -v -o <span class="nv">StrictHostKeyChecking</span><span class="o">=</span>no -T git@github.com
</span><span class='line'>
</span><span class='line'>mkdir /root/gitrepo
</span><span class='line'><span class="nb">cd</span> /root/gitrepo
</span><span class='line'>git clone git@github.com:shaklee/<span class="sb">`</span>cat /root/nodeinfo/initgitrepo.txt<span class="sb">`</span>.git
</span><span class='line'>
</span><span class='line'><span class="nb">cd</span> /root/gitrepo/<span class="sb">`</span>cat /root/nodeinfo/initgitrepo.txt<span class="sb">`</span>
</span><span class='line'>include <span class="o">()</span> <span class="o">{</span> <span class="k">if</span> <span class="o">[[</span> -f <span class="se">\&quot;</span><span class="nv">$1</span><span class="se">\&quot;</span> <span class="o">]]</span>; <span class="k">then </span><span class="nb">source</span> <span class="se">\&quot;</span><span class="nv">$1</span><span class="se">\&quot;</span>; <span class="k">else </span><span class="nb">echo</span> <span class="se">\&quot;</span>Skipped missing: <span class="nv">$1</span><span class="se">\&quot;</span>; <span class="k">fi</span> <span class="o">}</span>
</span><span class='line'>include it/nodeinit/common/init.sh
</span><span class='line'>
</span><span class='line'><span class="c">#Zzzzz....</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Directory Layout</h4>

<p>An image of the directory structure is below.  The little-meaning but organized name &#8216;repo2&#8217; is augmented with a human suffix &#8216;petulant-cyril&#8217;
to make it unique and memorable. &#8216;repo2&#8217; is always the first operations repo and &#8216;repo3&#8217; is always the first development repo.
The suffix is generated by GitHub or other name generators.</p>

<p>The layout of the directory contains a few things:</p>

<ul>
<li> A &#8216;bin&#8217; that contains scripts that can be run within this repository.  The &#8216;deflateAll.sh&#8217; script is important enough to be put in the root, but the rest are inside &#8216;bin&#8217;.</li>
<li> All things other than the README and deflatAll should be in consistent subdirectories.  The &#8216;s3info&#8217; is for the annex.  And &#8216;it&#8217; is for everything related to being it.  &#8216;src&#8217; and &#8216;test&#8217; are meaningless at the root level and should not be checked in.</li>
<li> You can see the &#8216;node&#8217; folders.  A &#8216;node&#8217; is a virtual server (Chef and others terminology).  &#8216;nodeaws&#8217; is for aws related node configuration.  &#8216;nodeinit&#8217; is common.  &#8216;nodevag&#8217; is for vagrant.  &#8216;resource&#8217; contains resourceds in general if under &#8216;it&#8217; and for something more specific if lower</li>
<li> folder names are never capitalized or pluralized to avoid inter-operating-system issues.  File names can be any format, but I use augmented CamelCase (with snakes) or snake_case depending on the situation.</li>
<li> You can see the annexed files in the &#8216;/it/resource&#8217; folder.  They are all &#8216;50 bytes&#8217;</li>
</ul>


<p><img src="http://markfussell.emenar.com/images/add-2/vag1_20151001b.png" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Advanced Development and Delivery (ADD)]]></title>
    <link href="http://markfussell.emenar.com/blog/add-1/"/>
    <updated>2015-09-24T01:00:00-07:00</updated>
    <id>http://markfussell.emenar.com/blog/add-1</id>
    <content type="html"><![CDATA[<p>I have been paid to develop and deliver software since about 1980.  That is 35 years of professional experience.
When I started in 1980 there were a lot of &#8216;old timers&#8217; who had been around since 1965 or so.  They were 15 years
ahead of me, and even after finishing college, I had less than ten years to their twenty or so.  This was both
intimidating but also very helpful: after college my main programming language was Smalltalk (ParcPlace, Digitalk, etc.),
which included full source to everything.  So the &#8216;masters&#8217; would write masterpieces of code, and I would read them.  And then
try to write my own beautiful things leveraging the masterpieces.  I was late to the party, but could learn quickly.</p>

<p>I also have one other unusual advantage: I do startups.  Lots of startups (<a href="http://SlumsOfPaloAlto.com/">http://SlumsOfPaloAlto.com/</a>).  A total of ten software startups over a period of
a bit more than a decade.  Each of these startups failed for one reason or another, but each one <em>hugely</em> progressed in
how good my development team ran.  Eight, nine, and ten were <em>crazy</em> productive: I would run production servers for the
whole company at the same time that I built out the product.  Alone.  And generally way faster than the product management
team could keep up.  At PeerCase the product team actually asked me to <em>slow down</em> delivery so they could ponder what
they wanted for longer.  I literally went to Disney World during ASH (a medical conference) to prevent myself from
releasing new features I knew they wanted.  I was paid to <em>not work</em> (well, I was contracting at the time, so I stopped the
hourly billing clock, but my project bonus was the same).</p>

<h2>10x Productivity</h2>

<p>Besides doing startups, I also consult for companies.  I try to help them improve their development methods, usually by at least 4x if not 10x.
A lot of times, people don&#8217;t believe you can improve things to &#8216;10x&#8217; the productivity of the current team using new
development and delivery techniques.  At one company, the CIO and a number of other executives believed me, but I had to convince
a lot more stakeholders.  So two amigos and I sent me into the trenches.  I started taking projects estimated as two-developers, six-months,
and doing them in one month.  Part time.  That is more than 12x productivity.  Realistically it was likely about 20x the productivity
because the teams tend to miss their estimates (they go over).</p>

<!-- more -->


<p>Then for fun, I was sent into the trenches again but this time had to use <em>some</em> of their development methods.  Still way faster,
but back down to 10x or a bit better.  As the trenches became &#8220;less mine&#8221; and &#8220;more theirs&#8221; I would slow down more and more.
Eventually everyone tired of each other and the experiments stopped.</p>

<p>Bizarrely, this company that saw the 20x&#8230; continues to use the slow, unreliable, method of development.  The workers may have
been scared that the company would only need one in ten of them if they changed to a better method.</p>

<h2>Development Stagnation</h2>

<p>Again, I have been doing this for 35 years.  My skill as a developer has improved over that time, and I now view myself as an &#8216;8&#8217;
where each increase from &#8216;0&#8217; represents a doubling of business productivity.  So I am 256 times as productive as a &#8216;0&#8217;, and 16 times
as productive as a &#8216;4&#8217;.  Stephen Wolfram, Bill Joy, and others are above me, but there are not a lot of people up there anymore.</p>

<p>Getting to be a &#8216;4&#8217; involves understanding how to program.  Getting to a &#8216;6&#8217; involves understanding business needs.  But getting to an &#8216;8&#8217;
involved an incredible / revolutionary change to how software is developed and delivered.  For most of my career, getting to an &#8216;8&#8217;
was not possible.  Or at least the scale had to be different (i.e. add 50% for each number vs. doubling).</p>

<p>The problem was that software development had made <em>absolutely no progress</em> for 40+ years.  &#8220;You lie!&#8221; people claim.  &#8220;We build software very
differently then we used to!&#8221; they say.  Yes, <em>some people</em> have made progress.  But it was people doing it wrong for 40+ years.  The
people who did it right (Xerox PARC, MIT&#8217;s Lisp group, Xerox El Segundo, Tektronics, etc.) were buzzing along happily with a 4-10x speed
advantage over the rest of the industry.</p>

<p>What is this amazing way to build software?  Well, for 40+ years, the best way to write software was to take a working computer and tweak it.
Then clone that. Voila: you have a new capability on all your computers.  Testing is trivial.  Demoing is trivial.  Fixing
is trivial.  Tweak.  Clone.  Repeat.  Smalltalk, Lisp Machines, Xerox Stars, and so on all used this model.  And they were
blazingly fast to develop on.  And to learn how to develop on.</p>

<p>If you wrote software any way different from that, you were just punishing yourself.  Your software would regress because
you touched too much and broke things.  Your software would take too long to write and be buggy because you wrote it
from scratch instead of tweaking something that worked.  Your software would not do what the business wanted because
you spent months writing it instead of hours tweaking something that was close.  Pain&#8230; pain&#8230; pain&#8230;</p>

<p>When I shifted to Java, I dropped to a &#8216;6&#8217; from an &#8216;8&#8217; in Smalltalk.  Lots of developers hated leaving Smalltalk
because of that.  But in my case, I cared about the libraries and people who were moving into Java.  It was not
a great language, but it had a lot of potential.  And Smalltalk imploded when Java was released for free.</p>

<h2>Automated Testing</h2>

<p>So I am in this crappy new language, dealing with jars/libraries (usually without source), deploying to containers, building out
linux servers in data centers, and trying to make this whole thing scale to millions of users and international
development teams who like to break my code.  It was fun and hell at the same time.  To avoid my going down to a &#8216;4&#8217;
because other people broke my code, I leveraged XP practices that were entrenched in startup #3 (Evant / Retail Aspect).
This was one of the first full-bore XP companies with Kent Beck and Rob Mee at the helm of the development team.</p>

<p>XP is very much oriented to &#8220;Write tests first&#8221;.  That is stupid.  You need to figure out what you are doing and
writing tests is not a good way to figure out how to do something.  You <em>do it</em> to figure out how to do it.  But
after you <em>do it</em>, you should write tests to make sure the code still does it tomorrow.  Unfortunately, people
usually forget to write tests after, hence the XP maxim.  I lucked out and a whole bunch of tests existed
when I showed up to help save Evant.  I needed to scale the product to be bigger and faster.  On the order of a million times
bigger data set and a thousands times faster execution.  But it should still work, and if it did work it would
not fail any existing test (unless we changed functionality).</p>

<p>That sold me on automated testing.  It made me slower (say a &#8216;5&#8217;) but it protected me from other people breaking
my working code.  Eventually we used Excel for the automated tests, the business people wrote them directly, and
I was back to a &#8216;6&#8217;.</p>

<h2>Grails and Opinionated Frameworks</h2>

<p>I became an &#8216;8&#8217; again when I started using <a href="http://grails.org/">http://grails.org/</a>.  The language (Groovy and Annotated Java)
was now approaching Smalltalk if a bit uglier.  And the automated binding to the database, plugin model,
and other great features in Grails made it so I simply didn&#8217;t have to worry about a lot of stuff.  I
was getting different benefits from Smalltalk, but they netted out.  And I had the same benefit as
Smalltalk in onboarding others: (1) This is the Grails way, (2) These are my &#8216;tweaks&#8217; to the Grails way&#8230;
now start asking for features and go build them.</p>

<h2>Flex and Angular</h2>

<p>On the client side, I had shifted to using Flex very early on for a company called Winster.  It was a bit
bleeding edge at the time, but Flex was very powerful and very productive.  It was basically Smalltalk
on the client.  Eventually Flex/Flash became non-viable because of the iPhone issue, but then Angular
jumped in to replace it.  I tried others (e.g. YUI, Sencha, etc.) and they have pros-and-cons, but Angular
is very good and very Flex-like.</p>

<h2>Advanced Development and Delivery (ADD)</h2>

<p>OK, so above describes a lot of the stack I tend to use, but that isn&#8217;t where the &#8216;256x&#8217; comes from.  Above I claimed
I was an &#8216;8&#8217; but that was on the old &#8216;50%&#8217; or maybe &#8216;70%&#8217; more scale.  On the new scale, I am a &#8216;6&#8217; with the stack above
<em>until</em> you add in the ADD: The Advanced Development and Delivery environment.</p>

<p>The ADD came to me incrementally from Evant, through my own failed attempt at productizing it (Velidom), and fully
germinated with my last software startup: Rumble.  &#8220;Amusingly&#8221;, Velidom was killed by two of the four ingredients,
tried to work around problems with SVN that is replaced by one of the four ingredients, and included as part
of the product one of the four ingredients.  If we had just focused on that <em>one ingredient</em> and not the whole
software factory, Velidom would now be owned by Atlassian.</p>

<p>The four ingredients are:</p>

<ul>
<li>Amazon EC2 <a href="http://aws.amazon.com/">http://aws.amazon.com/</a></li>
<li>Amazon S3  <a href="http://aws.amazon.com/">http://aws.amazon.com/</a></li>
<li>GitHub.com <a href="http://github.com/">http://github.com/</a></li>
<li>HipChat    <a href="http://HipChat.com/">http://HipChat.com/</a></li>
</ul>


<p>These four ingredients, when baked properly together, give individuals and teams 4x or more productivity.  No, you
can not substitute the ingredients.  Not until you understand what they are and how they work together.  Yes, <em>I</em>
can substitute ingredients for the above, but the above are the current gold standard.  And hosting your own version
of any of these products is also a &#8216;substitution&#8217; and not equivalent to using them as a service.</p>

<h3>Four Ingredients, Three Roles</h3>

<p><img width="432" height="414" src="http://markfussell.emenar.com/images/add-1/ADD_FourIngredients_ThreeRoles_mlf1a1.png" /></p>

<p>For more details or questions, please contact me.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Being a git about everything (IT Automation [2])]]></title>
    <link href="http://markfussell.emenar.com/blog/git-about-everything-it-automation-2/"/>
    <updated>2013-02-19T18:16:00-08:00</updated>
    <id>http://markfussell.emenar.com/blog/git-about-everything-it-automation-2</id>
    <content type="html"><![CDATA[<p>This is the fifth in a series of using git as part of interesting solutions to problems.</p>

<p>The first is here: <a href="http://markfussell.emenar.com/blog/git-about-everything-intro/">Intro</a> and the previous
part of this topic is here: <a href="http://markfussell.emenar.com/blog/git-about-everything-it-automation/">IT Automation</a></p>

<h2>PushMePullYou or Leveraging git to enable mass-automated IT</h2>

<div style="float:right">
<img width="244" height="191" src="http://markfussell.emenar.com/images/git-about-everything-it-automation/Pushmepullyou_mlf1c.png" />
</div>


<p>The previous post dealt with the groundwork of having Git be a central part of IT automation.  That
showed the core idea but was a bit too simple to fully express the power of the approach.
This post will be dealing with all the things that were left off, especially support for:</p>

<ul>
<li> Many different types of servers with both their own and shared &#8216;recipes&#8217;</li>
<li> More complicated install/upgrade actions</li>
<li> More sophisticated install behavior</li>
<li> Multiple versions of &#8216;recipes&#8217; and an ability to promote whole IT from development to production</li>
<li> Getting information from other active repositories</li>
</ul>


<!-- more -->


<p>To just jump-in and not be so incremental, I want to build the following deployment:</p>

<ul>
<li> A load-balancing layer that registers itself with the outside world and knows how to talk to the application layer</li>
<li> An application layer that runs an application which may be updated at any time</li>
<li> A database layer using a cluster of Riak servers</li>
<li> A presence server that can record what servers are present (so other servers can leverage)</li>
</ul>


<p>Each of these will be a different stack for easier management.  There will also be a Control server
which makes setting up the deployment easier (for example, it will make sure you have the latest AWS CLI).</p>

<h2>The Control Server</h2>

<p>To get everything up and running check out the repository:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git clone git://github.com/markfussell/giteveryrepo4.git
</span></code></pre></td></tr></table></div></figure>


<p>And then in the Amazon AWS console launch the control server with the file template at <code>it/aws/cloudformation/GitEvery4ControlServer.template</code>.</p>

<p><img src="http://markfussell.emenar.com/images/git-about-everything-it-automation-2/create_control_stack.png" /></p>

<p>You can then SSH into the server and <code>sudo su -</code> to change to root. And <code>cd gitrepo/giteveryrepo4</code> to get into the root of the repository.</p>

<p><img src="http://markfussell.emenar.com/images/git-about-everything-it-automation-2/control_server_login.png" /></p>

<h2>Handling Different Types of Servers</h2>

<p>A major difference from the previous example is there are now several types of servers, and they
will have different:</p>

<ul>
<li> Firewall permissions</li>
<li> Initial setup of software</li>
<li> Ongoing configuration changes</li>
</ul>


<p>There are also a number of similarities and ideally the CloudFormation files are as similar and
simple as possible.</p>

<h3>Firewall Permissions</h3>

<p>One major change is to get rid of stack-generated security groups: these are difficult to manage since
they have ever-changing and obscure names.  I believe it is better for any real deployment to control
the security groups independently of the Stacks.  So now we have two kinds of security groups:</p>

<ul>
<li> One for the <code>deployment</code> as a whole</li>
<li> One for each <code>part</code> a server node can be</li>
</ul>


<p>The <code>deployment</code> and <code>part</code> are assigned as constants in the Stack template mappings:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'>  <span class="s2">&quot;Mappings&quot;</span> <span class="err">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;TemplateConstant&quot;</span> <span class="p">:</span> <span class="p">{</span>
</span><span class='line'>       <span class="nt">&quot;stacktype&quot;</span> <span class="p">:</span> <span class="p">{</span> <span class="nt">&quot;value&quot;</span> <span class="p">:</span> <span class="s2">&quot;GitEvery4LbServer&quot;</span> <span class="p">},</span>
</span><span class='line'>       <span class="nt">&quot;initgitrepo&quot;</span> <span class="p">:</span> <span class="p">{</span> <span class="nt">&quot;value&quot;</span> <span class="p">:</span> <span class="s2">&quot;giteveryrepo4&quot;</span> <span class="p">},</span>
</span><span class='line'>       <span class="nt">&quot;nodepart&quot;</span> <span class="p">:</span> <span class="p">{</span> <span class="nt">&quot;value&quot;</span> <span class="p">:</span> <span class="s2">&quot;applbnode&quot;</span> <span class="p">},</span>
</span><span class='line'>       <span class="nt">&quot;deployment&quot;</span> <span class="p">:</span> <span class="p">{</span> <span class="nt">&quot;value&quot;</span> <span class="p">:</span> <span class="s2">&quot;testdeployment&quot;</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">},</span>
</span></code></pre></td></tr></table></div></figure>


<p>and then later referenced in the security group section:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'>    <span class="s2">&quot;SecurityGroups&quot;</span> <span class="err">:</span> <span class="p">[</span> <span class="p">{</span> <span class="nt">&quot;Fn::FindInMap&quot;</span> <span class="p">:</span> <span class="p">[</span> <span class="s2">&quot;TemplateConstant&quot;</span><span class="p">,</span> <span class="s2">&quot;deployment&quot;</span><span class="p">,</span> <span class="s2">&quot;value&quot;</span> <span class="p">]</span> <span class="p">},</span> <span class="p">{</span> <span class="nt">&quot;Fn::FindInMap&quot;</span> <span class="p">:</span> <span class="p">[</span> <span class="s2">&quot;TemplateConstant&quot;</span><span class="p">,</span> <span class="s2">&quot;nodepart&quot;</span><span class="p">,</span> <span class="s2">&quot;value&quot;</span> <span class="p">]</span> <span class="p">}</span> <span class="p">]</span><span class="err">,</span>
</span></code></pre></td></tr></table></div></figure>


<p>Before we create the stack, we create the appropriate groups.  For example, the <code>deployment</code> group will enable SSH into
the nodes and any node within the deployment to talk to any other node:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#===================</span>
</span><span class='line'><span class="c">#=== testdeployment</span>
</span><span class='line'><span class="c">#===================</span>
</span><span class='line'>
</span><span class='line'>ec2-create-group testdeployment -d  testdeployment
</span><span class='line'><span class="nb">export </span><span class="nv">OWNER</span><span class="o">=</span><span class="sb">`</span>ec2-describe-group | grep GROUP | head -n 1 | cut -f 3<span class="sb">`</span>
</span><span class='line'>
</span><span class='line'><span class="c">#Enable SSH In</span>
</span><span class='line'>ec2-authorize testdeployment -p 22 -s 0.0.0.0/0
</span><span class='line'>
</span><span class='line'><span class="c">#Enable deployment to talk to itself</span>
</span><span class='line'>ec2-authorize testdeployment -o testdeployment -u <span class="k">${</span><span class="nv">OWNER</span><span class="k">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Initial setup of software</h3>

<p>Within the CloudFormation template, we use the same approach as last time: simply checkout a git repository and call into it.  In Bash it would be:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>yum -y install git
</span><span class='line'>mkdir /root/gitrepo
</span><span class='line'><span class="nb">cd</span> /root/gitrepo
</span><span class='line'>git clone git://github.com/markfussell/<span class="sb">`</span>cat /root/nodeinfo/initgitrepo.txt<span class="sb">`</span>.git
</span><span class='line'>
</span><span class='line'><span class="nb">cd</span> /root/gitrepo/<span class="sb">`</span>cat /root/nodeinfo/initgitrepo.txt<span class="sb">`</span>
</span><span class='line'>include <span class="o">()</span> <span class="o">{</span> <span class="k">if</span> <span class="o">[[</span> -f <span class="s2">&quot;$1&quot;</span> <span class="o">]]</span>; <span class="k">then </span><span class="nb">source</span> <span class="s2">&quot;$1&quot;</span>; <span class="k">else </span><span class="nb">echo</span> <span class="s2">&quot;Skipped missing: $1&quot;</span>; <span class="k">fi</span> <span class="o">}</span>
</span><span class='line'>include bin/init/common/init.sh
</span></code></pre></td></tr></table></div></figure>


<p>which is converted to JSON (string-quoted) within the template.</p>

<p>This entering on a common <code>init.sh</code> entrypoint makes the CloudFormation stacks simpler and more general.  It is much
easier to update and push to the git repository than to update all the stacks that are using the repository.</p>

<p>The new part is now at the end of the common entrypoint: jumping into more specific initialization depending
on the properties of the node:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>include bin/init/part/<span class="sb">`</span>cat /root/nodeinfo/nodepart.txt<span class="sb">`</span>/init.sh
</span><span class='line'>include bin/init/stacktype/<span class="sb">`</span>cat /root/nodeinfo/stacktype.txt<span class="sb">`</span>/init.sh
</span><span class='line'>include bin/init/stacktype/<span class="sb">`</span>cat /root/nodeinfo/stacktype.txt<span class="sb">`</span>/part/<span class="sb">`</span>cat /root/nodeinfo/nodepart.txt<span class="sb">`</span>/init.sh
</span></code></pre></td></tr></table></div></figure>


<p>We so far have three variations:</p>

<ul>
<li> The <code>part</code></li>
<li> The <code>stacktype</code></li>
<li> Combining both of the above.</li>
</ul>


<p>We can be as general or as specific as we want.</p>

<p>A <code>stacktype</code> is simply the name of the template (vs. the name of an instantiated stack which has to be unique).
The main advantage of <code>stacktype</code> is it allows easy separation of behavior by kind of stack and
also allows versioning if <code>stacktype</code> includes a version number.</p>

<p>A <code>part</code> is the singular role a node plays within a deployment.  I use <code>part</code> instead of <code>role</code> to avoid
conflict with Chef where a node can have many roles.  A node has exactly one <code>part</code> it plays in the deployment,
and each <code>part</code> can have any number of <code>roles</code>.  A <code>part</code> should normally be fairly universal.  In our case
the five parts are <code>applbnode</code> (The main application load balancer), <code>appnode</code> (The main app), <code>riaknode</code> (The
riak database node), <code>presencenode</code> (A server presence recording server), and <code>controlnode</code> (The main launching
control server, which isn&#8217;t really part of the running deployment).</p>

<p>With just the application and load-balancing parts/nodes running along with the controlnode, we have something like this:</p>

<p><img src="http://markfussell.emenar.com/images/git-about-everything-it-automation-2/pushmepullyou_lbandappawsarch.png" /></p>

<p>Each <code>part</code> has its own stack template and instance, which creates one or more nodes of that <code>part</code> type.</p>

<p>&#8230;More To Come&#8230;</p>

<h2>References</h2>

<ul>
<li> <a href="http://bitfieldconsulting.com/scaling-puppet-with-distributed-version-control">http://bitfieldconsulting.com/scaling-puppet-with-distributed-version-control</a></li>
<li> <a href="http://blog.afistfulofservers.net/post/2012/12/21/promises-lies-and-dryrun-mode/">http://blog.afistfulofservers.net/post/2012/12/21/promises-lies-and-dryrun-mode/</a></li>
</ul>


<h2>Next</h2>

<p>Our next problem will be&#8230;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Being a git about everything (IT Automation)]]></title>
    <link href="http://markfussell.emenar.com/blog/git-about-everything-it-automation/"/>
    <updated>2013-02-16T18:16:00-08:00</updated>
    <id>http://markfussell.emenar.com/blog/git-about-everything-it-automation</id>
    <content type="html"><![CDATA[<p>This is the fourth in a series of using git as part of interesting solutions to problems.</p>

<p>The first is here: <a href="http://markfussell.emenar.com/blog/git-about-everything-intro/">Intro</a></p>

<h2>Leveraging git to help enable automated IT</h2>

<p>Doing IT for computers involves installing software, configuring things, doing backups, updates, etc.
The ultimate IT is one that <em>&#8216;simply works&#8217;</em> and involves almost no human interaction
even in failure situations.  Ideally IT should be equivalent to
a macro-level program that does everything that does not require touching
a physical machine.</p>

<p>This IT-as-program has become easier and easier over the last many years with
better and more standardized operating systems, free software that does not
require annoying human interaction during installation, and virtualization on top of physical
hardware that makes provisioning and reprovisioning easier.  With cloud computing,
IT-as-program becomes almost a necessity as hundreds of virtual computers are created, updated, failed,
migrated, and decommissioned.</p>

<p>Git alone doesn&#8217;t enable IT-as-program but it can be a core component in many areas.  Among these are:</p>

<ul>
<li> Easy &#8216;Live IT&#8217; servers</li>
<li> A Push-Me-Pull-You model for continual deployment</li>
<li> Server presence</li>
</ul>


<p>Having git as a core piece of IT infrastructure enables thousands of machines to very rapidly react (within a minute or two)
without needing a heavy infrastructure.  You simply need one or two (for redundancy) git servers, of which one can be GitHub
or a similar free or inexpensive service.  Other technologies in this space have significantly more complicated servers,
are more likely to be SPOFs (Single points of failures) or bottlenecks, and are much more expensive as a service.</p>

<!-- more -->


<h2>Easy &#8216;Live IT&#8217; servers</h2>

<p>A &#8216;Live IT&#8217; server is one that can automatically do new things when something about the IT world changes.  This
is not referring to how sophisticated the applications on a server are, but whether the server itself can
manage upgrades or other configuration changes to itself.  Examples are:</p>

<ul>
<li> Deploying new version of a Java war or a Rails app</li>
<li> Doing database backups and offloads</li>
<li> Offloading or deleting logs (that are harder than logrotate)</li>
<li> Reacting to simple configuration changes</li>
<li> Reacting to server presence changes</li>
</ul>


<p>There are a number of ways to do the activities listed above, from manually interacting with machines, through cron jobs,
mass &#8216;push&#8217; model interactions (e.g. Capistrano), and finally puppetry via Chef and similar.  I have found almost all of
these to be lacking in many ways, including:</p>

<ul>
<li> Lack of documented change-to-server</li>
<li> Difficulty in rolling back changes</li>
<li> Not scaling nicely (one client hitting many servers, or many servers doing queries against another server)</li>
<li> Lack of flexibility</li>
<li> Slowness or non-responsiveness (delays) of applying changes</li>
<li> Differences from &#8216;bootstrap&#8217; of cloud servers</li>
</ul>


<h3>Pull Model</h3>

<p>A different approach leveraging Git (or any other DVCS) seems to produce much simpler and more powerful
solutions.  The approach is composed of:</p>

<ul>
<li> A git repository that has working scripts (in any language people like, including Chef-solo)</li>
<li> A simple bootstrap script that clones the repository and calls an <code>init.sh</code> script in it</li>
<li> A cron job that is set up by the <code>init.sh</code> script.  This cron job executes every minute

<ul>
<li>Goes into the working git repository</li>
<li>Does a pull to get the latest version of scripts</li>
<li>Then calls into a <code>work.sh</code> script</li>
</ul>
</li>
</ul>


<p>This flow enables activity at every minute, using the latest version of the git repository, and with very little overhead
for the core behavior.  Advantages are:</p>

<ul>
<li> All changes to a server are caused by one or more git repositories changing.  Servers can even publish there status by showing the git revision they are on.</li>
<li> Rolling back changes is simply reversing a commit</li>
<li> The only centralized activity is the <code>git fetch</code> which is very simple and fast.</li>
<li> So far the only constraint is the time is every minute, and that could be sub-minute but needing that is rare</li>
<li> Delays are at most a minute, and again that could easily become less (but not sub-second)</li>
<li> The behavior is actually the same as bootstrapping a server.  A bootstrap is just the first minute of work.</li>
</ul>


<h3>Example-1</h3>

<p>Example-1 is the initial example of this model.  The repository is</p>

<ul>
<li> <a href="https://github.com/markfussell/giteveryrepo3/">https://github.com/markfussell/giteveryrepo3/</a></li>
</ul>


<p>with the CloudFormation template being:</p>

<ul>
<li> <a href="https://github.com/markfussell/giteveryrepo3/blob/master/it/aws/cloudformation/GitEverythingServer3.template">https://github.com/markfussell/giteveryrepo3/blob/master/it/aws/cloudformation/GitEverythingServer3.template</a></li>
</ul>


<p>This has a UserData section which does the initial bootstrap of cloning the repository and
calling an init script inside it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'>      <span class="s2">&quot;yum -y install git \n&quot;</span><span class="err">,</span>
</span><span class='line'>      <span class="s2">&quot;mkdir /root/gitrepo \n&quot;</span><span class="err">,</span>
</span><span class='line'>      <span class="s2">&quot;cd /root/gitrepo \n&quot;</span><span class="err">,</span>
</span><span class='line'>      <span class="s2">&quot;git clone git://github.com/markfussell/giteveryrepo3.git  \n&quot;</span><span class="err">,</span>
</span><span class='line'>
</span><span class='line'>      <span class="s2">&quot;cd /root/gitrepo/giteveryrepo3 \n&quot;</span><span class="err">,</span>
</span><span class='line'>      <span class="s2">&quot;source bin/init/common/init.sh \n&quot;</span><span class="err">,</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>init.sh</code> script simply sets up a cron job that calls the <code>cron_1m.sh</code> script
in <code>/root/bin/</code>.  I prefer to have crontab files that are very simple (e.g. one line)
and call into /root/bin/ scripts so (a) it is more visible what crons are running
(b) if there are any inter-cron issues they can be managed, and (c) it is easy to
disable a cron by doing a rename.</p>

<p>The <code>init.sh</code> file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">================================</span>
</span><span class='line'><span class="c">#=== Have a preference that crons</span>
</span><span class='line'><span class="c">#=== all go through a single file</span>
</span><span class='line'><span class="c">#================================</span>
</span><span class='line'>
</span><span class='line'>mkdir -p /root/bin
</span><span class='line'>cp ./bin/init/common/cron_1m.sh /root/bin/cron_1m.sh
</span><span class='line'>chmod +x /root/bin/cron_1m.sh
</span><span class='line'>
</span><span class='line'>cat <span class="s">&lt;&lt;EOS &gt; /var/spool/cron/root</span>
</span><span class='line'><span class="s">MAILTO=&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="s">* * * * *  /root/bin/cron_1m.sh</span>
</span><span class='line'><span class="s">EOS</span>
</span></code></pre></td></tr></table></div></figure>


<p>And the <code>cron_1m.sh</code> file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#! /bin/bash</span>
</span><span class='line'><span class="c">#================================</span>
</span><span class='line'><span class="c">#=== Simple worker example</span>
</span><span class='line'><span class="c">#================================</span>
</span><span class='line'>
</span><span class='line'><span class="nb">export </span><span class="nv">ME</span><span class="o">=</span><span class="sb">`</span>basename <span class="nv">$0</span><span class="sb">`</span>
</span><span class='line'><span class="nb">export </span><span class="nv">LOG</span><span class="o">=</span>/root/log/<span class="k">${</span><span class="nv">ME</span><span class="k">}</span>_log.txt
</span><span class='line'><span class="nb">export </span><span class="nv">ERROR</span><span class="o">=</span>/root/log/<span class="k">${</span><span class="nv">ME</span><span class="k">}</span>_error.txt
</span><span class='line'><span class="nb">export </span><span class="nv">START_TSS</span><span class="o">=</span><span class="s2">&quot;`date +%Y%m%d-%H%M%S`&quot;</span>
</span><span class='line'>
</span><span class='line'>mkdir -p /root/log/
</span><span class='line'>
</span><span class='line'><span class="nb">exec </span>1&gt;&gt; <span class="k">${</span><span class="nv">LOG</span><span class="k">}</span>
</span><span class='line'><span class="nb">exec </span>2&gt;&gt; <span class="k">${</span><span class="nv">ERROR</span><span class="k">}</span>
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;${ME}: Start  ${START_TSS}&quot;</span> &gt;&gt; <span class="k">${</span><span class="nv">LOG</span><span class="k">}</span>
</span><span class='line'>
</span><span class='line'><span class="nb">export </span><span class="nv">REPOS</span><span class="o">=</span><span class="sb">`</span>find /root/gitrepo/ -maxdepth 1 -mindepth 1 <span class="sb">`</span>
</span><span class='line'><span class="k">for </span>REPO in <span class="k">${</span><span class="nv">REPOS</span><span class="k">}</span>; <span class="k">do</span>
</span><span class='line'><span class="k">    </span><span class="nb">pushd</span> <span class="k">${</span><span class="nv">REPO</span><span class="k">}</span>
</span><span class='line'>        git pull
</span><span class='line'>
</span><span class='line'>        <span class="nb">source </span>bin/work/common/work.sh
</span><span class='line'>    <span class="nb">popd</span>
</span><span class='line'><span class="k">done</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nb">export </span><span class="nv">FINISH_TSS</span><span class="o">=</span><span class="s2">&quot;`date +%Y%m%d-%H%M%S`&quot;</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;${ME}: Finish ${FINISH_TSS}&quot;</span> &gt;&gt; <span class="k">${</span><span class="nv">LOG</span><span class="k">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see the <code>cron_1m.sh</code> script is &#8220;repo flexible&#8221;.
It will do any and all <code>work.sh</code> file it finds in the repositories under
<code>/root/gitrepo/</code>.  You might want to be more restrictive than
that (say only &#8216;active&#8217; repos), but this at least shows the power of the
generalization.</p>

<p>If you login to the server, you will find it doing some kind of work:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>root@ip-10-120-174-182 ~<span class="o">]</span><span class="c"># tail -f /root/log/*</span>
</span><span class='line'><span class="o">==</span>&gt; /root/log/cron_1m.sh_error.txt &lt;<span class="o">==</span>
</span><span class='line'>
</span><span class='line'><span class="o">==</span>&gt; /root/log/cron_1m.sh_log.txt &lt;<span class="o">==</span>
</span><span class='line'>Already up-to-date.
</span><span class='line'>We are doing some kind of work
</span><span class='line'>~
</span><span class='line'>cron_1m.sh: Finish 20130219-050202
</span><span class='line'>cron_1m.sh: Start  20130219-050301
</span><span class='line'>~/gitrepo/giteveryrepo3 ~
</span><span class='line'>Already up-to-date.
</span><span class='line'>We are doing some kind of work
</span><span class='line'>~
</span><span class='line'>cron_1m.sh: Finish 20130219-050301
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, the total time to do a &#8220;Hello World&#8221; is under a second.  Very fast!</p>

<h4>Inherent overhead of approach</h4>

<p>The amount of overhead associated associated with this approach is less than a second.  The fetch itself:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>root@ip-10-120-174-182 giteveryrepo3<span class="o">]</span><span class="c"># time git fetch</span>
</span><span class='line'>
</span><span class='line'>real  0m0.087s
</span><span class='line'>user  0m0.002s
</span><span class='line'>sys   0m0.006s
</span></code></pre></td></tr></table></div></figure>


<p>is 87 milliseconds and the system overhead is 8 milliseconds on an m1.small (that isn&#8217;t doing anything else).
With a busier server the &#8216;real&#8217; time goes up a bit, but the system overhead is still tens of milliseconds at
most.</p>

<p>Although fetching is useful on its own, we will initially always merge as well, so let us time that:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>root@ip-10-120-174-182 giteveryrepo3<span class="o">]</span><span class="c"># time git pull</span>
</span><span class='line'>Already up-to-date.
</span><span class='line'>
</span><span class='line'>real  0m0.105s
</span><span class='line'>user  0m0.007s
</span><span class='line'>sys   0m0.053s
</span></code></pre></td></tr></table></div></figure>


<p>Pulling requires a bit more effort to do a no-op merge but things are still in the tens of milliseconds of &#8216;effort&#8217;
and a clock time well under a second.</p>

<h2>Push-Me-Pull-You</h2>

<div style="float:right">
<img width="244" height="191" src="http://markfussell.emenar.com/images/git-about-everything-it-automation/Pushmepullyou_mlf1c.png" />
</div>


<p>The previous section discussed having &#8216;Live IT&#8217; servers that use the very-fast git pull to
get updates that the server will react to.  Updating central git repositories uses an atomic &#8216;push&#8217;
operation, so the obvious name for this pattern of pushing changes from one place (say &#8216;me&#8217;)
to a hundred servers who are listening (let us call them &#8216;you&#8217;) is&#8230; &#8216;Push-Me-Pull-You&#8217;&#8230;
which even has a handy mascot.</p>

<p>Some great things about the PushMePullYou were identified above:</p>

<ul>
<li> Extremely low overhead and very simple model</li>
<li> All changes to a server are caused by one or more git repositories changing.  Servers can even publish there status by showing the git revision they are on.</li>
<li> Rolling back changes is simply reversing a commit</li>
<li> The only centralized activity is the <code>git fetch</code> which is very simple and fast.</li>
<li> So far the only constraint is the time is every minute, and that could be sub-minute but needing that is rare</li>
<li> Delays are at most a minute, and again that could easily become less (but not sub-second)</li>
<li> The behavior is actually the same as bootstrapping a server.  A bootstrap is just the first minute of work.</li>
</ul>


<p>A few additional ones are:</p>

<ul>
<li> You can &#8216;push&#8217; from anywhere you want&#8230; so you can test a change on the target IT environment and then push from there if it works</li>
<li> It is very easy to organize many different kinds of machines, kinds of deployments, etc. within a single repository</li>
<li> It is very easy to detect whether a change happens at all, whether it is potentially relevant, and with a few easy patterns, whether it would have an impact that requires real action</li>
</ul>


<p>The architectural model looks a bit like this</p>

<p><img src="http://markfussell.emenar.com/images/git-about-everything-it-automation/pushmepullyou_simpleawsarch.png" /></p>

<h3>Going beyond naive</h3>

<p>The Example-1 above had the naive &#8216;pull and do something no matter what&#8217;.  We need to get a bit beyond that
to have a truly useful approach.</p>

<h3>Checking commit version</h3>

<p>The simplest sanity check is to see whether we have a new commit.  This can be done in a few ways, including:</p>

<ul>
<li> Do a &#8216;fetch&#8217; and check whether the remote branch is different from the local branch</li>
<li> After each action, store the commit version that was acted upon.  On each pull compare the old to the new</li>
<li> Have a local acted-upon branch separate from the main branch</li>
</ul>


<p>The last one has a nice feature of showing &#8216;history-according-to-this-machine&#8217; where the other two are purely
&#8216;what is now&#8217;, but it is simpler to avoid having a per-machine branch and multiple versions (the differing
merges depending on local history) occurring
everywhere.</p>

<h4>Fetch based</h4>

<p>The simplest check is just to see if there are any differences between the &#8216;origin&#8217; and the local branch.  This
would look something like <code>detectOriginFetchDiff.sh</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#=================================================</span>
</span><span class='line'><span class="c">#=== Detect whether the version of the origin</span>
</span><span class='line'><span class="c">#=== is the same as the local version.</span>
</span><span class='line'><span class="c">#=== Return the ORIGIN_VERSION if different</span>
</span><span class='line'><span class="c">#=================================================</span>
</span><span class='line'>
</span><span class='line'>git fetch
</span><span class='line'>
</span><span class='line'><span class="nb">export </span><span class="nv">ORIGIN_VERSION</span><span class="o">=</span><span class="sb">`</span>git rev-parse origin/master<span class="sb">`</span>
</span><span class='line'><span class="nb">export </span><span class="nv">LOCAL_VERSION</span><span class="o">=</span><span class="sb">`</span>git rev-parse HEAD<span class="sb">`</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> <span class="s2">&quot;${ORIGIN_VERSION}&quot;</span> <span class="o">=</span> <span class="s2">&quot;${LOCAL_VERSION}&quot;</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'>    : <span class="c">#Don&#39;t do anything</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'><span class="k">    </span><span class="nb">echo</span> <span class="k">${</span><span class="nv">ORIGIN_VERSION</span><span class="k">}</span>
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure>


<p>Where you can use this script with:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="k">if</span> <span class="o">[[</span> -n <span class="s2">&quot;`./bin/pushmepullyou/detectOriginDiff.sh`&quot;</span> <span class="o">]]</span> ; <span class="k">then</span>
</span><span class='line'>   : <span class="c">#React to the change</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>   : <span class="c">#Do nothing / exit</span>
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure>


<p>This should be lightning fast.  The only drawback is:</p>

<ul>
<li> If you don&#8217;t pull (merge) until after executing the script&#8230; you might not be able to easily change the code determining whether to executing the script</li>
</ul>


<p>You can redo an action by forcing the local branch back a version.  For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git reset --hard master~1
</span></code></pre></td></tr></table></div></figure>


<h4>Last-action based</h4>

<p>An alternative to the fetch-based model is to record the last action performed by the local machine.  This
deals with the drawback above: you already have the latest version of code no matter what.  Also it starts
down the path of &#8216;mid-action&#8217; protection (to avoid doing a change or sequence of changes on top of each
other).  For example <code>detectLastActionDiff.sh</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#=================================================</span>
</span><span class='line'><span class="c">#=== Detect whether the last action version</span>
</span><span class='line'><span class="c">#=== is the same as the current pulled version.</span>
</span><span class='line'><span class="c">#=== Return the LOCAL_VERSION if different</span>
</span><span class='line'><span class="c">#=================================================</span>
</span><span class='line'>
</span><span class='line'><span class="nb">export </span><span class="nv">LOCAL_VERSION</span><span class="o">=</span><span class="sb">`</span>git rev-parse HEAD<span class="sb">`</span>
</span><span class='line'><span class="nb">export </span><span class="nv">LASTACTION_FILE</span><span class="o">=</span>./.temp/nodeinfo/lastaction.txt
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">[[</span> -e <span class="k">${</span><span class="nv">LASTACTION_FILE</span><span class="k">}</span> <span class="o">]]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">    </span><span class="nb">export </span><span class="nv">LAST_ACTION</span><span class="o">=</span><span class="sb">`</span>cat <span class="k">${</span><span class="nv">LASTACTION_FILE</span><span class="k">}</span><span class="sb">`</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">[</span> <span class="s2">&quot;${LAST_ACTION}&quot;</span> <span class="o">=</span> <span class="s2">&quot;${LOCAL_VERSION}&quot;</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'>        : <span class="c">#Don&#39;t do anything</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'><span class="k">        </span><span class="nb">echo</span> <span class="k">${</span><span class="nv">LOCAL_VERSION</span><span class="k">}</span>
</span><span class='line'>    <span class="k">fi</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'><span class="k">    </span><span class="nb">echo</span> <span class="k">${</span><span class="nv">LOCAL_VERSION</span><span class="k">}</span>
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure>


<p>And after completing any action you write the version into the lastaction version file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">export </span><span class="nv">LOCAL_VERSION</span><span class="o">=</span><span class="sb">`</span>git rev-parse HEAD<span class="sb">`</span>
</span><span class='line'><span class="nb">export </span><span class="nv">LASTACTION_FILE</span><span class="o">=</span>./.temp/nodeinfo/lastaction.txt
</span><span class='line'><span class="nb">export </span><span class="nv">LASTACTION_DIR</span><span class="o">=</span><span class="s2">&quot;$( cd -P &quot;</span><span class="k">$(</span> dirname <span class="s2">&quot;${LASTACTION_FILE}&quot;</span> <span class="k">)</span><span class="s2">&quot; &amp;&amp; pwd )/&quot;</span>
</span><span class='line'>
</span><span class='line'>mkdir -p LASTACTION_DIR
</span><span class='line'><span class="nb">echo</span> <span class="k">${</span><span class="nv">LOCAL_VERSION</span><span class="k">}</span> &gt; <span class="k">${</span><span class="nv">LASTACTION_FILE</span><span class="k">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Avoiding mid-action collision</h3>

<p>The main advantage of the Last-action approach is it starts down the path of
making sure you are not executing things twice.  Alternatively, you could
have an <code>flock</code> associated with the calling script (say the <code>cron_1m.sh</code>),
but writing to a <code>currentaction</code> file is a bit more
OS independent, can document what version is being acted upon,
and supports multiple paths hitting the same file.</p>

<p>Ideally if anything is currently working, the automatic <code>merge</code> would stop,
so the test for <code>currentaction</code> should be very early.  We should go
back to our initial worker example</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#! /bin/bash</span>
</span><span class='line'><span class="c">#================================</span>
</span><span class='line'><span class="c">#=== Simple worker example</span>
</span><span class='line'><span class="c">#================================</span>
</span><span class='line'>
</span><span class='line'><span class="nb">export </span><span class="nv">ME</span><span class="o">=</span><span class="sb">`</span>basename <span class="nv">$0</span><span class="sb">`</span>
</span><span class='line'><span class="nb">export </span><span class="nv">LOG</span><span class="o">=</span>/root/log/<span class="k">${</span><span class="nv">ME</span><span class="k">}</span>_log.txt
</span><span class='line'><span class="nb">export </span><span class="nv">ERROR</span><span class="o">=</span>/root/log/<span class="k">${</span><span class="nv">ME</span><span class="k">}</span>_error.txt
</span><span class='line'><span class="nb">export </span><span class="nv">START_TSS</span><span class="o">=</span><span class="s2">&quot;`date +%Y%m%d-%H%M%S`&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">export </span><span class="nv">CURRENTACTION_FILE</span><span class="o">=</span>./.temp/nodeinfo/currentaction.txt
</span><span class='line'>
</span><span class='line'>mkdir -p /root/log/
</span><span class='line'>
</span><span class='line'><span class="nb">exec </span>1&gt;&gt; <span class="k">${</span><span class="nv">LOG</span><span class="k">}</span>
</span><span class='line'><span class="nb">exec </span>2&gt;&gt; <span class="k">${</span><span class="nv">ERROR</span><span class="k">}</span>
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;${ME}: Start  ${START_TSS}&quot;</span> &gt;&gt; <span class="k">${</span><span class="nv">LOG</span><span class="k">}</span>
</span><span class='line'>
</span><span class='line'><span class="nb">export </span><span class="nv">REPOS</span><span class="o">=</span><span class="sb">`</span>find /root/gitrepo/ -maxdepth 1 -mindepth 1 <span class="sb">`</span>
</span><span class='line'><span class="k">for </span>REPO in <span class="k">${</span><span class="nv">REPOS</span><span class="k">}</span>; <span class="k">do</span>
</span><span class='line'><span class="k">    </span><span class="nb">pushd</span> <span class="k">${</span><span class="nv">REPO</span><span class="k">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">[[</span> -e <span class="k">${</span><span class="nv">CURRENTACTION_FILE</span><span class="k">}</span> <span class="o">]]</span>; <span class="k">then</span>
</span><span class='line'>            : <span class="c">#Don&#39;t do anything until the current action completes</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'><span class="k">            </span>git pull
</span><span class='line'>
</span><span class='line'>            bash bin/work/common/work.sh
</span><span class='line'>        <span class="k">fi</span>
</span><span class='line'><span class="k">    </span><span class="nb">popd</span>
</span><span class='line'><span class="k">done</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nb">export </span><span class="nv">FINISH_TSS</span><span class="o">=</span><span class="s2">&quot;`date +%Y%m%d-%H%M%S`&quot;</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;${ME}: Finish ${FINISH_TSS}&quot;</span> &gt;&gt; <span class="k">${</span><span class="nv">LOG</span><span class="k">}</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>Note: If you want to have each repository have more control of it&#8217;s behavior
you would need to move the <code>if</code> test and the <code>pull</code> into the work file.</p></blockquote>

<p>While the action is running you can either touch or copy
the current version into <code>currentaction</code>, and when
finished, delete or rename it.  Since everything
is running so fast, you probably don&#8217;t need to do
an <code>flock</code> or even a second <code>[[ -e ]]</code> check.  Acquiring
the lock is simply:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">export </span><span class="nv">LOCAL_VERSION</span><span class="o">=</span><span class="sb">`</span>git rev-parse HEAD<span class="sb">`</span>
</span><span class='line'><span class="nb">export </span><span class="nv">CURRENTACTION_FILE</span><span class="o">=</span>./.temp/nodeinfo/currentaction.txt
</span><span class='line'><span class="nb">export </span><span class="nv">CURRENTACTION_DIR</span><span class="o">=</span><span class="s2">&quot;$( cd -P &quot;</span><span class="k">$(</span> dirname <span class="s2">&quot;${CURRENTACTION_FILE}&quot;</span> <span class="k">)</span><span class="s2">&quot; &amp;&amp; pwd )/&quot;</span>
</span><span class='line'>
</span><span class='line'>mkdir -p CURRENTACTION_DIR
</span><span class='line'><span class="nb">echo</span> <span class="k">${</span><span class="nv">LOCAL_VERSION</span><span class="k">}</span> &gt; <span class="k">${</span><span class="nv">CURRENTACTION_FILE</span><span class="k">}</span>
</span><span class='line'>
</span><span class='line'><span class="c">#Now officially own the current action</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Dealing with different types and collections of servers</h3>

<p>All the above had a single type of machine watching any changes in the
repository and doing the same thing.  Although this does work if you
have either very few servers or are happy with a plethora of repositories
or branches, it would be good to have a way for many different types
and collections of servers to share a single repository.  We
will deal with that in the next blog.</p>

<h2>Summary</h2>

<p>Git can help automate IT with a very fast and effective PushMePullYou
model.  Hundreds of servers can be continually polling one or more
central Git servers to see if anything has changed and then act
upon those changes.  This provides history for any activity, a
very fast response time, and almost no load when nothing has changed.
Also, this approach enables bootstrapping and updating to use exactly
the same paths.</p>

<p>In all, it provides a superior foundation for IT automation in spite of
being so simple.</p>

<h2>References</h2>

<ul>
<li> Chef-Server Scalability

<ul>
<li><a href="http://lists.opscode.com/sympa/arc/chef/2012-01/msg00422.html">http://lists.opscode.com/sympa/arc/chef/2012-01/msg00422.html</a></li>
<li><a href="http://www.opscode.com/hosted-chef/">http://www.opscode.com/hosted-chef/</a></li>
</ul>
</li>
</ul>


<h2>Credit</h2>

<ul>
<li> Initial Llama for Push-Me-Pull-You Image credit: <a href='http://www.123rf.com/photo_11398752_llama-llove--two-llamas-kiss-their-necks-forming-a-heart-shape.html'>fiftyfootelvis / 123RF Stock Photo</a></li>
</ul>


<h2>Next</h2>

<p>Our next problem will be <a href="http://markfussell.emenar.com/blog/git-about-everything-it-automation-2/">Mass IT Automation</a></p>
]]></content>
  </entry>
  
</feed>
