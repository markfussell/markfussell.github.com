<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Polyglot]]></title>
  <link href="http://markfussell.emenar.com/atom.xml" rel="self"/>
  <link href="http://markfussell.emenar.com/"/>
  <updated>2013-02-07T17:15:01-08:00</updated>
  <id>http://markfussell.emenar.com/</id>
  <author>
    <name><![CDATA[Mark Fussell]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Being a git about everything (Annexing)]]></title>
    <link href="http://markfussell.emenar.com/blog/2013/01/13/git-about-everything-annex/"/>
    <updated>2013-01-13T18:16:00-08:00</updated>
    <id>http://markfussell.emenar.com/blog/2013/01/13/git-about-everything-annex</id>
    <content type="html"><![CDATA[<p>This is the second in a series of using git as part of interesting solutions to problems.</p>

<p>The first is here: <a href="http://markfussell.emenar.com/blog/2013/01/11/git-about-everything-intro/">Intro</a></p>

<h2>Dealing with Binary Files</h2>

<p>As mentioned in the first posting, git and similar DVCS have issues with binary files.  Adding 100s of 10MB files, or 100s of
versions of 10MB files will produce gigabytes worth of data that must be cloned by everyone using the repository.  How do we avoid this?</p>

<p>There are a number of solutions in this space out there with differing characteristics, but the core approach is usually similar:
&#8220;Don&#8217;t store it in git&#8221;.  Instead we want to record enough information to retrieve the binary files from somewhere else.</p>

<!-- more -->


<h2>Record Enough of the Binary File</h2>

<p>What is
enough information?  How about 160 bits!  Using SHA1 or any similar hash, we can identify the contents of any file.  To add
a bit of consistency and readability, we will make this hex-based, so we get 40 characters.  And to make it a little clearer what
hash was used and what this string is, we add &#8216;sha1_&#8217; to the front and &#8216;.blob&#8217; to the end.  Now our 10MB file has become 50 to 52 bytes depending on
human-entered white spaces.  For example:</p>

<ul>
<li> sha1_8ac02ee34b94461fed19320d789f251e6a2a6796.blob</li>
<li> SHA1-Hash = 8ac02ee34b94461fed19320d789f251e6a2a6796</li>
<li> Google test: <a href="http://www.google.com/search?q=8ac02ee34b94461fed19320d789f251e6a2a6796">http://www.google.com/search?q=8ac02ee34b94461fed19320d789f251e6a2a6796</a></li>
</ul>


<p>And we have confirmed that the hash is enough to identify that file&#8217;s content (and the file itself if it has a unique name).</p>

<p>Storing tens of thousands of 50Byte files is still under a few megabytes, so that part is good.</p>

<h2>Put the content into the Cloud (or similar)</h2>

<p>Where should we store the actual content?  Pretty much anywhere we want if things are simple (only a few files at a time to store and retrieve, need
only local access), but
if we want to store and retrieve thousands of files from anywhere rapidly things get nastier.  For example, there are projects that try to
hide the process of file-contents being moved elsewhere using git smudge/clean filters.  Unfortunately this make the process all of: sequential, heavy, and
perpetual.  We would have similar major issues if we moved the content via some other sequential approach that was not super-fast.  And
git is meant to be highly distributed, so our approach needs to work for all the &#8216;clones&#8217; of a repository.  And finally, we don&#8217;t
want to break our bank over this.</p>

<p>The solution?  Amazon S3 or similar.  Amazon S3 is:</p>

<ul>
<li> Relatively inexpensive for what it does (about a dime a month for 1GB)</li>
<li> Highly distributed</li>
<li> Reasonably fast in network transfers</li>
<li> Incredibly fast as you throw more workers at the network transfers</li>
<li> Blazingly fast if you throw many workers from EC2 at it</li>
</ul>


<p>So if we want to move files from our Git repository into S3, how do we do that?  This isn&#8217;t really a git issue at all if we do
it before &#8216;add&#8217; and after &#8216;pull&#8217;.  It becomes
a simple filesystem-to-S3 issue and s3cmd <a href="http://s3tools.org/s3cmd">http://s3tools.org/s3cmd</a> is a very well trusted tool for this.
Add in the parallel patch <a href="https://github.com/pcorliss/s3cmd-modification">https://github.com/pcorliss/s3cmd-modification</a> and
you can have any numbers of workers running.  We want to be a &#8216;git&#8217; about everything, but we can solve this issue independently
of git and combine the two.  The only large remaining issues are the actual processes of:</p>

<ul>
<li> &#8216;deflating&#8217;: moving the content of a file somewhere and leaving a content-hash in its place.</li>
<li> &#8216;inflating&#8217;: replacing a content-hash with the actual content</li>
</ul>


<p>A highly annex-augmented version of s3cmd is here <a href="https://github.com/markfussell/s3annex">https://github.com/markfussell/s3annex</a>
and was done while working at <a href="http://www.rumblegames.com">Rumble</a> where we needed to move gigabytes of high-quality art assets around
as part of the build-deploy pipeline.</p>

<h2>Working with S3 Annexed Git Repositories</h2>

<p>The three things you need for an S3-Annexed repository are:</p>

<ul>
<li> A git repository</li>
<li> An S3 bucket to put content into</li>
<li> The augmented s3cmd from here <a href="https://github.com/markfussell/s3annex">https://github.com/markfussell/s3annex</a></li>
</ul>


<p>A repository that is paired with an S3 bucket is located here:</p>

<ul>
<li> <a href="https://github.com/markfussell/giteveryrepo1">https://github.com/markfussell/giteveryrepo1</a></li>
</ul>


<p>You can clone that repository and get a working annexed-repository and some example content (without write permission).  The repository is tiny but
grants access to several megabytes worth of images.</p>

<h3>Configuration</h3>

<p>The configuration of the Annex is located in &#8216;s3info&#8217;:</p>

<ul>
<li> blob_includes.txt &mdash; The file extensions you want annexed</li>
<li> s3annex_config.txt &mdash; The location of the annex</li>
<li> s3cmd_config.txt &mdash; Some s3cmd configuration, but most importantly the access/secret</li>
<li> s3worker_config.txt &mdash; The number of workers used for annexing</li>
</ul>


<h4>blob_includes</h4>

<p>The blob_includes should be updated with any new file types you want annexed.  To make things fast and simple, annexing is
based on file extensions not size or other properties.  It would be nice if this was more automatic, but being explicit
was simple and very visible.</p>

<h4>s3annex_config</h4>

<p>This is simply the location of the annex.  This can change over time as a quick way to do &#8216;garbage collection&#8217;
but normally it stays the same.  Because of the content-based approach, you can share annexes across many
repositories.</p>

<h4>s3cmd_config</h4>

<p>The s3cmd configuration including access credentials.  If you don&#8217;t want access credentials in the repository itself, you could take out the s3cmd_config file and it should use your defaults (you may need to tweak a couple scripts).</p>

<h4>s3worker_config</h4>

<p>The number of s3workers to run at a time.  More workers will make the S3 combined throughput faster: this should be 100 or more on an EC2 instance.</p>

<h3>Working commands</h3>

<p>All the commands expect to be run from the root of the git repository.  The main working commands are:</p>

<ul>
<li> bin/deflatePaths.sh &mdash; Move the contents of files into the Annex and replace them with a hash stub/reference</li>
<li> bin/inflatePaths.sh &mdash; Put the proper contents of the files into the filesystem based on their hash stub/reference</li>
</ul>


<p>Because annexed repositories should always be fully deflated before committing, there is a command in the root of the directory to
remind people of this:</p>

<ul>
<li> deflateAll.sh &mdash; Visible reminder and simple equivalent to &#8216;bin/deflatePaths.sh .&#8217;</li>
</ul>


<p>These commands are all you need for annexing proper.  To make it easier to see the Annex itself, there is also an &#8216;lsAnnex.sh&#8217;
script which is used below.</p>

<h3>Annex (S3) Layout</h3>

<p>The layout of the Annex within the S3 bucket is either:</p>

<ul>
<li> Flat in a single bucket plus path prefix</li>
<li> Hierarchical based on some amount of leading hash digits</li>
</ul>


<p>The completely flat version is the simpler and truer representation.
The hierarchy simply allows multiple threads to get listings of the annex files in parallel, which
matters for performance when you have thousands of files within the annex.</p>

<h4>Annex listing</h4>

<p>You can see the contents of the annex with:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>./bin/lsAnnex.sh
</span></code></pre></td></tr></table></div></figure>


<p>For the example repository, this gives:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>2013-01-22 00:04   4742594   s3://emenar.com/gitevery/giteveryrepo1/sha1_02bf4b647b623dac68e1913b8d3494856041047c.blob
</span><span class='line'>2013-01-22 00:11   4742594   s3://emenar.com/gitevery/giteveryrepo1/sha1_02bf4b647b623dac68e1913b8d3494856041047c.blob__.jpg
</span><span class='line'>2013-01-22 00:10   2679517   s3://emenar.com/gitevery/giteveryrepo1/sha1_2abd18dfa4510e1dfc72f643bff3639b42f2aa32.blob
</span><span class='line'>2013-01-22 00:15   2679517   s3://emenar.com/gitevery/giteveryrepo1/sha1_2abd18dfa4510e1dfc72f643bff3639b42f2aa32.blob__.jpg
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, in the annex are files that start with &#8216;sha1_&#8217; and end in &#8216;.blob&#8217; or &#8216;.blob__.xxx&#8217; where &#8216;.xxx&#8217; is a proper MIME extension.
The reason for the MIME extension is just that it can be useful to see or directly retrieve the content
with proper interpretation.  The normal Annex behavior only uses the &#8216;.blob&#8217; version.</p>

<p>The names of the files in the Annex match the &#8216;sha1&#8217; hash of the contents of the file.  So &#8216;sha1_55b15eb3ac72351249125a3de7a81aee2bda6a2a.blob__.jpg&#8217;
has a sha1 hash of &#8216;55b15eb3ac72351249125a3de7a81aee2bda6a2a&#8217;.  It is impossible for files to collide unless they are exactly the same
content, so a completely flat representation is correct and simple.</p>

<h3>Example Walk-through</h3>

<p>If you cloned the example repository:</p>

<ul>
<li> <a href="https://github.com/markfussell/giteveryrepo1">https://github.com/markfussell/giteveryrepo1</a></li>
</ul>


<p>you should have something less than a megabyte, but it represents more than 100MB of image files (30 images of 3MB each).  But all the image
files are stubbed out with just the content hash inside.</p>

<p>To see example details of these stubbed/annexed files, look inside any of the jpg files in <code>image/album</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">echo</span> -n <span class="s2">&quot;content: &quot;</span>; cat image/album/GitEverythingAlbum_01.jpg ; <span class="nb">echo</span>
</span></code></pre></td></tr></table></div></figure>


<p>This returns the blob identifier:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>content: sha1_55b15eb3ac72351249125a3de7a81aee2bda6a2a.blob
</span></code></pre></td></tr></table></div></figure>


<h4>Inflating a file</h4>

<p>To inflate a file, run <code>./bin/inflatePaths.sh</code> with the specific file path:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>./bin/inflatePaths.sh image/album/GitEverythingAlbum_01.jpg
</span></code></pre></td></tr></table></div></figure>


<p>And you will get some feedback:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>INFO: Compiling list of <span class="nb">local </span>files <span class="k">for</span> <span class="s1">&#39;file://image/album/GitEverythingAlbum_01.jpg&#39;</span>, <span class="s1">&#39;GitEverythingAlbum_01.jpg&#39;</span>, <span class="s1">&#39;image/album/GitEverythingAlbum_01.jpg&#39;</span>
</span><span class='line'>INFO: Applying --exclude/--include
</span><span class='line'>INFO: Retrieving list of remote files <span class="k">for </span>s3://emenar.com/gitevery/giteveryrepo1/ ...
</span><span class='line'>INFO: Summary: 1 <span class="nb">local </span>files to fetch, 60 remote files present
</span><span class='line'>INFO: Inflating<span class="o">[</span>1<span class="o">]</span> from S3 <span class="o">(</span>1<span class="o">)</span> <span class="o">(</span>sha1_55b15eb3ac72351249125a3de7a81aee2bda6a2a.blob<span class="o">)</span>: image/album/GitEverythingAlbum_01.jpg &lt;- s3://emenar.com/gitevery/giteveryrepo1/sha1_55b15eb3ac72351249125a3de7a81aee2bda6a2a.blob
</span><span class='line'>s3://emenar.com/gitevery/giteveryrepo1/sha1_55b15eb3ac72351249125a3de7a81aee2bda6a2a.blob -&gt; image/album/GitEverythingAlbum_01.jpg  <span class="o">[</span>1 of 1<span class="o">]</span>
</span><span class='line'> 4960530 of 4960530   100% in    7s   633.43 kB/s  <span class="k">done</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now you should have a normal file and can view a picture of Nob Hill.</p>

<p>Note that <code>git status</code> will now show a change.  The approach here is not to hide or conflate annexing within git (e.g. being part of smudge),
but to create something that when combined with normal git makes git even more useful.</p>

<h4>Deflating a file</h4>

<p>Since we are in a git repository, we could simply do a reset to get the file back to it&#8217;s original content
(it is already annexed) but it is much safer to always
&#8216;deflate&#8217; in case the contents changed vs. being the same as the original commit.</p>

<p>To deflate a single file you run <code>./bin/deflatePaths.shs</code> with the specific file path:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>./bin/deflatePaths.sh image/album/GitEverythingAlbum_01.jpg
</span></code></pre></td></tr></table></div></figure>


<p>Because the contents are the same, you should see this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>INFO: Compiling list of <span class="nb">local </span>files <span class="k">for</span> <span class="s1">&#39;file://image/album/GitEverythingAlbum_01.jpg&#39;</span>, <span class="s1">&#39;GitEverythingAlbum_01.jpg&#39;</span>, <span class="s1">&#39;image/album/GitEverythingAlbum_01.jpg&#39;</span>
</span><span class='line'>INFO: Applying --exclude/--include
</span><span class='line'>INFO: Retrieving list of remote files <span class="k">for </span>s3://emenar.com/gitevery/giteveryrepo1/ ...
</span><span class='line'>INFO: Summary: 1 <span class="nb">local </span>files to upload, 60 remote files already present
</span><span class='line'>INFO: Skipped    <span class="o">(</span>1<span class="o">)</span> <span class="o">(</span>sha1_55b15eb3ac72351249125a3de7a81aee2bda6a2a.blob<span class="o">)</span>: image/album/GitEverythingAlbum_01.jpg -&gt; s3://emenar.com/gitevery/giteveryrepo1/sha1_55b15eb3ac72351249125a3de7a81aee2bda6a2a.blob
</span><span class='line'>INFO: Skipped    <span class="o">(</span>1<span class="o">)</span> <span class="o">(</span>sha1_55b15eb3ac72351249125a3de7a81aee2bda6a2a.blob__.jpg<span class="o">)</span>: image/album/GitEverythingAlbum_01.jpg -&gt; s3://emenar.com/gitevery/giteveryrepo1/sha1_55b15eb3ac72351249125a3de7a81aee2bda6a2a.blob__.jpg
</span></code></pre></td></tr></table></div></figure>


<p>The original annexing of the file did upload two files, and looked like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>INFO: Upload     <span class="o">(</span>1<span class="o">)</span>: ./image/album/GitEverythingAlbum_01.jpg -&gt; s3://emenar.com/gitevery/giteveryrepo1/sha1_55b15eb3ac72351249125a3de7a81aee2bda6a2a.blob
</span><span class='line'>File <span class="s1">&#39;./image/album/GitEverythingAlbum_01.jpg&#39;</span> started <span class="o">[</span>1 of 30<span class="o">]</span>
</span><span class='line'>...
</span><span class='line'>File <span class="s1">&#39;./image/album/GitEverythingAlbum_01.jpg&#39;</span> stored as <span class="s1">&#39;s3://emenar.com/gitevery/giteveryrepo1/sha1_55b15eb3ac72351249125a3de7a81aee2bda6a2a.blob&#39;</span> <span class="o">(</span>4960530 bytes ...<span class="o">)</span> <span class="o">[</span>1 of 30<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Inflating Many Files</h4>

<p>The <code>inflate</code> and <code>deflate</code> scripts accept paths so you can inflate the whole album with:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>./bin/inflatePaths.sh image/album
</span></code></pre></td></tr></table></div></figure>


<p>or even inflate the whole repository:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>./bin/inflatePaths.sh .
</span></code></pre></td></tr></table></div></figure>


<p>With the default settings, this will launch 10 workers doing 10 files at a time in total.  How long
the whole 100MB download takes will almost likely depend on your maximum bandwidth, but if not,
just change the number of workers to a larger number.  S3 is very supportive of many requests by
different workers.</p>

<h3>EC2 Walkthrough</h3>

<p>On EC2 the performance numbers are pretty amazing, so I created a simple CloudFormation so people
can test it out.  The CloudFormation is here:</p>

<ul>
<li> <a href="https://s3.amazonaws.com/emenar.com/gitevery/aws/cloudformation/GitEverythingServer1.template">https://s3.amazonaws.com/emenar.com/gitevery/aws/cloudformation/GitEverythingServer1.template</a></li>
</ul>


<p>and it can be run by going to AWS CloudFormation and just giving it one of your keypairs:</p>

<ul>
<li> <a href="https://console.aws.amazon.com/cloudformation/">https://console.aws.amazon.com/cloudformation/</a></li>
</ul>


<h4>EC2 Performance</h4>

<p>After the instance launches, SSH in, &#8216;sudo su -&#8216;, and change to the repository:</p>

<ul>
<li> /root/gitrepo/giteveryrepo1</li>
</ul>


<p>run <code>inflatePaths</code> with the standard 10 workers</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">time</span> ./bin/inflatePaths.sh image
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>INFO: Compiling list of <span class="nb">local </span>files <span class="k">for</span> <span class="s1">&#39;file://image&#39;</span>, <span class="s1">&#39;image&#39;</span>, <span class="s1">&#39;image&#39;</span>
</span><span class='line'>INFO: Applying --exclude/--include
</span><span class='line'>INFO: Retrieving list of remote files <span class="k">for </span>s3://emenar.com/gitevery/giteveryrepo1/ ...
</span><span class='line'>INFO: Summary: 30 <span class="nb">local </span>files to fetch, 60 remote files present
</span><span class='line'>INFO: Inflating<span class="o">[</span>1<span class="o">]</span> from S3 <span class="o">(</span>1<span class="o">)</span> <span class="o">(</span>sha1_55b15eb3ac72351249125a3de7a81aee2bda6a2a.blob<span class="o">)</span>: image/album/GitEverythingAlbum_01.jpg &lt;- s3://emenar.com/gitevery/giteveryrepo1/sha1_55b15eb3ac72351249125a3de7a81aee2bda6a2a.blob
</span><span class='line'>File s3://emenar.com/gitevery/giteveryrepo1/sha1_55b15eb3ac72351249125a3de7a81aee2bda6a2a.blob started <span class="o">[</span>1 of 30<span class="o">]</span>
</span><span class='line'>INFO: Receiving file <span class="s1">&#39;image/album/GitEverythingAlbum_01.jpg&#39;</span>, please
</span><span class='line'>...
</span><span class='line'>File s3://emenar.com/gitevery/giteveryrepo1/sha1_801a329248a9cbe48b512f2a75179437382dba02.blob saved as <span class="s1">&#39;image/album/GitEverythingAlbum_21.jpg&#39;</span> <span class="o">(</span>4194668 bytes in 3.1 seconds, 1330.45 kB/s<span class="o">)</span>
</span><span class='line'>File s3://emenar.com/gitevery/giteveryrepo1/sha1_7d5d055068a9b7e268e21279770f03a5e8c6c9d3.blob saved as <span class="s1">&#39;image/album/GitEverythingAlbum_22.jpg&#39;</span> <span class="o">(</span>4576223 bytes in 3.0 seconds, 1477.96 kB/s<span class="o">)</span>
</span><span class='line'>File s3://emenar.com/gitevery/giteveryrepo1/sha1_02bf4b647b623dac68e1913b8d3494856041047c.blob saved as <span class="s1">&#39;image/album/GitEverythingAlbum_25.jpg&#39;</span> <span class="o">(</span>4742594 bytes in 2.6 seconds, 1777.42 kB/s<span class="o">)</span>
</span><span class='line'>File s3://emenar.com/gitevery/giteveryrepo1/sha1_856984959467b2427c2a4e9ade642a3d3c26b0fd.blob saved as <span class="s1">&#39;image/album/GitEverythingAlbum_20.jpg&#39;</span> <span class="o">(</span>4208680 bytes in 4.2 seconds, 971.63 kB/s<span class="o">)</span>
</span><span class='line'>File s3://emenar.com/gitevery/giteveryrepo1/sha1_7cb2e0318459e276dc4b65987bbe8bd6021357df.blob saved as <span class="s1">&#39;image/album/GitEverythingAlbum_28.jpg&#39;</span> <span class="o">(</span>3559585 bytes in 2.2 seconds, 1559.41 kB/s<span class="o">)</span>
</span><span class='line'>File s3://emenar.com/gitevery/giteveryrepo1/sha1_b855966214caa10638f76a3aba6b6df7b0caffca.blob saved as <span class="s1">&#39;image/album/GitEverythingAlbum_29.jpg&#39;</span> <span class="o">(</span>3820335 bytes in 2.2 seconds, 1718.09 kB/s<span class="o">)</span>
</span><span class='line'>File s3://emenar.com/gitevery/giteveryrepo1/sha1_2abd18dfa4510e1dfc72f643bff3639b42f2aa32.blob saved as <span class="s1">&#39;image/album/GitEverythingAlbum_30.jpg&#39;</span> <span class="o">(</span>2679517 bytes in 2.1 seconds, 1229.88 kB/s<span class="o">)</span>
</span><span class='line'>File s3://emenar.com/gitevery/giteveryrepo1/sha1_fc322e938362e0c40ccf5e09789a1cb6b6995882.blob saved as <span class="s1">&#39;image/album/GitEverythingAlbum_26.jpg&#39;</span> <span class="o">(</span>3909187 bytes in 3.0 seconds, 1285.67 kB/s<span class="o">)</span>
</span><span class='line'>File s3://emenar.com/gitevery/giteveryrepo1/sha1_fd63032739c810743521ad1de0546d67b13b4357.blob saved as <span class="s1">&#39;image/album/GitEverythingAlbum_27.jpg&#39;</span> <span class="o">(</span>3465440 bytes in 2.9 seconds, 1157.55 kB/s<span class="o">)</span>
</span><span class='line'>File s3://emenar.com/gitevery/giteveryrepo1/sha1_798788e370f243a2a38f91bf8979fd46070a4ae2.blob saved as <span class="s1">&#39;image/album/GitEverythingAlbum_24.jpg&#39;</span> <span class="o">(</span>3461363 bytes in 5.3 seconds, 634.12 kB/s<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>real  0m10.372s
</span><span class='line'>user  0m4.311s
</span><span class='line'>sys   0m2.948s
</span></code></pre></td></tr></table></div></figure>


<p>So it took 10 seconds to download 100MB.  That is 80Mb/s on an &#8216;m1.small&#8217; which is a pretty nice number to work with.  Changing to 100 workers doesn&#8217;t make much difference (about 9 seconds),
so this is pretty much the saturation of &#8216;m1.small&#8217; to S3 performance.  Larger instance types can perform even better.</p>

<h2>Summary &#8211; Annexing makes Git good at binary files</h2>

<p>By using S3 as an Annex for binary files, we can make &#8216;git&#8217; be exceptionally good at dealing with large amount of binary content.  Git simply
manages the history of 50-byte annex-stub text files, and git is very fast and efficient at doing that.  The annex-enhanced s3cmd can run many
workers to upload/deflate and download/inflate the binary files to and from S3.  Especially on EC2 the performance numbers can be super-fast:</p>

<ul>
<li> Clone repository &lt; 5 seconds</li>
<li> Inflate 100MB of files &lt; 10 seconds</li>
</ul>


<p>By combining git with a powerful annex solution, working with lots of version-controlled information
of any size has become all of: very simple, very fast, very distributable, and very inexpensive.</p>

<h3>Alternatives</h3>

<p>There are some alternative approaches out there, which I should mention.  Some I tried and they didn&#8217;t perform well
enough.  Others didn&#8217;t match the needs we had at Rumble or my needs outside of Rumble.  But they are interesting
projects:</p>

<ul>
<li> <a href="http://git-annex.branchable.com/">http://git-annex.branchable.com/</a></li>
<li> <a href="https://github.com/schacon/git-media">https://github.com/schacon/git-media</a></li>
</ul>


<h3>Next</h3>

<p>Our next problem will be&#8230;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Being a git about everything (Intro)]]></title>
    <link href="http://markfussell.emenar.com/blog/2013/01/11/git-about-everything-intro/"/>
    <updated>2013-01-11T18:16:00-08:00</updated>
    <id>http://markfussell.emenar.com/blog/2013/01/11/git-about-everything-intro</id>
    <content type="html"><![CDATA[<p>There are times when a new technology comes along, that at first appears to be pretty similar to
existing technology, but certain characteristics make for radically different or just nicely new solutions.
A recent example of this is &#8216;git&#8217; and similar distributed version control systems (DVCS).  They may
at first appear to be an interesting version of centralized version/content management systems, but
they are really much more&#8230; a core piece of technology useful for many things.</p>

<p>This is a series about how to use git to solve many different problems, some obvious and some more unusual.
I hope a few of them are interesting to readers.</p>

<!-- more -->


<p>There are alternative DVCSs but I am not going to compare or translate examples&#8230; at least not on a first pass.
Git was created by Linus Torvalds in 2005.  It was initially quite &#8216;raw&#8217; and still maintains much of that rawness,
but other tools (e.g. github) and general improvements have made it more accessible.  For source-code control, git has some big wins
in collaboration and offline work compared to SVN, Perforce, and the like.  Whether these are worth some trade-offs depends on your team
and company&#8230; but that is a different topic.</p>

<h2>Git Syntax / Overview</h2>

<p>You can learn more about git somewhere like github:</p>

<ul>
<li> <a href="http://learn.github.com/p/intro.html">http://learn.github.com/p/intro.html</a></li>
</ul>


<p>Git has a lot of commands, but around seven are core to standard git flows:</p>

<ul>
<li> clone &mdash; copy a repository from a remote location</li>
<li> fetch &mdash; get updates from a remote repository</li>
<li> merge &mdash; merge changes from one branch into the current branch</li>
<li> pull &mdash; &#8216;fetch&#8217; and then &#8216;merge&#8217;</li>
<li> add &mdash; add changes to the commit stage of the current branch</li>
<li> commit &mdash; commit the changes into the current branch</li>
<li> push &mdash; try to make a remote branch look like the current branch</li>
</ul>


<p>Actually of those seven &#8216;pull&#8217; basically replaces/combines two of them, so you get
down to about five with a core loop like this:</p>

<ul>
<li> clone

<ul>
<li>pull</li>
<li>make changes (if needed)

<ul>
<li>add</li>
<li>commit</li>
<li>push</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>Of these commands only &#8216;push&#8217; can fail due to timing.  &#8216;push&#8217; is transactional
and you can be contending with other people or machines that pushed to the same branch
as you between when you pulled and you pushed.  Merging can fail, but that
represents some actual file-level conflict vs. a timing issue (someone beat you to the &#8216;push&#8217;).
A proper &#8216;commit&#8217; can&#8217;t fail because it is local.</p>

<h3>Repositories and branches</h3>

<p>At least to begin, all these solutions will use a standard centralized repository approach
and generally not use branches.  So you don&#8217;t have to worry about git&#8217;s ability to
deal with many remotes and which branch a given git repository is using.  By default
at any current moment there is only</p>

<ul>
<li> local: &#8216;master&#8217; <-> remote: origin/master</li>
</ul>


<p>where things get interesting because there could be 100 different machines each with their own &#8216;local&#8217;.</p>

<h3>Problems with git / DVCS</h3>

<p>The biggest issue with git and similar DVCSs is that their model doesn&#8217;t work well for large amounts of
binary assets.  Large amounts of binary assets could occur either because there are a large number of
assets available at any time but only a subset are needed (so with Perforce or SVN many people would not
check out those directories) or more commonly, a modest number of binary assets are frequently
changing.  Because a git repository contains all assets throughout time and to work with a git repository
you clone the whole thing, having a large amount of binary assets punishes everyone.</p>

<p>What is a large amount?  That depends on the circumstances, but generally passing 100MB can start to
become painful depending on the purpose git is being used for.  Having 1GB of textual files in
a single git repository (even over time) is an unusual thing.  GBs of images is common.</p>

<p>So our first problems and solution is going to have to deal with this critical issue.</p>

<p>Enter the annex: <a href="http://markfussell.emenar.com/blog/2013/01/13/git-about-everything-annex/">Annex</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scratch on Flash]]></title>
    <link href="http://markfussell.emenar.com/blog/2008/09/19/scratchonflash/"/>
    <updated>2008-09-19T18:00:00-07:00</updated>
    <id>http://markfussell.emenar.com/blog/2008/09/19/scratchonflash</id>
    <content type="html"><![CDATA[<p>The original version of this posting is on the <a href="http://scratch.mit.edu/forums/viewtopic.php?id=9982">MIT Scratch Forum</a> and the
current location of the repository is <a href="https://github.com/markfussell/scratchonflash">https://github.com/markfussell/scratchonflash</a></p>

<p>In the spirit of release early and often&#8230;</p>

<p>I have made a full bottom-to-top pass at implementing Scratch in Flash.  It can:</p>

<ul>
<li> Read a scratch project file</li>
<li> Create the project model (Stage, Sprites, Blocks, etc.)</li>
<li> Run that model (the core variable assignments, loops, etc.)</li>
<li> And do a couple of the other kinds of Sprite blocks in the &#8216;motion&#8217; and &#8216;looks&#8217; categories</li>
</ul>


<!-- more -->


<p>It most definitely does not:</p>

<ul>
<li> Respond to mouse or key events yet (but that is trivial to finish&#8230;)</li>
<li> Do all the blocks&#8230; this is going to take work to map them all into Flash and especially the Sound area could be problematic</li>
<li> Draw things properly &#8211; for one, the center of the stage is not 0,0 and the y axis is &#8216;upside-down&#8217; [I said this was &#8216;early&#8217;]</li>
<li> Run the model correctly for all control blocks.  The core concepts are there and the blocks I have tested work right [and I picked interesting ones], but I have not tested beyond a couple projects</li>
<li> Read the Sound media at all</li>
<li> Show any of the Watchers &#8211; Either variables or lists</li>
</ul>


<p>But given those caveats and all that I have forgotten, there is a demo at Scratch on Flash</p>

<p>You put a project URL into the text area and click &#8216;Open&#8217;.  Then click &#8216;Go!&#8217; and if your project responds to &#8216;Go!&#8217; things may or may not start happening :-)    Note that the URL is smart about shared projects on this site (and locates the &#8216;.sb&#8217; file automatically if you give it the project&#8217;s url) but if you use a local file system URL or some other web site, you will need to have a full path to the &#8216;.sb&#8217; file.</p>

<p>The window has a console at the bottom, a textual dump of the program above that, and has a &#8216;Step Processor&#8217; above that.  By default the program is running one step every 30th of a second, but you can turn that off or make more steps occur every 30th of a second.</p>

<p>=======================</p>

<p>It could easily be that only the one project &#8216;Tower of Hanoi&#8217; does anything interesting&#8230; probably within a short time some other projects would work too.  By default, I would probably start picking and choosing among Tutorials or the included &#8216;Projects&#8217; (is there a Gallery on the site for all the Included projects?).</p>

<p>I will release source in some format in the next release &#8211; things are pretty clean and somewhat commented, but I think I should get a little further and make sure I am not going to rename or repackage anything.  And I will need to strip out the few &#8216;Flex&#8217; references from within the core Scratch model so a smaller SWF download is possible.</p>

<p>If anyone is interested in working on this &#8211; doing Blocks and verifying that functionality is working, please let me know.  If people are interested then I will put source into a public RCS like Subversion or Git sooner than later.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scratch Textual Language]]></title>
    <link href="http://markfussell.emenar.com/blog/2008/09/17/scratch-textual-language/"/>
    <updated>2008-09-17T20:28:00-07:00</updated>
    <id>http://markfussell.emenar.com/blog/2008/09/17/scratch-textual-language</id>
    <content type="html"><![CDATA[<p><a href="http://scratch.mit.edu/">Scratch</a> is a visual programming language, but it might usefully have a textual version as well.
Scratch in it&#8217;s graphical form can verify syntax intuitively &amp; automatically, and the resulting graphics are definitely beautiful, but it took quite some effort to produce
<a href="../../08/a-taste-of-scratch">these diagrams</a>
when trying to document a program, and it is even harder to reference sections of the diagram.</p>

<!-- more -->


<p>This activity came out of producing a Scratch Player in Flash, and I wanted to see whether the parse of the file produced the correct program.  A textual dump of the parse was an obvious solution, but then this &#8216;dump&#8217; might as well be the same as a complete program declaration so it was clearly &#8216;complete&#8217; and I wasn&#8217;t missing anything.</p>

<h2>Scratch Textual</h2>

<p>The core concepts in this proposed textual language for Scratch are:</p>

<ul>
<li><p>It should match Scratch as closely as possible</p></li>
<li><p>It should be a readable and easily writeable textual language (vs. XML as an interchange format)</p></li>
<li><p>It should be translatable to other human languages for the blocks (as Scratch is)</p></li>
<li><p>It should be really simple to produce and parse</p></li>
<li><p>Given Scratch is graphical, visual indentation is reasonable</p></li>
<li><p>It is not a complete &#8216;dump&#8217; of the Scratch project &#8211; no media resources are included.</p></li>
</ul>


<p>The above concepts produced the following initial choices:</p>

<ul>
<li><p>Different sections start with simple keywords: &#8220;stage:&#8221; and &#8220;sprite:&#8221; for the main objects, &#8220;vars:&#8221; and &#8216;listVars:&#8221; for declaring variables, &#8220;comment:&#8221; for a comment section, and &#8220;script:&#8221; for declaring a sequence of blocks.</p></li>
<li><p>Variables simply define their name and an initial value (if desired&#8230; otherwise it would be &#8216;0&#8217;)</p></li>
<li><p>Each block is written out textually with its &#8216;spec&#8217; &#8211; a human readable description of the block and its parameters</p></li>
<li><p>The parameters to a block (if any) come immediately after, and are preferably indented [say 4 spaces] from the block they are parameters too.  Note that the indentation is not necessary because you can tell the number of parameters from the block &#8216;spec&#8217;, but indenting makes it more readable.</p></li>
<li><p>If a block can contain other blocks, contained blocks <em>must be</em> indented [say 4 spaces] so you can tell they are inside the block vs. after the block.  This is in a fashion similar to Python.</p></li>
<li><p>There should be no blank line within a &#8216;script:&#8217; section.  The end of a script: section is the first blank (non-comment) line.</p></li>
<li><p>Comments within the textual blocks use &#8216;#&#8217; to match with Python.  Multi-line comments do not exist.  Note that Textual Comments are not parsed at all (and do not round-trip), so they should be minimal and merely augment parsing the textual source &#8211; use &#8216;comment:&#8217; for real documentation.</p></li>
<li><p>&#8216;script:&#8217; and &#8216;comment:&#8217; could have position information after them using the &#8216;loc&#8217; property (e.g. &#8220;loc = 500@250&#8221;) but this is not likely to be useful since any edits would cause positions to be wrong</p></li>
</ul>


<h3>An Example</h3>

<p>The following is a complete &#8220;normal expanded format&#8221; version.  See further below for a possible optimization to make things more vertically compressed.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
<span class='line-number'>264</span>
<span class='line-number'>265</span>
<span class='line-number'>266</span>
<span class='line-number'>267</span>
<span class='line-number'>268</span>
<span class='line-number'>269</span>
<span class='line-number'>270</span>
<span class='line-number'>271</span>
<span class='line-number'>272</span>
<span class='line-number'>273</span>
<span class='line-number'>274</span>
<span class='line-number'>275</span>
<span class='line-number'>276</span>
<span class='line-number'>277</span>
<span class='line-number'>278</span>
<span class='line-number'>279</span>
<span class='line-number'>280</span>
<span class='line-number'>281</span>
<span class='line-number'>282</span>
<span class='line-number'>283</span>
<span class='line-number'>284</span>
<span class='line-number'>285</span>
<span class='line-number'>286</span>
<span class='line-number'>287</span>
<span class='line-number'>288</span>
<span class='line-number'>289</span>
<span class='line-number'>290</span>
<span class='line-number'>291</span>
<span class='line-number'>292</span>
<span class='line-number'>293</span>
<span class='line-number'>294</span>
<span class='line-number'>295</span>
<span class='line-number'>296</span>
<span class='line-number'>297</span>
<span class='line-number'>298</span>
<span class='line-number'>299</span>
<span class='line-number'>300</span>
<span class='line-number'>301</span>
<span class='line-number'>302</span>
<span class='line-number'>303</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#===========================</span>
</span><span class='line'><span class="c">#=== Morph: Stage </span>
</span><span class='line'><span class="c">#===========================</span>
</span><span class='line'><span class="n">stage</span><span class="p">:</span> <span class="n">Stage</span>
</span><span class='line'>
</span><span class='line'><span class="c">#============</span>
</span><span class='line'><span class="c">#=== Vars </span>
</span><span class='line'><span class="c">#============</span>
</span><span class='line'>
</span><span class='line'><span class="nb">vars</span><span class="p">:</span>
</span><span class='line'><span class="n">talest</span><span class="o">-</span><span class="n">pole</span><span class="o">-</span><span class="n">height</span> <span class="o">=</span> <span class="mi">6</span>
</span><span class='line'><span class="n">previous</span><span class="o">-</span><span class="n">moved</span><span class="o">-</span><span class="n">disk</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="n">potential</span><span class="o">-</span><span class="n">disk</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'><span class="n">num</span><span class="o">-</span><span class="n">disks</span> <span class="o">=</span> <span class="mi">5</span>
</span><span class='line'><span class="nb">next</span><span class="o">-</span><span class="n">disk</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="n">base</span><span class="o">-</span><span class="n">disk</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'><span class="n">listVars</span><span class="p">:</span>
</span><span class='line'><span class="n">pole</span><span class="o">-</span><span class="mi">1</span> <span class="o">=</span> <span class="n">undefined</span>
</span><span class='line'><span class="n">pole</span><span class="o">-</span><span class="mi">2</span> <span class="o">=</span> <span class="n">undefined</span>
</span><span class='line'><span class="n">moveable</span><span class="o">-</span><span class="n">disks</span> <span class="o">=</span> <span class="n">undefined</span>
</span><span class='line'><span class="n">pole</span><span class="o">-</span><span class="mi">3</span> <span class="o">=</span> <span class="n">undefined</span>
</span><span class='line'>
</span><span class='line'><span class="c">#============</span>
</span><span class='line'><span class="c">#=== Script </span>
</span><span class='line'><span class="c">#============</span>
</span><span class='line'><span class="n">script</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'><span class="n">when</span> <span class="s">&#39;find-next-disk&#39;</span>
</span><span class='line'><span class="nb">set</span> <span class="nb">next</span><span class="o">-</span><span class="n">disk</span> <span class="n">to</span> <span class="o">%</span><span class="n">n</span>
</span><span class='line'>    <span class="mi">0</span>
</span><span class='line'><span class="n">broadcast</span> <span class="o">%</span><span class="n">e</span> <span class="ow">and</span> <span class="n">wait</span>
</span><span class='line'>    <span class="n">propose</span><span class="o">-</span><span class="nb">next</span><span class="o">-</span><span class="n">disk</span>
</span><span class='line'><span class="n">repeat</span> <span class="n">until</span> <span class="o">%</span><span class="n">b</span>
</span><span class='line'>    <span class="o">%</span><span class="n">n</span> <span class="o">&gt;</span> <span class="o">%</span><span class="n">n</span>
</span><span class='line'>        <span class="nb">next</span><span class="o">-</span><span class="n">disk</span>
</span><span class='line'>        <span class="mi">0</span>
</span><span class='line'>    <span class="nb">set</span> <span class="n">potential</span><span class="o">-</span><span class="n">disk</span> <span class="n">to</span> <span class="o">%</span><span class="n">n</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">%</span><span class="n">b</span>
</span><span class='line'>        <span class="ow">not</span> <span class="o">%</span><span class="n">b</span>
</span><span class='line'>            <span class="o">%</span><span class="n">n</span> <span class="o">=</span> <span class="o">%</span><span class="n">n</span>
</span><span class='line'>                <span class="n">potential</span><span class="o">-</span><span class="n">disk</span>
</span><span class='line'>                <span class="n">previous</span><span class="o">-</span><span class="n">moved</span><span class="o">-</span><span class="n">disk</span>
</span><span class='line'>        <span class="nb">set</span> <span class="nb">next</span><span class="o">-</span><span class="n">disk</span> <span class="n">to</span> <span class="o">%</span><span class="n">n</span>
</span><span class='line'>            <span class="n">potential</span><span class="o">-</span><span class="n">disk</span>
</span><span class='line'><span class="n">broadcast</span> <span class="o">%</span><span class="n">e</span> <span class="ow">and</span> <span class="n">wait</span>
</span><span class='line'>    <span class="n">move</span><span class="o">-</span><span class="nb">next</span><span class="o">-</span><span class="n">disk</span>
</span><span class='line'>
</span><span class='line'><span class="c">#============</span>
</span><span class='line'><span class="c">#=== Script </span>
</span><span class='line'><span class="c">#============</span>
</span><span class='line'><span class="n">script</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'><span class="n">when</span> <span class="s">&#39;Scratch-StartClicked&#39;</span>
</span><span class='line'><span class="nb">set</span> <span class="n">num</span><span class="o">-</span><span class="n">disks</span> <span class="n">to</span> <span class="o">%</span><span class="n">n</span>
</span><span class='line'>    <span class="mi">5</span>
</span><span class='line'><span class="nb">set</span> <span class="n">base</span><span class="o">-</span><span class="n">disk</span> <span class="n">to</span> <span class="o">%</span><span class="n">n</span>
</span><span class='line'>    <span class="o">%</span><span class="n">n</span> <span class="o">+</span> <span class="o">%</span><span class="n">n</span>
</span><span class='line'>        <span class="n">num</span><span class="o">-</span><span class="n">disks</span>
</span><span class='line'>        <span class="mi">1</span>
</span><span class='line'><span class="nb">set</span> <span class="nb">next</span><span class="o">-</span><span class="n">disk</span> <span class="n">to</span> <span class="o">%</span><span class="n">n</span>
</span><span class='line'>    <span class="n">num</span><span class="o">-</span><span class="n">disks</span>
</span><span class='line'><span class="n">repeat</span> <span class="n">until</span> <span class="o">%</span><span class="n">b</span>
</span><span class='line'>    <span class="o">%</span><span class="n">n</span> <span class="o">&lt;</span> <span class="o">%</span><span class="n">n</span>
</span><span class='line'>        <span class="nb">next</span><span class="o">-</span><span class="n">disk</span>
</span><span class='line'>        <span class="mi">1</span>
</span><span class='line'>    <span class="nb">set</span> <span class="nb">next</span><span class="o">-</span><span class="n">disk</span> <span class="n">to</span> <span class="o">%</span><span class="n">n</span>
</span><span class='line'>        <span class="o">%</span><span class="n">n</span> <span class="o">-</span> <span class="o">%</span><span class="n">n</span>
</span><span class='line'>            <span class="nb">next</span><span class="o">-</span><span class="n">disk</span>
</span><span class='line'>            <span class="mi">1</span>
</span><span class='line'><span class="n">broadcast</span> <span class="o">%</span><span class="n">e</span> <span class="ow">and</span> <span class="n">wait</span>
</span><span class='line'>    <span class="n">initialize</span>
</span><span class='line'><span class="nb">set</span> <span class="n">previous</span><span class="o">-</span><span class="n">moved</span><span class="o">-</span><span class="n">disk</span> <span class="n">to</span> <span class="o">%</span><span class="n">n</span>
</span><span class='line'>    <span class="mi">0</span>
</span><span class='line'><span class="nb">set</span> <span class="n">talest</span><span class="o">-</span><span class="n">pole</span><span class="o">-</span><span class="n">height</span> <span class="n">to</span> <span class="o">%</span><span class="n">n</span>
</span><span class='line'>    <span class="mi">0</span>
</span><span class='line'><span class="n">repeat</span> <span class="n">until</span> <span class="o">%</span><span class="n">b</span>
</span><span class='line'>    <span class="o">%</span><span class="n">n</span> <span class="o">&gt;</span> <span class="o">%</span><span class="n">n</span>
</span><span class='line'>        <span class="n">talest</span><span class="o">-</span><span class="n">pole</span><span class="o">-</span><span class="n">height</span>
</span><span class='line'>        <span class="n">num</span><span class="o">-</span><span class="n">disks</span>
</span><span class='line'>    <span class="n">broadcast</span> <span class="o">%</span><span class="n">e</span> <span class="ow">and</span> <span class="n">wait</span>
</span><span class='line'>        <span class="n">find</span><span class="o">-</span><span class="nb">next</span><span class="o">-</span><span class="n">disk</span>
</span><span class='line'>    <span class="nb">set</span> <span class="n">talest</span><span class="o">-</span><span class="n">pole</span><span class="o">-</span><span class="n">height</span> <span class="n">to</span> <span class="o">%</span><span class="n">n</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">%</span><span class="n">b</span>
</span><span class='line'>        <span class="o">%</span><span class="n">n</span> <span class="o">&gt;</span> <span class="o">%</span><span class="n">n</span>
</span><span class='line'>            <span class="n">talest</span><span class="o">-</span><span class="n">pole</span><span class="o">-</span><span class="n">height</span>
</span><span class='line'>        <span class="nb">set</span> <span class="n">talest</span><span class="o">-</span><span class="n">pole</span><span class="o">-</span><span class="n">height</span> <span class="n">to</span> <span class="o">%</span><span class="n">n</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c">#===========================</span>
</span><span class='line'><span class="c">#=== Morph: Sprite1 </span>
</span><span class='line'><span class="c">#===========================</span>
</span><span class='line'><span class="n">sprite</span><span class="p">:</span> <span class="n">Sprite1</span>
</span><span class='line'>
</span><span class='line'><span class="c">#============</span>
</span><span class='line'><span class="c">#=== Vars </span>
</span><span class='line'><span class="c">#============</span>
</span><span class='line'>
</span><span class='line'><span class="nb">vars</span><span class="p">:</span>
</span><span class='line'><span class="n">can</span><span class="o">-</span><span class="n">move</span> <span class="o">=</span> <span class="mi">3</span>
</span><span class='line'><span class="n">am</span><span class="o">-</span><span class="n">on</span><span class="o">-</span><span class="n">top</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'><span class="n">disk</span><span class="o">-</span><span class="nb">id</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'><span class="n">pole</span> <span class="o">=</span> <span class="mi">3</span>
</span><span class='line'><span class="n">height</span> <span class="o">=</span> <span class="mi">6</span>
</span><span class='line'><span class="n">previous</span><span class="o">-</span><span class="n">pole</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'><span class="n">pole</span><span class="o">-</span><span class="n">at</span><span class="o">-</span><span class="n">start</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'><span class="c">#============</span>
</span><span class='line'><span class="c">#=== Script </span>
</span><span class='line'><span class="c">#============</span>
</span><span class='line'><span class="n">script</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'><span class="n">when</span> <span class="s">&#39;move-next-disk&#39;</span>
</span><span class='line'><span class="k">if</span> <span class="o">%</span><span class="n">b</span>
</span><span class='line'>    <span class="o">%</span><span class="n">n</span> <span class="o">=</span> <span class="o">%</span><span class="n">n</span>
</span><span class='line'>        <span class="n">disk</span><span class="o">-</span><span class="nb">id</span>
</span><span class='line'>        <span class="nb">next</span><span class="o">-</span><span class="n">disk</span>
</span><span class='line'>    <span class="nb">set</span> <span class="n">previous</span><span class="o">-</span><span class="n">moved</span><span class="o">-</span><span class="n">disk</span> <span class="n">to</span> <span class="o">%</span><span class="n">n</span>
</span><span class='line'>        <span class="n">disk</span><span class="o">-</span><span class="nb">id</span>
</span><span class='line'>    <span class="nb">set</span> <span class="n">pole</span><span class="o">-</span><span class="n">at</span><span class="o">-</span><span class="n">start</span> <span class="n">to</span> <span class="o">%</span><span class="n">n</span>
</span><span class='line'>        <span class="n">pole</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">%</span><span class="n">b</span>
</span><span class='line'>        <span class="o">%</span><span class="n">b</span> <span class="ow">and</span> <span class="o">%</span><span class="n">b</span>
</span><span class='line'>            <span class="ow">not</span> <span class="o">%</span><span class="n">b</span>
</span><span class='line'>                <span class="o">%</span><span class="n">b</span> <span class="ow">or</span> <span class="o">%</span><span class="n">b</span>
</span><span class='line'>                    <span class="o">%</span><span class="n">n</span> <span class="o">=</span> <span class="o">%</span><span class="n">n</span>
</span><span class='line'>                        <span class="n">previous</span><span class="o">-</span><span class="n">pole</span>
</span><span class='line'>                        <span class="mi">1</span>
</span><span class='line'>                    <span class="o">%</span><span class="n">n</span> <span class="o">=</span> <span class="o">%</span><span class="n">n</span>
</span><span class='line'>                        <span class="n">pole</span>
</span><span class='line'>                        <span class="mi">1</span>
</span><span class='line'>            <span class="o">%</span><span class="n">n</span> <span class="o">&lt;</span> <span class="o">%</span><span class="n">n</span>
</span><span class='line'>                <span class="n">disk</span><span class="o">-</span><span class="nb">id</span>
</span><span class='line'>        <span class="nb">set</span> <span class="n">pole</span> <span class="n">to</span> <span class="o">%</span><span class="n">n</span>
</span><span class='line'>            <span class="mi">1</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">%</span><span class="n">b</span>
</span><span class='line'>        <span class="o">%</span><span class="n">b</span> <span class="ow">and</span> <span class="o">%</span><span class="n">b</span>
</span><span class='line'>            <span class="ow">not</span> <span class="o">%</span><span class="n">b</span>
</span><span class='line'>                <span class="o">%</span><span class="n">b</span> <span class="ow">or</span> <span class="o">%</span><span class="n">b</span>
</span><span class='line'>                    <span class="o">%</span><span class="n">n</span> <span class="o">=</span> <span class="o">%</span><span class="n">n</span>
</span><span class='line'>                        <span class="n">previous</span><span class="o">-</span><span class="n">pole</span>
</span><span class='line'>                        <span class="mi">2</span>
</span><span class='line'>                    <span class="o">%</span><span class="n">n</span> <span class="o">=</span> <span class="o">%</span><span class="n">n</span>
</span><span class='line'>                        <span class="n">pole</span>
</span><span class='line'>                        <span class="mi">2</span>
</span><span class='line'>            <span class="o">%</span><span class="n">n</span> <span class="o">&lt;</span> <span class="o">%</span><span class="n">n</span>
</span><span class='line'>                <span class="n">disk</span><span class="o">-</span><span class="nb">id</span>
</span><span class='line'>        <span class="nb">set</span> <span class="n">pole</span> <span class="n">to</span> <span class="o">%</span><span class="n">n</span>
</span><span class='line'>            <span class="mi">2</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">%</span><span class="n">b</span>
</span><span class='line'>        <span class="o">%</span><span class="n">b</span> <span class="ow">and</span> <span class="o">%</span><span class="n">b</span>
</span><span class='line'>            <span class="ow">not</span> <span class="o">%</span><span class="n">b</span>
</span><span class='line'>                <span class="o">%</span><span class="n">b</span> <span class="ow">or</span> <span class="o">%</span><span class="n">b</span>
</span><span class='line'>                    <span class="o">%</span><span class="n">n</span> <span class="o">=</span> <span class="o">%</span><span class="n">n</span>
</span><span class='line'>                        <span class="n">previous</span><span class="o">-</span><span class="n">pole</span>
</span><span class='line'>                        <span class="mi">3</span>
</span><span class='line'>                    <span class="o">%</span><span class="n">n</span> <span class="o">=</span> <span class="o">%</span><span class="n">n</span>
</span><span class='line'>                        <span class="n">pole</span>
</span><span class='line'>                        <span class="mi">3</span>
</span><span class='line'>            <span class="o">%</span><span class="n">n</span> <span class="o">&lt;</span> <span class="o">%</span><span class="n">n</span>
</span><span class='line'>                <span class="n">disk</span><span class="o">-</span><span class="nb">id</span>
</span><span class='line'>        <span class="nb">set</span> <span class="n">pole</span> <span class="n">to</span> <span class="o">%</span><span class="n">n</span>
</span><span class='line'>            <span class="mi">3</span>
</span><span class='line'>    <span class="nb">set</span> <span class="n">previous</span><span class="o">-</span><span class="n">pole</span> <span class="n">to</span> <span class="o">%</span><span class="n">n</span>
</span><span class='line'>        <span class="n">pole</span><span class="o">-</span><span class="n">at</span><span class="o">-</span><span class="n">start</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">%</span><span class="n">b</span>
</span><span class='line'>        <span class="o">%</span><span class="n">n</span> <span class="o">=</span> <span class="o">%</span><span class="n">n</span>
</span><span class='line'>            <span class="n">previous</span><span class="o">-</span><span class="n">pole</span>
</span><span class='line'>            <span class="mi">1</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">%</span><span class="n">b</span>
</span><span class='line'>        <span class="o">%</span><span class="n">n</span> <span class="o">=</span> <span class="o">%</span><span class="n">n</span>
</span><span class='line'>            <span class="n">previous</span><span class="o">-</span><span class="n">pole</span>
</span><span class='line'>            <span class="mi">2</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">%</span><span class="n">b</span>
</span><span class='line'>        <span class="o">%</span><span class="n">n</span> <span class="o">=</span> <span class="o">%</span><span class="n">n</span>
</span><span class='line'>            <span class="n">previous</span><span class="o">-</span><span class="n">pole</span>
</span><span class='line'>            <span class="mi">3</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">%</span><span class="n">b</span>
</span><span class='line'>        <span class="o">%</span><span class="n">n</span> <span class="o">=</span> <span class="o">%</span><span class="n">n</span>
</span><span class='line'>            <span class="n">pole</span>
</span><span class='line'>            <span class="mi">1</span>
</span><span class='line'>        <span class="nb">set</span> <span class="n">height</span> <span class="n">to</span> <span class="o">%</span><span class="n">n</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">%</span><span class="n">b</span>
</span><span class='line'>        <span class="o">%</span><span class="n">n</span> <span class="o">=</span> <span class="o">%</span><span class="n">n</span>
</span><span class='line'>            <span class="n">pole</span>
</span><span class='line'>            <span class="mi">2</span>
</span><span class='line'>        <span class="nb">set</span> <span class="n">height</span> <span class="n">to</span> <span class="o">%</span><span class="n">n</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">%</span><span class="n">b</span>
</span><span class='line'>        <span class="o">%</span><span class="n">n</span> <span class="o">=</span> <span class="o">%</span><span class="n">n</span>
</span><span class='line'>            <span class="n">pole</span>
</span><span class='line'>            <span class="mi">3</span>
</span><span class='line'>        <span class="nb">set</span> <span class="n">height</span> <span class="n">to</span> <span class="o">%</span><span class="n">n</span>
</span><span class='line'>
</span><span class='line'><span class="c">#============</span>
</span><span class='line'><span class="c">#=== Script </span>
</span><span class='line'><span class="c">#============</span>
</span><span class='line'><span class="n">script</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'><span class="n">when</span> <span class="s">&#39;propose-next-disk&#39;</span>
</span><span class='line'><span class="nb">set</span> <span class="n">am</span><span class="o">-</span><span class="n">on</span><span class="o">-</span><span class="n">top</span> <span class="n">to</span> <span class="o">%</span><span class="n">n</span>
</span><span class='line'>    <span class="mi">0</span>
</span><span class='line'><span class="nb">set</span> <span class="n">can</span><span class="o">-</span><span class="n">move</span> <span class="n">to</span> <span class="o">%</span><span class="n">n</span>
</span><span class='line'>    <span class="mi">0</span>
</span><span class='line'><span class="k">if</span> <span class="o">%</span><span class="n">b</span>
</span><span class='line'>    <span class="o">%</span><span class="n">b</span> <span class="ow">and</span> <span class="o">%</span><span class="n">b</span>
</span><span class='line'>        <span class="o">%</span><span class="n">n</span> <span class="o">=</span> <span class="o">%</span><span class="n">n</span>
</span><span class='line'>            <span class="n">pole</span>
</span><span class='line'>            <span class="mi">1</span>
</span><span class='line'>        <span class="o">%</span><span class="n">n</span> <span class="o">=</span> <span class="o">%</span><span class="n">n</span>
</span><span class='line'>            <span class="n">disk</span><span class="o">-</span><span class="nb">id</span>
</span><span class='line'>    <span class="nb">set</span> <span class="n">am</span><span class="o">-</span><span class="n">on</span><span class="o">-</span><span class="n">top</span> <span class="n">to</span> <span class="o">%</span><span class="n">n</span>
</span><span class='line'>        <span class="mi">1</span>
</span><span class='line'><span class="k">if</span> <span class="o">%</span><span class="n">b</span>
</span><span class='line'>    <span class="o">%</span><span class="n">b</span> <span class="ow">and</span> <span class="o">%</span><span class="n">b</span>
</span><span class='line'>        <span class="o">%</span><span class="n">n</span> <span class="o">=</span> <span class="o">%</span><span class="n">n</span>
</span><span class='line'>            <span class="n">pole</span>
</span><span class='line'>            <span class="mi">2</span>
</span><span class='line'>        <span class="o">%</span><span class="n">n</span> <span class="o">=</span> <span class="o">%</span><span class="n">n</span>
</span><span class='line'>            <span class="n">disk</span><span class="o">-</span><span class="nb">id</span>
</span><span class='line'>    <span class="nb">set</span> <span class="n">am</span><span class="o">-</span><span class="n">on</span><span class="o">-</span><span class="n">top</span> <span class="n">to</span> <span class="o">%</span><span class="n">n</span>
</span><span class='line'>        <span class="mi">1</span>
</span><span class='line'><span class="k">if</span> <span class="o">%</span><span class="n">b</span>
</span><span class='line'>    <span class="o">%</span><span class="n">b</span> <span class="ow">and</span> <span class="o">%</span><span class="n">b</span>
</span><span class='line'>        <span class="o">%</span><span class="n">n</span> <span class="o">=</span> <span class="o">%</span><span class="n">n</span>
</span><span class='line'>            <span class="n">pole</span>
</span><span class='line'>            <span class="mi">3</span>
</span><span class='line'>        <span class="o">%</span><span class="n">n</span> <span class="o">=</span> <span class="o">%</span><span class="n">n</span>
</span><span class='line'>            <span class="n">disk</span><span class="o">-</span><span class="nb">id</span>
</span><span class='line'>    <span class="nb">set</span> <span class="n">am</span><span class="o">-</span><span class="n">on</span><span class="o">-</span><span class="n">top</span> <span class="n">to</span> <span class="o">%</span><span class="n">n</span>
</span><span class='line'>        <span class="mi">1</span>
</span><span class='line'><span class="k">if</span> <span class="o">%</span><span class="n">b</span>
</span><span class='line'>    <span class="o">%</span><span class="n">n</span> <span class="o">&gt;</span> <span class="o">%</span><span class="n">n</span>
</span><span class='line'>        <span class="n">am</span><span class="o">-</span><span class="n">on</span><span class="o">-</span><span class="n">top</span>
</span><span class='line'>        <span class="mi">0</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">%</span><span class="n">b</span>
</span><span class='line'>        <span class="o">%</span><span class="n">b</span> <span class="ow">and</span> <span class="o">%</span><span class="n">b</span>
</span><span class='line'>            <span class="ow">not</span> <span class="o">%</span><span class="n">b</span>
</span><span class='line'>                <span class="o">%</span><span class="n">b</span> <span class="ow">or</span> <span class="o">%</span><span class="n">b</span>
</span><span class='line'>                    <span class="o">%</span><span class="n">n</span> <span class="o">=</span> <span class="o">%</span><span class="n">n</span>
</span><span class='line'>                        <span class="n">previous</span><span class="o">-</span><span class="n">pole</span>
</span><span class='line'>                        <span class="mi">1</span>
</span><span class='line'>                    <span class="o">%</span><span class="n">n</span> <span class="o">=</span> <span class="o">%</span><span class="n">n</span>
</span><span class='line'>                        <span class="n">pole</span>
</span><span class='line'>                        <span class="mi">1</span>
</span><span class='line'>            <span class="o">%</span><span class="n">n</span> <span class="o">&lt;</span> <span class="o">%</span><span class="n">n</span>
</span><span class='line'>                <span class="n">disk</span><span class="o">-</span><span class="nb">id</span>
</span><span class='line'>        <span class="nb">set</span> <span class="n">can</span><span class="o">-</span><span class="n">move</span> <span class="n">to</span> <span class="o">%</span><span class="n">n</span>
</span><span class='line'>            <span class="mi">1</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">%</span><span class="n">b</span>
</span><span class='line'>        <span class="o">%</span><span class="n">b</span> <span class="ow">and</span> <span class="o">%</span><span class="n">b</span>
</span><span class='line'>            <span class="ow">not</span> <span class="o">%</span><span class="n">b</span>
</span><span class='line'>                <span class="o">%</span><span class="n">b</span> <span class="ow">or</span> <span class="o">%</span><span class="n">b</span>
</span><span class='line'>                    <span class="o">%</span><span class="n">n</span> <span class="o">=</span> <span class="o">%</span><span class="n">n</span>
</span><span class='line'>                        <span class="n">previous</span><span class="o">-</span><span class="n">pole</span>
</span><span class='line'>                        <span class="mi">2</span>
</span><span class='line'>                    <span class="o">%</span><span class="n">n</span> <span class="o">=</span> <span class="o">%</span><span class="n">n</span>
</span><span class='line'>                        <span class="n">pole</span>
</span><span class='line'>                        <span class="mi">2</span>
</span><span class='line'>            <span class="o">%</span><span class="n">n</span> <span class="o">&lt;</span> <span class="o">%</span><span class="n">n</span>
</span><span class='line'>                <span class="n">disk</span><span class="o">-</span><span class="nb">id</span>
</span><span class='line'>        <span class="nb">set</span> <span class="n">can</span><span class="o">-</span><span class="n">move</span> <span class="n">to</span> <span class="o">%</span><span class="n">n</span>
</span><span class='line'>            <span class="mi">2</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">%</span><span class="n">b</span>
</span><span class='line'>        <span class="o">%</span><span class="n">b</span> <span class="ow">and</span> <span class="o">%</span><span class="n">b</span>
</span><span class='line'>            <span class="ow">not</span> <span class="o">%</span><span class="n">b</span>
</span><span class='line'>                <span class="o">%</span><span class="n">b</span> <span class="ow">or</span> <span class="o">%</span><span class="n">b</span>
</span><span class='line'>                    <span class="o">%</span><span class="n">n</span> <span class="o">=</span> <span class="o">%</span><span class="n">n</span>
</span><span class='line'>                        <span class="n">previous</span><span class="o">-</span><span class="n">pole</span>
</span><span class='line'>                        <span class="mi">3</span>
</span><span class='line'>                    <span class="o">%</span><span class="n">n</span> <span class="o">=</span> <span class="o">%</span><span class="n">n</span>
</span><span class='line'>                        <span class="n">pole</span>
</span><span class='line'>                        <span class="mi">3</span>
</span><span class='line'>            <span class="o">%</span><span class="n">n</span> <span class="o">&lt;</span> <span class="o">%</span><span class="n">n</span>
</span><span class='line'>                <span class="n">disk</span><span class="o">-</span><span class="nb">id</span>
</span><span class='line'>        <span class="nb">set</span> <span class="n">can</span><span class="o">-</span><span class="n">move</span> <span class="n">to</span> <span class="o">%</span><span class="n">n</span>
</span><span class='line'>            <span class="mi">3</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">%</span><span class="n">b</span>
</span><span class='line'>        <span class="o">%</span><span class="n">n</span> <span class="o">&gt;</span> <span class="o">%</span><span class="n">n</span>
</span><span class='line'>            <span class="n">can</span><span class="o">-</span><span class="n">move</span>
</span><span class='line'>            <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'><span class="c">#============</span>
</span><span class='line'><span class="c">#=== Script </span>
</span><span class='line'><span class="c">#============</span>
</span><span class='line'><span class="n">script</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'><span class="n">when</span> <span class="s">&#39;initialize&#39;</span>
</span><span class='line'><span class="nb">set</span> <span class="n">disk</span><span class="o">-</span><span class="nb">id</span> <span class="n">to</span> <span class="o">%</span><span class="n">n</span>
</span><span class='line'>    <span class="mi">1</span>
</span><span class='line'><span class="nb">set</span> <span class="n">pole</span> <span class="n">to</span> <span class="o">%</span><span class="n">n</span>
</span><span class='line'>    <span class="mi">1</span>
</span><span class='line'><span class="nb">set</span> <span class="n">previous</span><span class="o">-</span><span class="n">pole</span> <span class="n">to</span> <span class="o">%</span><span class="n">n</span>
</span><span class='line'>    <span class="mi">0</span>
</span><span class='line'><span class="nb">set</span> <span class="n">can</span><span class="o">-</span><span class="n">move</span> <span class="n">to</span> <span class="o">%</span><span class="n">n</span>
</span><span class='line'>    <span class="mi">0</span>
</span><span class='line'><span class="nb">set</span> <span class="n">am</span><span class="o">-</span><span class="n">on</span><span class="o">-</span><span class="n">top</span> <span class="n">to</span> <span class="o">%</span><span class="n">n</span>
</span><span class='line'>    <span class="mi">0</span>
</span><span class='line'><span class="nb">set</span> <span class="n">height</span> <span class="n">to</span> <span class="o">%</span><span class="n">n</span>
</span><span class='line'>    <span class="o">%</span><span class="n">n</span> <span class="o">+</span> <span class="o">%</span><span class="n">n</span>
</span><span class='line'>        <span class="o">%</span><span class="n">n</span> <span class="o">-</span> <span class="o">%</span><span class="n">n</span>
</span><span class='line'>            <span class="n">base</span><span class="o">-</span><span class="n">disk</span>
</span><span class='line'>            <span class="n">disk</span><span class="o">-</span><span class="nb">id</span>
</span><span class='line'>        <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Vertical Compression</h3>

<p>The format above has every block on its own line.  This is readable and informative (you can see the argument types) but is vertically expansive.  Assuming parentheses or some other paired delimiter are not used for anything else in names, we could replace the argument placeholders with parentheses like below.  This gives a more lisp-like feel, at least for the inner evaluations.  If you leave one or more placeholders off, they would come from the next lines in &#8216;missing&#8217; order, kind of like a macro.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">script</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'><span class="n">when</span> <span class="s">&#39;find-next-disk&#39;</span>
</span><span class='line'><span class="nb">set</span> <span class="nb">next</span><span class="o">-</span><span class="n">disk</span> <span class="n">to</span> <span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="n">broadcast</span> <span class="p">(</span><span class="n">propose</span><span class="o">-</span><span class="nb">next</span><span class="o">-</span><span class="n">disk</span><span class="p">)</span> <span class="ow">and</span> <span class="n">wait</span>
</span><span class='line'><span class="n">repeat</span> <span class="n">until</span> <span class="p">((</span><span class="nb">next</span><span class="o">-</span><span class="n">disk</span><span class="p">)</span> <span class="o">&gt;</span> <span class="p">(</span><span class="mi">0</span><span class="p">))</span>
</span><span class='line'>    <span class="nb">set</span> <span class="n">potential</span><span class="o">-</span><span class="n">disk</span> <span class="n">to</span> <span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="ow">not</span> <span class="p">(</span> <span class="p">(</span><span class="n">potential</span><span class="o">-</span><span class="n">disk</span><span class="p">)</span> <span class="o">=</span> <span class="p">(</span><span class="n">previous</span><span class="o">-</span><span class="n">moved</span><span class="o">-</span><span class="n">disk</span><span class="p">))</span> <span class="p">)</span>
</span><span class='line'>        <span class="nb">set</span> <span class="nb">next</span><span class="o">-</span><span class="n">disk</span> <span class="n">to</span> <span class="p">(</span><span class="n">potential</span><span class="o">-</span><span class="n">disk</span><span class="p">)</span>
</span><span class='line'><span class="n">broadcast</span> <span class="p">(</span><span class="n">move</span><span class="o">-</span><span class="nb">next</span><span class="o">-</span><span class="n">disk</span><span class="p">)</span> <span class="ow">and</span> <span class="n">wait</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Taste of Scratch]]></title>
    <link href="http://markfussell.emenar.com/blog/2008/09/08/a-taste-of-scratch/"/>
    <updated>2008-09-08T04:15:00-07:00</updated>
    <id>http://markfussell.emenar.com/blog/2008/09/08/a-taste-of-scratch</id>
    <content type="html"><![CDATA[<p>One of my favored books in the 1980s was ‘A Taste of Smalltalk’. This was a very short book that gave you the flavor of Smalltalk programming (the language and IDE) as compared to Pascal, C, and Lisp. I believe it is always important to show multiple programming languages for concepts and this book followed that rule. The goal of this post-series is to take ‘A Taste of Smalltalk’ and apply it to Scratch (a visual programming language).  This is the third of my comparisons in this series, where the first one was in Ruby.</p>

<!-- more -->


<p>You can find the original book here:</p>

<ul>
<li><p><a href="http://www.iam.unibe.ch/~ducasse/FreeBooks/Taste/">A Taste of Smalltalk</a></p></li>
<li><p><a href="http://stephane.ducasse.free.fr/FreeBooks.html">Free Smalltalk Books</a></p></li>
</ul>


<p>Given the original book is available online, I will not repeat it.</p>

<p>You can both see the example in Scratch and get tools and background on the Scratch project at:
<a href="http://scratch.mit.edu/projects/parseroo/260752">Tower of Hanoi</a>.  The scratch tools and the community web site are free.</p>

<h2>Tower of Hanoi &#8211; Object-Oriented (V4) &#8211; Scratch</h2>

<p>The standard pattern for this series is to translate as closely as possible each of the chapters in &#8220;A Taste of Smalltalk&#8221; to the new target language.  This worked reasonably well for Ruby and Flex &#8211; the Smalltalk was translated and interesting features of the language came out with each translation.  But this approach utterly fails for Scratch because the first two &#8216;models&#8217; of the Hanoi algorithm are completely dependent on recursion, which Scratch does not have.  Even the third, stack-less version of Hanoi requires inter-object calls that Scratch can not handle.  So <em>none</em> of the algorithms within &#8220;A Taste of Smalltalk&#8221; can be directly translated to Scratch.</p>

<p>This might appear to be a limitation of the language (and in some ways it certainly is), but somewhat impressively, I believe thinking about this problem, with the restrictions of Scratch, actually leads to a better design solution than any of the ones in the book.  It is certainly a very object-oriented solution, where the &#8216;Hanoi Disks&#8217; have a lot of intelligence and are made as responsible as possible for figuring out what to do next.  This version of the algorithm, I will call &#8216;V4&#8217;.</p>

<h3>The V4 Algorithm</h3>

<p>The V4 Algorithm works as follows:</p>

<ol>
<li><p>Ask each of the disks whether they have a legal move</p></li>
<li><p>Decide which of the disks with a legal move should move</p></li>
<li><p>Tell that disk to move</p></li>
</ol>


<p>The interesting parts of this algorithm are that:</p>

<ul>
<li><p>Step 1 can be completely parallel.  You can ask 1 to 1000000 disks at the same moment whether they have a legal move.</p></li>
<li><p>Step 2 is really trivial: just don&#8217;t move the same disk you did last time</p></li>
</ul>


<p>Compared to the V3 version, the V4 version puts more intelligence in the disks (and less in the tower), couples them less, and supports mass parallel-execution.  The parallel-execution is not useful in Hanoi, but the concepts behind it are definitely very interesting &#8211; and Scratch&#8217;s restrictions forces this kind of &#8216;sophisticated&#8217; approach [or at least it forced me down this path to maintain code-sanity and maintainability].</p>

<h3>The main Scratch Player view</h3>

<p>Scratch is designed to be an easy-to-learn language and environment.  Its heritage is along the lines of the spirit of Logo: there is a Stage drawing area and a default Sprite (a Cat) that you interact with for animation and drawing.  But this Stage can also show the variables involved with the program.  So it produces a nice overview of the whole Hanoi program:</p>

<p><a href="http://chimu.files.wordpress.com/2008/09/atasteofscratch_d3.png"><img src="http://chimu.files.wordpress.com/2008/09/atasteofscratch_d3.png" alt="" /></a></p>

<p>Not all application variables are shown, but those shown are the most important ones.  The details of the variables will be gone over later, but some are self-evident:</p>

<ul>
<li><p>num-disks: The number of disks (the height) of the Tower of Hanoi</p></li>
<li><p>pole-#: A List (treated as a Stack) of Disk identifiers, where &#8216;6&#8217; = a base (immovable) disk</p></li>
<li><p>movable-disks: A List of disks that can be moved.  This is transitory for each iteration of the algorithm.</p></li>
</ul>


<p>If you click the &#8216;Green Flag&#8217;, the program executes and on pretty much every step the display is updated, so you can see disks being proposed and moved (in both animation and variables).  Independently of Scratch having a graphical programming language, it has a very nice graphical development and run environment.</p>

<h3>Application Variables</h3>

<p>The application variables are shown below.  All of these are &#8216;Globals&#8217; and can be accessed by any object.  Those variables colored in red are lists and those colored in orange are numbers/strings/etc.  All the variables that have check-marks next to them are being displayed on top of the Stage above.</p>

<p><a href="http://chimu.files.wordpress.com/2008/09/atasteofscratch_d1.png"><img src="http://chimu.files.wordpress.com/2008/09/atasteofscratch_d1.png" alt="" /></a></p>

<p>There is no such thing as a &#8216;local&#8217; variable (private to a block of code), so it might be useful to use a naming prefix to differentiate between &#8216;local&#8217; variables (like &#8216;potential-disk&#8217;) from instance variables and even &#8216;parameter&#8217; variables that go with a broadcast (&#8216;next-disk&#8217;).  But in-the-small, that is not particularly important.</p>

<h3>Application Initialization</h3>

<p>Now that we have an overview of the application and its global state variables, we can start working through the algorithm itself.  The main &#8216;Object&#8217; in Scratch is the Stage, and I made this own the outer-most aspects of the Hanoi application and algorithm.  The first activity is &#8216;Initialization&#8217;, which is triggered by the &#8216;Green Flag&#8217; [my particular choice].</p>

<p><a href="http://chimu.files.wordpress.com/2008/09/atasteofscratch_d2.png"><img src="http://chimu.files.wordpress.com/2008/09/atasteofscratch_d2.png" alt="" /></a></p>

<p>Because this is the first example of Scratch, I will walk through the sections of the code and what they do with a few visual marker numbers (see the right column of blue).</p>

<p>When the Stage gets the Green Flag event:</p>

<ol>
<li><p>It sets the number of disks to &#8216;5&#8217;.  This is hard-coded because Scratch is currently unable to clone Sprites (objects) on the fly, so we have to precreate all the needed sprites.  In any case, this is simple enough to change if someone wants.  The additional variable &#8216;base-disk&#8217; is defined so it can be used below.  &#8216;base-disk&#8217; is just a local variable and is never used again. After this, we just clear the lists so they are &#8216;clean&#8217;</p></li>
<li><p>Next we add the &#8216;base-disk&#8217; to the bottom of each pole.  The base-disks are invisible and immovable (no matching Sprite/Object), so this is a very clean way of making the algorithm simpler later on.</p></li>
<li><p>Next we add the disks to &#8216;pole-1&#8217; using what should be another local variable.  Later I reuse this variable [something I don&#8217;t like doing] just because we otherwise have a clutter of variables.</p></li>
<li><p>Next we send out a broadcast to <em>all objects</em> telling them to initialize themselves.  There is no direct message send to an object, so it is up to the other objects to know what to respond to and what to ignore.  The broadcast waits until all object&#8217;s acknowledge they are finished.</p></li>
<li><p>Finally, we go into the main loop.  Until all the disks have moved to a new pole, we will execute &#8216;find-next-disk&#8217; which both finds and moves the next disk.  When we are done, we make a noise :-)</p></li>
</ol>


<h3>Find and Move Next Disk</h3>

<p>The main part of the algorithm has some nice aspects and some nastier aspects.  The nice side: We simply send out a broadcast of &#8216;propose-next-disk&#8217;, which all Disks should respond to by adding themselves to &#8216;movable-disks&#8217; if they have a desire to move.  This will only ever be one or two movable disks at any given time.  One of those disks may have been moved immediately previously, so we skip over it.  The selected disk is put into &#8216;next-disk&#8217; and another broadcast goes out &#8220;move-next-disk&#8221;.  The second broadcast is not really a broadcast.  It is a message send to &#8216;next-disk&#8217;, but it is only by the disks themselves ignoring a broadcast that isn&#8217;t to them that it becomes a message send.  So that is slightly nasty.</p>

<p>In any case, the code is pretty clean and concise, and this ends the code on the Stage itself.  The rest of the algorithm is on the Disks.</p>

<p><a href="http://chimu.files.wordpress.com/2008/09/atasteofscratch_d4.png"><img src="http://chimu.files.wordpress.com/2008/09/atasteofscratch_d4.png" alt="" /></a></p>

<h3>Disks Variables</h3>

<p>The Disks have access to all the Stage global variables.  In addition, each Sprite can have its own instance-private variables, which are either true instance variables (&#8216;disk-id&#8217;, &#8216;pole&#8217;, &#8216;previous-pole&#8217;) or would be local variables if Scratch supported them (&#8216;can-move&#8217;, &#8216;am-on-top&#8217;, etc.)</p>

<p><a href="http://chimu.files.wordpress.com/2008/09/atasteofscratch_d5.png"><img src="http://chimu.files.wordpress.com/2008/09/atasteofscratch_d5.png" alt="" /></a></p>

<p>Instance variables can be displayed on the Stage also, but this becomes overwhelming if all instances are turned on.</p>

<h3>Disk Initialization</h3>

<p>Upon receiving the &#8216;initialize&#8217; broadcast, all Disks set their &#8216;disk-id&#8217; (which must be different for each disk), and then set themselves up properly in size, color, and move onto the correct pole.</p>

<p><a href="http://chimu.files.wordpress.com/2008/09/atasteofscratch_d6.png"><img src="http://chimu.files.wordpress.com/2008/09/atasteofscratch_d6.png" alt="" /></a></p>

<h3>Propose Next Disk</h3>

<p>Scratch has certain deficiencies that rear their heads badly in the Hanoi code.  The concept of Propose Next Disk is as simple as:</p>

<pre><code>If 
   * I am on-top of a pole 
   * And I can move to a new pole (with a bigger disk on its top) 
   * And that new pole isn't the pole I just came from
Then
   * Add myself to the movable-disks list
</code></pre>

<p>But because Scratch (or my knowledge of Scratch) is deficient in dynamic referencing of variables, the &#8216;propose-next-disk&#8217; code needs to expand all the potential pole values from 1 through 3.  Fortunately this is only a three-valued expansion, but the code looks quite nasty for being as simple as the above.</p>

<p><a href="http://chimu.files.wordpress.com/2008/09/atasteofscratch_d7.png"><img src="http://chimu.files.wordpress.com/2008/09/atasteofscratch_d7.png" alt="" /></a></p>

<h3>Move Next Disk</h3>

<p>The Move Next Disk code has (1) the filter on the broadcast (in this case by &#8216;disk-id&#8217;) to make it only go to a single object and (2) a ton of noise due to &#8216;pole&#8217; expansion mentioned above.  But the code gets the job done and it looks fairly colorful :-)</p>

<p><a href="http://chimu.files.wordpress.com/2008/09/atasteofscratch_d8.png"><img src="http://chimu.files.wordpress.com/2008/09/atasteofscratch_d8.png" alt="" /></a></p>

<h2>Conclusions</h2>

<p>I was impressed that Scratch was able to get Tower of Hanoi to run properly.  Scratch has actively avoided certain features that the Scratch team finds are difficult to understand.  But the toolbox of event processing, broadcasts, lists, and Sprites (objects with Stage presence :-) ) are rich enough that a pre-sized Hanoi can be created and will run correctly.  A dynamic Hanoi would require Sprite cloning, which is not in Scratch 1.3.</p>

<p>The nastiest aspect to Scratch was its inability to dynamically reference the pole lists.  And a missing feature to Scratch are simple procedures (for example, the &#8216;glide&#8217; code is repeated twice).  The missing recursion is clearly another missing feature, but in this case getting rid of that recursion made the algorithm somewhat nicer.</p>

<p>On the whole, Scratch is a very inspiring visual language and development environment, and it did a good job with this &#8216;offbeat&#8217; test.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Naming Convention Failure]]></title>
    <link href="http://markfussell.emenar.com/blog/2008/09/04/ruby-naming-convention-failure/"/>
    <updated>2008-09-04T01:20:00-07:00</updated>
    <id>http://markfussell.emenar.com/blog/2008/09/04/ruby-naming-convention-failure</id>
    <content type="html"><![CDATA[<p>Ruby has a strong recommendation against using CamelCase for method and variable names and to use only underscores instead.  There are lots of arguments out there on different naming conventions, and whatever side I pick in isolation is fairly irrelevant since either the whole community or the individual team has to chose the best approach.</p>

<!-- more -->


<p>In case people care, in isolation of other issues, I would pick this order as being the most natural:</p>

<ol>
<li><p>Mark-Fussell (or mark-fussell)</p></li>
<li><p>MarkFussell</p></li>
<li><p>Mark_Fussell (or mark_fussell)</p></li>
</ol>


<p>where the underscore goes third mostly because it can be hard to see [URLs and other things put underlines <em>on top</em> of that underline like thus <em>Mark_Fussell</em>], is harder to type, and it over spaces things visually.  So I (and lots of people actually) believe programming languages <em>should</em> use hyphens, but because a bunch of programming languages want &#8216;a-b&#8217; to be interpreted as &#8216;a - b&#8217;, they cop out and prevent the hyphen from being part of a name.  Ruby has that same cop out, so we can&#8217;t use hyphens in Ruby :-(</p>

<h2>Missing Phrase Delimiter</h2>

<p>So I said my opinion is fairly irrelevant, but I also want to say that people have missed an important aspect to this argument.  I may have a small preference for CamelCase over underlines as a single word delimiter, but I have a <em>huge</em> preference to having both a &#8216;word&#8217; and a &#8216;phrase&#8217; delimiter.  And by insisting on just one delimiter in this naming standard, Ruby has significantly interfered with expressiveness.  Maybe I am unusual, but I have long-time argued that we should have both words and phrases in methods and frequently even in classes.  Back in the 1990s, I documented this as part of my <a href="http://www.chimu.com/publications/javaStandards2/part0006.html#E11E13">JavaStandards</a> and this was based on Smalltalk naturally having both of these pieces.  It was clearly more readable and you were much less likely to produce bad method names.</p>

<p>For method naming, the quick summary is:</p>

<ul>
<li><p>When naming a method</p></li>
<li><p>Start with a verb phrase (what you are asking the object to do)</p></li>
<li><p>Put an underscore where a parameter is expected (up to the first two at least)</p></li>
<li><p>Describe what that parameter is for right before the underscore, if it is not obvious from the verb</p></li>
</ul>


<p>this way, the reader of the code can immediately know how the parameters (in the parentheses) map onto their role in the method itself.  And the whole method name becomes a readable phrase&#8230; not just a weird long word strung together (by whatever convention you want).</p>

<h3>Array::insert</h3>

<p>So an example is:</p>

<pre><code>Array::insert(index, obj)
</code></pre>

<p>This is a method name that is ambiguous in usage:</p>

<pre><code>anArray.insert(3,2)
</code></pre>

<p>It is not clear what the code is going to do and I would actually intuitively expect it to be the other way around (except I know about getting burned so would then have to look it up).</p>

<p>A better name would be:</p>

<pre><code>Array::insert_at(obj,index)
</code></pre>

<p>so reading:</p>

<pre><code>anArray.insert_at(3,2)
</code></pre>

<p>is clearly inserting the &#8216;3&#8217; not inserting the &#8216;2&#8217;.</p>

<p>Or if people like the order the other way:</p>

<pre><code>   Array::insertAt_value(index,obj)

   anArray.insertAt_value(2,3)
</code></pre>

<p>And in the Ruby case where any number of values could follow, we should have:</p>

<pre><code>   Array::insertAt_values(index,obj...)

   anArray.insertAt_values(2,3)
   anArray.insertAt_values(2,5,3)
</code></pre>

<p>and everything reads naturally something like this &#8220;anArray insertAt: 2 values: 5 and 3&#8221;.</p>

<h3>forPolesOtherThan_do(disk)</h3>

<p>Related to a recent post on the Tower of Hanoi, I believe the resulting choice of:</p>

<pre><code>forPolesOtherThan_do(disk) [block]
</code></pre>

<p>is much clearer in both communicating what the passed in &#8216;disk&#8217; is for and that it requires a block as a second (semi-hidden) argument than if you have only a word delimiter and have any of:</p>

<pre><code>   for_poles_other_than
   for_poles_other_than_do
   forPolesOtherThan
   forPolesOtherThanDo
</code></pre>

<h2>What to do?</h2>

<p>Given Ruby wants to use underscore to separate words&#8230; I can&#8217;t separate the phrases at all.  I tried to wrestle my mind around using something different, but Ruby surprisingly (for a modern and internationally-created) language does not have any other punctuation that is allowed and could plausibly work.  So maybe use two underscores for the phrase point?  That seems seriously ugly and also two underscores don&#8217;t really look different from one underscore:</p>

<pre><code>   insert_at__values
   for_poles_other_than__do
</code></pre>

<p>Using capitals for this purpose just comes off weird (plausible but weird):</p>

<pre><code>   insert_at_Values
   for_poles_other_than_Do
</code></pre>

<p>It is also exactly the opposite of Smalltalk, and I try to be able to work across languages without having to flip upside down all the time.  Same regarding Java and Flex (two other languages I actively work in).  For reference, the Smalltalk version of these examples are:</p>

<pre><code>   insertAt: values:
   forPolesOtherThan: do:
</code></pre>

<h3>Arguments about non-English speakers</h3>

<p>One argument I (so far) find specious is that using capitals prevents non-native speakers from understanding the code.  I could maybe believe this is true in rare cases &#8211; but (1) nobody has a study referenced that shows that, and (2) if that were true, someone simply has to learn the language better.  You can&#8217;t argue that some people&#8217;s inability to use a language is a reason to not use a feature of that language.  That would argue that almost all syntax in languages should be stripped, and few languages (and especially computer languages) can survive that.  Actually only Lisp survives that (give me just a pair of delimiters, and I can rule the world :-) )</p>

<p>Also given Ruby uses CamelCase for classes, you already have a requirement to understand this kind of syntax aspect.  So Ruby is presupposing the reader can read the syntax it is arguing the reader can&#8217;t read.</p>

<h3>The standard, in different languages</h3>

<p>A more interesting question is whether the &#8220;word and phrase standard&#8221; survives human-language change.  Obviously the standard does not work &#8220;as written&#8221; if the language used is not a capital-capable language.  And an obviously important language for that test is written Chinese (traditional or simplified).  But actually the &#8216;underscores for phrases and parameters&#8217; degrades with Chinese better than &#8216;underscores for words&#8217;.  Chinese doesn&#8217;t require spaces for words to be apparent, and does not use spaces at all for that purpose (normally) &#8211; it is obvious where each word starts and ends without spacing because a word is only a couple characters long.  So given words are apparent, the only thing left is to have phrases.  Although unnatural to use underscores for phrases and parameters, it at least seems plausibly useful.</p>

<p>Admittedly I have not tried in depth to program in Chinese (Smalltalk/Agents by QKS had the ability way back but I only played with it a little) and have not found a study on it&#8230;  so I can&#8217;t say for sure whether the underscore for parameters would make sense.  But it is at least plausible it would make sense and it would make much more sense than underscore to separate (already separated) words.</p>

<p>Another plausible language to test against would be Hindi, but (I believe) most writers of Hindi in the computer field are also excellent English writers, so that is harder to argue for.</p>

<h3>Could be hyphens</h3>

<p>Note that the convention is totally happy with using &#8216;hyphens&#8217; as word separators if the environment supports it.</p>

<pre><code>   insert-at_values
   for-poles-other-than_do
</code></pre>

<h2>Summary: Ruby has it wrong &#8211; We need CamelWords or hyphen-words</h2>

<p>So I believe Ruby has it wrong and am very unhappy a modern language started 20 years after Smalltalk and several years after Dylan would get this kind of thing wrong.  And I recommend moving the Ruby standard to the CamelWord_UnderPhrase standard, or allowing the hyphen and use the hyphen-word_under-phrase standard.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Taste of Ruby (Part 7)]]></title>
    <link href="http://markfussell.emenar.com/blog/2008/09/03/a-taste-of-ruby-part-7/"/>
    <updated>2008-09-03T02:28:00-07:00</updated>
    <id>http://markfussell.emenar.com/blog/2008/09/03/a-taste-of-ruby-part-7</id>
    <content type="html"><![CDATA[<p>This is a multi-part series. The first in the series is <a href="a-taste-of-ruby">here</a>.</p>

<h2>Tower of Hanoi &mdash; Rules on Rails</h2>

<p>In part 6 we changed the algorithm of Tower Of Hanoi to work without requiring the stack &#8211; it instead &#8220;more naturally&#8221; put sufficient state and logic into the model that the model could start and stop and continue as needed.  I believe with Ruby 1.8.x, this is required to have Rails be able to work with the Tower of Hanoi.  So we should try it out and see how well it works :-)</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;hanoi_7&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">HanoiController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">say</span>
</span><span class='line'>    <span class="vi">@hanoi</span> <span class="o">=</span> <span class="n">session</span><span class="o">[</span><span class="ss">:hanoi</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="vi">@hanoi</span> <span class="o">==</span> <span class="kp">nil</span><span class="p">)</span> <span class="k">then</span>
</span><span class='line'>      <span class="vi">@hanoi</span> <span class="o">=</span> <span class="n">createHanoi</span>
</span><span class='line'>      <span class="n">session</span><span class="o">[</span><span class="ss">:count</span><span class="o">]</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>      <span class="n">session</span><span class="o">[</span><span class="ss">:consoleLog</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="vi">@hanoi</span><span class="o">.</span><span class="n">initApp</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@isDone</span> <span class="o">=</span> <span class="vi">@hanoi</span><span class="o">.</span><span class="n">doNextMove_IsDone</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">#clear the app because otherwise it will be part of the attempted serialization</span>
</span><span class='line'>    <span class="c1">#could also override the marshaling code, but this is simpler</span>
</span><span class='line'>    <span class="vi">@hanoi</span><span class="o">.</span><span class="n">initApp</span><span class="p">(</span><span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">#clear out the session variable, but @hanoi is still valid through</span>
</span><span class='line'>    <span class="c1">#the rest of this interaction</span>
</span><span class='line'>    <span class="n">session</span><span class="o">[</span><span class="ss">:hanoi</span><span class="o">]</span> <span class="o">=</span> <span class="vi">@isDone</span> <span class="p">?</span> <span class="kp">nil</span> <span class="p">:</span> <span class="vi">@hanoi</span>
</span><span class='line'>
</span><span class='line'>    <span class="vi">@count</span> <span class="o">=</span> <span class="n">session</span><span class="o">[</span><span class="ss">:count</span><span class="o">]</span> <span class="o">||=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="vi">@count</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="n">session</span><span class="o">[</span><span class="ss">:count</span><span class="o">]</span> <span class="o">=</span> <span class="vi">@count</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="vi">@isDone</span><span class="p">)</span> <span class="k">then</span>
</span><span class='line'>      <span class="n">render</span><span class="p">(</span><span class="ss">:action</span> <span class="o">=&gt;</span> <span class="s1">&#39;say_done&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">appendLog</span><span class="p">(</span><span class="n">outString</span><span class="p">)</span>
</span><span class='line'>    <span class="n">logger</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s2">&quot;Append to Log: &quot;</span><span class="o">+</span><span class="n">outString</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@consoleLog</span> <span class="o">=</span> <span class="n">session</span><span class="o">[</span><span class="ss">:consoleLog</span><span class="o">]</span> <span class="o">||=</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="vi">@consoleLog</span> <span class="o">=</span> <span class="vi">@consoleLog</span> <span class="o">+</span> <span class="n">outString</span> <span class="o">+</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="n">session</span><span class="o">[</span><span class="ss">:consoleLog</span><span class="o">]</span> <span class="o">=</span> <span class="vi">@consoleLog</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">noteChange</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">createHanoi</span>
</span><span class='line'>    <span class="n">hanoi</span> <span class="o">=</span> <span class="no">RulesTowerOfHanoi</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>    <span class="n">hanoi</span><span class="o">.</span><span class="n">initHeight</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'>    <span class="n">hanoi</span><span class="o">.</span><span class="n">setup_disks</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">hanoi</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">getAsciiTowers</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>    <span class="n">lines</span> <span class="o">=</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>    <span class="vi">@hanoi</span><span class="o">.</span><span class="n">stacks</span><span class="o">.</span><span class="n">each_with_index</span> <span class="k">do</span> <span class="o">|</span> <span class="n">eachStack</span><span class="p">,</span> <span class="n">i</span> <span class="o">|</span>
</span><span class='line'>      <span class="mi">0</span><span class="o">.</span><span class="n">upto</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span> <span class="n">j</span> <span class="o">|</span>
</span><span class='line'>        <span class="n">eachDisk</span> <span class="o">=</span> <span class="n">eachStack</span><span class="o">[</span><span class="n">j</span><span class="o">]</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">eachDisk</span> <span class="o">==</span> <span class="kp">nil</span><span class="p">)</span> <span class="k">then</span>
</span><span class='line'>          <span class="n">newLine</span> <span class="o">=</span> <span class="s2">&quot; &quot;</span><span class="o">*</span><span class="mi">12</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>          <span class="n">newLine</span> <span class="o">=</span> <span class="n">eachDisk</span><span class="o">.</span><span class="n">to_s</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">newLine</span> <span class="o">&lt;&lt;</span> <span class="s2">&quot; &quot;</span><span class="o">*</span><span class="p">(</span><span class="mi">12</span> <span class="o">-</span> <span class="n">newLine</span><span class="o">.</span><span class="n">length</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">currentLine</span> <span class="o">=</span> <span class="n">lines</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">||=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>        <span class="n">lines</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="n">currentLine</span><span class="o">+</span><span class="s2">&quot; &quot;</span><span class="o">+</span><span class="n">newLine</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">lines</span><span class="o">.</span><span class="n">reverse</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">line</span><span class="o">|</span> <span class="n">result</span> <span class="o">+=</span> <span class="n">line</span> <span class="o">+</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">result</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;</span>
</span><span class='line'><span class="cp">        &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;html</span> <span class="na">xmlns=</span><span class="s">&quot;http://www.w3.org/1999/xhtml&quot;</span> <span class="na">xml:lang=</span><span class="s">&quot;en&quot;</span> <span class="na">lang=</span><span class="s">&quot;en&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;head&gt;</span>
</span><span class='line'><span class="nt">&lt;title&gt;</span>Foo <span class="err">&lt;</span>%= @page_title %&gt;<span class="nt">&lt;/title&gt;</span>
</span><span class='line'><span class="nt">&lt;meta</span> <span class="na">http-equiv=</span><span class="s">&quot;Content-Type&quot;</span> <span class="na">content=</span><span class="s">&quot;text/html; charset=UTF-8&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;meta</span> <span class="na">http-equiv=</span><span class="s">&quot;refresh&quot;</span> <span class="na">content=</span><span class="s">&quot;1&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="err">&lt;</span>%= javascript_include_tag :defaults %&gt;
</span><span class='line'><span class="nt">&lt;/head&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;body</span><span class="err">&lt;%</span> <span class="na">if</span> <span class="err">@</span><span class="na">page_class</span> <span class="err">%</span><span class="nt">&gt;</span> class=&quot;<span class="err">&lt;</span>%= @page_class %&gt;&quot;<span class="err">&lt;</span>% end %&gt;&gt;
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;h1&gt;</span>Tower of Hanoi (Move <span class="err">&lt;</span>%= @count %&gt;) <span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'>It&#39;s <span class="err">&lt;</span>%= Time.now %&gt;.
</span><span class='line'><span class="nt">&lt;br/&gt;</span>
</span><span class='line'>Done = <span class="err">&lt;</span>%= @isDone %&gt;
</span><span class='line'><span class="nt">&lt;br/&gt;</span>
</span><span class='line'>Render =
</span><span class='line'><span class="nt">&lt;pre&gt;</span>
</span><span class='line'><span class="err">&lt;</span>%= controller.getAsciiTowers %&gt;
</span><span class='line'><span class="nt">&lt;/pre&gt;</span>
</span><span class='line'>Log =
</span><span class='line'><span class="nt">&lt;pre&gt;</span>
</span><span class='line'><span class="err">&lt;</span>%= @consoleLog %&gt;
</span><span class='line'><span class="nt">&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Taste of Ruby (Part 6)]]></title>
    <link href="http://markfussell.emenar.com/blog/2008/09/03/a-taste-of-ruby-part-6/"/>
    <updated>2008-09-03T02:18:00-07:00</updated>
    <id>http://markfussell.emenar.com/blog/2008/09/03/a-taste-of-ruby-part-6</id>
    <content type="html"><![CDATA[<p>This is a multi-part series.  The first in the series is <a href="../../../08/28/a-taste-of-ruby">here</a>.</p>

<h2>Tower of Hanoi — With Rule Disks (and no stack)</h2>

<p>The first passes at the Tower of Hanoi algorithm were all done with the algorithm being a recursive call on the stack.  This is &#8216;true&#8217; as an algorithm, but comes off as a bit unnatural for humans.</p>

<!-- more -->


<p>But it also has a problem in that the algorithm can not be &#8216;suspended&#8217; in mid activity unless the language allows a feature (called a continuation) that can suspend the stack itself.  Although Ruby is multi-threaded and running two threads works in RubyShoes, Rails does not work either with a stateful server (and multiple threads) or with continuations.  At the end of each controller dispatch the session or the database has to have persisted all state.  So we need to do something like formalizing the state of the Disks and Towers to make the Tower of Hanoi work with Rails.</p>

<p>Also, the Smalltalk code in this section was among the most &#8216;closure-oriented&#8217;, so this helps show how that maps to Ruby.</p>

<h3>You aren&#8217;t capitalizing right?</h3>

<p>Before continuing into the code, people should realize I actively object to Ruby&#8217;s choice to have only one &#8216;word&#8217; delimiter by convention.  See my article <a href="../../04/ruby-naming-convention-failure">Ruby Naming Convention Failure</a> for details and the naming conventions I use, especially for methods.  But the quick summary is:</p>

<ul>
<li><p>I use CamelCase for combining words into a &#8216;part&#8217; of a method name or variable name</p></li>
<li><p>I use an underscore as a placeholder for the parameters of the method</p></li>
<li><p>I use an underscore to break up a phrase into logical parts</p></li>
</ul>


<p>If Ruby supported some other word delimiter than underscore (say hyphen &#8220;-&#8221; or &#8220;:&#8221;), I would be agnostic to dropping the CamelCase, but without that second word delimiter, dropping CamelCase is a losing proposition in expressiveness.  In a team setting we might have to discuss this, but in this case this is my code alone&#8230; and my standard actually makes it easier to convert to-from Smalltalk, Ruby, Flex, Java, etc.  The standard works cleanly with all of them.</p>

<h3>Tower&#8230;</h3>

<p>To migrate to the Rules version of the HanoiTower, it is easiest to start with the Disks themselves.</p>

<h4>RulesHanoiDisk</h4>

<p>A Rules based HanoiDisk just needs to be able to say &#8220;Can I move somewhere&#8221; and &#8220;If so, where&#8221;.  It does this in collaboration with the Tower.  &#8220;@tower&#8221; is now an instance variable that every Disk has set when it is created.  By using an instance variable, it is cleaner than using class variables (we can have multiple towers at the same time) and it works under Ruby serialization/marshalling.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">RulesHanoiDisk</span> <span class="o">&lt;</span> <span class="no">AnimatedHanoiDisk</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">hasLegalMove</span><span class="p">()</span>
</span><span class='line'>    <span class="vi">@towers</span><span class="o">.</span><span class="n">forPolesOtherThan_do</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span> <span class="n">eachTopDisk</span> <span class="o">|</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">eachTopDisk</span><span class="o">.</span><span class="n">width</span>  <span class="o">&gt;</span> <span class="nb">self</span><span class="o">.</span><span class="n">width</span><span class="p">)</span> <span class="k">then</span> <span class="k">return</span> <span class="kp">true</span> <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="k">return</span> <span class="kp">false</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">bestMove</span><span class="p">()</span>
</span><span class='line'>    <span class="vi">@towers</span><span class="o">.</span><span class="n">forPolesOtherThan_do</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span> <span class="n">eachTopDisk</span> <span class="o">|</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span> <span class="p">(</span><span class="n">eachTopDisk</span><span class="o">.</span><span class="n">width</span> <span class="o">&gt;</span> <span class="nb">self</span><span class="o">.</span><span class="n">width</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">eachTopDisk</span><span class="o">.</span><span class="n">pole</span> <span class="o">!=</span> <span class="vi">@previousPole</span><span class="p">)</span> <span class="p">)</span> <span class="k">then</span> <span class="k">return</span> <span class="n">eachTopDisk</span> <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="k">return</span> <span class="kp">nil</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">move_upon</span><span class="p">(</span><span class="n">destination</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@previousPole</span> <span class="o">=</span> <span class="vi">@pole</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">super</span><span class="p">(</span><span class="n">destination</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Among the interesting things with the new RulesHanoiDisk is the extensive use of Blocks.  By using Blocks, we can iterate over the collection of stacks without creating new collections.  The Disk and the Tower collaborate to create custom iterators with minimal code.  See RulesTowerOfHanoi for the example.</p>

<h4>RulesTowerOfHanoi</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">RulesTowerOfHanoi</span> <span class="o">&lt;</span> <span class="no">AnimatedTowerOfHanoi</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initHeight</span><span class="p">(</span><span class="n">height</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@height</span> <span class="o">=</span> <span class="n">height</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nb">self</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">move_tower</span><span class="p">(</span><span class="n">height</span><span class="p">,</span> <span class="n">fromPin</span><span class="p">,</span> <span class="n">toPin</span><span class="p">,</span> <span class="n">usingPin</span><span class="p">)</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">doNextMove_IsDone</span><span class="p">())</span> <span class="k">do</span> <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">createDisk</span><span class="p">()</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="no">RulesHanoiDisk</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>    <span class="n">result</span><span class="o">.</span><span class="n">setupTowers</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">result</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">doNextMove_IsDone</span><span class="p">()</span>
</span><span class='line'>    <span class="vi">@currentDisk</span> <span class="o">=</span> <span class="n">decide</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="vi">@stacks</span><span class="o">[</span><span class="vi">@currentDisk</span><span class="o">.</span><span class="n">pole</span><span class="o">-</span><span class="mi">1</span><span class="o">].</span><span class="n">pop</span><span class="p">()</span>
</span><span class='line'>    <span class="vi">@stacks</span><span class="o">[</span><span class="vi">@destinationDisk</span><span class="o">.</span><span class="n">pole</span><span class="o">-</span><span class="mi">1</span><span class="o">].</span><span class="n">push</span><span class="p">(</span><span class="vi">@currentDisk</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@currentDisk</span><span class="o">.</span><span class="n">move_upon</span><span class="p">(</span><span class="vi">@destinationDisk</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="vi">@oldDisk</span> <span class="o">=</span> <span class="vi">@currentDisk</span>
</span><span class='line'>
</span><span class='line'>    <span class="vi">@app</span><span class="o">.</span><span class="n">noteChange</span> <span class="k">if</span> <span class="vi">@app</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">isAllOnOneTower</span><span class="p">()</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">isAllOnOneTower</span><span class="p">()</span>
</span><span class='line'>    <span class="n">foundStack</span> <span class="o">=</span> <span class="vi">@stacks</span><span class="o">.</span><span class="n">detect</span> <span class="p">{</span> <span class="o">|</span><span class="n">eachStack</span><span class="o">|</span>  <span class="n">eachStack</span><span class="o">.</span><span class="n">size</span> <span class="o">==</span> <span class="vi">@height</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">foundStack</span> <span class="o">!=</span> <span class="kp">nil</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">forTopsOtherThan_do</span><span class="p">(</span><span class="n">disk</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@stacks</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span> <span class="n">eachStack</span> <span class="o">|</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">eachStack</span><span class="o">.</span><span class="n">empty?</span><span class="p">)</span> <span class="k">then</span> <span class="k">next</span> <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">topDisk</span> <span class="o">=</span> <span class="n">eachStack</span><span class="o">.</span><span class="n">last</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">topDisk</span> <span class="o">==</span> <span class="n">disk</span><span class="p">)</span> <span class="k">then</span> <span class="k">next</span> <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">yield</span> <span class="n">topDisk</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">forPolesOtherThan_do</span><span class="p">(</span><span class="n">disk</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@stacks</span><span class="o">.</span><span class="n">each_with_index</span> <span class="k">do</span> <span class="o">|</span> <span class="n">eachStack</span><span class="p">,</span> <span class="n">i</span> <span class="o">|</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">==</span> <span class="n">disk</span><span class="o">.</span><span class="n">pole</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="k">then</span> <span class="k">next</span> <span class="k">end</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">topDisk</span> <span class="o">=</span> <span class="k">if</span> <span class="p">(</span><span class="n">eachStack</span><span class="o">.</span><span class="n">empty?</span><span class="p">)</span> <span class="k">then</span> <span class="vi">@mockDisks</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="k">else</span> <span class="n">eachStack</span><span class="o">.</span><span class="n">last</span> <span class="k">end</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">yield</span> <span class="n">topDisk</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">decide</span>
</span><span class='line'>    <span class="n">forTopsOtherThan_do</span><span class="p">(</span><span class="vi">@oldDisk</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span> <span class="n">eachDisk</span> <span class="o">|</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">eachDisk</span><span class="o">.</span><span class="n">hasLegalMove</span><span class="p">)</span> <span class="k">then</span>
</span><span class='line'>        <span class="vi">@destinationDisk</span> <span class="o">=</span> <span class="n">eachDisk</span><span class="o">.</span><span class="n">bestMove</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">eachDisk</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Taste of Flex (Part 6)]]></title>
    <link href="http://markfussell.emenar.com/blog/2008/09/02/a-taste-of-flex-part-6/"/>
    <updated>2008-09-02T16:46:00-07:00</updated>
    <id>http://markfussell.emenar.com/blog/2008/09/02/a-taste-of-flex-part-6</id>
    <content type="html"><![CDATA[<p>This is a multi-part series.  The first in the series is <a href="../a-taste-of-flex">here</a>.</p>

<h2>Tower of Hanoi &mdash; With Rule Disks (and no stack)</h2>

<p>The first passes at the Tower of Hanoi algorithm were all done with the algorithm being a recursive call on the stack.  This is &#8216;true&#8217; as an algorithm, but comes off as a bit unnatural for humans.  But it also has a problem in that the algorithm can not be &#8216;suspended&#8217; in mid activity unless the language allows a feature (called a continuation) that can suspend the stack itself.  For a multi-threaded language, this inability to suspend may not be a problem because you could create one thread for the algorithm and another thread to listen for whenever a new (interesting) change in state occurs.  This is how the RubyShoes version works: the algorithm is in a new thread separate from the GUI thread (otherwise things behave badly).  Similarly, the Smalltalk-80 GUI is being drawn in a different thread than the main execution thread.  But in many circumstances even this multi-thread version would not work: say you have a client-server version (e.g. Rails) or want to pause/suspend the execution of the 100-tall tower of hanoi.  And finally, if you only have a single-threaded language like Flex, things just don&#8217;t work at all for intermediate renderings unless you can make the algorithm not be dependent on the call stack.</p>

<!-- more -->


<h3>Tower of Hanoi — With Rule Disks (and no stack) &#8211; Flex</h3>

<p>I think it is easiest to work up from the Disk perspective, although see the book for a different flow.  The main changes to HanoiDisk are to have it be able to figure out whether it has any legal moves, and what the bestMove (next move) would be.  To do each of these, the disk needs to communicate back with the towers.  In the Smalltalk code this was done through a Class Variable, but it is far simpler and more scalable to do this through instance variables: each Disk needs to know what tower it belongs to.</p>

<h4>HanoiDiskRules</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='actionscript'><span class='line'><span class="kd">package</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nx">HanoiDiskRules</span> <span class="kd">extends</span> <span class="nx">HanoiDisk</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="k">var</span> <span class="nx">my_previousPole</span> <span class="o">:</span> <span class="nb">Number</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="k">var</span> <span class="nx">my_towers</span> <span class="o">:</span> <span class="nx">AnimatedRulesTowerOfHanoi</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">function</span> <span class="nx">setupTowers</span><span class="p">(</span><span class="nx">towers</span> <span class="o">:</span> <span class="nx">AnimatedRulesTowerOfHanoi</span><span class="p">)</span> <span class="o">:</span> <span class="nx">void</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">my_towers</span> <span class="o">=</span> <span class="nx">towers</span><span class="o">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">function</span> <span class="nx">hasLegalMove</span><span class="p">()</span> <span class="o">:</span> <span class="nb">Boolean</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">var</span> <span class="nx">otherTops</span> <span class="o">:</span> <span class="nb">Array</span> <span class="o">=</span> <span class="nx">my_towers</span><span class="p">.</span><span class="nx">selectPolesOtherThan</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="k">var</span> <span class="nx">i</span><span class="o">:</span><span class="nb">int</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="nx">otherTops</span><span class="p">.</span><span class="nx">length</span><span class="o">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">var</span> <span class="nx">eachTopDisk</span> <span class="o">:</span> <span class="nx">HanoiDisk</span> <span class="o">=</span> <span class="nx">otherTops</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">eachTopDisk</span><span class="p">.</span><span class="nx">width</span> <span class="o">&gt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span><span class="p">)</span> <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">function</span> <span class="nx">bestMove</span><span class="p">()</span> <span class="o">:</span> <span class="nx">HanoiDisk</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">var</span> <span class="nx">otherTops</span> <span class="o">:</span> <span class="nb">Array</span> <span class="o">=</span> <span class="nx">my_towers</span><span class="p">.</span><span class="nx">selectPolesOtherThan</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="k">var</span> <span class="nx">i</span><span class="o">:</span><span class="nb">int</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="nx">otherTops</span><span class="p">.</span><span class="nx">length</span><span class="o">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">var</span> <span class="nx">eachTopDisk</span> <span class="o">:</span> <span class="nx">HanoiDisk</span> <span class="o">=</span> <span class="nx">otherTops</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span> <span class="p">(</span><span class="nx">eachTopDisk</span><span class="p">.</span><span class="nx">width</span> <span class="o">&gt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">width</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="nx">eachTopDisk</span><span class="p">.</span><span class="nx">pole</span> <span class="o">!=</span> <span class="nx">my_previousPole</span><span class="p">)</span> <span class="p">)</span> <span class="k">return</span> <span class="nx">eachTopDisk</span><span class="o">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">override</span> <span class="kd">function</span> <span class="nx">moveUpon</span><span class="p">(</span><span class="nx">destination</span> <span class="o">:</span> <span class="nx">HanoiDisk</span><span class="p">)</span> <span class="o">:</span> <span class="nx">void</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">my_previousPole</span> <span class="o">=</span> <span class="nx">pole</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">super</span><span class="p">.</span><span class="nx">moveUpon</span><span class="p">(</span><span class="nx">destination</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span> <span class="c1">//package</span>
</span></code></pre></td></tr></table></div></figure>


<p>Compared to the Smalltalk version of this, the main difference is we are creating Array objects instead of passing a function into an iterator.  Again this seems the more natural for Flex&#8230; but&#8230; it is starting to get annoying looking and has real performance impact, so later we should try to do an iterator + function-based version.</p>

<h4>AnimatedRulesTowerOfHanoi (No Animation)</h4>

<p>The change to the Tower code for Flex is two parts:</p>

<ul>
<li><p>Provide methods that support the rules that the smarter HanoiDiskRules has</p></li>
<li><p>Drive the algorithm in a way to enable Flex to render the intermediary results</p></li>
</ul>


<p>We can do these in two steps, with the current step focused on just the algorithm changes</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
</pre></td><td class='code'><pre><code class='actionscript'><span class='line'><span class="kd">package</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nx">AnimatedRulesTowerOfHanoi</span> <span class="kd">extends</span> <span class="nx">AnimatedTowerOfHanoi</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="k">var</span> <span class="nx">my_oldDisk</span> <span class="o">:</span> <span class="nx">HanoiDisk</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="k">var</span> <span class="nx">my_currentDisk</span> <span class="o">:</span> <span class="nx">HanoiDisk</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="k">var</span> <span class="nx">my_destinationDisk</span> <span class="o">:</span> <span class="nx">HanoiDisk</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">protected</span> <span class="kd">override</span> <span class="kd">function</span> <span class="nx">moveTower</span><span class="p">(</span><span class="nx">height</span> <span class="o">:</span> <span class="nb">int</span><span class="o">,</span> <span class="nx">fromPin</span> <span class="o">:</span> <span class="o">*,</span> <span class="nx">toPin</span> <span class="o">:</span> <span class="o">*,</span> <span class="nx">usingPin</span> <span class="o">:</span> <span class="o">*</span><span class="p">)</span> <span class="o">:</span> <span class="nx">void</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">//Now that the disks know all the rules... we can ignore all the arguments!</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="nx">doNextMove_IsDone</span><span class="p">)</span> <span class="p">{};</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">protected</span> <span class="kd">function</span> <span class="nx">doNextMove_IsDone</span><span class="p">()</span> <span class="o">:</span> <span class="nb">Boolean</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">my_currentDisk</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">decide</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">(</span><span class="nx">my_stacks</span><span class="p">[</span><span class="nx">my_currentDisk</span><span class="p">.</span><span class="nx">pole</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="nx">as</span> <span class="nb">Array</span><span class="p">).</span><span class="nx">pop</span><span class="p">();</span>
</span><span class='line'>        <span class="p">(</span><span class="nx">my_stacks</span><span class="p">[</span><span class="nx">my_destinationDisk</span><span class="p">.</span><span class="nx">pole</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="nx">as</span> <span class="nb">Array</span><span class="p">).</span><span class="nx">push</span><span class="p">(</span><span class="nx">my_currentDisk</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">my_currentDisk</span><span class="p">.</span><span class="nx">moveUpon</span><span class="p">(</span><span class="nx">my_destinationDisk</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">my_oldDisk</span> <span class="o">=</span> <span class="nx">my_currentDisk</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">my_view</span><span class="p">.</span><span class="nx">noteChange</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="nx">isAllOnOneTower</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">protected</span> <span class="kd">function</span> <span class="nx">isAllOnOneTower</span><span class="p">()</span> <span class="o">:</span> <span class="nb">Boolean</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="k">var</span> <span class="nx">i</span><span class="o">:</span><span class="nb">int</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="nx">my_stacks</span><span class="p">.</span><span class="nx">length</span><span class="o">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">var</span> <span class="nx">eachStack</span> <span class="o">:</span> <span class="nb">Array</span> <span class="o">=</span> <span class="nx">my_stacks</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">eachStack</span><span class="p">.</span><span class="nx">length</span> <span class="o">==</span> <span class="nx">my_height</span><span class="p">)</span> <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">function</span> <span class="nx">selectTopsOtherThan</span><span class="p">(</span><span class="nx">disk</span> <span class="o">:</span> <span class="nx">HanoiDisk</span><span class="p">)</span> <span class="o">:</span> <span class="nb">Array</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">var</span> <span class="nx">result</span> <span class="o">:</span> <span class="nb">Array</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">();</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="k">var</span> <span class="nx">i</span><span class="o">:</span><span class="nb">int</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="nx">my_stacks</span><span class="p">.</span><span class="nx">length</span><span class="o">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">var</span> <span class="nx">eachStack</span> <span class="o">:</span> <span class="nb">Array</span> <span class="o">=</span> <span class="nx">my_stacks</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">eachStack</span><span class="p">.</span><span class="nx">length</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="k">continue</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">var</span> <span class="nx">topDisk</span> <span class="o">:</span> <span class="nx">HanoiDisk</span> <span class="o">=</span> <span class="nx">eachStack</span><span class="p">[</span><span class="nx">eachStack</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">topDisk</span> <span class="o">!==</span> <span class="nx">disk</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">result</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">topDisk</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">result</span><span class="o">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">function</span> <span class="nx">selectPolesOtherThan</span><span class="p">(</span><span class="nx">disk</span> <span class="o">:</span> <span class="nx">HanoiDisk</span><span class="p">)</span> <span class="o">:</span> <span class="nb">Array</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">var</span> <span class="nx">result</span> <span class="o">:</span> <span class="nb">Array</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">();</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="k">var</span> <span class="nx">i</span><span class="o">:</span><span class="nb">int</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="nx">my_stacks</span><span class="p">.</span><span class="nx">length</span><span class="o">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">var</span> <span class="nx">eachStack</span> <span class="o">:</span> <span class="nb">Array</span> <span class="o">=</span> <span class="nx">my_stacks</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">i</span> <span class="o">==</span> <span class="nx">disk</span><span class="p">.</span><span class="nx">pole</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="k">continue</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">eachStack</span><span class="p">.</span><span class="nx">length</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>  <span class="p">{</span>
</span><span class='line'>                <span class="nx">result</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">my_mockDisks</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">var</span> <span class="nx">topDisk</span> <span class="o">:</span> <span class="nx">HanoiDisk</span> <span class="o">=</span> <span class="nx">eachStack</span><span class="p">[</span><span class="nx">eachStack</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>                <span class="nx">result</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">topDisk</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">result</span><span class="o">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">protected</span> <span class="kd">function</span> <span class="nx">decide</span><span class="p">()</span> <span class="o">:</span> <span class="nx">HanoiDisk</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">var</span> <span class="nx">tops</span> <span class="o">:</span> <span class="nb">Array</span> <span class="o">=</span> <span class="nx">selectTopsOtherThan</span><span class="p">(</span><span class="nx">my_oldDisk</span><span class="p">);</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="k">var</span> <span class="nx">i</span><span class="o">:</span><span class="nb">int</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="nx">tops</span><span class="p">.</span><span class="nx">length</span><span class="o">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">var</span> <span class="nx">movingDisk</span> <span class="o">:</span> <span class="nx">HanoiDiskRules</span> <span class="o">=</span> <span class="nx">tops</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">movingDisk</span><span class="p">.</span><span class="nx">hasLegalMove</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">my_destinationDisk</span> <span class="o">=</span> <span class="nx">movingDisk</span><span class="p">.</span><span class="nx">bestMove</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">return</span> <span class="nx">movingDisk</span><span class="o">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="c1">//This should never happen</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">protected</span> <span class="kd">override</span> <span class="kd">function</span> <span class="nx">createDisk</span><span class="p">()</span> <span class="o">:</span> <span class="nx">HanoiDisk</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">var</span> <span class="nx">result</span> <span class="o">:</span> <span class="nx">HanoiDiskRules</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">HanoiDiskRules</span><span class="p">();</span>
</span><span class='line'>        <span class="nx">result</span><span class="p">.</span><span class="nx">setupTowers</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">result</span><span class="o">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span> <span class="c1">//package</span>
</span></code></pre></td></tr></table></div></figure>


<p>As mentioned in HanoiDiskRules section, the main annoyance of this particular implementation of the new algorithm compared to Smalltalk is having to create intermediate array objects just to communicate between the Disk and the Tower.</p>

<p>But things should work again.  Except we will still get only one rendering because the whole algorithm is executed in one call within a &#8220;while&#8221; loop.</p>

<h3>Tower of Hanoi — With Rule Disks and Correct Animation &#8211; Flex</h3>

<p>To make things work in Flex now, all we do is have to unwrap the immediacy [single call stack] of the while loop.  Instead of calling each &#8216;doNextMove&#8217; immediately, we will wait for an event.  That event could be anything, like clicking a button or the server sending a response.  Each time we get an event, we will do the next step.  To be easy to present and view, we will make the events be driven by a simple timer.  Each time the timer fires an event, we will do the next step.  Repeating this until we are done.</p>

<p>The only method changes are to &#8216;moveTower&#8217; and to &#8216;handleTimer&#8217;.  Everything else works just the way it was.</p>

<h4>AnimatedRulesTowerOfHanoi (No Animation)</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
</pre></td><td class='code'><pre><code class='actionscript'><span class='line'><span class="kd">package</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">import</span> <span class="nx">flash</span><span class="p">.</span><span class="nx">events</span><span class="p">.</span><span class="nb">TimerEvent</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">import</span> <span class="nx">flash</span><span class="p">.</span><span class="nx">utils</span><span class="p">.</span><span class="nb">Timer</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nx">AnimatedRulesTowerOfHanoi</span> <span class="kd">extends</span> <span class="nx">AnimatedTowerOfHanoi</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="k">var</span> <span class="nx">my_oldDisk</span> <span class="o">:</span> <span class="nx">HanoiDisk</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="k">var</span> <span class="nx">my_currentDisk</span> <span class="o">:</span> <span class="nx">HanoiDisk</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="k">var</span> <span class="nx">my_destinationDisk</span> <span class="o">:</span> <span class="nx">HanoiDisk</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">protected</span> <span class="k">var</span> <span class="nx">my_timer</span> <span class="o">:</span> <span class="nb">Timer</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">protected</span> <span class="kd">override</span> <span class="kd">function</span> <span class="nx">moveTower</span><span class="p">(</span><span class="nx">height</span> <span class="o">:</span> <span class="nb">int</span><span class="o">,</span> <span class="nx">fromPin</span> <span class="o">:</span> <span class="o">*,</span> <span class="nx">toPin</span> <span class="o">:</span> <span class="o">*,</span> <span class="nx">usingPin</span> <span class="o">:</span> <span class="o">*</span><span class="p">)</span> <span class="o">:</span> <span class="nx">void</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">//Now that the disks know all the rules... we can ignore all the arguments!</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">my_timer</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Timer</span><span class="p">(</span><span class="mi">300</span><span class="p">)</span>
</span><span class='line'>        <span class="nx">my_timer</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="nb">TimerEvent</span><span class="p">.</span><span class="nx">TIMER</span><span class="o">,</span> <span class="nx">handleTimer</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">my_timer</span><span class="p">.</span><span class="nx">start</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">function</span> <span class="nx">handleTimer</span><span class="p">(</span><span class="nx">evt</span><span class="o">:</span><span class="nb">TimerEvent</span><span class="p">)</span><span class="o">:</span><span class="nx">void</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">var</span> <span class="nx">isDone</span> <span class="o">:</span> <span class="nb">Boolean</span> <span class="o">=</span> <span class="nx">doNextMove_IsDone</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">isDone</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">my_timer</span><span class="p">.</span><span class="nx">stop</span><span class="p">();</span>
</span><span class='line'>            <span class="nx">my_timer</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="kd">protected</span> <span class="kd">function</span> <span class="nx">doNextMove_IsDone</span><span class="p">()</span> <span class="o">:</span> <span class="nb">Boolean</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">my_currentDisk</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">decide</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">(</span><span class="nx">my_stacks</span><span class="p">[</span><span class="nx">my_currentDisk</span><span class="p">.</span><span class="nx">pole</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="nx">as</span> <span class="nb">Array</span><span class="p">).</span><span class="nx">pop</span><span class="p">();</span>
</span><span class='line'>        <span class="p">(</span><span class="nx">my_stacks</span><span class="p">[</span><span class="nx">my_destinationDisk</span><span class="p">.</span><span class="nx">pole</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="nx">as</span> <span class="nb">Array</span><span class="p">).</span><span class="nx">push</span><span class="p">(</span><span class="nx">my_currentDisk</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">my_currentDisk</span><span class="p">.</span><span class="nx">moveUpon</span><span class="p">(</span><span class="nx">my_destinationDisk</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">my_oldDisk</span> <span class="o">=</span> <span class="nx">my_currentDisk</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">my_view</span><span class="p">.</span><span class="nx">noteChange</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="nx">isAllOnOneTower</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">protected</span> <span class="kd">function</span> <span class="nx">isAllOnOneTower</span><span class="p">()</span> <span class="o">:</span> <span class="nb">Boolean</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="k">var</span> <span class="nx">i</span><span class="o">:</span><span class="nb">int</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="nx">my_stacks</span><span class="p">.</span><span class="nx">length</span><span class="o">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">var</span> <span class="nx">eachStack</span> <span class="o">:</span> <span class="nb">Array</span> <span class="o">=</span> <span class="nx">my_stacks</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">eachStack</span><span class="p">.</span><span class="nx">length</span> <span class="o">==</span> <span class="nx">my_height</span><span class="p">)</span> <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">function</span> <span class="nx">selectTopsOtherThan</span><span class="p">(</span><span class="nx">disk</span> <span class="o">:</span> <span class="nx">HanoiDisk</span><span class="p">)</span> <span class="o">:</span> <span class="nb">Array</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">var</span> <span class="nx">result</span> <span class="o">:</span> <span class="nb">Array</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">();</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="k">var</span> <span class="nx">i</span><span class="o">:</span><span class="nb">int</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="nx">my_stacks</span><span class="p">.</span><span class="nx">length</span><span class="o">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">var</span> <span class="nx">eachStack</span> <span class="o">:</span> <span class="nb">Array</span> <span class="o">=</span> <span class="nx">my_stacks</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">eachStack</span><span class="p">.</span><span class="nx">length</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="k">continue</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">var</span> <span class="nx">topDisk</span> <span class="o">:</span> <span class="nx">HanoiDisk</span> <span class="o">=</span> <span class="nx">eachStack</span><span class="p">[</span><span class="nx">eachStack</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">topDisk</span> <span class="o">!==</span> <span class="nx">disk</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">result</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">topDisk</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">result</span><span class="o">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">function</span> <span class="nx">selectPolesOtherThan</span><span class="p">(</span><span class="nx">disk</span> <span class="o">:</span> <span class="nx">HanoiDisk</span><span class="p">)</span> <span class="o">:</span> <span class="nb">Array</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">var</span> <span class="nx">result</span> <span class="o">:</span> <span class="nb">Array</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">();</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="k">var</span> <span class="nx">i</span><span class="o">:</span><span class="nb">int</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="nx">my_stacks</span><span class="p">.</span><span class="nx">length</span><span class="o">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">var</span> <span class="nx">eachStack</span> <span class="o">:</span> <span class="nb">Array</span> <span class="o">=</span> <span class="nx">my_stacks</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">i</span> <span class="o">==</span> <span class="nx">disk</span><span class="p">.</span><span class="nx">pole</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="k">continue</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">eachStack</span><span class="p">.</span><span class="nx">length</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>  <span class="p">{</span>
</span><span class='line'>                <span class="nx">result</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">my_mockDisks</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">var</span> <span class="nx">topDisk</span> <span class="o">:</span> <span class="nx">HanoiDisk</span> <span class="o">=</span> <span class="nx">eachStack</span><span class="p">[</span><span class="nx">eachStack</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>                <span class="nx">result</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">topDisk</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">result</span><span class="o">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">protected</span> <span class="kd">function</span> <span class="nx">decide</span><span class="p">()</span> <span class="o">:</span> <span class="nx">HanoiDisk</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">var</span> <span class="nx">tops</span> <span class="o">:</span> <span class="nb">Array</span> <span class="o">=</span> <span class="nx">selectTopsOtherThan</span><span class="p">(</span><span class="nx">my_oldDisk</span><span class="p">);</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="k">var</span> <span class="nx">i</span><span class="o">:</span><span class="nb">int</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="nx">tops</span><span class="p">.</span><span class="nx">length</span><span class="o">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">var</span> <span class="nx">movingDisk</span> <span class="o">:</span> <span class="nx">HanoiDiskRules</span> <span class="o">=</span> <span class="nx">tops</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">movingDisk</span><span class="p">.</span><span class="nx">hasLegalMove</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">my_destinationDisk</span> <span class="o">=</span> <span class="nx">movingDisk</span><span class="p">.</span><span class="nx">bestMove</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">return</span> <span class="nx">movingDisk</span><span class="o">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="c1">//This should never happen</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">protected</span> <span class="kd">override</span> <span class="kd">function</span> <span class="nx">createDisk</span><span class="p">()</span> <span class="o">:</span> <span class="nx">HanoiDisk</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">var</span> <span class="nx">result</span> <span class="o">:</span> <span class="nx">HanoiDiskRules</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">HanoiDiskRules</span><span class="p">();</span>
</span><span class='line'>        <span class="nx">result</span><span class="p">.</span><span class="nx">setupTowers</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">result</span><span class="o">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span> <span class="c1">//package</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Taste of Flex (Part 5)]]></title>
    <link href="http://markfussell.emenar.com/blog/2008/09/02/a-taste-of-flex-part-5/"/>
    <updated>2008-09-02T07:44:00-07:00</updated>
    <id>http://markfussell.emenar.com/blog/2008/09/02/a-taste-of-flex-part-5</id>
    <content type="html"><![CDATA[<p>This is a multi-part series.  The first in the series is <a href="../a-taste-of-flex">here</a>.</p>

<h2>Tower of Hanoi — With Graphics</h2>

<p>To follow the flow of code progress within &#8220;A Taste of Smalltalk&#8221;, we next need to include a graphical representation of the disks and their movement between the poles.  Flex lives inside a Flash player (or app), so it is inherently capable of doing sophisticated graphics.  Actually it is hard to &#8216;contain&#8217; yourself to just doing the simplest possible thing when animating sprites around the screen is very easy.  But to try to compare Flex to Ruby and Smalltalk, we want to keep things in about the same ballpark &#8211; and again study how different languages work with the same problem.</p>

<!-- more -->


<h3>Tower of Hanoi — With Graphics &#8211; Flex</h3>

<p>Given our Flex version is already in a graphics environment, and the model (TowerOfHanoi) is already aware of having to talk the View, the changes are relatively minimal to get things working.  We need to render the disks in the Application/View and we need to notify the view whenever the model changes.</p>

<h4>Main Application</h4>

<p>To add rendering in, we just create a render canvas area and then create the UIComponents (shapes) on each redraw.  Normally we would be more likely to animate a single set of disks (vs. destroying them and recreating them), which would be both better in performance and be <em>much cooler</em>, but this matches the RubyShoes version better.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;mx:Application</span> <span class="na">xmlns:mx=</span><span class="s">&quot;http://www.adobe.com/2006/mxml&quot;</span> <span class="na">layout=</span><span class="s">&quot;vertical&quot;</span>
</span><span class='line'>  <span class="na">creationComplete=</span><span class="s">&quot;handleCreationComplete()&quot;</span>
</span><span class='line'><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;mx:Script&gt;</span>
</span><span class='line'>    <span class="cp">&lt;![CDATA[</span>
</span><span class='line'><span class="cp">        import mx.core.UIComponent;</span>
</span><span class='line'><span class="cp">        var my_model : AnimatedTowerOfHanoi;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">        function handleCreationComplete() : void {</span>
</span><span class='line'><span class="cp">            Array.prototype.first = function():Object { return this[0]; }</span>
</span><span class='line'>
</span><span class='line'><span class="cp">            my_model = new AnimatedTowerOfHanoi();</span>
</span><span class='line'><span class="cp">            my_model.initView(this);</span>
</span><span class='line'><span class="cp">        }</span>
</span><span class='line'>
</span><span class='line'><span class="cp">        function handleDoItClicked() : void {</span>
</span><span class='line'><span class="cp">            logToConsole(&quot;\n=== Doing a Hanoi tower &quot;+vTowerInput.text+&quot; tall\n&quot;);</span>
</span><span class='line'><span class="cp">            my_model.doHanoi(new Number(vTowerInput.text));</span>
</span><span class='line'><span class="cp">        }</span>
</span><span class='line'>
</span><span class='line'><span class="cp">        public function logToConsole(string : String) : void {</span>
</span><span class='line'><span class="cp">            vConsole.text = vConsole.text+string;</span>
</span><span class='line'><span class="cp">        }</span>
</span><span class='line'>
</span><span class='line'><span class="cp">        public function noteChange() : void {</span>
</span><span class='line'><span class="cp">            vRenderArea.removeAllChildren();</span>
</span><span class='line'>
</span><span class='line'><span class="cp">            var stacks : Array = my_model.getStacks();</span>
</span><span class='line'><span class="cp">            for (var i : int = 0; i&lt;stacks.length; i++) {</span>
</span><span class='line'><span class="cp">                var eachStack : Array = stacks[i];</span>
</span><span class='line'><span class="cp">                var poleCenterX : Number = i*100 + 50;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">                for (var j:int = 0; j&lt;eachStack.length; j++) {</span>
</span><span class='line'><span class="cp">                    var eachDisk : HanoiDisk = eachStack[j];</span>
</span><span class='line'>
</span><span class='line'><span class="cp">                    var diskHeight : int = 180 - (j * 15);</span>
</span><span class='line'><span class="cp">                    var diskWidth  : int = eachDisk.width * 10;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">                    var eachShape : UIComponent = new UIComponent();</span>
</span><span class='line'><span class="cp">                    eachShape.graphics.beginFill(0xA00000);</span>
</span><span class='line'><span class="cp">                    eachShape.graphics.drawRect(poleCenterX - diskWidth / 2, diskHeight, diskWidth, 10);</span>
</span><span class='line'>
</span><span class='line'><span class="cp">                    vRenderArea.addChild(eachShape);</span>
</span><span class='line'><span class="cp">                }</span>
</span><span class='line'><span class="cp">            }</span>
</span><span class='line'><span class="cp">        }</span>
</span><span class='line'><span class="cp">    ]]]]&gt;&lt;![CDATA[&gt;</span>
</span><span class='line'><span class="nt">&lt;/mx:Script&gt;</span>
</span><span class='line'><span class="nt">&lt;mx:HBox&gt;</span>
</span><span class='line'>    <span class="nt">&lt;mx:Text</span> <span class="na">text=</span><span class="s">&quot;How tall a tower?&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;mx:TextInput</span> <span class="na">id=</span><span class="s">&quot;vTowerInput&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;mx:Button</span> <span class="na">label=</span><span class="s">&quot;Do It&quot;</span> <span class="na">click=</span><span class="s">&quot;handleDoItClicked()&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/mx:HBox&gt;</span>
</span><span class='line'><span class="nt">&lt;mx:Canvas</span> <span class="na">id=</span><span class="s">&quot;vRenderArea&quot;</span> <span class="na">width=</span><span class="s">&quot;300&quot;</span> <span class="na">height=</span><span class="s">&quot;200&quot;</span> <span class="na">borderStyle=</span><span class="s">&quot;solid&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;mx:TextArea</span> <span class="na">id=</span><span class="s">&quot;vConsole&quot;</span> <span class="na">width=</span><span class="s">&quot;100%&quot;</span> <span class="na">height=</span><span class="s">&quot;100%&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/mx:Application&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>AnimatedTowerOfHanoi</h4>

<p>The AnimatedTower just needs to send out change events (via a simple callback vs. true event listeners that are in Flex).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='actionscript'><span class='line'><span class="kd">package</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nx">AnimatedTowerOfHanoi</span> <span class="kd">extends</span> <span class="nx">ModeledTowerOfHanoi</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="kd">override</span> <span class="kd">function</span> <span class="nx">setupDisks</span><span class="p">()</span> <span class="o">:</span> <span class="nx">void</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="p">.</span><span class="nx">setupDisks</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">my_view</span><span class="p">.</span><span class="nx">noteChange</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">function</span> <span class="nx">getStacks</span><span class="p">()</span> <span class="o">:</span> <span class="nb">Array</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">my_stacks</span><span class="o">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">protected</span> <span class="kd">override</span> <span class="kd">function</span> <span class="nx">moveDisk</span><span class="p">(</span><span class="nx">fromPin</span> <span class="o">:</span> <span class="o">*,</span> <span class="nx">toPin</span> <span class="o">:</span> <span class="o">*</span><span class="p">)</span> <span class="o">:</span> <span class="nx">void</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="p">.</span><span class="nx">moveDisk</span><span class="p">(</span><span class="nx">fromPin</span><span class="o">,</span> <span class="nx">toPin</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">my_view</span><span class="p">.</span><span class="nx">noteChange</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span> <span class="c1">//package</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Super Easy&#8230;But doesn&#8217;t work</h3>

<p>Well, that was really easy&#8230; except it doesn&#8217;t really work :-(  You can only see the final result of all the nice disks on the last stack.  None of the intermediary steps before this last rendering are shown at all.</p>

<p>Clearly we are missing something&#8230; where is the &#8220;Sleep&#8221; equivalent?  If we could add a &#8216;sleep&#8217; then everything would work right?  Unfortunately both &#8220;No&#8221; and &#8220;NO!&#8221;.  When Flex/Flash are running user code, they are doing it between screen renderings and a bunch of other tasks Flash does.  So you can&#8217;t just keep rendering things in the same thread (same stack) and have any of that be visible except the last version.  If you could &#8216;sleep&#8217;, you would just make Flash pause for no good reason.</p>

<p>The solution is to do each rendering on some kind of event.  Something simple like do the next step of the hanoi algorithm every 0.3 seconds.  That sounds easy but: (1) Flex doesn&#8217;t have continuations either so you can&#8217;t just &#8216;pause&#8217; the stack and (2) The current hanoi algorithm is completely stack based.</p>

<p>Fortunately the fix is both &#8220;not that hard&#8221; and also happens to be the next chapter of &#8220;A Taste of Smalltalk&#8221; called &#8220;An Algorithm for the Rest of Us&#8221;.  So for the moment, lets punt on getting the animation in Flex right until we get to the next part.</p>

<h3>What&#8217;s Next</h3>

<p>A new non-stack algorithm.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Taste of Flex (Part 4)]]></title>
    <link href="http://markfussell.emenar.com/blog/2008/09/02/a-taste-of-flex-part-4/"/>
    <updated>2008-09-02T07:13:00-07:00</updated>
    <id>http://markfussell.emenar.com/blog/2008/09/02/a-taste-of-flex-part-4</id>
    <content type="html"><![CDATA[<p>This is a multi-part series.  The first in the series is <a href="../a-taste-of-flex">here</a>.</p>

<h2>Tower of Hanoi &mdash; With Model Objects</h2>

<p>The book &#8220;A Taste of Smalltalk&#8221; jumps from showing a single &#8216;TowerOfHanoi&#8217; object to both adding in Disk model objects and putting on a graphical representation of those Disk objects.  Even though Flex has no issue with graphics, I want to separate these two changes both to match Ruby and because the changes are logically somewhat separate.  So first we can put in Disk objects and study that change.  After that, we can go into the GUI code.</p>

<!-- more -->


<h3>The Code</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
</pre></td><td class='code'><pre><code class='actionscript'><span class='line'><span class="kd">package</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * A ModeledTowerOfHanoi is the TowerOfHanoi algorithm</span>
</span><span class='line'><span class="cm"> * but it keeps track of the state of the Disks</span>
</span><span class='line'><span class="cm"> * with actual objects.  This makes it suitable for</span>
</span><span class='line'><span class="cm"> * model-based behavior (say tracking moves, animation or</span>
</span><span class='line'><span class="cm"> * other event listening) on top of those Disks</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nx">ModeledTowerOfHanoi</span> <span class="kd">extends</span> <span class="nx">TowerOfHanoi</span><span class="p">{</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="k">var</span> <span class="nx">my_height</span> <span class="o">:</span> <span class="nb">Number</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="k">var</span> <span class="nx">my_mockDisks</span> <span class="o">:</span> <span class="nb">Array</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">override</span> <span class="kd">function</span> <span class="nx">doHanoi</span><span class="p">(</span><span class="nx">height</span> <span class="o">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">:</span> <span class="nx">void</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">my_height</span> <span class="o">=</span> <span class="nx">height</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">setupDisks</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">logToConsole</span><span class="p">(</span><span class="s2">&quot;\n\nStart\n&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">printStacks</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">logToConsole</span><span class="p">(</span><span class="s2">&quot;\n\nMoves\n&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">moveTower</span><span class="p">(</span><span class="nx">my_height</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">logToConsole</span><span class="p">(</span><span class="s2">&quot;\n\nResult\n&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">printStacks</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">protected</span> <span class="kd">function</span> <span class="nx">setupDisks</span><span class="p">()</span> <span class="o">:</span> <span class="nx">void</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">my_stacks</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">();</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="k">var</span> <span class="nx">i</span><span class="o">:</span><span class="nb">int</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="mi">3</span><span class="o">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">my_stacks</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nb">Array</span><span class="p">());</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">var</span> <span class="nx">firstStack</span> <span class="o">:</span> <span class="nb">Array</span> <span class="o">=</span> <span class="nx">my_stacks</span><span class="p">.</span><span class="nx">first</span><span class="p">();</span> <span class="c1">//[0];</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="k">var</span> <span class="nx">j</span><span class="o">:</span><span class="nb">int</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="nx">j</span><span class="o">&lt;</span><span class="nx">my_height</span><span class="o">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">firstStack</span><span class="p">.</span><span class="nx">unshift</span><span class="p">(</span><span class="k">new</span> <span class="nx">HanoiDisk</span><span class="p">().</span><span class="nx">initWidth_pole</span><span class="p">(</span><span class="nx">j</span><span class="o">,</span><span class="mi">1</span><span class="p">));</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">my_mockDisks</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">();</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="k">var</span> <span class="nx">k</span><span class="o">:</span><span class="nb">int</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="nx">k</span><span class="o">&lt;</span><span class="mi">3</span><span class="o">;</span> <span class="nx">k</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">my_mockDisks</span><span class="p">[</span><span class="nx">k</span><span class="p">]</span><span class="o">=</span><span class="k">new</span> <span class="nx">HanoiDisk</span><span class="p">().</span><span class="nx">initWidth_pole</span><span class="p">(</span><span class="mi">1000</span><span class="o">,</span><span class="nx">k</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">protected</span> <span class="kd">function</span> <span class="nx">printStacks</span><span class="p">()</span> <span class="o">:</span> <span class="nx">void</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="k">var</span> <span class="nx">i</span><span class="o">:</span><span class="nb">int</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="nx">my_stacks</span><span class="p">.</span><span class="nx">length</span><span class="o">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">var</span> <span class="nx">eachStack</span> <span class="o">:</span> <span class="nb">Array</span> <span class="o">=</span> <span class="nx">my_stacks</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
</span><span class='line'>            <span class="nx">logToConsole</span><span class="p">(</span><span class="s2">&quot;   &lt;stack&gt;\n&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="k">for</span> <span class="p">(</span><span class="k">var</span> <span class="nx">j</span><span class="o">:</span><span class="nb">int</span> <span class="o">=</span> <span class="nx">eachStack</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="o">;</span> <span class="nx">j</span><span class="o">&gt;=</span><span class="mi">0</span><span class="o">;</span> <span class="nx">j</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">var</span> <span class="nx">eachDisk</span> <span class="o">:</span> <span class="o">*</span> <span class="o">=</span> <span class="nx">eachStack</span><span class="p">[</span><span class="nx">j</span><span class="p">];</span>
</span><span class='line'>                <span class="nx">logToConsole</span><span class="p">(</span><span class="nx">eachDisk</span><span class="p">.</span><span class="nx">toString</span><span class="p">()</span><span class="o">+</span><span class="s2">&quot;\n&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="nx">logToConsole</span><span class="p">(</span><span class="s2">&quot;   &lt;/stack&gt;\n&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="kd">protected</span> <span class="kd">override</span> <span class="kd">function</span> <span class="nx">moveDisk</span><span class="p">(</span><span class="nx">fromPin</span> <span class="o">:</span> <span class="o">*,</span> <span class="nx">toPin</span> <span class="o">:</span> <span class="o">*</span><span class="p">)</span> <span class="o">:</span> <span class="nx">void</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">var</span> <span class="nx">supportDisk</span> <span class="o">=</span> <span class="p">(</span><span class="nx">my_stacks</span><span class="p">[</span><span class="nx">toPin</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="nx">length</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="o">?</span> <span class="nx">my_mockDisks</span><span class="p">[</span><span class="nx">toPin</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">:</span> <span class="nx">my_stacks</span><span class="p">[</span><span class="nx">toPin</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">var</span> <span class="nx">disk</span> <span class="o">:</span> <span class="nx">HanoiDisk</span> <span class="o">=</span> <span class="nx">my_stacks</span><span class="p">[</span><span class="nx">fromPin</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="nx">pop</span><span class="p">();</span>
</span><span class='line'>        <span class="nx">my_stacks</span><span class="p">[</span><span class="nx">toPin</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="nx">push</span><span class="p">(</span><span class="nx">disk</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">disk</span><span class="p">.</span><span class="nx">moveUpon</span><span class="p">(</span><span class="nx">supportDisk</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">logToConsole</span><span class="p">(</span><span class="nx">disk</span> <span class="o">+</span> <span class="s2">&quot; moved &quot;</span> <span class="o">+</span> <span class="nx">fromPin</span> <span class="o">+</span> <span class="s2">&quot;-&gt;&quot;</span> <span class="o">+</span> <span class="nx">toPin</span><span class="o">+</span><span class="s2">&quot;\n&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">function</span> <span class="nx">logToConsole</span><span class="p">(</span><span class="nx">string</span> <span class="o">:</span> <span class="nb">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">my_view</span><span class="p">.</span><span class="nx">logToConsole</span><span class="p">(</span><span class="nx">string</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span> <span class="c1">//package</span>
</span></code></pre></td></tr></table></div></figure>


<h4>HanoiDisk</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='actionscript'><span class='line'><span class="kd">package</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nx">HanoiDisk</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="kd">const</span> <span class="nx">CONST_asciiA</span> <span class="o">:</span> <span class="nb">Number</span> <span class="o">=</span> <span class="s2">&quot;A&quot;</span><span class="p">.</span><span class="nx">charCodeAt</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="k">var</span> <span class="nx">width</span> <span class="o">:</span> <span class="nb">Number</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">public</span> <span class="k">var</span> <span class="nx">pole</span> <span class="o">:</span> <span class="nb">Number</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">protected</span> <span class="k">var</span> <span class="nx">my_name</span> <span class="o">:</span> <span class="nb">String</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="k">var</span> <span class="nx">my_moveCount</span> <span class="o">:</span> <span class="nb">Number</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">function</span> <span class="nx">initWidth_pole</span><span class="p">(</span><span class="nx">aWidth</span> <span class="o">:</span> <span class="nb">Number</span><span class="o">,</span> <span class="nx">aPole</span> <span class="o">:</span> <span class="nb">Number</span><span class="p">)</span> <span class="o">:</span> <span class="nx">HanoiDisk</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">width</span> <span class="o">=</span> <span class="nx">aWidth</span><span class="o">;</span>
</span><span class='line'>        <span class="nx">pole</span> <span class="o">=</span> <span class="nx">aPole</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">width</span> <span class="o">&lt;</span> <span class="mi">1000</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">my_name</span> <span class="o">=</span> <span class="s2">&quot;Disk-#&quot;</span><span class="o">+</span><span class="nb">String</span><span class="p">.</span><span class="nx">fromCharCode</span><span class="p">(</span><span class="nx">CONST_asciiA</span><span class="o">+</span><span class="nx">width</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">my_name</span> <span class="o">=</span> <span class="s2">&quot;Base-#&quot;</span><span class="o">+</span><span class="nx">pole</span><span class="o">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">function</span> <span class="nx">toString</span><span class="p">()</span> <span class="o">:</span> <span class="nb">String</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">my_name</span><span class="o">+</span><span class="s2">&quot;(&quot;</span><span class="o">+</span><span class="nx">my_moveCount</span><span class="o">+</span><span class="s2">&quot;)&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">function</span> <span class="nx">moveUpon</span><span class="p">(</span><span class="nx">destination</span> <span class="o">:</span> <span class="nx">HanoiDisk</span><span class="p">)</span> <span class="o">:</span> <span class="nx">void</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">pole</span> <span class="o">=</span> <span class="nx">destination</span><span class="p">.</span><span class="nx">pole</span><span class="o">;</span>
</span><span class='line'>        <span class="nx">my_moveCount</span><span class="o">++;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span> <span class="c1">//package</span>
</span></code></pre></td></tr></table></div></figure>


<h4>ModeledTowerOfHanoi</h4>

<p>I believe the following are the most interesting aspects:</p>

<ol>
<li><p>Public Attributes (which may be wrapped or unwrapped instance variables)</p></li>
<li><p>Explicit &#8216;override&#8217;</p></li>
<li><p>Explicit return values</p></li>
</ol>


<h3>Public Attributes</h3>

<p>Flex allows you to have attributes that are either (1) just instance variables or (2) one or a pair of &#8216;set&#8217; and &#8216;get&#8217; accessors.  The notation of access looks the same, so it is up to the receiver/implementer to decide whether &#8216;wrapping&#8217; is necessary.  Although the Macro approach of Ruby is nicer than having to do add accessors manually (or even &#8216;refactor&#8217; them in with a tool), the Flex approach is by far the best for this kind of situation.  The language/compiler actually understands the intent of the programmer (declaratively) vs. running through a macro and the results just happen to be the same.</p>

<p>Note that Flex goes beyond simple public attributes and can attach notification capabilities on top of it.</p>

<h3>Explicit &#8216;override&#8217;</h3>

<p>Flex and ActionScript again clearly try to help the programmer avoid making a mistake, in this case by making sure code <em>knows</em> it is overriding inherited code and that within that override you have to consider what the superclass wants, whether you need to call &#8216;super&#8217;, etc.</p>

<h3>Explicit return values</h3>

<p>Flex enables you to avoid specifying the type of a return value (defaulting to &#8216;Any&#8217;), but you have to decide whether you are going to return anything or nothing at all.  And if you are going to return anything, you need to explicitly say what you are going to return.</p>

<p>As I mentions in Part 4 of a Taste of Ruby, this approach is clearly the best &#8211; actually better than what I mentioned there.  So then returning &#8216;null&#8217; by default becomes a good second best (no language so far mentioned),  Returning &#8216;self&#8217; by default is third best (Smalltalk).  And Ruby returning of &#8220;whatever happens to be returned by the last statement&#8221; is a distant fourth.</p>

<h3>What Next</h3>

<p>Now onto the GUI itself.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Taste of Flex (Part 3)]]></title>
    <link href="http://markfussell.emenar.com/blog/2008/09/02/a-taste-of-flex-part-3/"/>
    <updated>2008-09-02T05:11:00-07:00</updated>
    <id>http://markfussell.emenar.com/blog/2008/09/02/a-taste-of-flex-part-3</id>
    <content type="html"><![CDATA[<p>This is a multi-part series.  The first in the series is <a href="../a-taste-of-flex">here</a>.</p>

<h2>Tower of Hanoi &#8211; With A Real Object</h2>

<p>The first two examples were not really object-based.  They are purely procedural, the algorithm is expressed completely recursively, and execution state is maintained on the call stack.  This works fine if we are just &#8216;tracing&#8217; the algorithm, but it does not let us show the state of the towers at any given time.  We also don&#8217;t see much in the way of real objects.  By adding the state of the towers in, we now have a reason to have stateful objects and new Classes of objects to maintain that state.  The added code with some explanation is in Chapter 4, Page 45.</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='actionscript'><span class='line'><span class="kd">package</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nx">TowerOfHanoi</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="kd">const</span> <span class="nx">CONST_asciiA</span> <span class="o">:</span> <span class="nb">Number</span> <span class="o">=</span> <span class="s2">&quot;A&quot;</span><span class="p">.</span><span class="nx">charCodeAt</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">protected</span> <span class="k">var</span> <span class="nx">my_view</span> <span class="o">:</span> <span class="o">*;</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="k">var</span> <span class="nx">my_stacks</span> <span class="o">:</span> <span class="nb">Array</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">function</span> <span class="nx">initView</span><span class="p">(</span><span class="nx">view</span> <span class="o">:</span> <span class="o">*</span><span class="p">)</span> <span class="o">:</span> <span class="nx">void</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">my_view</span> <span class="o">=</span> <span class="nx">view</span><span class="o">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">function</span> <span class="nx">doHanoi</span><span class="p">(</span><span class="nx">height</span> <span class="o">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">:</span> <span class="nx">void</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">my_stacks</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">();</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="k">var</span> <span class="nx">i</span><span class="o">:</span><span class="nb">int</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="mi">3</span><span class="o">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">my_stacks</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nb">Array</span><span class="p">());</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">var</span> <span class="nx">firstStack</span> <span class="o">:</span> <span class="nb">Array</span> <span class="o">=</span> <span class="nx">my_stacks</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="k">var</span> <span class="nx">j</span><span class="o">:</span><span class="nb">int</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="nx">j</span><span class="o">&lt;</span><span class="nx">height</span><span class="o">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">firstStack</span><span class="p">.</span><span class="nx">unshift</span><span class="p">(</span><span class="s2">&quot;Disk-#&quot;</span><span class="o">+</span><span class="nb">String</span><span class="p">.</span><span class="nx">fromCharCode</span><span class="p">(</span><span class="nx">CONST_asciiA</span><span class="o">+</span><span class="nx">j</span><span class="p">));</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">moveTower</span><span class="p">(</span><span class="nx">height</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="kd">protected</span> <span class="kd">function</span> <span class="nx">moveTower</span><span class="p">(</span><span class="nx">height</span> <span class="o">:</span> <span class="nb">int</span><span class="o">,</span> <span class="nx">fromPin</span> <span class="o">:</span> <span class="o">*,</span> <span class="nx">toPin</span> <span class="o">:</span> <span class="o">*,</span> <span class="nx">usingPin</span> <span class="o">:</span> <span class="o">*</span><span class="p">)</span> <span class="o">:</span> <span class="nx">void</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">height</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">moveTower</span><span class="p">(</span><span class="nx">height</span><span class="o">-</span><span class="mi">1</span><span class="o">,</span> <span class="nx">fromPin</span><span class="o">,</span> <span class="nx">usingPin</span><span class="o">,</span> <span class="nx">toPin</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">moveDisk</span><span class="p">(</span><span class="nx">fromPin</span><span class="o">,</span> <span class="nx">toPin</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">moveTower</span><span class="p">(</span><span class="nx">height</span><span class="o">-</span><span class="mi">1</span><span class="o">,</span> <span class="nx">usingPin</span><span class="o">,</span> <span class="nx">toPin</span><span class="o">,</span> <span class="nx">fromPin</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">protected</span> <span class="kd">function</span> <span class="nx">moveDisk</span><span class="p">(</span><span class="nx">fromPin</span> <span class="o">:</span> <span class="o">*,</span> <span class="nx">toPin</span> <span class="o">:</span> <span class="o">*</span><span class="p">)</span> <span class="o">:</span> <span class="nx">void</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">var</span> <span class="nx">disk</span> <span class="o">=</span> <span class="nx">my_stacks</span><span class="p">[</span><span class="nx">fromPin</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="nx">pop</span><span class="p">();</span>
</span><span class='line'>        <span class="nx">my_stacks</span><span class="p">[</span><span class="nx">toPin</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="nx">push</span><span class="p">(</span><span class="nx">disk</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">my_view</span><span class="p">.</span><span class="nx">logToConsole</span><span class="p">(</span><span class="nx">disk</span> <span class="o">+</span> <span class="s2">&quot; moved &quot;</span> <span class="o">+</span> <span class="nx">fromPin</span> <span class="o">+</span> <span class="s2">&quot;-&gt;&quot;</span> <span class="o">+</span> <span class="nx">toPin</span><span class="o">+</span><span class="s2">&quot;\n&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span> <span class="c1">//package</span>
</span></code></pre></td></tr></table></div></figure>


<h3>TowerOfHanoi</h3>

<p>The TowerOfHanoi main class is now able to be a pure ActionScript class, so it looks much cleaner and formats nicely now.  The only additional feature it needs (compared to say the Smalltalk or Ruby version) is a reference to its View so it can print into the Console of that view.  I could actually just use &#8216;Application.application&#8217; to get the outer view, but this is cleaner, more scalable, and makes it clearer what is happening [even though many people like to cheat with those kinds of Globals].</p>

<h3>Main Application</h3>

<p>The main Application is now clean of model code and just (1) holds onto the outer model and (2) provides view services to others.  I made logToConsole public so people could identify what is meant to be used by others vs. what is not.  Ultimately &#8216;logToConsole&#8217; could be put into an interface to make it clearer that is all the &#8216;TowerOfHanoi&#8217; needs from its view.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;mx:Application</span> <span class="na">xmlns:mx=</span><span class="s">&quot;http://www.adobe.com/2006/mxml&quot;</span> <span class="na">layout=</span><span class="s">&quot;vertical&quot;</span>
</span><span class='line'>  <span class="na">creationComplete=</span><span class="s">&quot;handleCreationComplete()&quot;</span>
</span><span class='line'><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;mx:Script&gt;</span>
</span><span class='line'>    <span class="cp">&lt;![CDATA[</span>
</span><span class='line'><span class="cp">        var my_model : TowerOfHanoi;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">        function handleCreationComplete() : void {</span>
</span><span class='line'><span class="cp">            my_model = new TowerOfHanoi();</span>
</span><span class='line'><span class="cp">            my_model.initView(this);</span>
</span><span class='line'><span class="cp">        }</span>
</span><span class='line'>
</span><span class='line'><span class="cp">        function handleDoItClicked() : void {</span>
</span><span class='line'><span class="cp">            logToConsole(&quot;\n=== Doing a Hanoi tower &quot;+vTowerInput.text+&quot; tall\n&quot;);</span>
</span><span class='line'><span class="cp">            my_model.doHanoi(new Number(vTowerInput.text));</span>
</span><span class='line'><span class="cp">        }</span>
</span><span class='line'>
</span><span class='line'><span class="cp">        public function logToConsole(string : String) : void {</span>
</span><span class='line'><span class="cp">            vConsole.text = vConsole.text+string;</span>
</span><span class='line'><span class="cp">        }</span>
</span><span class='line'><span class="cp">    ]]]]&gt;&lt;![CDATA[&gt;</span>
</span><span class='line'><span class="nt">&lt;/mx:Script&gt;</span>
</span><span class='line'><span class="nt">&lt;mx:HBox&gt;</span>
</span><span class='line'>    <span class="nt">&lt;mx:Text</span> <span class="na">text=</span><span class="s">&quot;How tall a tower?&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;mx:TextInput</span> <span class="na">id=</span><span class="s">&quot;vTowerInput&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;mx:Button</span> <span class="na">label=</span><span class="s">&quot;Do It&quot;</span> <span class="na">click=</span><span class="s">&quot;handleDoItClicked()&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/mx:HBox&gt;</span>
</span><span class='line'><span class="nt">&lt;mx:TextArea</span> <span class="na">id=</span><span class="s">&quot;vConsole&quot;</span> <span class="na">width=</span><span class="s">&quot;100%&quot;</span> <span class="na">height=</span><span class="s">&quot;100%&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/mx:Application&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Comments</h2>

<p>By moving the ActionScript portion out of the main Application XML, the syntax becomes clearer.  Another feature of Flex that is starting to show is that we can document and compile-time verify visibility (as needed), contractual interfaces (as needed), etc.  But we can also leave them off and things work fine.</p>

<p>We do need to document the existence of instance variables, local variables, and methods of whatever types we use (e.g. &#8216;self&#8217; / &#8216;this&#8217;) or the compiler will complain.  I believe this is far better (most of the time) than leaving that as a pure runtime issue and having typos potentially take significant time to debug.  And this does not interfere with things being &#8216;dynamic&#8217; (&#8216;duck typed&#8217;) in most cases although it is related to some meta-language capabilities.</p>

<p>Going into the Flex code itself, we can see a stronger relationship to &#8216;C&#8217; style control structures and not the higher-level block/closure structuring of things.  Although iterators and Functions are available in Flex/AS, they are not as natural in the language as in Smalltalk or Ruby because they don&#8217;t work well with collections (as defined in the current API) and are just a bit too verbose in general.  You could modify (monkey-patch) collections, but then the compiler would not understand the new functionality.    Although that is no worse than in Java/Ruby, it would be unusual in the community.  Maybe if Adobe adds it to AS4 just to be cross-language similar, it would be more natural.  But I didn&#8217;t want to augment the existing classes just to have the language match another language&#8217;s idioms</p>

<p>Examples of this kind of Monkey-Patch are:</p>

<ul>
<li><p><a href="http://www.rocketboots.com.au/blog/index.cfm?mode=entry&amp;entry=A5C356B1-E081-51EF-A79F47A1601ADEDF">RocketBoots</a></p></li>
<li><p><a href="http://www.kirupa.com/forum/archive/index.php/t-246045.html">Kirupa</a></p></li>
</ul>


<p>A minor note, the CharCode conversion is actually a Unicode conversion.  So you can put pretty much any character in the world languages you want to in there :-)  For example, try it with &#8216;50023&#8217; for the CONST value.</p>

<h3>Where Next?</h3>

<p>Next we should go to Chapter 5 (Animating the Program) — Page 64.  This involves some graphic work for the &#8216;model&#8217; aspects to be realistic, and for Flex this is not at all difficult, but I will follow the same pattern of &#8216;Parts&#8217; that I did with Ruby, so the next Part is just changing to having real Domain Model Objects (vs. the UI Model separation that occurred above for TowerOfHanoi vs the Application)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Taste of Flex (Part 2)]]></title>
    <link href="http://markfussell.emenar.com/blog/2008/09/02/a-taste-of-flex-part-2/"/>
    <updated>2008-09-02T04:12:00-07:00</updated>
    <id>http://markfussell.emenar.com/blog/2008/09/02/a-taste-of-flex-part-2</id>
    <content type="html"><![CDATA[<p>This is a multi-part series.  The first in the series is <a href="../a-taste-of-flex">here</a>.</p>

<h2>Tower of Hanoi &#8211; Procedural With Input</h2>

<p>The second example from &#8220;A Taste of Smalltalk&#8221; is in Chapter 3, page 36 and does basic IO.  Except that Smalltalk-80 includes a Windowing graphics system so it can automatically open Dialogs and other things.    Fortunately Flex includes a Windowing system too, and can easily open up dialogs.  Opening up a Dialog might match the Smalltalk example the best, but given Flex is already running within a Window, opening up an extra dialog is a bit artificial.  Instead we can just add an input field for the value and a button to kick off the Hanoi.</p>

<!-- more -->


<h3>Tower of Hanoi &#8211; Procedural With Input &#8211; Flex</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;mx:Application</span> <span class="na">xmlns:mx=</span><span class="s">&quot;http://www.adobe.com/2006/mxml&quot;</span> <span class="na">layout=</span><span class="s">&quot;vertical&quot;</span>
</span><span class='line'>  <span class="na">creationComplete=</span><span class="s">&quot;handleCreationComplete()&quot;</span>
</span><span class='line'><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;mx:Script&gt;</span>
</span><span class='line'>    <span class="cp">&lt;![CDATA[</span>
</span><span class='line'><span class="cp">        function moveTower(height : int, fromPin : *, toPin : *, usingPin : *) : void {</span>
</span><span class='line'><span class="cp">            if (height &gt; 0) {</span>
</span><span class='line'><span class="cp">                moveTower(height-1, fromPin, usingPin, toPin);</span>
</span><span class='line'><span class="cp">                moveDisk(fromPin, toPin);</span>
</span><span class='line'><span class="cp">                moveTower(height-1, usingPin, toPin, fromPin);</span>
</span><span class='line'><span class="cp">            }</span>
</span><span class='line'><span class="cp">        }</span>
</span><span class='line'>
</span><span class='line'><span class="cp">        function moveDisk(fromPin : *, toPin : *) : void {</span>
</span><span class='line'><span class="cp">            vConsole.text = vConsole.text+fromPin + &quot;-&gt;&quot; + toPin+&quot;\n&quot;;</span>
</span><span class='line'><span class="cp">        }</span>
</span><span class='line'>
</span><span class='line'><span class="cp">        function handleCreationComplete() : void {</span>
</span><span class='line'><span class="cp">            //Don&#39;t need to do anything anymore</span>
</span><span class='line'><span class="cp">        }</span>
</span><span class='line'>
</span><span class='line'><span class="cp">        function handleDoItClicked() : void {</span>
</span><span class='line'><span class="cp">            vConsole.text = vConsole.text+&quot;\n=== Doing a Hanoi tower &quot;+vTowerInput.text+&quot; tall\n&quot;;</span>
</span><span class='line'><span class="cp">            moveTower(new Number(vTowerInput.text), 1, 3, 2);</span>
</span><span class='line'><span class="cp">        }</span>
</span><span class='line'><span class="cp">    ]]]]&gt;&lt;![CDATA[&gt;</span>
</span><span class='line'><span class="nt">&lt;/mx:Script&gt;</span>
</span><span class='line'><span class="nt">&lt;mx:HBox&gt;</span>
</span><span class='line'>    <span class="nt">&lt;mx:Text</span> <span class="na">text=</span><span class="s">&quot;How tall a tower?&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;mx:TextInput</span> <span class="na">id=</span><span class="s">&quot;vTowerInput&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;mx:Button</span> <span class="na">label=</span><span class="s">&quot;Do It&quot;</span> <span class="na">click=</span><span class="s">&quot;handleDoItClicked()&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/mx:HBox&gt;</span>
</span><span class='line'><span class="nt">&lt;mx:TextArea</span> <span class="na">id=</span><span class="s">&quot;vConsole&quot;</span> <span class="na">width=</span><span class="s">&quot;100%&quot;</span> <span class="na">height=</span><span class="s">&quot;100%&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/mx:Application&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>To replace the dialog (in Smalltalk) or the command line request (in Ruby), we just create a horizontal row of a question label, an input field, and a Do It button.  Whenever a user clicks Do It, it takes the current value of the field and runs the Hanoi algorithm.</p>

<p>This is both pleasingly simply and also has the added benefit that we produced an interactive tool: you can just keep typing new numbers into it and it will give you new results.</p>

<h2>Comments</h2>

<p>Flex is highly capable with user input and interactivity.  It has a cleaner / simpler UI model than Smalltalk (IMO), which is good given we have had about 30 years of working with UIs to take things forward.  Compared to Ruby, Flex is as easy as RubyShoes for simple things like this example.</p>

<h3>Where Next?</h3>

<p>Next we should go to Chapter 4 — Page 44. The Third Example (with Real Hanoi Classes)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Taste of Flex]]></title>
    <link href="http://markfussell.emenar.com/blog/2008/09/02/a-taste-of-flex/"/>
    <updated>2008-09-02T00:29:00-07:00</updated>
    <id>http://markfussell.emenar.com/blog/2008/09/02/a-taste-of-flex</id>
    <content type="html"><![CDATA[<p>One of my favored books in the 1980s was ‘A Taste of Smalltalk’. This was a very short book that gave you the flavor of Smalltalk programming (the language and IDE) as compared to Pascal, C, and Lisp. I believe it is always important to show multiple programming languages for concepts and this book followed that rule. The goal of this post-series is to take ‘A Taste of Smalltalk’ and apply it to Flex.  This is the second of my comparisons in this series, where the first one was in Ruby.</p>

<!-- more -->


<p>You can find the original book here:</p>

<ul>
<li><p><a href="http://www.iam.unibe.ch/~ducasse/FreeBooks/Taste/">A Taste of Smalltalk</a></p></li>
<li><p><a href="http://stephane.ducasse.free.fr/FreeBooks.html">Free Smalltalk Books</a></p></li>
</ul>


<p>Given the original book is available online, I will not repeat it.</p>

<p>To run these Flex examples, you should have a Flex SDK, which you can find at <a href="http://opensource.adobe.com/wiki/display/flexsdk/Flex+SDK">FlexSDK</a> or via <a href="http://www.adobe.com/">http://www.adobe.com/</a>.  The SDK is free.</p>

<p>For playing with Smalltalk, you can pick up Squeak from <a href="http://squeak.org/">http://squeak.org/</a>.  Squeak&#8217;s UI is a bit different from Smalltalk-80 (in the book), but if you go through a quick Squeak tutorial, you should be able to connect the two.</p>

<h2>Tower of Hanoi &#8211; Procedural &#8211; Flex</h2>

<p>The first example in &#8216;A Taste&#8217; is in multiple languages (Chapter 1).  This is Tower of Hanoi done totally procedurally.  Converting to Flex is very simple, where the &#8216;creationComplete&#8217; event is about the equivalent of a &#8216;main&#8217; / script entrypoint.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;mx:Application</span> <span class="na">xmlns:mx=</span><span class="s">&quot;http://www.adobe.com/2006/mxml&quot;</span> <span class="na">layout=</span><span class="s">&quot;absolute&quot;</span>
</span><span class='line'>  <span class="na">creationComplete=</span><span class="s">&quot;handleCreationComplete()&quot;</span>
</span><span class='line'><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;mx:Script&gt;</span>
</span><span class='line'>    <span class="cp">&lt;![CDATA[</span>
</span><span class='line'><span class="cp">        function moveTower(height : int, fromPin : *, toPin : *, usingPin : *) : void {</span>
</span><span class='line'><span class="cp">            if (height &gt; 0) {</span>
</span><span class='line'><span class="cp">                moveTower(height-1, fromPin, usingPin, toPin);</span>
</span><span class='line'><span class="cp">                moveDisk(fromPin, toPin);</span>
</span><span class='line'><span class="cp">                moveTower(height-1, usingPin, toPin, fromPin);</span>
</span><span class='line'><span class="cp">            }</span>
</span><span class='line'><span class="cp">        }</span>
</span><span class='line'>
</span><span class='line'><span class="cp">        function moveDisk(fromPin : *, toPin : *) : void {</span>
</span><span class='line'><span class="cp">            trace(fromPin + &quot;-&gt;&quot; + toPin);</span>
</span><span class='line'><span class="cp">        }</span>
</span><span class='line'>
</span><span class='line'><span class="cp">        function handleCreationComplete() : void {</span>
</span><span class='line'><span class="cp">            moveTower(3,1,3,2);</span>
</span><span class='line'><span class="cp">        }</span>
</span><span class='line'><span class="cp">    ]]]]&gt;</span>
</span><span class='line'><span class="nt">&lt;/mx:Script&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/mx:Application&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that Flex will be treated a bit unfairly in the formatting department (as is Smalltalk) because the &#8216;sourcode plugin&#8217; in WordPress isn&#8217;t working for them.  If someone recommends a &#8216;snippet&#8217; location that understand Flex or AS3 (and Smalltalk and everything else :-) ), I can put this up there to format it more nicely.</p>

<p>So what is interesting about Flex in this example?</p>

<ul>
<li>Multiple Syntaxes</li>
<li>Pascal Declaration Ordering</li>
<li>As Statically Typed As You Want</li>
<li>No Main</li>
<li>The Cheat</li>
</ul>


<h3>Multiple Syntaxes, each for a different purpose</h3>

<p>Well, obviously first Flex is not a single syntax but a composite of at least two syntaxes used for different purposes:</p>

<ul>
<li><p>XML is used to create objects, including the outer &#8216;Application&#8217; object</p></li>
<li><p>AS3 (ActionScript3) is used to define classes</p></li>
</ul>


<p>So any Flex application will have both of these syntaxes, and they can either be in the same file (as above), or a better practice is to separate the two as much as possible where the XML becomes the View/Layout and the AS files manage behavior.  But for the moment, I will keep them together.</p>

<p>The third syntax is CSS, which can again be either embedded or kept in a separate file.  Although learning three syntaxes is an increase in initial work, two of the three syntaxes are almost universal (XML, CSS) and necessary for doing most anything.  And because each is used for a different purpose, they blend together quite naturally.</p>

<h3>Pascal Notation</h3>

<p>ActionScript chose to go down the far more natural &#8216;type suffix&#8217; notation of Pascal and related languages.  This isn&#8217;t really interesting except that C (for compiler ease) went down a different path and a lot of mainstream languages (e.g. Java) followed in that path.  Especially given that ActionScript does not require type declarations, it seems to have chosen wisely, but people are touchy about this kind of syntax choice.</p>

<h3>As Statically Typed As You Want</h3>

<p>In the code, you can see types declared as &#8216;: <em>&#8217; &#8211; meaning &#8216;Any Type&#8217;.  You could also leave off the type declaration and it would mean the same thing, but including the &#8216;: </em>&#8217; makes it clear I intend to allow any type of object to be used.  So ActionScript can be as statically typed as you want: either completely dynamic like Smalltalk or Ruby or others, or basically as statically as Java (with a similar static type model).</p>

<h3>No Main</h3>

<p>Flex is not a scripting language&#8230; it is a graphical application language and application environment that can run either standalone (in Air) or within a browser.  So there is not really a &#8216;main&#8217; script that executes.  The equivalent to &#8216;main&#8217; is that when an Application is constructed, at the very end of that construction, an event of &#8216;creationComplete&#8217; will be sent out.  So this is about as close to a &#8216;main&#8217; as we can get.  You could pick up command-line arguments or browser parameters within this &#8216;handleCreationComplete&#8217; handler.</p>

<h3>The Cheat</h3>

<p>OK, now for the cheat that is in the above code.  If anyone executed the above code within Flex in Debug mode, it would work pretty much as you expect and put lines out to a debugging console.  But it would have to be run in Debug mode for that.  If you run it normally, the &#8216;trace&#8217; output wouldn&#8217;t show anywhere.</p>

<p>I only cheated to make it easier to see the main core of the application code separate from the GUI aspects of the language (just as I tried to do with Ruby).  Flex has graphics capabilities (just like Smalltalk) but is not part of an IDE (as opposed to Smalltalk) and is not a scripting language (like Perl or Ruby) and did not include &#8216;System output&#8217; (like Java) because it would be useless in a Browser and for 99.9% of any Flex / Flash deployment.  But it does include tracing for development and debugging purposes&#8230; so I cheated and used that.</p>

<p>The important thing about a cheat is to recognize it and fix it&#8230; so let&#8217;s next enhance the Flex application to show output.</p>

<h2>Showing Console-like output in Flex</h2>

<p>Adding a console output only requires two lines of code</p>

<pre><code>        function moveDisk(fromPin : *, toPin : *) : void {
            vConsole.text = vConsole.text+fromPin + "-&gt;" + toPin+"\n";
        }
</code></pre>

<p>and</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;mx:TextArea</span> <span class="na">id=</span><span class="s">&quot;vConsole&quot;</span> <span class="na">width=</span><span class="s">&quot;100%&quot;</span> <span class="na">height=</span><span class="s">&quot;100%&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>so it would have been just as easy to do it this way initially, but then a &#8220;language&#8221; difference in its application environment would have been a bit more hidden.</p>

<h2>Augmenting Existing Classes (Monkey-Patching)</h2>

<p>As described in &#8216;A Taste of Ruby&#8217;, the Smalltalk example from the book actually modifies &#8216;Object&#8217;, so &#8216;moveTower&#8217; is available on any object.  This is certainly possible in Flex but would require actively talking to Object.prototype to add behavior.  If you do this, the system will run but the compiler will have no idea that it will run correctly (and really it will have no &#8216;understanding&#8217; of the code you added).  Modifying Object was contrived but easy in Smalltalk, contrived but easy in Ruby, and contrived but &#8216;not-so-hard&#8217; in Flex.  So for Flex it is the strangest to do.  But here is the very contrived Flex code anyway :-)</p>

<pre><code>Foo
</code></pre>

<h3>Monkey-Patching vs. Source Patching/Augmenting</h3>

<p>For Smalltalk and Flex you have the vendor-supplied source, which you could easily patch as part of the source version/modification control system.  So the question becomes:</p>

<blockquote><p>Why wouldn&#8217;t patching occur at the source-code level so people can see what changes have happened?</p></blockquote>

<p>Smalltalk wrestled with this for years with different vendors and different teams choosing different approaches.  I personally believe that the current Monticello for Squeak and the heavyweight &#8216;Envy&#8217; (and similar source code tools) get this right in that you could certainly modify an existing class but those changes had to be documented as source changes and had to <em>not conflict</em> (with Monticello having a nicer model than Envy [if memory serves for Envy]).</p>

<p>So although I don&#8217;t think Flex needs these kinds of changes particularly for what Flex is used for, something that enables you to bring system classes into your own modifiable version-control space and then allow patching on that space is nicer than having everyone hit the main space without clear visibility to what they are doing (effectively Ruby&#8217;s current mainstream choice).</p>

<h2>Comments</h2>

<p>This example from &#8220;A Taste of Smalltalk&#8221; is the highly procedural version.  It is not meant to be a particularly good program, but it is a simple and good introductory example.  Flex does fine with this example: it does not artificially type the &#8216;moveTower&#8217; parameters.  It has a bit more static typing, which helps avoid typos.  But everything is an object, so dynamic typing works fine too.</p>

<p>Because Flex includes an inherent GUI environment (but no inherent Console) we had to add one line of MX code to create that console.  Flex is a three-syntax set of families so it can look a bit complex to begin with (wrapper XML and the CDATA ActionScript) but the use of the XML is clean and for a specific purpose that ActionScript and most languages (say other than Lisp) are not as good for.  And using XML for page layout is very familiar to people (e.g. XHTML) and goes nicely with the CSS capabilities in Flex as well.</p>

<h3>Where Next?</h3>

<p>Next we should go to Chapter 3 &#8211; Page 36.  The Second Example.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Taste of Ruby (Part 5)]]></title>
    <link href="http://markfussell.emenar.com/blog/2008/08/29/a-taste-of-ruby-part-5/"/>
    <updated>2008-08-29T23:42:00-07:00</updated>
    <id>http://markfussell.emenar.com/blog/2008/08/29/a-taste-of-ruby-part-5</id>
    <content type="html"><![CDATA[<p>This is a multi-part series.  The first in the series is <a href="../../../08/28/a-taste-of-ruby">here</a>.</p>

<h2>Tower of Hanoi — With Graphics</h2>

<p>To follow the flow of code progress within &#8220;A Taste of Smalltalk&#8221;, we next need to include a graphical representation of the disks and their movement between the poles.  As mentioned previously, converting this part to Ruby has a problem: Ruby doesn&#8217;t include graphic capabilities.  So we have to pick an extension or add-on to Ruby that will enable us to hook into the graphics system.</p>

<!-- more -->


<p>Because it seems the easiest to work with, I chose &#8216;Shoes&#8217; (<a href="http://code.whytheluckystiff.net/shoes/">http://code.whytheluckystiff.net/shoes/</a>).  The installation of Shoes is very simple and you just run your &#8216;app&#8217; inside Shoes application world, which includes Ruby itself, the graphic capabilities, and the UI framework.</p>

<p>Shoes seems simple and clean, the only problem is it doesn&#8217;t work within an IDE, so I lost a bit of tooling while doing this.  With the final running program, this isn&#8217;t a problem but it can be painful if you are learning, tweaking, or studying things.  So because this could be painful to others as well, I made the main code base able to run inside a normal irb, and in that case it just logs to the console like it always has been.</p>

<p>The main new class is AnimatedTowerOfHanoi, which is really just a notifying version of ModeledTowerOfHanoi.  This pass also has some cleanup of the previous code of ModeledTowerOfHanoi.  So I include all three classes below</p>

<h3>The New Classes</h3>

<h4>TowerOfHanoi</h4>

<p>This is still the same as the original from &#8216;Part 2&#8217;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># A Taste of Ruby.  Based on a Taste of Smalltalk (Kaehler and Patterson)</span>
</span><span class='line'><span class="c1"># Tower of Hanoi -- Variation 5</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># TowerOfHanoi</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1"># @stacks is an Array of DiskHolders (pins)</span>
</span><span class='line'><span class="k">class</span> <span class="nc">TowerOfHanoi</span> <span class="o">&lt;</span> <span class="no">Object</span>
</span><span class='line'>  <span class="c1">#Tower of Hanoi program.</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">hanoi</span>
</span><span class='line'>    <span class="c1"># Do the tower</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;How tall a tower?&quot;</span>
</span><span class='line'>    <span class="nb">print</span> <span class="s2">&quot;&gt;&quot;</span>
</span><span class='line'>    <span class="n">height</span> <span class="o">=</span> <span class="mi">5</span> <span class="c1">#gets.to_i</span>
</span><span class='line'>
</span><span class='line'>    <span class="vi">@stacks</span> <span class="o">=</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span><span class="o">.</span><span class="n">collect</span> <span class="p">{</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">firstStack</span> <span class="o">=</span> <span class="vi">@stacks</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'>    <span class="mi">1</span><span class="o">.</span><span class="n">upto</span><span class="p">(</span><span class="n">height</span><span class="p">)</span> <span class="p">{</span><span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="n">firstStack</span><span class="o">.</span><span class="n">unshift</span><span class="p">(</span><span class="s2">&quot;Disk-</span><span class="si">#{</span><span class="p">(</span><span class="sc">?A</span><span class="o">+</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">chr</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">move_tower</span><span class="p">(</span><span class="n">height</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Recursive procedure to move the disk at a height</span>
</span><span class='line'>  <span class="c1"># from one pin to another pin using a third pin</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">move_tower</span><span class="p">(</span><span class="n">height</span><span class="p">,</span> <span class="n">fromPin</span><span class="p">,</span> <span class="n">toPin</span><span class="p">,</span> <span class="n">usingPin</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">height</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">)</span> <span class="k">then</span>
</span><span class='line'>      <span class="n">move_tower</span><span class="p">(</span><span class="n">height</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">fromPin</span><span class="p">,</span> <span class="n">usingPin</span><span class="p">,</span> <span class="n">toPin</span><span class="p">)</span>
</span><span class='line'>      <span class="n">move_disk</span><span class="p">(</span><span class="n">fromPin</span><span class="p">,</span> <span class="n">toPin</span><span class="p">)</span>
</span><span class='line'>      <span class="n">move_tower</span><span class="p">(</span><span class="n">height</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">usingPin</span><span class="p">,</span> <span class="n">toPin</span><span class="p">,</span> <span class="n">fromPin</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Actually move the disk between the pins</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">move_disk</span><span class="p">(</span><span class="n">fromPin</span><span class="p">,</span><span class="n">toPin</span><span class="p">)</span>
</span><span class='line'>    <span class="n">disk</span> <span class="o">=</span> <span class="p">(</span><span class="vi">@stacks</span><span class="o">[</span><span class="n">fromPin</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">pop</span>
</span><span class='line'>    <span class="vi">@stacks</span><span class="o">[</span><span class="n">toPin</span><span class="o">-</span><span class="mi">1</span><span class="o">].</span><span class="n">push</span><span class="p">(</span><span class="n">disk</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">print</span> <span class="n">disk</span><span class="p">,</span> <span class="s2">&quot; moved &quot;</span><span class="p">,</span> <span class="n">fromPin</span><span class="o">.</span><span class="n">to_s</span><span class="p">,</span> <span class="s2">&quot;-&gt;&quot;</span><span class="p">,</span> <span class="n">toPin</span><span class="o">.</span><span class="n">to_s</span><span class="p">,</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h4>ModeledTowerOfHanoi</h4>

<p>The ModeledTowerOfHanoi has been cleaned up a little to make subclassing easier and just because it was the right thing to do.  Specifically,</p>

<ul>
<li><p>There was a fix to the &#8216;move&#8217; algorithm, so we tell the disk onto which disk it is moving</p></li>
<li><p>Some common methods are pulled out</p></li>
<li><p>Disks are now responsible for describing the move</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># A ModeledTowerOfHanoi is the TowerOfHanoi algorithm</span>
</span><span class='line'><span class="c1"># but it actually keeps track of the state of the Disks</span>
</span><span class='line'><span class="c1"># with actual objects.  This makes it suitable for</span>
</span><span class='line'><span class="c1"># model-based behavior (say tracking moves, animation or</span>
</span><span class='line'><span class="c1"># other event listening) on top of those Disks</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">ModeledTowerOfHanoi</span> <span class="o">&lt;</span> <span class="no">TowerOfHanoi</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">hanoi</span>
</span><span class='line'>    <span class="n">ask_for_height</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">setup_disks</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Start&quot;</span>
</span><span class='line'>    <span class="n">print_stacks</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">puts</span>
</span><span class='line'>    <span class="n">move_tower</span><span class="p">(</span><span class="vi">@height</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">puts</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Result&quot;</span>
</span><span class='line'>    <span class="n">print_stacks</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">print_stacks</span>
</span><span class='line'>    <span class="vi">@stacks</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span> <span class="n">eachStack</span> <span class="o">|</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;  &quot;</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="n">eachStack</span><span class="o">.</span><span class="n">reverse</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;  &quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">ask_for_height</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;How tall a tower?&quot;</span>
</span><span class='line'>    <span class="nb">print</span> <span class="s2">&quot;&gt;&quot;</span>
</span><span class='line'>    <span class="n">height</span> <span class="o">=</span> <span class="mi">5</span> <span class="c1">#gets.to_i</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>    <span class="vi">@height</span> <span class="o">=</span> <span class="n">height</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">setup_disks</span>
</span><span class='line'>    <span class="no">HanoiDisk</span><span class="o">.</span><span class="n">set_towers</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="vi">@stacks</span> <span class="o">=</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span><span class="o">.</span><span class="n">collect</span> <span class="p">{</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">firstStack</span> <span class="o">=</span> <span class="vi">@stacks</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'>    <span class="mi">1</span><span class="o">.</span><span class="n">upto</span><span class="p">(</span><span class="vi">@height</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">size</span><span class="o">|</span>
</span><span class='line'>      <span class="n">disk</span> <span class="o">=</span> <span class="n">createDisk</span><span class="o">.</span><span class="n">initWidth_pole</span><span class="p">(</span><span class="n">size</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>      <span class="n">firstStack</span><span class="o">.</span><span class="n">unshift</span><span class="p">(</span><span class="n">disk</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="vi">@mockDisks</span> <span class="o">=</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'>    <span class="mi">1</span><span class="o">.</span><span class="n">upto</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'>      <span class="vi">@mockDisks</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="o">]=</span><span class="p">(</span><span class="n">createDisk</span><span class="o">.</span><span class="n">initWidth_pole</span><span class="p">(</span><span class="mi">1000</span><span class="p">,</span><span class="n">i</span><span class="p">))</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">createDisk</span><span class="p">()</span>
</span><span class='line'>    <span class="k">return</span> <span class="no">HanoiDisk</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">move_disk</span><span class="p">(</span><span class="n">fromPin</span><span class="p">,</span> <span class="n">toPin</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">supportDisk</span> <span class="o">=</span> <span class="k">if</span> <span class="p">(</span><span class="vi">@stacks</span><span class="o">[</span><span class="n">toPin</span><span class="o">-</span><span class="mi">1</span><span class="o">].</span><span class="n">empty?</span><span class="p">)</span> <span class="k">then</span>
</span><span class='line'>      <span class="vi">@mockDisks</span><span class="o">[</span><span class="n">toPin</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="vi">@stacks</span><span class="o">[</span><span class="n">toPin</span><span class="o">-</span><span class="mi">1</span><span class="o">].</span><span class="n">last</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">disk</span> <span class="o">=</span> <span class="vi">@stacks</span><span class="o">[</span><span class="n">fromPin</span><span class="o">-</span><span class="mi">1</span><span class="o">].</span><span class="n">pop</span>
</span><span class='line'>    <span class="vi">@stacks</span><span class="o">[</span><span class="n">toPin</span><span class="o">-</span><span class="mi">1</span><span class="o">].</span><span class="n">push</span><span class="p">(</span><span class="n">disk</span><span class="p">)</span>
</span><span class='line'>    <span class="n">disk</span><span class="o">.</span><span class="n">move_upon</span><span class="p">(</span><span class="n">supportDisk</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">log</span><span class="p">(</span><span class="n">outString</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">print</span> <span class="n">outString</span><span class="p">,</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">HanoiDisk</span>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:name</span>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:pole</span>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:width</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">set_towers</span><span class="p">(</span><span class="n">owner</span><span class="p">)</span>
</span><span class='line'>    <span class="vc">@@the_towers</span> <span class="o">=</span> <span class="n">owner</span>
</span><span class='line'>    <span class="vc">@@the_thickness</span> <span class="o">=</span> <span class="mi">14</span>
</span><span class='line'>    <span class="vc">@@the_diskgap</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initWidth_pole</span><span class="p">(</span><span class="n">width</span><span class="p">,</span> <span class="n">pole</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@pole</span> <span class="o">=</span> <span class="n">pole</span>
</span><span class='line'>    <span class="vi">@width</span> <span class="o">=</span> <span class="n">width</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">width</span> <span class="o">&lt;</span> <span class="mi">1000</span><span class="p">)</span> <span class="k">then</span>
</span><span class='line'>      <span class="vi">@name</span><span class="o">=</span><span class="s2">&quot;Disk-</span><span class="si">#{</span><span class="p">(</span><span class="sc">?A</span><span class="o">+</span><span class="n">width</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">chr</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="vi">@name</span><span class="o">=</span><span class="s2">&quot;Base-</span><span class="si">#{</span><span class="n">pole</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="vi">@move_count</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nb">self</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">to_s</span>
</span><span class='line'>    <span class="k">return</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="vi">@name</span><span class="si">}</span><span class="s2">(</span><span class="si">#{</span><span class="vi">@pole</span><span class="si">}</span><span class="s2">,</span><span class="si">#{</span><span class="vi">@move_count</span><span class="si">}</span><span class="s2">)&quot;</span> <span class="c1">#{@@the_towers}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">move_upon</span><span class="p">(</span><span class="n">destination</span><span class="p">)</span>
</span><span class='line'>    <span class="vc">@@the_towers</span><span class="o">.</span><span class="n">log</span><span class="p">(</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="nb">self</span><span class="si">}</span><span class="s2"> moved </span><span class="si">#{</span><span class="vi">@pole</span><span class="o">.</span><span class="n">to_s</span><span class="si">}</span><span class="s2"> -&gt; </span><span class="si">#{</span><span class="n">destination</span><span class="o">.</span><span class="n">pole</span><span class="o">.</span><span class="n">to_s</span><span class="si">}</span><span class="s2">  (</span><span class="si">#{</span><span class="n">destination</span><span class="o">.</span><span class="n">to_s</span><span class="si">}</span><span class="s2">)&quot;</span> <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="vi">@pole</span> <span class="o">=</span> <span class="n">destination</span><span class="o">.</span><span class="n">pole</span>
</span><span class='line'>    <span class="vi">@move_count</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h4>AnimatedTowerOfHanoi</h4>

<p>Now we are finally to the new &#8220;animated&#8221; class.  The main changes for this class are to enable it to talk to an owning &#8216;application&#8217; if it exists and also it starts hooking into the Shoes code.  For convenience, I made the behavior of the class branch based on whether that &#8216;@app&#8217; exists.  The final change is that AnimatedHanoiDisk does a sleep so we can see the animation.  This affects both console and graphic behavior.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">AnimatedTowerOfHanoi</span> <span class="o">&lt;</span> <span class="no">ModeledTowerOfHanoi</span>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:stacks</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initApp</span><span class="p">(</span><span class="n">shoesApp</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@app</span> <span class="o">=</span> <span class="n">shoesApp</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nb">self</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">setup_disks</span>
</span><span class='line'>    <span class="k">super</span>
</span><span class='line'>
</span><span class='line'>    <span class="vi">@app</span><span class="o">.</span><span class="n">noteChange</span> <span class="k">if</span> <span class="vi">@app</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">createDisk</span><span class="p">()</span>
</span><span class='line'>    <span class="k">return</span> <span class="no">AnimatedHanoiDisk</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">ask_for_height</span>
</span><span class='line'>    <span class="vi">@height</span> <span class="o">=</span> <span class="mi">5</span>
</span><span class='line'>    <span class="k">return</span> <span class="kp">nil</span> <span class="k">unless</span> <span class="vi">@app</span>
</span><span class='line'>    <span class="n">answer</span> <span class="n">ask</span><span class="p">(</span><span class="s2">&quot;How Tall A Tower?&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">answer</span><span class="p">(</span><span class="n">v</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@height</span> <span class="o">=</span> <span class="n">v</span><span class="o">.</span><span class="n">to_i</span>
</span><span class='line'>    <span class="vi">@app</span><span class="o">.</span><span class="n">answer</span><span class="p">(</span><span class="n">v</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">log</span><span class="p">(</span><span class="n">outString</span><span class="p">)</span>
</span><span class='line'>    <span class="k">super</span> <span class="k">unless</span> <span class="vi">@app</span>
</span><span class='line'>    <span class="vi">@app</span><span class="o">.</span><span class="n">appendLog</span><span class="p">(</span><span class="n">outString</span><span class="p">)</span> <span class="k">if</span> <span class="vi">@app</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">move_disk</span><span class="p">(</span><span class="n">fromPin</span><span class="p">,</span> <span class="n">toPin</span><span class="p">)</span>
</span><span class='line'>    <span class="k">super</span>
</span><span class='line'>
</span><span class='line'>    <span class="vi">@app</span><span class="o">.</span><span class="n">noteChange</span> <span class="k">if</span> <span class="vi">@app</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">AnimatedHanoiDisk</span> <span class="o">&lt;</span> <span class="no">HanoiDisk</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">move_upon</span><span class="p">(</span><span class="n">destination</span><span class="p">)</span>
</span><span class='line'>    <span class="k">super</span><span class="p">(</span><span class="n">destination</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">sleep</span> <span class="mi">0</span><span class="o">.</span><span class="mi">3</span>
</span><span class='line'>    <span class="c1">#@@the_towers.log(&quot;Foo&quot;)</span>
</span><span class='line'>    <span class="c1">#@@the_towers.draw_board</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Running via &#8216;irb&#8217;</h3>

<p>You can test the above code by running it in the normal Ruby console</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">AnimatedTowerOfHanoi</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">hanoi</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Putting on the Shoes</h3>

<p>If you have Shoes running successfully, you can combine the above code with a Shoes app which visualizes the state of the towers.  The Shoes code is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Shoes</span><span class="o">.</span><span class="n">app</span> <span class="ss">:width</span> <span class="o">=&gt;</span> <span class="mi">520</span><span class="p">,</span> <span class="ss">:height</span> <span class="o">=&gt;</span> <span class="mi">600</span><span class="p">,</span> <span class="ss">:resizable</span> <span class="o">=&gt;</span> <span class="kp">false</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">answer</span><span class="p">(</span><span class="n">v</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@answer</span><span class="o">.</span><span class="n">replace</span> <span class="s2">&quot;Doing a </span><span class="si">#{</span><span class="n">v</span><span class="si">}</span><span class="s2"> story Hanoi&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">appendLog</span><span class="p">(</span><span class="n">outString</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@log</span><span class="o">.</span><span class="n">append</span> <span class="p">{</span> <span class="n">para</span> <span class="n">outString</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">noteChange</span>
</span><span class='line'>    <span class="n">redrawStacks</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">#redraw the stacks by simply clearing the area and drawing them again</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">redrawStacks</span>
</span><span class='line'>
</span><span class='line'>    <span class="vi">@render_area</span><span class="o">.</span><span class="n">clear</span> <span class="k">do</span>
</span><span class='line'>      <span class="vi">@towerOfHanoi</span><span class="o">.</span><span class="n">stacks</span><span class="o">.</span><span class="n">each_with_index</span> <span class="k">do</span> <span class="o">|</span><span class="n">eachStack</span><span class="p">,</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'>        <span class="n">poleCenterX</span> <span class="o">=</span> <span class="n">i</span><span class="o">*</span><span class="mi">100</span> <span class="o">+</span> <span class="mi">50</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">eachStack</span><span class="o">.</span><span class="n">each_with_index</span> <span class="k">do</span> <span class="o">|</span><span class="n">eachDisk</span><span class="p">,</span><span class="n">j</span><span class="o">|</span>
</span><span class='line'>          <span class="n">height</span> <span class="o">=</span> <span class="mi">180</span> <span class="o">-</span> <span class="p">(</span><span class="n">j</span> <span class="o">*</span> <span class="mi">15</span><span class="p">)</span>
</span><span class='line'>          <span class="n">width</span> <span class="o">=</span> <span class="n">eachDisk</span><span class="o">.</span><span class="n">width</span> <span class="o">*</span> <span class="mi">10</span>
</span><span class='line'>
</span><span class='line'>          <span class="n">fill</span> <span class="s2">&quot;#A00&quot;</span>
</span><span class='line'>          <span class="n">rect</span><span class="p">(</span><span class="n">poleCenterX</span> <span class="o">-</span> <span class="n">width</span><span class="o">/</span><span class="mi">2</span> <span class="p">,</span> <span class="n">height</span><span class="p">,</span> <span class="n">width</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
</span><span class='line'>          <span class="n">j</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>        <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">#=============================================</span>
</span><span class='line'>
</span><span class='line'>  <span class="vi">@hanoiArea</span> <span class="o">=</span> <span class="n">stack</span> <span class="k">do</span>
</span><span class='line'>    <span class="vi">@answer</span> <span class="o">=</span> <span class="n">para</span> <span class="s2">&quot;Answers appear here&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="vi">@render_area</span> <span class="o">=</span> <span class="n">flow</span> <span class="ss">:width</span> <span class="o">=&gt;</span> <span class="mi">300</span><span class="p">,</span> <span class="ss">:height</span> <span class="o">=&gt;</span> <span class="mi">200</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">background</span> <span class="s2">&quot;#999&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="vi">@log</span> <span class="o">=</span> <span class="n">stack</span>
</span><span class='line'>
</span><span class='line'>  <span class="vi">@towerOfHanoi</span> <span class="o">=</span> <span class="no">AnimatedTowerOfHanoi</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">initApp</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span>
</span><span class='line'>  <span class="no">Thread</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span>
</span><span class='line'>    <span class="vi">@towerOfHanoi</span><span class="o">.</span><span class="n">hanoi</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The Shoes app has the main drawing area at the top and then a logging area beneath it.  The HanoiStacks are cleared and redrawn any time they change.  The original Smalltalk code used deltas (disks were moved individually) but that didn&#8217;t seem critical to match, and partially the code is relying on being on a black-and-white screen.</p>

<h3>Comments</h3>

<p>Not having a standard Graphics capability is not surprising or a problem for a scripting language (limited in context of usage) but is quite a problem for a language that wants to be mainstream.  There is a similar problem on the server-side with a standard (off-screen) image processing.  Shoes and RMagick and the like are trying to fill these holes but Ruby has been around for a long time for these aspects to not be addressed and part of the standard.</p>

<p>In terms of the resulting code with Shoes, the Ruby version is certainly nice and clean.</p>

<h3>Where Next?</h3>

<p>The last code-changing chapter deals with making the Algorithm a little more human-natural.  If people are interested, I may do that change too.  But comparatively it is a pretty minor change and does not bring out any interesting language aspects.</p>

<h3></h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Taste of Ruby (Part 4)]]></title>
    <link href="http://markfussell.emenar.com/blog/2008/08/29/a-taste-of-ruby-part-4/"/>
    <updated>2008-08-29T02:53:00-07:00</updated>
    <id>http://markfussell.emenar.com/blog/2008/08/29/a-taste-of-ruby-part-4</id>
    <content type="html"><![CDATA[<p>This is a multi-part series.  The first in the series is <a href="../../../08/28/a-taste-of-ruby">here</a>.</p>

<h2>Tower of Hanoi — With Model Objects</h2>

<p>The book &#8220;A Taste of Smalltalk&#8221; jumps from showing a single &#8216;TowerOfHanoi&#8217; object to both adding in Disk model objects and putting on a graphical representation of those Disk objects.  Given Ruby has no built-in graphic capability, I want to separate these two changes.  So first we can put in Disk objects and study that change.  This should work for anyone with a Ruby installation and does not require installing Tk or Shoes or anything.  After that, we can go into some GUI toolkit code just to finish up the comparison and have bonus points.</p>

<!-- more -->


<p>To make the adding of Disk objects to our Hanoi code a bit more &#8216;realistic&#8217;, a new bonus requirement (beyond the book) is that we track the number of times a given disk moves.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># A ModeledTowerOfHanoi is the TowerOfHanoi algorithm</span>
</span><span class='line'><span class="c1"># but it keeps track of the state of the Disks</span>
</span><span class='line'><span class="c1"># with actual objects.  This makes it suitable for</span>
</span><span class='line'><span class="c1"># model-based behavior (say tracking moves, animation or</span>
</span><span class='line'><span class="c1"># other event listening) on top of those Disks</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">ModeledTowerOfHanoi</span> <span class="o">&lt;</span> <span class="no">TowerOfHanoi</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">hanoi</span>
</span><span class='line'>    <span class="n">ask_for_height</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">setup_disks</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Start&quot;</span>
</span><span class='line'>    <span class="n">print_stacks</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">puts</span>
</span><span class='line'>    <span class="n">move_tower</span><span class="p">(</span><span class="vi">@height</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">puts</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Result&quot;</span>
</span><span class='line'>    <span class="n">print_stacks</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">print_stacks</span>
</span><span class='line'>    <span class="vi">@stacks</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span> <span class="n">eachStack</span> <span class="o">|</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;  &quot;</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="n">eachStack</span><span class="o">.</span><span class="n">reverse</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;  &quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">ask_for_height</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;How tall a tower?&quot;</span>
</span><span class='line'>    <span class="nb">print</span> <span class="s2">&quot;&gt;&quot;</span>
</span><span class='line'>    <span class="n">height</span> <span class="o">=</span> <span class="mi">5</span> <span class="c1">#gets.to_i</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>    <span class="vi">@height</span> <span class="o">=</span> <span class="n">height</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">setup_disks</span>
</span><span class='line'>    <span class="no">HanoiDisk</span><span class="o">.</span><span class="n">set_towers</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="vi">@stacks</span> <span class="o">=</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span><span class="o">.</span><span class="n">collect</span> <span class="p">{</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">firstStack</span> <span class="o">=</span> <span class="vi">@stacks</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'>    <span class="mi">1</span><span class="o">.</span><span class="n">upto</span><span class="p">(</span><span class="vi">@height</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">size</span><span class="o">|</span>
</span><span class='line'>      <span class="n">disk</span> <span class="o">=</span> <span class="no">HanoiDisk</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">initWidth_pole</span><span class="p">(</span><span class="n">size</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>      <span class="n">firstStack</span><span class="o">.</span><span class="n">unshift</span><span class="p">(</span><span class="n">disk</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="vi">@mockDisks</span> <span class="o">=</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'>    <span class="mi">1</span><span class="o">.</span><span class="n">upto</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'>      <span class="vi">@mockDisks</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="o">]=</span><span class="p">(</span><span class="no">HanoiDisk</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">initWidth_pole</span><span class="p">(</span><span class="mi">1000</span><span class="p">,</span><span class="n">i</span><span class="p">))</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">move_disk</span><span class="p">(</span><span class="n">fromPin</span><span class="p">,</span> <span class="n">toPin</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">supportDisk</span> <span class="o">=</span> <span class="k">if</span> <span class="p">(</span><span class="vi">@stacks</span><span class="o">[</span><span class="n">toPin</span><span class="o">-</span><span class="mi">1</span><span class="o">].</span><span class="n">empty?</span><span class="p">)</span> <span class="k">then</span>
</span><span class='line'>      <span class="vi">@mockDisks</span><span class="o">[</span><span class="n">toPin</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="vi">@stacks</span><span class="o">[</span><span class="n">toPin</span><span class="o">-</span><span class="mi">1</span><span class="o">][</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">disk</span> <span class="o">=</span> <span class="vi">@stacks</span><span class="o">[</span><span class="n">fromPin</span><span class="o">-</span><span class="mi">1</span><span class="o">].</span><span class="n">pop</span>
</span><span class='line'>    <span class="vi">@stacks</span><span class="o">[</span><span class="n">toPin</span><span class="o">-</span><span class="mi">1</span><span class="o">].</span><span class="n">push</span><span class="p">(</span><span class="n">disk</span><span class="p">)</span>
</span><span class='line'>    <span class="n">disk</span><span class="o">.</span><span class="n">move_upon</span><span class="p">(</span><span class="n">supportDisk</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">print</span> <span class="n">disk</span><span class="p">,</span> <span class="s2">&quot; moved &quot;</span><span class="p">,</span> <span class="n">fromPin</span><span class="o">.</span><span class="n">to_s</span><span class="p">,</span> <span class="s2">&quot;-&gt;&quot;</span><span class="p">,</span> <span class="n">toPin</span><span class="o">.</span><span class="n">to_s</span><span class="p">,</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">HanoiDisk</span>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:name</span>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:pole</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">set_towers</span><span class="p">(</span><span class="n">owner</span><span class="p">)</span>
</span><span class='line'>    <span class="vc">@@the_towers</span> <span class="o">=</span> <span class="n">owner</span>
</span><span class='line'>    <span class="vc">@@the_thickness</span> <span class="o">=</span> <span class="mi">14</span>
</span><span class='line'>    <span class="vc">@@the_diskgap</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initWidth_pole</span><span class="p">(</span><span class="n">width</span><span class="p">,</span> <span class="n">pole</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@pole</span> <span class="o">=</span> <span class="n">pole</span>
</span><span class='line'>    <span class="vi">@width</span> <span class="o">=</span> <span class="n">width</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">width</span> <span class="o">&lt;</span> <span class="mi">1000</span><span class="p">)</span> <span class="k">then</span>
</span><span class='line'>      <span class="vi">@name</span><span class="o">=</span><span class="s2">&quot;Disk-</span><span class="si">#{</span><span class="p">(</span><span class="sc">?A</span><span class="o">+</span><span class="n">width</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">chr</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="vi">@name</span><span class="o">=</span><span class="s2">&quot;Base-</span><span class="si">#{</span><span class="n">pole</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="vi">@move_count</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nb">self</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">to_s</span>
</span><span class='line'>    <span class="k">return</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="vi">@name</span><span class="si">}</span><span class="s2">(</span><span class="si">#{</span><span class="vi">@move_count</span><span class="si">}</span><span class="s2">)&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">move_upon</span><span class="p">(</span><span class="n">destination</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@pole</span> <span class="o">=</span> <span class="n">destination</span><span class="o">.</span><span class="n">pole</span>
</span><span class='line'>    <span class="vi">@move_count</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">ModeledTowerOfHanoi</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">hanoi</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now things are somewhat interesting for comparison purposes.  With the new class &#8216;HanoiDisk&#8217;, we have:</p>

<ol>
<li><p>Public Attribute macros</p></li>
<li><p>Explicit return values</p></li>
<li><p>Class Object behavior (&#8216;set_towers&#8217;)</p></li>
</ol>


<h3>Macros</h3>

<p>Of these topics, I think the &#8216;macros&#8217; is the more interesting.  I have another post on &#8216;Being Ephemeral&#8217; which quickly distills the concept, but Ruby (and Lisp before it) gets it right in that program generation (in a controlled fashion) is more powerful than having static programs.  The problem with Smalltalk <em>in its common usage</em> is that people want the image to be mostly static.  But the image is the expansion of all these macros (Smalltalk can have macros as easily as Lisp can) &#8211; and so people are saying that macros must be developer tools (like the Refactoring tools) vs. taking you a level above.  But if you expand the macro and record <em>the results</em> you have lost the value of the macro from that point forward.  If Smalltalk execution environments would accept giving up the image (a snapshot of all previous expansions), it would be more capable than it is.  There is nothing in the language that prevents this, but the execution environments discourage going down this path.</p>

<p>It is purely a &#8216;what is the source&#8217; question.  The Smalltalk equivalent of &#8216;attr_reader&#8217; is simply:</p>

<ul>
<li>HanoiDisk attrReader: #name</li>
</ul>


<p>Seriously&#8230; it would be that short and sweet.  But unless the source of a running application is something other than the image, that line would never be executed.</p>

<p>This is a problem in a totally different-sounding but very similar area: Virtualized Computers (Xen, VMWare).  Snapshotting the &#8216;image&#8217; of a virtualized computer sounds cool &#8211; but it immediately causes you lots of havoc.  What if you need to upgrade just one thing in the Snapshot? &#8230; it could be a real head-ache to uninstall and reinstall a new MySQL and is not as simple as &#8216;yum install&#8217;.  And if you are doing the Kernel itself, you are totally hosed.  The better approach is to treat the virtualized computer as ephemeral, have scripts in a higher-level-language to rebuild it at any time, and then the only use of a snapshot is to make rebuilding it faster.  A snapshould should just be a cache of the built system vs. the system-of-record for what you want to run.</p>

<h3>Explicit return values</h3>

<p>What should a method return if not otherwise stated?  The right answer is &#8216;nil&#8217;.  Why?  Because it is the right answer :-)  Actually, it is because the return value of a method may need to be non-trivially transmitted to the caller message.  Specifically the caller of a remote message.  So you want the return value to be as light-weight as possibly by default.  &#8216;nil&#8217; fits that bill.  Smalltalk gets this wrong but was long-before client-server issues made the problem rear its head, so it gets a pass.</p>

<p>OK&#8230; you don&#8217;t like that answer.  The next &#8216;almost right&#8217; answer is &#8216;self&#8217;. Why?  Well, what else could possibly make sense?  I didn&#8217;t say what to return, so just return me.  And this is almost as lightweight as &#8216;nil&#8217; (but not quite).</p>

<p>Just because something is on the last line of a method, in <em>no way</em> indicates it is meant to be sent back to the caller.  For example, ending with:</p>

<ul>
<li>really_huge_and_private_object.do_some_command_that_happens_to_return_self</li>
</ul>


<p>does not in any way convey I intend to send &#8216;really_huge_and_private_object&#8217; back to the caller.  As far as I stated&#8230; I don&#8217;t want to send anything back to the caller.  I should have to say that I want to do something before the program just &#8216;guesses&#8217; I want to do something I don&#8217;t want to do.  Basically just guesses that whatever happens to be on the stack should be passed back to the caller.  Serious encapsulation breakage.  And I shouldn&#8217;t have to say something like &#8216;return self&#8217; to prevent the program from making that obnoxious guess.</p>

<p>Given the Smalltalk equivalent of a return declaration is a single character (&#8217;<sup>&#8217;)</sup> (not too hard to type), and completely reveals the intent of the coder, the fact that Ruby chose neither of the above two variations of plausibly right answers is just bizarre and a source of errors.</p>

<h3>Class Object behavior</h3>

<p>The concept here is clean enough and the notation for Class Variables is nicely clean (and partially helps separate &#8216;Class Variables&#8217; from &#8216;Class Instance Variables&#8217;).  I think &#8216;def self&#8217; is less readable than &#8216;class.def&#8217; (defining for the HanoiDisk.class vs. HanoiDisk), but that presumes that keywords like &#8216;def&#8217; could be more easily understood as messages to classes (a &#8216;Turtles all the way down&#8217; concept) as I wrote earlier.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Taste of Ruby (Part 3)]]></title>
    <link href="http://markfussell.emenar.com/blog/2008/08/29/a-taste-of-ruby-part-3/"/>
    <updated>2008-08-29T00:27:00-07:00</updated>
    <id>http://markfussell.emenar.com/blog/2008/08/29/a-taste-of-ruby-part-3</id>
    <content type="html"><![CDATA[<p>This is a multi-part series.  The first in the series is <a href="../../../08/28/a-taste-of-ruby">here</a>.</p>

<h2>Tower of Hanoi &#8211; With A Real Object</h2>

<p>The first two examples were not really object-based.  They are purely procedural, the algorithm is expressed completely recursively, and execution state is maintained on the call stack.  This works fine if we are just &#8216;tracing&#8217; the algorithm, but it does not let us show the state of the towers at any given time.  We also don&#8217;t see much in the way of real objects.  By adding the state of the towers in, we now have a reason to have stateful objects and new Classes of objects to maintain that state.  The added code with some explanation is in Chapter 4, Page 45.</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># A Taste of Ruby.  Based on a Taste of Smalltalk (Kaehler and Patterson)</span>
</span><span class='line'><span class="c1"># Tower of Hanoi -- Variation 3</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># TowerOfHanoi</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1"># @stacks is an Array of DiskHolders (pins)</span>
</span><span class='line'><span class="k">class</span> <span class="nc">TowerOfHanoi</span> <span class="o">&lt;</span> <span class="no">Object</span>
</span><span class='line'>  <span class="c1">#Tower of Hanoi program.</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">hanoi</span>
</span><span class='line'>    <span class="c1"># Do the tower</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;How tall a tower?&quot;</span>
</span><span class='line'>    <span class="nb">print</span> <span class="s2">&quot;&gt;&quot;</span>
</span><span class='line'>    <span class="n">height</span> <span class="o">=</span> <span class="nb">gets</span><span class="o">.</span><span class="n">to_i</span>
</span><span class='line'>
</span><span class='line'>    <span class="vi">@stacks</span> <span class="o">=</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span><span class="o">.</span><span class="n">collect</span> <span class="p">{</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">firstStack</span> <span class="o">=</span> <span class="vi">@stacks</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'>    <span class="mi">1</span><span class="o">.</span><span class="n">upto</span><span class="p">(</span><span class="n">height</span><span class="p">)</span> <span class="p">{</span><span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="n">firstStack</span><span class="o">.</span><span class="n">unshift</span><span class="p">(</span><span class="s2">&quot;Disk-</span><span class="si">#{</span><span class="p">(</span><span class="sc">?A</span><span class="o">+</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">chr</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">move_tower</span><span class="p">(</span><span class="n">height</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Recursive procedure to move the disk at a height</span>
</span><span class='line'>  <span class="c1"># from one pin to another pin using a third pin</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">move_tower</span><span class="p">(</span><span class="n">height</span><span class="p">,</span> <span class="n">fromPin</span><span class="p">,</span> <span class="n">toPin</span><span class="p">,</span> <span class="n">usingPin</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">height</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">)</span> <span class="k">then</span>
</span><span class='line'>      <span class="n">move_tower</span><span class="p">(</span><span class="n">height</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">fromPin</span><span class="p">,</span> <span class="n">usingPin</span><span class="p">,</span> <span class="n">toPin</span><span class="p">)</span>
</span><span class='line'>      <span class="n">move_disk</span><span class="p">(</span><span class="n">fromPin</span><span class="p">,</span> <span class="n">toPin</span><span class="p">)</span>
</span><span class='line'>      <span class="n">move_tower</span><span class="p">(</span><span class="n">height</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">usingPin</span><span class="p">,</span> <span class="n">toPin</span><span class="p">,</span> <span class="n">fromPin</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Actually move the disk between the pins</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">move_disk</span><span class="p">(</span><span class="n">fromPin</span><span class="p">,</span><span class="n">toPin</span><span class="p">)</span>
</span><span class='line'>    <span class="n">disk</span> <span class="o">=</span> <span class="p">(</span><span class="vi">@stacks</span><span class="o">[</span><span class="n">fromPin</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">pop</span>
</span><span class='line'>    <span class="vi">@stacks</span><span class="o">[</span><span class="n">toPin</span><span class="o">-</span><span class="mi">1</span><span class="o">].</span><span class="n">push</span><span class="p">(</span><span class="n">disk</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">print</span> <span class="n">disk</span><span class="p">,</span> <span class="s2">&quot; moved &quot;</span><span class="p">,</span> <span class="n">fromPin</span><span class="o">.</span><span class="n">to_s</span><span class="p">,</span> <span class="s2">&quot;-&gt;&quot;</span><span class="p">,</span> <span class="n">toPin</span><span class="o">.</span><span class="n">to_s</span><span class="p">,</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">TowerOfHanoi</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">hanoi</span>
</span></code></pre></td></tr></table></div></figure>


<p>So we moved to adding state to an object by simply referencing an instance variable (notationally via the &#8216;@&#8217;).  Again, I find that unpleasant and would rather the compiler (and human reader) was told a bit more formally what instance variables exist.  In quickly typing the above, I made a typo (&#8220;@stack&#8221;) that caused a runtime error and should have been easily detected at compile time.</p>

<p>Comparing with Smalltalk, the similarities are extremely high again.  Basically the core method calls and flow (e.g. the bytecodes) would look almost identical and it is only syntactic differences (built-in keywords in Ruby, shortening of selectors/method-names, etc.) that make the two read differently.  The idioms can be maintained (1.upto(height)) during translation and both versions are natural for their own language.  There is no paradigm change, impedance mismatch, etc.</p>

<h3>Where Next?</h3>

<p>Next we should go to Chapter 5 (Animating the Program) — Page 64.  This involves some graphic work for the &#8216;model&#8217; aspects to be realistic, so I guess I will go into the Tk toolkit or Shoes as among the easiest Ruby graphic extensions to use as an example.  If anyone has suggestions for other ones (meant to be super simple), please let me know.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Taste of Ruby (Part 2)]]></title>
    <link href="http://markfussell.emenar.com/blog/2008/08/29/a-taste-of-ruby-part-2/"/>
    <updated>2008-08-29T00:08:00-07:00</updated>
    <id>http://markfussell.emenar.com/blog/2008/08/29/a-taste-of-ruby-part-2</id>
    <content type="html"><![CDATA[<p>This is a multi-part series.  The first in the series is <a href="../../../08/28/a-taste-of-ruby">here</a>.</p>

<h2>Tower of Hanoi &#8211; Procedural With Input</h2>

<p>The second example from &#8220;A Taste of Smalltalk&#8221; is in Chapter 3, page 36 and does basic IO.  Except that Smalltalk-80 includes a Windowing graphics system so it can automatically open Dialogs and other things.  Smalltalk (started in 1972) was one of the environments that <em>created</em> personal computers and included abilities in its VM and Libraries that are now submerged into the operating system (some 30 years later).  Now that these abilities are &#8216;intrisically&#8217; present, there are many different ways to access them &#8211; so Ruby does not include graphics itself (in its own terms) but calls extensions that provide those graphics.  Given I don&#8217;t really want to go into Tk or Web programming when discussing a language itself, I will simplify the problem and make it so we only need to get the value somehow&#8230; So &#8216;gets&#8217; is fine.</p>

<!-- more -->


<h3>Tower of Hanoi &#8211; Procedural with Input &#8211; Ruby</h3>

<p>The only thing we need to do is get the height from the user, so we can just ask for it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Do the tower</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;How tall a tower?&quot;</span>
</span><span class='line'><span class="nb">print</span> <span class="s2">&quot;&gt;&quot;</span>
</span><span class='line'><span class="n">height</span> <span class="o">=</span> <span class="nb">gets</span>
</span><span class='line'><span class="n">move_tower</span><span class="p">(</span><span class="n">height</span><span class="o">.</span><span class="n">to_i</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Quite simple and probably the only interesting thing is that &#8216;height&#8217; did not need to be declared at all.  Personally I find this <em>unpleasant</em> and bad for system stability, but I can see the convenience of it.  I would rather Ruby had a way to formally declare local variables, instance variables, etc. and in a &#8216;strict&#8217; mode would give feedback.</p>

<p>Smalltalk does formally declare variables, so it is more compile-time checked than Ruby.  The Smalltalk IDEs also warn about things in a way that usually avoids typos, but that is not part of the language itself.  But I would think the simplicity of the syntax and programming model makes the Smalltalk compiler much easier to write and optimize, but that is just an impression.</p>

<h3>Where Next?</h3>

<p>Next we should go to Chapter 4 — Page 44. The Third Example (with Real Hanoi Classes)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Taste of Ruby]]></title>
    <link href="http://markfussell.emenar.com/blog/2008/08/28/a-taste-of-ruby/"/>
    <updated>2008-08-28T18:00:00-07:00</updated>
    <id>http://markfussell.emenar.com/blog/2008/08/28/a-taste-of-ruby</id>
    <content type="html"><![CDATA[<p>One of my favored books in the 1980s was &#8216;A Taste of Smalltalk&#8217;.  This was a very short book that gave you the flavor of Smalltalk programming (the language and IDE) as compared to Pascal, C, and Lisp.  I believe it is always important to show multiple programming languages for concepts and this book followed that rule.  The goal of this post-series is to take &#8216;A Taste of Smalltalk&#8217; and apply it to Ruby.</p>

<!-- more -->


<p>You can find the original book here:</p>

<ul>
<li><a href="http://www.iam.unibe.ch/~ducasse/FreeBooks/Taste/">A Taste of Smalltalk</a></li>
<li><a href="http://stephane.ducasse.free.fr/FreeBooks.html">Free Smalltalk Books</a></li>
</ul>


<p>Given the original book is available online, I will not repeat it.</p>

<p>You should have a Ruby interpreter, which you can find at <a href="http://www.ruby-lang.org/">http://www.ruby-lang.org/</a> or it may already be on your computer.  The code examples should work pasted directly into &#8216;irb&#8217;.</p>

<p>For playing with Smalltalk, you can pick up Squeak from <a href="http://squeak.org/">http://squeak.org/</a>.  Squeak&#8217;s UI is a bit different from Smalltalk-80 (in the book), but if you go through a quick Squeak tutorial, you should be able to connect the two.</p>

<h2>Tower of Hanoi &#8211; Procedural</h2>

<p>The first example in &#8216;A Taste&#8217; is in multiple languages (Chapter 1).  This is Tower of Hanoi done totally procedurally.  Converting to Ruby is very simple and clean:</p>

<h3>Tower of Hanoi &#8211; Procedural &#8211; Ruby</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># A Taste of Ruby.  Based on a Taste of Smalltalk (Kaehler and Patterson)</span>
</span><span class='line'><span class="c1"># Tower of Hanoi -- Variation 1</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Recursive procedure to move the disk at a height</span>
</span><span class='line'><span class="c1"># from one pin to another pin using a third pin</span>
</span><span class='line'><span class="k">def</span> <span class="nf">move_tower</span><span class="p">(</span><span class="n">height</span><span class="p">,</span> <span class="n">fromPin</span><span class="p">,</span> <span class="n">toPin</span><span class="p">,</span> <span class="n">usingPin</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">height</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">)</span> <span class="k">then</span>
</span><span class='line'>    <span class="n">move_tower</span><span class="p">(</span><span class="n">height</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">fromPin</span><span class="p">,</span> <span class="n">usingPin</span><span class="p">,</span> <span class="n">toPin</span><span class="p">)</span>
</span><span class='line'>    <span class="n">move_disk</span><span class="p">(</span><span class="n">fromPin</span><span class="p">,</span> <span class="n">toPin</span><span class="p">)</span>
</span><span class='line'>    <span class="n">move_tower</span><span class="p">(</span><span class="n">height</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">usingPin</span><span class="p">,</span> <span class="n">toPin</span><span class="p">,</span> <span class="n">fromPin</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Actually move the disk between the pins</span>
</span><span class='line'><span class="k">def</span> <span class="nf">move_disk</span><span class="p">(</span><span class="n">fromPin</span><span class="p">,</span><span class="n">toPin</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">print</span> <span class="n">fromPin</span><span class="o">.</span><span class="n">to_s</span><span class="p">,</span> <span class="s2">&quot;-&gt;&quot;</span><span class="p">,</span> <span class="n">toPin</span><span class="o">.</span><span class="n">to_s</span><span class="p">,</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Do the tower</span>
</span><span class='line'><span class="n">move_tower</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>You could simply paste this into irb to see it run.</p>

<h3>Smalltalk without the IDE</h3>

<p>Some people (many people) consider Smalltalk to mandatorily include an IDE and that you _must _ use an IDE to create Smalltalk code and to run a Smalltalk application.  This is clearly not true and there are many examples of Smalltalk running without any IDE at all.  For example, GNU Smalltalk, Little Smalltalk, GemStone, and &#8216;Headless Smalltalk&#8217; (when you deploy VisualWorks you frequently strip the IDE code out) are all valid Smalltalks that do not have an IDE in themselves and if you wanted them to run a program, you would just &#8216;File it in&#8217; from a file.  I mention this because the next chapter of &#8220;A Taste of Smalltalk&#8221; shows the Smalltalk-80 IDE as the way to create the Smalltalk code.  If you download <a href="squeak.org">Squeak</a> you can follow fairly similar  steps to the one in the book.</p>

<p>To make inter-language comparisons easier, I will instead use the &#8216;File In&#8217; format when talking about Smalltalk programs.  Since that is missing from the book, here it is.  Note that the lines starting with &#8216;!&#8217; are not Smalltalk language syntax but are part of the standard library for being able to &#8216;file in&#8217; changes.  For most programming languages the two would be equivalent, but Smalltalk allows multiple ways of creating a program so the coupling is softer.</p>

<h3>Tower of Hanoi &#8211; Procedural &#8211; Smalltalk</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='smalltalk'><span class='line'>    !<span class="nc">Object</span> <span class="nf">methodsFor:</span> <span class="s">&#39;hanoi&#39;</span> <span class="nf">stamp:</span> <span class="s">&#39;MLF 8/28/2008 10:31&#39;</span><span class="nf">!</span>
</span><span class='line'>    <span class="nf">moveTower:</span> <span class="nv">height</span> <span class="nf">from:</span> <span class="nv">fromPin</span> <span class="nf">to:</span> <span class="nv">toPin</span> <span class="nf">using:</span> <span class="nv">usingPin</span>
</span><span class='line'>        (<span class="nv">height</span> <span class="nf">&gt;</span> <span class="m">0</span>) <span class="nb">ifTrue:</span> [
</span><span class='line'>          <span class="bp">self</span> <span class="nf">moveTower:</span> (<span class="nv">height</span><span class="nf">-</span><span class="m">1</span>) <span class="nf">from:</span> <span class="nv">fromPin</span> <span class="nf">to:</span> <span class="nv">usingPin</span> <span class="nf">using:</span> <span class="nv">toPin</span><span class="p">.</span>
</span><span class='line'>          <span class="bp">self</span> <span class="nf">moveDisk:</span> <span class="nv">fromPin</span> <span class="nf">to:</span> <span class="nv">toPin</span><span class="p">.</span>
</span><span class='line'>          <span class="bp">self</span> <span class="nf">moveTower:</span> (<span class="nv">height</span><span class="nf">-</span><span class="m">1</span>) <span class="nf">from:</span> <span class="nv">usingPin</span> <span class="nf">to:</span> <span class="nv">toPin</span> <span class="nf">using:</span> <span class="nv">fromPin</span>
</span><span class='line'>      ]
</span><span class='line'>    <span class="nf">!</span>
</span><span class='line'>
</span><span class='line'>    <span class="nf">moveDisk:</span> <span class="nv">fromPin</span> <span class="nf">to:</span> <span class="nv">toPin</span>
</span><span class='line'>      <span class="nc">Transcript</span> <span class="nf">show:</span> (<span class="nv">fromPin</span> <span class="nf">printString,</span> <span class="s">&#39; -&gt; &#39;</span><span class="nf">,</span> <span class="nv">toPin</span> <span class="nf">printString</span>)<span class="p">;</span> <span class="nf">cr</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">! !</span>
</span><span class='line'>
</span><span class='line'>    <span class="err">&quot;</span><span class="nc">Do</span> <span class="nf">the</span> <span class="nf">tower</span>
</span><span class='line'>    (<span class="nc">Object</span> <span class="nb">new</span>) <span class="nf">moveTower:</span> <span class="m">3</span> <span class="nf">from:</span> <span class="m">1</span> <span class="nf">to:</span> <span class="m">3</span> <span class="nf">using:</span> <span class="m">2</span>
</span><span class='line'>    <span class="nf">!</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>Now an interesting thing about the Smalltalk version is that we had to create an object to execute our code.  Smalltalk does not have functions or procedures: it only has objects and messages that get sent to objects.  So we need some object to respond to the message.  There could be an implicit object associated with the &#8216;File In&#8217; format &#8211; but there isn&#8217;t.  A second interesting thing about the Smalltalk version is that we modified Object itself.  So any of:</p>

<ul>
<li><p>&#8216;Foo&#8217; moveTower: 3 from: 1 to: 3 using: 2</p></li>
<li><p>3 moveTower: 3 from: 1 to: 3 using: 2</p></li>
<li><p>false moveTower: 3 from: 1 to: 3 using: 2</p></li>
<li><p>nil moveTower: 3 from: 1 to: 3 using: 2</p></li>
</ul>


<p>would work.  So because we modified Object and there are well known objects of type Object (and descendants) in the system, we didn&#8217;t have to actually create an Object at all.</p>

<h3>Ruby is cleaner</h3>

<p>In this particular case, Ruby is:</p>

<ul>
<li>Doing a much cleaner thing by default (for this file-in approach)</li>
<li>But can do exactly the same thing if told to</li>
</ul>


<p>The &#8220;cleaner thing by default&#8221; is that Ruby statements (commands) when being executed are always talking to some object, and the default object is an object called &#8216;main&#8217;.  So statements without an explicit object <em>receiving</em> the message send those messages to &#8216;main&#8217; &#8211; and the message &#8220;move_tower&#8221; is sent to main.  And although Ruby doesn&#8217;t describe itself quite like this, effectively &#8216;def&#8217; could be viewed as a message and it is also sent to &#8216;main&#8217;.  &#8216;def&#8217; creates a method on a Class &#8211; either the eigen-class of the receiving object or on a Class object.  So Ruby behaves almost identically to Smalltalk except it:</p>

<ul>
<li>Has a default object for &#8216;File In&#8217; format</li>
<li>Creates methods on the eigen-class if a non-class is the target of the def &#8216;message&#8217;</li>
</ul>


<p>Probably the simplest way for Smalltalk to match this cleaner scripting approach is for a Smalltalk &#8216;terminal&#8217; (called IRS :-) to define &#8216;self&#8217; as being itself and then the method definitions would automatically happen on itself.  So you would have lines like:</p>

<ul>
<li>&#8216;!self methodsFor: &#8216;hanoi&#8217; &#8230;</li>
<li>self moveTower: 3 from: 1 &#8230;</li>
</ul>


<p>and applying to Object would no longer be necessary.  This &#8216;scripting&#8217; need has not been important to the Smalltalk community in general although someone may have something very like this.</p>

<h3>Ruby being a bit more Smalltalkish</h3>

<p>The second point above was that Ruby can do exactly what the Smalltalk code does.  This isn&#8217;t to show that this is a better approach (in this case it is not), but to show the incredible similarity between the two languages.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># A Taste of Ruby.  Based on a Taste of Smalltalk (Kaehler and Patterson)</span>
</span><span class='line'><span class="c1"># Tower of Hanoi -- Variation 1b</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Object</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Recursive procedure to move the disk at a height</span>
</span><span class='line'><span class="c1"># from one pin to another pin using a third pin</span>
</span><span class='line'><span class="k">def</span> <span class="nf">move_tower</span><span class="p">(</span><span class="n">height</span><span class="p">,</span> <span class="n">fromPin</span><span class="p">,</span> <span class="n">toPin</span><span class="p">,</span> <span class="n">usingPin</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">height</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">)</span> <span class="k">then</span>
</span><span class='line'>    <span class="n">move_tower</span><span class="p">(</span><span class="n">height</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">fromPin</span><span class="p">,</span> <span class="n">usingPin</span><span class="p">,</span> <span class="n">toPin</span><span class="p">)</span>
</span><span class='line'>    <span class="n">move_disk</span><span class="p">(</span><span class="n">fromPin</span><span class="p">,</span> <span class="n">toPin</span><span class="p">)</span>
</span><span class='line'>    <span class="n">move_tower</span><span class="p">(</span><span class="n">height</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">usingPin</span><span class="p">,</span> <span class="n">toPin</span><span class="p">,</span> <span class="n">fromPin</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Actually move the disk between the pins</span>
</span><span class='line'><span class="k">def</span> <span class="nf">move_disk</span><span class="p">(</span><span class="n">fromPin</span><span class="p">,</span><span class="n">toPin</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">print</span> <span class="n">fromPin</span><span class="o">.</span><span class="n">to_s</span><span class="p">,</span> <span class="s2">&quot;-&gt;&quot;</span><span class="p">,</span> <span class="n">toPin</span><span class="o">.</span><span class="n">to_s</span><span class="p">,</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Do the tower</span>
</span><span class='line'><span class="p">(</span><span class="no">Object</span><span class="o">.</span><span class="n">new</span><span class="p">)</span><span class="o">.</span><span class="n">move_tower</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;---&quot;</span>
</span><span class='line'><span class="s2">&quot;HiThere&quot;</span><span class="o">.</span><span class="n">move_tower</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;---&quot;</span>
</span><span class='line'><span class="kp">nil</span><span class="o">.</span><span class="n">move_tower</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This similarity is way beyond casual similarity &#8211; enabling &#8216;nil&#8217; to have a method by augmenting Object with almost exactly the same incantation makes for a very similar DNA.  Basically it seems like the Ruby language is a pure syntactic mutation on Smalltalk.</p>

<h3>Fun with Ducks</h3>

<p>The term &#8220;Duck Typing&#8221; was not around in the 80s (AFAIK), but instead people talked about &#8216;Dynamic Typing&#8217; where the Duckness was hidden under that Dynamic-ness.  There are certainly other terms too (I used the term &#8216;protocol&#8217; where protocol was just obeying the required messages and semantics properly &#8211; i.e. acting like a Duck).  This Hanoi example has a nice Duck property &#8211; We don&#8217;t care what the stacks are as long as they can be converted to Strings:</p>

<pre><code>#Bizarre Hanoi Showing Duck Typing
move_tower(3,"Tower-1", nil, Proc.new {|| "Tower" })
</code></pre>

<h3>Tower of Hanoi &#8211; Procedural &#8211; Java</h3>

<p>For completeness, we should do the example in Java as well.  Given Java execution starts at some static &#8216;main&#8217; method/procedure, it seems like the most natural version of this Procedural code is to stay on that static side.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">Hanoi</span> <span class="o">{</span>
</span><span class='line'>   <span class="kd">static</span> <span class="kd">public</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">moveTower</span><span class="o">(</span><span class="mi">3</span><span class="o">,</span><span class="mi">1</span><span class="o">,</span><span class="mi">3</span><span class="o">,</span><span class="mi">2</span><span class="o">);</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="kd">static</span> <span class="kd">public</span> <span class="kt">void</span> <span class="nf">moveTower</span><span class="o">(</span><span class="kt">int</span> <span class="n">height</span><span class="o">,</span> <span class="n">Object</span> <span class="n">fromPin</span><span class="o">,</span> <span class="n">Object</span> <span class="n">toPin</span><span class="o">,</span> <span class="n">Object</span> <span class="n">usingPin</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">height</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>         <span class="n">moveTower</span><span class="o">(</span><span class="n">height</span><span class="o">-</span><span class="mi">1</span><span class="o">,</span> <span class="n">fromPin</span><span class="o">,</span> <span class="n">usingPin</span><span class="o">,</span> <span class="n">toPin</span><span class="o">);</span>
</span><span class='line'>         <span class="n">moveDisk</span><span class="o">(</span><span class="n">fromPin</span><span class="o">,</span> <span class="n">toPin</span><span class="o">);</span>
</span><span class='line'>         <span class="n">moveTower</span><span class="o">(</span><span class="n">height</span><span class="o">-</span><span class="mi">1</span><span class="o">,</span> <span class="n">usingPin</span><span class="o">,</span> <span class="n">toPin</span><span class="o">,</span> <span class="n">fromPin</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="kd">static</span> <span class="kd">public</span> <span class="kt">void</span> <span class="nf">moveDisk</span><span class="o">(</span><span class="n">Object</span> <span class="n">fromPin</span><span class="o">,</span> <span class="n">Object</span> <span class="n">toPin</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;&quot;</span><span class="o">+</span><span class="n">fromPin</span><span class="o">+</span><span class="s">&quot;-&gt;&quot;</span><span class="o">+</span><span class="n">toPin</span><span class="o">);</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Comments</h2>

<p>This example from &#8220;A Taste of Smalltalk&#8221; is the highly procedural version.  It is not meant to be a particularly good program, but it is a simple and good introductory example.  Because Ruby is an interpreter-oriented (scripting-oriented) language, it does quite well in making the example look simple and clean.  But even better (IMO) is that the developer has unknowingly shifted into a much more powerful programming model without any pain-of-entry.  I have never found Smalltalk to be hard but many people do and any barrier that prevents people from entering a community can harm both sides.</p>

<p>I believe the syntactic mutation in Ruby that hides an implicit object (&#8216;main&#8217;) actually helps tremendously with accessibility of the language.  It would only be a problem if the syntactic mutation later penalized the experienced developer.</p>

<h3>Logo, Turtles, and &#8216;main&#8217;</h3>

<p>I recently decided my daughters (4 and 7) might as well learn how to program, so I fired up a version of <a href="http://en.wikipedia.org/wiki/Logo_(programming_language">Logo</a>) for them to play with.  Logo has a pleasing characteristic where you are talking to a graphical Turtle by default &#8211; you can program the turtle by telling it what to do directly and can then start working your way up in programming sophistication.  The Ruby &#8216;main&#8217; seems to lend itself to the same thing.  You are by default talking to a (more boring :-) ) turtle, which makes the first level of accessibility easier.</p>

<p>At one point I wanted to test something quickly in Smalltalk and actually forgot what object I had to talk to to do a simple &#8216;print&#8217;.  Likewise with Java, &#8216;System.out&#8217; is extremely obscure.  The &#8216;Turtle&#8217; approach seems to help alleviate these kinds of issues a bit.</p>

<h3>Where Next?</h3>

<p>Next we should go to Chapter 3 &#8211; Page 36.  The Second Example.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Being Ephemeral]]></title>
    <link href="http://markfussell.emenar.com/blog/2008/08/28/being-ephemeral/"/>
    <updated>2008-08-28T04:34:00-07:00</updated>
    <id>http://markfussell.emenar.com/blog/2008/08/28/being-ephemeral</id>
    <content type="html"><![CDATA[<p>There are lots of topics in programming languages, IT infrastructure, and system design that turn out to be all about persistence vs. being ephemeral.  I don&#8217;t believe people realize it, but &#8220;being ephemeral&#8221; is the core question and the standard answer should be?  42.  Which given it is >0 is &#8216;Yes&#8217;.  So &#8220;Be Ephemeral&#8221; unless you can&#8217;t possibly be ephemeral.</p>

<!-- more -->


<p>When can&#8217;t you be ephemeral?&#8230; turns out it is in a very small number of cases.  Ruby is more ephemeral than the standard Smalltalk &#8216;image&#8217; approach, so it wins.  Xen/VMWare is more ephemeral than a physical machine, so it wins.  <em>Scripted</em> vm image building is more ephemeral than image snapshots, so its win.  Credit-card receipts in a retail store&#8230; well those have to be remembered (persistent) or you could lose money or customers or both.   So make that persistent :-)</p>

<p>Performance is always a consideration: &#8216;rebuilding&#8217; an image could be time-expensive, but the old adage [annotated] of:
   * Make it work (ephemerally if possible)
   * Make it right
   * Make it fast (pull the ephemerally <em>iff necessary</em>)
is the right approach.   You may be amazed at how ephemeral things can be.  NowUR built virtual desktop in less than 30 seconds &#8211; by being ephemeral.  An with Amazon EC2, for many things I can just plug in a script and have lots of &#8216;yummy&#8217; things happen in the same amount of time.</p>

<p>Why is &#8220;Being Ephemeral&#8221; right?  Well, there is one simple reason:
   * Inventory of outdated parts is very expensive (Theory Of Constraints, Lean Methods, etc.)</p>

<p>And if you can make it through the old adage without needing any Inventory, you have a better (less expensive, more agile, higher velocity) solution than someone that cheats by using Inventory.</p>
]]></content>
  </entry>
  
</feed>
