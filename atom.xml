<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Polyglot]]></title>
  <link href="http://markfussell.emenar.com/atom.xml" rel="self"/>
  <link href="http://markfussell.emenar.com/"/>
  <updated>2015-12-16T09:27:06-08:00</updated>
  <id>http://markfussell.emenar.com/</id>
  <author>
    <name><![CDATA[Mark Fussell]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Winster: Two Decades of Systems and Architectures]]></title>
    <link href="http://markfussell.emenar.com/blog/arch-4/"/>
    <updated>2015-12-04T01:00:00-08:00</updated>
    <id>http://markfussell.emenar.com/blog/arch-4</id>
    <content type="html"><![CDATA[<p>This is a series describing various architectures I have worked with in the last two decades and some of their
benefits and issues.  The table of contents of the series is <a href="http://markfussell.emenar.com/blog/arch-1">here</a>.</p>

<p>Winster was a cooperative social gaming web site that enabled players to win real-world prizes.  It predated
Zynga and Facebook, but both of those companies &#8216;rose&#8217; during the time I worked for Winster.</p>

<h2>Major System Aspects</h2>

<p>Winster had a fairly standard Java backend that dealt with managing player information, talking with PayPal,
and keeping track of prizes, advertisements, and promotions.  This is pretty independent of what Winster was:
almost any commercial consumer site might have these capabilities.</p>

<p>What made Winster interesting is that the client was in Adobe Flash/Flex, it was realtime multi-player, and
the rules of the games were all stored on the server.  This created a pretty compelling environment for
players to interact: players could swap pieces and both be in better shape vs. &#8220;the house&#8221;.  And this interaction
supported a real-time chat system.  So very much like a card-game table without any competitiveness between players.</p>

<p>The client-server interaction was a combination of HTTP calls and socket-based bidirectional updates.</p>

<h2>AA-1 : No important logic on the client</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Velidom: Two Decades of Systems and Architectures]]></title>
    <link href="http://markfussell.emenar.com/blog/arch-3/"/>
    <updated>2015-12-03T01:00:00-08:00</updated>
    <id>http://markfussell.emenar.com/blog/arch-3</id>
    <content type="html"><![CDATA[<p>This is a series describing various architectures I have worked with in the last two decades and some of their
benefits and issues.  The table of contents of the series is <a href="http://markfussell.emenar.com/blog/arch-1">here</a>.</p>

<p>Velidom came out of the technologies that helped increase velocity, agility, and scale of the Evant
development team.  This was in the mid 2000 time-frame and Evant had created technology which did
mass regression testing on every checkin, enabled continuous inter-team communication (including to India),
and various other major features.  Velidom was an attempt to productize this whole concept: The Velocity
to Dominate with an Advanced Software Development Factory.</p>

<h2>Major System Aspects</h2>

<p>The Velidom Factory was built primarily out of Java-based technologies and VMWare ESX capabilities.  The goal was
to integrate into common tools at the time (Eclipse / Subversion / etc.), automatically launch testing
and deployment servers on any given checkin, verify whether a commit was clean, and either push it through
to the main development line or roll it out based on that verification.</p>

<p>Another side of the factory was an agile development tool that tracked features, their values, the tasks
needed to complete them, and the status of everything.  This was for planning, agility, and measuring.  The
automation was to increase velocity and &#8216;reality&#8217; (if it didn&#8217;t successfully go in, it wasn&#8217;t in).</p>

<p>A final side of the factory was a set of communication tools for both real-time and knowledge accumulation,
where both of these were hooked into the other sides of the factory so what everything was visible and memorable.</p>

<p>If you look at the <a href="http://markfussell.emenar.com/blog/add-1">Advanced Development and Delivery Environment</a> you will see pretty much all of this
vision manifested through other companies&#8217; solutions.  Ultimately Velidom&#8217;s vision was too big to succeed with the
runway the startup had and the events that occurred during its&#8217; lifetime.</p>

<h2>AA-1 : Virtualization and Virtualized Desktops</h2>

<p>Of all the architectural aspects that Velidom got right, virtualizing the infrastructure was almost certainly
the biggest &#8216;Yes!&#8217;.  VMWare ESX was expensive, but having that infrastructure in place made it possible to
think about computation in a way very different from the raw hardware.  Ultimately from Amazon EC2 through to
Vagrant, this separation has come to pass as a higher-level-language of computational hardware.  Virtualized
computers can be built in minutes and discarded after being used.</p>

<p>Velidom provided virtualized desktops and servers as a service, and we spent the money and time
building out the hardware, the virtualized server side, and creating a custom desktop client.  The results were impressive,
leading edge, unreliable, and expensive.  Things were unreliable due to the client-server desktop communication
paradigm.  This needed good networks and a good protocol for the remote desktop.  And given these were development machines, they needed
to be secure, so each had its own private network.  Again, this was too big a vision to succeed at that time.  Focusing
on just servers may have been viable, but it wasn&#8217;t clear what the value was without a large base of customers committed
to good automated test suites (which is certainly plausible).</p>

<p>Expensive is relative, and the virtualization Velidom provided may have been viable except for an event that occurred
in 2006.  Amazon announced EC2, and suddenly the price point of virtualized computers dove to a number no one else
could compete with.  Even 10 years later, there are very few viable cloud providers, and no small ones.</p>

<h2>AA-2 : Tool Integration and Improvement</h2>

<p>One of the core Velidom concepts was the integration between tools (e.g. Eclipse) and the functionality we provided.
We had Eclipse plugins to do things within the factory, including chat, logging, automation, and other activities.
Integrating directly with a tool is nice, but definitely development expensive.  And the tools you are connecting with
(Eclipse and Subversion) may &#8216;go away&#8217;.  In 2005, Eclipse was a good choice, but if we had customers on a Microsoft
development stack, they might have been unsatisfiable.</p>

<p>The core problem wasn&#8217;t picking the right tool, it was picking any tool before having a Minimal Viable Product.  Tool
integration is not part of Minimal Viable: if your product is good at group chat, people will start using it.  A full
suite of products (the Factory) is also not part of Minimal Viable: whether chat or automated regression testing,
just get a product done and in the hands of customers to get feedback.  If they like your product, they will drive
integration with their favorite tools or your other products as an important improvement.</p>

<h2>AA-3 : Reactor</h2>

<p>The last architecture from Velidom that I am going to mention is the &#8216;reactor&#8217; or &#8216;queue&#8217; pattern.  Doing
a mass regression test with servers being created on the fly takes time.  Separating the &#8216;request&#8217; from the &#8216;task&#8217;
to complete the request is very effective for both scaling and also avoiding needless scaling.  If the automation
is fast enough, you don&#8217;t need to scale.  If you don&#8217;t have the extra money to buy the bonus performance,
you also don&#8217;t need to scale.  You can choose whether to pay for time or not.</p>

<p>The one aspect that for a codebase or similar &#8216;team progessive&#8217; activity is whether people wait for things to finish.
Ideally, you are &#8216;unblocked&#8217; while you wait: you can go on to something else.  But in a team environment, many people
are trying to get there work in the main codebase of work.  With Subversion, we had to do some annoyingly fancy tricks
to extract a bad build.  With Git and faster testing tools (in memory databases, better functional test declaration
languages), this is far less of a problem.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Evant: Two Decades of Systems and Architectures]]></title>
    <link href="http://markfussell.emenar.com/blog/arch-2/"/>
    <updated>2015-12-02T01:00:00-08:00</updated>
    <id>http://markfussell.emenar.com/blog/arch-2</id>
    <content type="html"><![CDATA[<p>This is a series describing various architectures I have worked with in the last two decades and some of their
benefits and issues.  The table of contents of the series is <a href="http://markfussell.emenar.com/blog/arch-1">here</a>.</p>

<p>Evant was originally named Retail Aspect and provided a Retail-as-a-service suite to companies that were
joining the Web retail boom (e.g. Disney Online).</p>

<h2>Major System Aspects</h2>

<p>The technical foundations of the company were from a
Java / Smalltalk background, so the server technologies were pretty mainstream Java enterprise technologies.
The client was the &#8216;leading edge&#8217; piece in the implementation technology, using a lot of JavaScript back in a very early time
for the language (early 2000s).  The whole system was notable in the number of automated regression tests
it contained (see below).  The database was initially Oracle but later moved to DB2.</p>

<p>Evant had a suite of products that did not succeed as a suite, potentially due to 9-11 causing a shutdown of online
retail activity.</p>

<h2>AA-1 (Architectural Aspect): Strong Client, Server-UI, and Server-Domain separation</h2>

<p>In terms of making the Evant Advanced Planning product capable, performant, and testable, there was a very strong
separation between &#8220;Interface&#8221; (UI or Test) and &#8220;Domain&#8221;.  The Domain includes all the business functionality within the planning
engine, exposed by a Java-based API.  It could be driven by either tests or the User Interface.  The API was identical,
so if the tests were successful, the engine was doing the &#8216;right thing&#8217;.  And the UI just needed to:</p>

<ul>
<li>Interact with the interface similarly to the tests

<ul>
<li>Or expand interface and tests for new needs</li>
</ul>
</li>
<li>Present the information pleasantly and effectively</li>
</ul>


<p>The UI could do all kinds of amazing things to transform the results or make actions easier for a user.  Since this was
a JavaScript application, lots of things could happen on the client without server interaction or asynchronously with
the server.  The important part was having a single contract that the two clients (one verifying, one using) could
run against.</p>

<h2>AA-2 : Mass Automated Testing</h2>

<p>The original Evant team was very committed to a full XP (Extreme Programming) approach and used TDD, Paired Programming,
and other aspects of XP as part of their development process.  I arrived after this development period, but there
were a fairly extensive collection of automated tests as part of the development artifacts.  However they were
created, they were incredibly useful for regression testing as we transformed the Domain to be far faster,
more scalable, and flexible.</p>

<p>Initially the tests were in XML to allow a very flexible system of automated testing that (in theory) could have tests
written by subject matter experts or general end users.  This flexibility made it a poor Domain-Specific-Language and
users could not write tests themselves.  The tests were also very repetitive (wet) given they had to describe
many states, inputs, and outputs within a matrix-like space.  Ultimately the solution was to move to a matrix-oriented
tool: a Spreadsheet.  And simply organize states, inputs, and outputs within that spreadsheet.  Automation turned
the spreadsheets into automated test specifications.  And the integration server ran this vast collection of tests
pretty much <em>all the time</em> to make sure nothing regressed (or at least it was identified if it did).</p>

<p>The automated testing was a continuous benefit as long as we could keep performance of the testing servers equal to
developer demands.</p>

<h2>AA-3 : Hidden Storage Model</h2>

<p>An important part of the Domain&#8217;s API was its&#8217; separation of &#8216;transactions&#8217; from its &#8216;storage&#8217;.  The system had
transactional statements (&#8216;update&#8217; and &#8216;save&#8217;) but how those things were accomplished was not visible at the
interface.  This separation prevented callers from caring and fiddling with how things were communicated to the
persistent storage.</p>

<p>Not all systems need this kind of separation: What is the chance you will swap out your database?  With a very different
database?  But the Evant storage model was a Hybrid-relational system with the bulk of the data stored in semi-opaque
compressed format.  So the domain acted transactionally, but under the covers it did a lot of data transformations to
organize and compress facts.  Transformations that evolved in time (different versions had better formats) and evolved
based on the size of the data space and performance tuning around it.</p>

<h2>AA-4 : Canned to Generic</h2>

<p>Another common and useful architectural progression is going from &#8216;canned&#8217; (fully specified) to &#8216;generic&#8217; (very flexible)
capabilities.  You should generally start at &#8216;canned&#8217; so you have super-control over what you are doing and what you
expect its results to be.  This is great for both modeling and testing the system.  As the canned capabilities grow,
they can become unwieldy and need to be more parameterized or even genericized (e.g. an Excel formula built out of
operations).</p>

<p>As you go from canned to generic, you will likely encounter both behavioral anomalies and performance anomalies.  But
if you start with generics that do the same as canned, you can focus on performance.  And then switch to generics that
are more broadly capable and focus on whether they behave correctly.  And then return to performance of these more
broadly capable generics.</p>

<h2>Next</h2>

<p><a href="http://markfussell.emenar.com/blog/arch-3">Velidom Factory</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Two Decades of Systems and Architectures]]></title>
    <link href="http://markfussell.emenar.com/blog/arch-1/"/>
    <updated>2015-12-01T01:00:00-08:00</updated>
    <id>http://markfussell.emenar.com/blog/arch-1</id>
    <content type="html"><![CDATA[<p>It is now the end of 2015 and for decades I have been reading and writing software in both small and large companies, in startups and established enterprises, and in multiple industries.  My background includes several early languages (C, Basic, Pascal, Fortran, and specialty database systems), but I truly became a serious engineer in Smalltalk.  After doing several systems including IRIS-2 / <a href="http://cargosmart.com/">CargoSmart</a>, <a href="http://www.thefreelibrary.com/McKesson+and+SunScript+Sign+$500-Million+Pharmaceutical+Supply...-a020515184">BidLink</a>, and others, I switched to Java as my primary language.  Since then, I have also worked in Objective-C, Ruby/Rails, JavaScript (client and server), Python, and various other languages.</p>

<p>By building so many systems over the years, I have seen many choices and their impacts.  Sometimes the choice was before me, commonly it was mine and my team,  and sometimes people made choices after I &#8216;passed the system on&#8217;.  This series is meant to document as many of these systems as possible.  Previously I spoke at conferences and disseminated some of our insights.  I may return to that venue, but wanted to get more than a decade of work visible.</p>

<p>The systems, applications, and architectures documented here will eventually include:</p>

<ul>
<li><a href="http://markfussell.emenar.com/blog/arch-2">Evant Advanced Planning</a>: A multidimensional planning system

<ul>
<li>Java, JavaScript</li>
</ul>
</li>
<li><a href="http://markfussell.emenar.com/blog/arch-3">Velidom Factory</a>: A highly virtualized and automated software development environment / factory

<ul>
<li>Java, VmWare ESX, Subversion (as part of the infrastructure), Flash/Flex, and Eclipse plugins</li>
</ul>
</li>
<li><a href="http://markfussell.emenar.com/blog/arch-4">Winster</a>: A cooperative online gaming and social site

<ul>
<li>Java, Flash/Flex, MySQL</li>
</ul>
</li>
<li>FooPets: A virtual pet entertainment site

<ul>
<li>Ruby, Rails, Maya, iOS, etc.</li>
</ul>
</li>
<li>HeartPark: A 3-D world / game

<ul>
<li>Unity, Ruby, Rails</li>
</ul>
</li>
<li>Vive: A mobile health and wellness application

<ul>
<li>Grails, Java, YUI</li>
</ul>
</li>
<li>Epocrates EMR: An electronic medical records application

<ul>
<li>Ruby, Rails, iOS</li>
</ul>
</li>
<li>PeerCase: A mobile-first medical communication application

<ul>
<li>Grails, Sencha</li>
</ul>
</li>
<li>Rumble: A platform to support free-to-play and hiqh-quality games

<ul>
<li>Grails, Kafka, Redis, eJabberd, and a host of other technologies</li>
</ul>
</li>
<li>SnapArch: An architecture to build out a collection of services and applications on top of them

<ul>
<li>Spring, Angular, etc.</li>
</ul>
</li>
<li>ABC: An analytics platform for massive scale machine learning

<ul>
<li>Weka, Python, Grails, Amazon AWS services</li>
</ul>
</li>
<li>ADD: A recommended development &amp; delivery environment and platform for The Gap, Shaklee, and others</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[READ: Scaled Agile]]></title>
    <link href="http://markfussell.emenar.com/blog/read-2/"/>
    <updated>2015-11-20T01:00:00-08:00</updated>
    <id>http://markfussell.emenar.com/blog/read-2</id>
    <content type="html"><![CDATA[<p>This is the fourth series describing the ADD: a radically more productive software development and delivery
environment.  This series is on estimation, and the first part is here: <a href="http://markfussell.emenar.com/blog/read-1">ADD: Estimation</a>.</p>

<h2>Scaled Agile</h2>

<p>As mentioned at the end of the first part, the extreme reaction to waterfall was to toss Analysis and Design
away, and go from very-loose requirements into actual implementation.  I believe this was a complete mistake
and has caused these &#8220;extreme&#8221; agile projects to be much <em>slower</em> and <em>unstable</em> compared to another approach.</p>

<p>The alternative is &#8220;Scaled Agile&#8221;, and by this I mean both:</p>

<ul>
<li>It is better designed for larger projects</li>
<li>It is achieved by scaling the activities of software development projects to be appropriate for the scale and needs of the project

<ul>
<li>Analysis &amp; Design efforts, deliverables, and precision can be smaller or larger</li>
<li>Increments of delivery can be smaller or larger</li>
<li>Allowance for iteration (repeating something to refine it) can be smaller or larger</li>
<li>Overlap of activities can be smaller or larger</li>
</ul>
</li>
</ul>


<p>The second item was tossed out with the &#8220;Waterfall&#8221;, at least by many in the industry.  A Waterfall is an extreme version of Agile (basically
no during-build agility), but going directly from verbal or spread-sheet based requirements is a similarly extreme version of Agile
and is unlikely to be as effective as properly-scaled versions of Agile.</p>

<h3>Retail Aspect / Evant / XP / Scaled Agile</h3>

<p>In 2003, while at Evant, we took an XP-based product (an advanced retail planning system) and worked on scaling the velocity and
agility of that project:</p>

<ul>
<li>To a bigger and non-XP team</li>
<li>Through multiple time-zones, including to India</li>
<li>Outside the development team into Product Management, Technical Sales, Marketing, and Support</li>
<li>Into a bigger portfolio of products that had inter-dependent deliverables</li>
<li>Across the portfolio to other product lines and teams</li>
</ul>


<!--more-->


<p>Evant was eventually acquired and folded into a larger company, so much of the memory of what worked well and not about
this was lost.  Except the person who had the &#8216;APT&#8217; charter for Evant is still alive and cognizant.  And maybe a bit
opinionated, but will try to be objective.</p>

<p>Ultimately, I think the scaling &#8220;worked in principle&#8221; but having a pure XP team shift to Scaled Agile is asking them
to give up an almost religious desire to &#8220;Not Analyze&#8221;, &#8220;Not Design&#8221;, and &#8220;Not be Objectively Measured!&#8221;.  If the
software developers really think they can program without being measured around productivity of delivering value to the
customer, you really have to let them go.  Maybe you have a wizard or two that makes crazy amazing things happen and you
don&#8217;t bother putting them into the normal project teams, but beyond that, you need to know if your products, projects,
and programs are <em>delivering a good ROI</em> and how you could make them deliver a better ROI.</p>

<p>To do that, you need to measure.  And returning to COSMIC, it is a way to measure the scale of software functionality.
Which isn&#8217;t the value to the customer of that system, but does reasonable express the complexity in providing the
value to the customer.</p>

<h3>COSMIC Measurement: Analysis and Design</h3>

<p>The COSMIC process is clearly doing Analysis and Design, but in a relatively light and tunable way.  You can control:</p>

<ul>
<li>How much you decompose a system</li>
<li>The detail level and decomposition of the functional users of the system</li>
<li>How detailed you get with &#8220;Objects of Interest&#8221; and their corresponding &#8220;Data Groups&#8221;</li>
<li>What scope of the system you are going to measure</li>
<li>The granularity and formality of the functional user requirements (FURs)</li>
<li>Details around the non-FURs (indirect FURs, non-functional requirements, and other constraints)</li>
</ul>


<p>Doing the COSMIC measurement process is basically doing a minimal Analysis and Design on a system, so you have a good
basis for measuring its size and correlating that to development costs.  But it doesn&#8217;t just support the measurement,
it starts building a model of the user concepts (Object of Interests), their events, the system actions, and the
system components (based on the decomposition level).</p>

<h3>The Hub: Additional (or Not) Analysis and Design</h3>

<p>The COSMIC analysis can be a basis to additional investment in Analysis and Design, but that is optional.  That
is a choice of <em>delivery</em>.  You could have extreme delivery that ignored the COSMIC scope model completely.  Or
you could have extreme delivery that went into Waterfall after the COSMIC model was produced.  Or more sensibly,
you could start working <em>outward</em> from that hub:</p>

<ul>
<li>Does the minimal user concepts start describing a good logical data model?</li>
<li>Does the decomposition work with the implementation frameworks?  Should these be more fully designed or just implemented and noted how they are different.</li>
<li>If there is a lot of data-reading by different functional processes, are these from a single database or many or cached?</li>
</ul>


<p>Note that these &#8216;expansions&#8217; are not meant to alter the Hub: The measurement was done, and you can leave it alone
but leverage it for subsequent activities</p>

<h3>The Hub: Drilling down with COSMIC</h3>

<p>Alternatively, as you do analysis and design, you can produce a new granularity and scope that you want to now
measure again.  This could be done only when things seem to have become <em>very</em> different from original expectations,
or consistently to understand development &#8216;hidden requirements&#8217; or really &#8216;derived requirements&#8217; growth.  The
measurement should still ignore NFRs, but the deeper granularity and the conversion of some NFRs to FURs would
cause a different estimate of &#8216;Joints&#8217; because we have a different (more detailed) view of the system.</p>

<h3>Scaled Agile Manifesto</h3>

<p>I believe the Agile Manifesto was reactionary and extreme.  It had good ideas in it, but was missing core premises
that customers and development teams should expect from a good development project:</p>

<p>Manifesto:</p>

<ul>
<li>The Customer is always right about what they want.  The delivery team should always be honest and informative about what they can deliver and how they are doing it.

<ul>
<li>The Customer can change what they want, change the delivery team they use, but they can&#8217;t interfere within the delivery team</li>
<li>The delivery team should always deliver a functional-requirements-based estimate of a project independent of the technology and other delivery choices, so the customer knows what they are asking for (compared to other projects) and getting (given the delivery approach)

<ul>
<li>Unless the customer clearly says &#8220;I don&#8217;t care&#8221;, in which case the delivery team can choose whether to do the work for their own internal benefit</li>
</ul>
</li>
</ul>
</li>
<li>Unless it helps a customer figure out what they want, requirement-fulfilling working systems are the only true progress of a project</li>
<li>A customer can desire to go forward to later stages (analysis, design, and implementation) before they are sure what they want

<ul>
<li>The cost of responding to change should be minimized while still supporting maximal ROI and velocity if there are no changes</li>
</ul>
</li>
<li>Processes and tools are to support the Customer and Ddelivery team&#8217;s needs, and not ends of themselves.

<ul>
<li>A default or customary usage of processes and tools is appropriate, but should be evaluated if there appears to be no need or even clear counter-benefit</li>
</ul>
</li>
</ul>


<p>Principles:</p>

<ul>
<li>Our highest priority is to satisfy our current customers

<ul>
<li>Through techniques that enable the customer to make good decisions, see verifiable progress toward their goals, and determine if they are getting a good ROI</li>
</ul>
</li>
<li>Our second highest priority is to satisfy future customers even better

<ul>
<li>Through evaluation of what went well and poorly, and looking for ways to give even higher satisfaction (whether ROI, predictability, or in other ways) to customers</li>
</ul>
</li>
<li>Both sides should care about each other:

<ul>
<li>A happy development team that cares about the customer is usually better at satisfying the customer</li>
<li>A customer that truly cares about the development team is usually better at inspiring the team to deliver its best</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ADD: Estimation]]></title>
    <link href="http://markfussell.emenar.com/blog/read-1/"/>
    <updated>2015-10-23T01:00:00-07:00</updated>
    <id>http://markfussell.emenar.com/blog/read-1</id>
    <content type="html"><![CDATA[<p>This is the fourth series describing the ADD: a radically more productive software development and delivery
environment.  The first series starts here: <a href="http://markfussell.emenar.com/blog/add-1/">Advanced Development and Delivery</a> and described the core four ingredients
of the ADD.  The second series starts here: <a href="http://markfussell.emenar.com/blog/addstack-1/">ADD Stack</a> and described the application stack and
system components associated with the ADD.  Some of these were Java / Grails specific, and some were more general
components and capabilities.  Together these went through a huge amount of functionality, flexibility, reliability,
and scalability.  Both for the IT infrastructure (whether on EC2 or on bare hardware) and for the applications
on top of that IT infrastructure. The third series starts here: <a href="http://markfussell.emenar.com/blog/add2-1">Advanced Development and Delivery Summary</a>
and gave an executive summary of the ADD.</p>

<p>This series is about project estimation, and is basically <em>orthogonal</em> to the ADD itself.  You can have good
 estimates or bad estimates.  The ADD delivers exceptional productivity.  How much you need to estimate is
 quite independent of productivity.  But by using Estimation and Feedback, you can figure out (a) whether
 to do a project and (b) whether the people you have are up-to-snuff.  If you <em>know</em> you have to do
 a project and you <em>have</em> certain people: don&#8217;t worry about the estimate.  It is irrelevant.  Just &#8220;wing it&#8221;.
 But if you have choices about either (a) whether to do a project or (b) what people to use or even (c)
 figuring out how good your team is after you do a project, then estimations are the core benchmark to
 give you feedback.</p>

<h2>Estimation is crazy-hard</h2>

<p>The problem with estimating is you can&#8217;t be good at it unless you have done something very similar before.  But
most workers in an industry are relatively new to it: less than ten years.  And if each project takes a couple
years to complete, you may have only a couple experiences in your first five years of work.  Change technologies,
change roles, or change organization, and your estimates are likely poorly based.</p>

<p>When something is too hard for someone to do easily, you need to decompose it to make it (a) easier and (b) separable.</p>

<!--more-->


<p>Doing two or more pieces sequentially is commonly easier than doing the whole task at one time.  By easier, I don&#8217;t
mean faster.  It may take more time, especially if there is some interrelationship between the pieces.  But there
is commonly a limit to how much a human brain can do at one time until they are trained.  Over time, the training
in the pieces enables them to be done simultaneously.  Master chefs and similar tend to be trained in all pieces of
  their craft until they can do it all so easily that they can do it simultaneously.</p>

<p>By making the pieces separable, you can have different people work on each of the pieces, and develop the skills
   needed for that piece alone.  Note that this isn&#8217;t &#8220;slicing&#8221; a large piece of work into a smaller piece of work which
   requires all the same skills.  That would be like a chef doing part of the dinner service.  Instead it is
   separating the skills needed for the task: one chef &#8220;Plates&#8221; and just plates, another cooks meats, another cooks vegetables,
   another makes sauces, and so on.</p>

<p>The critical question is then how to decompose?  First we need to define and decompose what we mean by estimation.  And to do
that, we can put estimation into the macro solution-delivery process of software.</p>

<h2>A Framework: READ-OR</h2>

<p>I have been reading and writing software for about 35,000 hours.  Mostly reading, which I believe is the core
to being a great programmer: read great programmers&#8217; code and you will learn from it.  It may be hard to find
great code to read, but you can always start with Smalltalk or find some epic system close to the
kinds of systems you build.</p>

<p>Working through possible acronyms for the bigger software development process, I stumbled upon my favorite word: &#8220;READ&#8221;.
All software is developed through this simple approach and acronym:</p>

<ul>
<li>Requirements of Solution – Given the problem, and what is your solution to that problem?  What does that solution require to solve the problem?</li>
<li>Estimation of Size – What is the estimate of the <em>size</em> of the solution?  Note this is independent of the architecture and technology.  It is the functional size estimate and not the delivery estimate</li>
<li>Architecture – What is the architecture and technology you want to use to deliver this solution</li>
<li>Delivery – Now deliver or consider delivering.

<ul>
<li>Estimate the delivery timeline and costs, and decide if the solution is worth doing.  If not, change architecture or change solution.</li>
<li>If this is a waterfall, deliver once.  If incremental, deliver in increments.</li>
</ul>
</li>
</ul>


<p>And bonus pieces</p>

<ul>
<li>Over – Now the project is either done or the process starts over until the solution solves the real problem.

<ul>
<li>This requires &#8220;Delta&#8221; size estimation.  How much is being added to or modified about a system?</li>
</ul>
</li>
<li>Review – Review the size of what was built (not time, but solution functional size)

<ul>
<li>Determine what you would likely want to improve in the solution, architecture, or delivery</li>
</ul>
</li>
</ul>


<p>So now that we have Esitmation</p>

<h3>Estimation of Solution Size</h3>

<p>The hard part is doing Estimation of Solution Size without getting pulled into the details of architecture and delivery.  We are not
yet good at this as an industry.  We need a body of knowledge and a system to estimate the size of a solution
 independent of the architecture chosen and the team that delivers.  If we have this, we can finally <em>measure</em>
 something useful.  Actually we can measure <em>a lot</em> of useful things.</p>

<ul>
<li>What is the ROI of the solution?  If the solution is really big, there are very few architectures and delivery teams that are going to dramatically reduce the cost</li>
<li>How well do certain architectures do against a particular solution?  For a given delivery team, you can see what they are good at or not.  Going across delivery teams, you may be able to identify <em>better</em> architectures vs. <em>more familiar</em> to the team.

<ul>
<li>What are the differences between the architectures that cause these effects?</li>
<li>Should we change architectures or train more in an architecture?</li>
</ul>
</li>
<li>How well do the delivery teams deliver?  Especially if the solution is about the same size, and the architecture is the same, you should start seeing better and worse results.

<ul>
<li>What are the differences between the teams that cause this effect?</li>
<li>Can we improve the numbers?</li>
</ul>
</li>
</ul>


<p>Estimation of solution size has been attempted with Function Points and more recently with COSMIC Function Points. I
think using the term &#8220;point&#8221; is not quite right, so I am going to recommend being more creative although just a
simple twist on the word.  I propose &#8216;joint&#8217; to capture complexity.  Things with more joints are usually more
complex, and it is relatively linear or even somewhat exponential as you increase the joint count.</p>

<h3>Joints / Moves / COSMIC</h3>

<p>So what should constitute a &#8216;joint&#8217;?  With very little effort in evaluating it (will be starting soon), I believe COSMIC
is a valid starting methodology.  So a COSMIC Point is a Joint.  Not much difference, but at least it splits the
  two issues: How big is it (1000 joints)?  How long is it expected to take to build it (10,000 points)?
  Given COSMIC measure data movements, a joint could be a synonym for a &#8216;move&#8217;, but if we augment the system with
  additions beyond &#8216;moves&#8217; as source of size, then the term would become a misnomer.</p>

<p>More information about COSMIC is here: <a href="http://cosmic-sizing.org/">http://cosmic-sizing.org/</a> and elsewhere online.</p>

<h3>Analysis and Design</h3>

<p>When working through COSMIC terminology and examples, it flashed me back a couple decades to a time that we built software very differently:</p>

<ul>
<li>Software was built from requirements through analysis through design and then into implementation</li>
</ul>


<p>This was called a &#8216;Waterfall&#8217; model because each stage tended to block doing anything for the next stage until
the stage was &#8216;complete&#8217;.  Modern Agile proponents, especially the extremely agile, have basically dropped the stages.
But the stages are useful going both <em>forward</em> (analyse what your system is supposed to do before coding it) and <em>backward</em>
does the analysis seem to plausibly match the requirements?  The analysis and design work was actually not the problem,
it was just the amount of work (if you an analyst, you want to analyze) and the &#8216;blocking&#8217; nature of the work that was
a problem.</p>

<p>A great book on this analysis and designe work was Object-Oriented Analysis and Design (1st edition) which was in several different programming
 languages and dealt with realtime, server application, and other types of software systems.  The second generation can
  be found here: <a href="http://www.sphoorthyengg.com/MCAupload/upload/object-oriented-analysis-and-design-with-applications-2nd-edition.pdf">http://www.sphoorthyengg.com/MCAupload/upload/object-oriented-analysis-and-design-with-applications-2nd-edition.pdf</a>
These methods became parts of UML, which is  again commonly used for <em>heavy</em> analysis and <em>heavy</em> design, preventing the
customer from seeing the actual product early on.</p>

<p>The solution isn&#8217;t to drop the steps, but to scale and time them properly</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Advanced Development and Delivery (ADD) and the ADD Stack – Summary]]></title>
    <link href="http://markfussell.emenar.com/blog/add2-1/"/>
    <updated>2015-10-23T01:00:00-07:00</updated>
    <id>http://markfussell.emenar.com/blog/add2-1</id>
    <content type="html"><![CDATA[<p>This is the third series describing the ADD: a radically more productive development and delivery environment.  The
first series starts here: <a href="http://markfussell.emenar.com/blog/add-1/">Advanced Development and Delivery</a> and described the core four ingredients
 of the ADD.  The second series starts here: <a href="http://markfussell.emenar.com/blog/addstack-1/">ADD Stack</a> and described the application stack and
 system components associated with the ADD.  Some of these were Java / Grails specific, and some were more general
 components and capabilities.  Together these went through a huge amount of functionality, flexibility, reliability,
 and scalability.  Both for the IT infrastructure (whether on EC2 or on bare hardware) and for the applications
 on top of that IT infrastructure.</p>

<p>This series assumes you have at least skimmed the other two series, but this one is the summary of the other two.
It is an incremental growth of the architecture in a fairly macro sense, where the details are in the other series.</p>

<h2>The three ingredients</h2>

<p>Wait, it was four a moment ago.  The ADD requires four, but advanced project collaboration requires only three.  And
at the heart of the ADD is advanced project collaboration.  Collaboration has no &#8216;machines&#8217;, just people, so we put aside
one ingredient.  The remaining three are the <em>nucleus</em> of ADD:</p>

<ul>
<li>GitHub.com <a href="http://github.com/">http://github.com/</a></li>
<li>HipChat    <a href="http://HipChat.com/">http://HipChat.com/</a></li>
<li>Amazon S3  <a href="http://aws.amazon.com/">http://aws.amazon.com/</a></li>
</ul>


<p>These three ingredients can give individuals and teams 4x or more productivity.  And the reason is the same as for
 ADD.  There are two critical roles in any project:</p>

<ul>
<li>Changers</li>
<li>Watchers</li>
</ul>


<p>The Changers are gonna change, change, change, change and the Watchers are gonna watch, watch, watch, watch.  And
all of the people involve need to see what is going on (in the best way for them) and not be blocked getting things
done by others on the project.  They need perfect transparency.  Which will ultimately build incredible trust,
knowledge, and skill.</p>

<p>The three ingredients form the core of a three-way Venn diagram, that I will draw in hexagonal rings.</p>

<p><img src="http://markfussell.emenar.com/images/add2-1/add2_threeIngredients1.png" /></p>

<!--more-->


<p>Clearly the three make sense with project collaboration, and all three are used by Changers and Watchers.<br/>
Note that &#8216;Annexes&#8217; are part of the collaboration nucleus.  You need annexed repositories for GitHub to be a practical collaboration
tool as resources become large.</p>

<h3>The fourth ingredient and full ADD nucleus</h3>

<p>Now adding the machines in, we get:</p>

<p><img src="http://markfussell.emenar.com/images/add2-1/add2_fourthIngredient1.png" /></p>

<p>And seeing the transformation from the three-ingredient version, we can see the EC2 servers are
not critical for Changers and Watchers to interact with each other.  Except in the sense that any final product
is part of the nucleus that Changers and Watchers want to work on.  For ADD it is a deployed application which
might be on an EC2 server, and for other product development (books, cars, etc.) it would be that <em>product</em> vs.
whatever &#8221;<em>factory</em>&#8221; created the product.</p>

<h2>The Rings</h2>

<p>So the ADD works outward from the inner collaboration nucleus plus &#8216;the machines&#8217;.  In the other series, the tools and
system components built out more and more functionality.  They were not described this way at the time, but
they could be viewed as rings around rings.  As the rings worked outward, a specific ADD was defined
(e.g. one that was Linux and Java oriented) or a specific application architecture was defined
(e.g. on that had workers and relational databases).  All the rings are &#8220;good rings&#8221; in my experience, but
especially as you get further out each ring could be swapped with an alternative &#8216;implementation&#8217; that
 may be more familiar to the team or somewhat more suited to the domain.</p>

<p>The rings I recommend (and recommended in the series) follow.</p>

<h3>Ring-1: Interacting with the Nucleus; EC2, Linux-capable workstations, Web Browsers, Email, and Talking</h3>

<p><img src="http://markfussell.emenar.com/images/add2-1/add2_ring1.png" /></p>

<p>In the bottom right for the machines, I recommend using EC2 as by-far the most mature and capable cloud computing
environment.  Once you are familiar with EC2, you can compare to other clouds (Google, IBM, EMC, etc.) but you
need to see a &#8216;Real Cloud&#8217; before you can evaluate whether another is good enough.  And again, althoug I recommend
EC2, very little in the ADD is EC2-specific and it is always in the little details.</p>

<p>Having Linux-capable workstations provides the best Git, automation, and EC2 tools.  You can be on Windows, but
you will be punished.  Even worse when Ring-2 recommends Linux-Servers.</p>

<p>GitHub works fine for reading with Web Browsers, and you can even do updates with it.  HipChat is the same: it
  has an application, but it is not required.  And although most collaborative activities should be in HipChat,
  getting email notifications are quite effective.  Finally, like other Agile methodologies, direct &#8216;talking&#8217;
  is fine and encouraged, but you need to make sure anything important gets into the collaboration environment
  (HipChat) and similarly make sure anything <em>private</em> never gets into that collaboration environment.</p>

<h3>Ring-2: The machines react and collaborate; Linux-Servers, CloudFormation, Bash, PushMePullYou, Vagrant, and HipChat notifications</h3>

<p><img src="http://markfussell.emenar.com/images/add2-1/add2_ring2b.png" /></p>

<p>Ring-2 is where the ADD starts coming truly alive and the machines &#8216;react&#8217; to the ADD infrastructure as well as
 notify the ADD infrastructure of what is going on.  Linux-based servers (ec2 defaults to a Centos variant)
 are the most flexible, documented, and capable on the AWS (and most other) cloud infrastructures.  So this
 is an obvious choice.  Using Amazon CloudFormations is not required, but is a very simple to understand model and
 well supported in AWS.  Defaulting to using &#8216;bash&#8217; for scripting basically makes you &#8216;agnostic&#8217; beyond the Linux
 part.  People who don&#8217;t know bash programming &#8216;bash on bash&#8217;, but it is a perfectly reasonable scripting language
 with slightly esoteric notation.</p>

<p> The PushMePullYou model is the core to mass, understandable, and fast automation.  You don&#8217;t touch machines, you
 touch Git repositories, push the request (letting everyone know the request), and the machines pull it and react
 as appropriate.</p>

<p> Developers/changers can use Vagrant to run and test everything very much like production is running, including having
  their local machines come into the PushMePullYou model.</p>

<p> Finally, Git, machines, and other components should always post into HipChat so people can see what they are doing.</p>

<h3>Ring-3: An opinionated Java stack and good monitoring / logging: Grails, Spring, Maria, SumoLogic etc.</h3>

<p><img src="http://markfussell.emenar.com/images/add2-1/add2_ring3.png" /></p>

<p>Ring-3 augments the ADD into a good Java-based stack.  Both in production (a JVM running Tomcat) and
 for development (IntelliJ with a Grails/Spring stack).  By this ring we can develop software, deploy
 it, and monitor whether it is functioning properly.</p>

<h3>Ring-4: A good UI framework and any other system components needed: Angular, Redis, etc.</h3>

<p><img src="http://markfussell.emenar.com/images/add2-1/add2_ring4.png" /></p>

<p>Ring-4 finishes off most of our application functionality.  We need to pick a UI framework beyond
 generating web pages / CSS / jQuery (those are all part of Grails) if we want functionality beyond
 the core UI from Grails / Spring.  And we can augment our application servers with any of a host of
 components / technologies (as few as possible, but better to use them then to build ourselves&#8230;
 usually).</p>

<h2>Conclusion</h2>

<p>The ADD can be thought of as rings around a &#8220;collaboration nucleus&#8221;.  The nucleus and the first
two rings define the ADD approach and it&#8217;s benefits, where the subsequent rings tailor
the ADD to the characteristics of good software development and high-quality
production deployment.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ADD Stack [Part-10]]]></title>
    <link href="http://markfussell.emenar.com/blog/addstack-10/"/>
    <updated>2015-10-22T01:00:00-07:00</updated>
    <id>http://markfussell.emenar.com/blog/addstack-10</id>
    <content type="html"><![CDATA[<p>This is the second series describing the ADD: a radically more productive development and delivery environment.  The
first article is here: <a href="http://markfussell.emenar.com/blog/addstack-1/">Intro</a> and described the truth and lies about developing software.
The second article dealt with &#8216;Testing&#8217;.  The third dealt with the application stack (Grails and other technologies).
The fourth discussed UI alternatives.  The fifth added some major aspects to the stack: Semi-Structured Data, Templates,
and Dual or Isomorphic scripting. The sixth discussed UI frameworks in a bit more detail and ended with an Angular vs.
Ember as a core choice.  The seventh went into logging, analytics, and monitoring of the running applications and nodes.
The eighth was an overview of Federation Components like caches, queues, payment services, and the like.  The ninth
was on a highly reliable, scalable, flexibly, and ultimately very simple worker model.</p>

<h2>WAR!</h2>

<p>Continuing with the worker model, we currently have a non-production Application Server running Grails:</p>

<ul>
<li><a href="http://fed1-app1.aws.gaps2c.com:8080">http://fed1-app1.aws.gaps2c.com:8080</a></li>
</ul>


<p>It is running grails &#8216;interactively&#8217; and &#8216;off-source&#8217;.  This is fast for deployment, but it is missing a few
things that people usually want in production:</p>

<ul>
<li>Well-defined artifact that has been tested and can&#8217;t &#8220;just change&#8221;</li>
<li>A container environment that can provide certain resources to the application (e.g. monitoring)</li>
<li>Removal of having to understand the &#8216;building&#8217; technology from the running technology (JVM)</li>
<li>That production has as few technologies as possible, and is normally missing &#8216;compilers&#8217; so people can&#8217;t tweak behavior</li>
</ul>


<!--more-->


<p>The last item is (IMO) a bit paranoid, and there are better ways to make sure production is stable (tripwires and
logging).  And the third is probably unrealistic for anything but trivial debugging.<br/>
But the first two are certainly reasonable wants.  A lot of people are familiar with deploying wars and deploying
wars on Tomcat and other servers.</p>

<h3>Where&#8217;s the WAR?</h3>

<p>The first issue with changing from source deployment to war-based deployment is &#8220;Where is the WAR?&#8221; and
&#8220;How do I know it has changed?&#8221;.  As with the other weird primary ingredient approaches, the WAR is going to
be in an annexed repository.  And you can see that it changed by simply looking at whether the &#8216;git revision&#8217; of
the war has changed.  This approach gives incredible power and flexibility:</p>

<ul>
<li>You can have as many different versions of the application as you want.  They just each have to have their own &#8216;folder&#8217;</li>
<li>You can easily see which deployments are using which versions</li>
<li>Changing a deployment to use a different version involves copying a 50 byte hash vs. an actual WAR file</li>
<li>Getting the real file is a super-fast call to S3</li>
<li>Bootstrapping the initial version is the same as any other version, which makes it less likely to diverge and break</li>
</ul>


<p>The WARs should be in a different repository from the source for a number of reasons, but the main one being their
rules and rythms are very different.  But the structure of the repositories can be very similar to make it easy to see
the created artifacts.  Something like this:</p>

<p><img src="http://markfussell.emenar.com/images/addstack-10/addstack10_war1.png" /></p>

<p>Note that the contents of the directory could be anything.  And actually a &#8216;trick&#8217; to making the upload much faster
is to use an exploded &#8216;war&#8217; vs. a normal &#8216;war&#8217;.  Why?  Because a WAR contains a bunch of jars that are all almost
 always <em>identical</em> between versions.  So although S3 has basically unlimited space, it is silly to waste it with
 a file that (although different) is 99% the same between each version.  For example, all the identical jars within this
 expanded war:</p>

<p><img src="http://markfussell.emenar.com/images/addstack-10/addstack10_war2.png" /></p>

<p>The trade is that you have a lot more files in the other folders.  Finally, you could do a hybrid where everything but
the lib folder is compressed.  To make the real war, your deployment process would uncompress and then re-WAR the contents.</p>

<p>The performance difference is dramatically different when working outside the EC2 grid, but is less so within that
grid.</p>

<h3>Who deploys what?  The Promotion model</h3>

<p>The deploying server needs to watch something so it can see a change that is relevant to it.  Production does not care
that there is a new QA build.  And QA may not care there is a new development build.  QA never creates its own build,
but it only cares when a development build is &#8220;Good enough to QA&#8221;.  This I call the promotion model.</p>

<p>For any given application:</p>

<ul>
<li>Automated builds occur <em>all the time</em> (whenever something changes) and each gets a unique identifier (e.g. 201)</li>
<li>Each build is then promoted through however many levels of inspection you want

<ul>
<li>If it passes muster</li>
<li>If it has not been superseded by another build</li>
<li>If not, it is ignored</li>
</ul>
</li>
</ul>


<p>With this model, you never <em>go backward</em>, which increases productivity a lot.  And your are continuously trying to
 <em>go forward</em>, which means you have very current information about where you are.  And this also increases productivity.
 Yes, in a pinch, you could see if a build <em>between</em> last success and most current can be promoted.  But that is
 impacting productivity so it should rarely be done.</p>

<p>This also implies there is no branching.  One source.  One set of builds based on that source.  That is not required
by this approach (branch source, new set of builds), but it is strongly encouraged because it again <em>wastes no energy</em>
and it is trivial to flip to a different &#8216;set of builds&#8217; when a branch/back-patch is required.  But the process is
very optimistic while also being very realistic (the world is where it is) and appropriately pessimistic
(you can&#8217;t promote through QA until you pass the automated tests).  Because machines embody the process, you
can&#8217;t subvert it without doing it <em>very conspicuously</em></p>

<p>To be promoted, you just have to be &#8216;copied&#8217; into the right destination.  Promotions are more an &#8216;it&#8217; than
a &#8216;development&#8217; activity, so they are structured under the &#8216;it&#8217; folder.  Each federation (and potentially part)
has it&#8217;s own versions of things.  If you are in &#8216;fed1&#8217; and want the &#8216;grails-petclinic&#8217; application on your
machine, you know where to look: &#8216;fed/fed1&#8217;.  The use of &#8216;common&#8217; vs. &#8216;stacktype&#8217; is mirroring the flexibility
 shown elsewhere.  You could have most deployments use &#8216;common&#8217; and have some override it.  Or most deployments override &#8216;common&#8217;
 but there is a default in case they don&#8217;t.</p>

<p><img src="http://markfussell.emenar.com/images/addstack-10/addstack10_promo2.png" /></p>

<h3>Who builds and deploys?  Custom Worker vs. Chores</h3>

<p>OK, so we need to build and deploy every time a particular repository changes.  We could do that monolithicly
and have no registry of the war being built (it just magically happens), or we could do that in two parts:</p>

<ol>
<li>Detect change in repository: create chore to build war</li>
<li>Detect chore and worker do chore</li>
</ol>


<p>The advantage of the second version is we can decompose figuring out what needs to be done from doing it, and we
also have better visibility and consistency in the process.  Although I like doing things incrementally, I don&#8217;t
think the increment (monolith) is notably simpler than the second, and this was meant to build on our Worker topic.</p>

<p>The critical question is actually &#8216;who is going to write the chore&#8217;.  We don&#8217;t want to have a bunch of chores
created by different workers who all recognized a change was done.  Fortunately, we already have a model for this
 with the &#8216;chore&#8217; ownership.  We need to describe an &#8216;event&#8217; in a way that is related to whatever has changed
 about the world, and then when trying to &#8216;create the chore&#8217; a worker first &#8216;creates the event&#8217;.  Once an event
 is created and &#8216;pushed&#8217;, there is no reason to create it again.</p>

<p>In this case, the event is pretty obvious to describe: a git repository went to a new version or specifically:</p>

<ul>
<li>repo3_miniature-ironman</li>
<li>551b86e42d&#8230;</li>
</ul>


<p>so if an event for that exists, don&#8217;t create another one.  Since this is a simple identification, we don&#8217;t need
the extra directory structure and can simply write a &#8216;.json&#8217; file into the appropriate time directory.  Note the
time should be the time of the &#8216;event&#8217;, not of when it was noticed.</p>

<p>A given event could trigger multiple chores, but in our case we just want to have the one &#8216;build the war&#8217; chore
created.  Note that the chore could be trivial: it could result in <em>no work</em> being done except seeing if a
new WAR is needed.  Chores are rarely &#8216;you must do this&#8217;, but more &#8216;do this if necessary&#8217;.  This alows us to
be fast in the creation of the &#8216;chore&#8217; vs. doing a lot of analysis up front.  Since the worker pool can be
large, we don&#8217;t want any given worker to block the pipeline too much.</p>

<h4>Event structure</h4>

<p>The structure of the event can be anything.  It is nice to have the JSON be declarative of what it is (an &#8216;event&#8217;)
and then have enough information to process the information.  Some human readable information is handy for debugging
and logging.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;type&quot;</span> <span class="p">:</span> <span class="s2">&quot;event&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;id&quot;</span> <span class="p">:</span>  <span class="s2">&quot;repo3_miniature-ironman_551b86342d&quot;</span>
</span><span class='line'>  <span class="s2">&quot;tss&quot;</span> <span class="p">:</span> <span class="s2">&quot;20151022120009&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;kind&quot;</span> <span class="p">:</span> <span class="s2">&quot;repochange&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;repochange&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;repo&quot;</span> <span class="p">:</span> <span class="s2">&quot;repo3_miniature-ironman&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;version&quot;</span> <span class="p">:</span> <span class="s2">&quot;551b86342d&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;comment&quot;</span> <span class="p">:</span> <span class="s2">&quot;Just set the javaagent for Java&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;committer&quot;</span> <span class="p">:</span> <span class="s2">&quot;markfussell&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Chore structure</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;type&quot;</span> <span class="p">:</span> <span class="s2">&quot;chore&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;tss&quot;</span> <span class="p">:</span> <span class="s2">&quot;20151022120009&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;event_id&quot;</span> <span class="p">:</span> <span class="s2">&quot;repo3_miniature-ironman_551b86342d&quot;</span>
</span><span class='line'>  <span class="s2">&quot;event&quot;</span> <span class="p">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;kind&quot;</span> <span class="p">:</span> <span class="s2">&quot;repochange&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;repochange&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;repo&quot;</span> <span class="p">:</span> <span class="s2">&quot;repo3_miniature-ironman&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;version&quot;</span> <span class="p">:</span> <span class="s2">&quot;551b86342d&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;comment&quot;</span> <span class="p">:</span> <span class="s2">&quot;Just set the javaagent for Java&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;committer&quot;</span> <span class="p">:</span> <span class="s2">&quot;markfussell&quot;</span>
</span><span class='line'>     <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Making it happen</h3>

<p>Although I mentioned before that there were &#8216;parents&#8217;, &#8216;workers&#8217;, and that application servers shouldn&#8217;t do any of
this kind of work, with this very clean pipeline it is clear our single application server could easily do all of
this itself.  So just to save on IT, that will be the first version.  After that it is easy to see we could separate
the &#8216;parent/worker&#8217; from the application server.  And although likely not necessary, we could separate the &#8216;parent&#8217;
from the &#8216;worker&#8217; node too.  The reason the &#8216;parent&#8217; doesn&#8217;t need to be separated is we should always have two
parents around and a simple CloudFormation can make sure that is true.  And parents don&#8217;t do that much, so there
is no reason to have them be separate from workers.  With this model, all workers are also potential parents, and
there are always two workers available.</p>

<h4>Detecting the change to &#8216;Repo3&#8217;</h4>

<p>This is actually the same script as before where we just do something different in the &#8216;ActualWork&#8217; source:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>   <span class="nb">echo</span> <span class="s2">&quot;Detected Change in Git Version!&quot;</span>;
</span><span class='line'>
</span><span class='line'>   <span class="nb">export </span><span class="nv">START_TSS</span><span class="o">=</span><span class="s2">&quot;`date +%Y%m%d-%H%M%S`&quot;</span>
</span><span class='line'>   <span class="nb">echo</span> <span class="s2">&quot;Starting ActualWork at ${START_TSS}&quot;</span>
</span><span class='line'>   <span class="nb">echo</span> <span class="nv">$GIT_VERSION</span> &gt; <span class="k">${</span><span class="nv">WORK_DOING_VERSION</span><span class="k">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="nb">source</span> <span class="k">${</span><span class="nv">MY_DIR</span><span class="k">}</span>/work_FindEvent_Repo3_ActualWork.sh
</span></code></pre></td></tr></table></div></figure>


<p>So now we know we have to do the work, but we need to see if it was already done by someone else:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">export </span><span class="nv">FIND_EVENT</span><span class="o">=</span><span class="sb">`</span>find work/event -name <span class="k">${</span><span class="nv">EVENT_NAME</span><span class="k">}</span> | head -1<span class="sb">`</span>
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> <span class="nv">$FIND_EVENT</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">[[</span> <span class="s2">&quot;&quot;</span> <span class="o">==</span> <span class="s2">&quot;$FIND_EVENT&quot;</span> <span class="o">]]</span> ;
</span><span class='line'><span class="k">then</span>
</span><span class='line'>     <span class="c">#========================================</span>
</span><span class='line'>     <span class="c">#=== We are the first! Rush to add it</span>
</span><span class='line'>     <span class="c">#========================================</span>
</span><span class='line'>
</span><span class='line'>cat <span class="s">&lt;&lt;EOS &gt;&gt;$EVENT_FILE</span>
</span><span class='line'><span class="s">{</span>
</span><span class='line'><span class="s">  &quot;type&quot; : &quot;event&quot;,</span>
</span><span class='line'><span class="s">  &quot;id&quot; :  &quot;${EVENT_ID}&quot;</span>
</span><span class='line'><span class="s">  &quot;tss&quot; : &quot;${EVENT_TSS}&quot;,</span>
</span><span class='line'><span class="s">  &quot;kind&quot; : &quot;repochange&quot;,</span>
</span><span class='line'><span class="s">  &quot;repochange&quot;: {</span>
</span><span class='line'><span class="s">    &quot;repo&quot; : &quot;${EVENT_REPO}&quot;,</span>
</span><span class='line'><span class="s">    &quot;version&quot; : &quot;${GIT_VERSION}&quot;</span>
</span><span class='line'><span class="s">  }</span>
</span><span class='line'><span class="s">}</span>
</span><span class='line'><span class="s">EOS</span>
</span><span class='line'>
</span><span class='line'>git add <span class="nv">$EVENT_FILE</span>
</span><span class='line'>git commit -m <span class="s2">&quot;Creating an event for the change ${GIT_VERSION}&quot;</span>;
</span><span class='line'>git push
</span></code></pre></td></tr></table></div></figure>


<p>If this push succeeds, we are free and clear.  If not, we can try to merge (maybe some other event or chore was written)
and push again with a quick &#8216;git pull; git push&#8217;.  We could do that &#8220;forever&#8221; or until we know we have no hope (study the
actual output of the git pull, push, or other metadata between the two branches).  For the first pass, we can just do
it once.</p>

<h4>Event poster also chore poster</h4>

<p>Since we know we detected the &#8216;event&#8217; first, we are the owner of the event and
can now safely write out the &#8216;chores&#8217; associated with the event.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cat <span class="s">&lt;&lt;EOS &gt;&gt;$CHORE_FILE</span>
</span><span class='line'><span class="s">{</span>
</span><span class='line'><span class="s">  &quot;type&quot; : &quot;chore&quot;,</span>
</span><span class='line'><span class="s">  &quot;tss&quot; : &quot;${EVENT_TSS}&quot;,</span>
</span><span class='line'><span class="s">  &quot;event_id&quot; : &quot;${EVENT_ID}&quot;,</span>
</span><span class='line'><span class="s">  &quot;kind&quot; : &quot;buildwar&quot;,</span>
</span><span class='line'><span class="s">  &quot;war_repo&quot; : &quot;${WAR_REPO}&quot;,</span>
</span><span class='line'><span class="s">  &quot;war_path&quot; : &quot;${WAR_PATH}&quot;,</span>
</span><span class='line'><span class="s">  &quot;event&quot; : {</span>
</span><span class='line'><span class="s">      &quot;kind&quot; : &quot;repochange&quot;,</span>
</span><span class='line'><span class="s">      &quot;repochange&quot;: {</span>
</span><span class='line'><span class="s">        &quot;repo&quot; : &quot;${EVENT_REPO}&quot;,</span>
</span><span class='line'><span class="s">        &quot;version&quot; : &quot;${GIT_VERSION}&quot;</span>
</span><span class='line'><span class="s">     }</span>
</span><span class='line'><span class="s">  }</span>
</span><span class='line'><span class="s">}</span>
</span><span class='line'><span class="s">EOS</span>
</span><span class='line'>
</span><span class='line'>git add <span class="nv">$CHORE_FILE</span>
</span><span class='line'>git commit -m <span class="s2">&quot;Creating a chore for the event ${EVENT_ID}&quot;</span>;
</span><span class='line'>git push
</span></code></pre></td></tr></table></div></figure>


<h4>Detecting and doing the chore</h4>

<p>We went through detecting the chore before <a href="http://markfussell.emenar.com/blog/addstack-9/">AddStack-9</a>, but now we want to do something with the chore.</p>

<p>Given the chore is describe in JSON and what we do for the chore could be complex, we should switch to a higher
level language than &#8216;bash&#8217;.  In this case we can go into Python as a decent scripting language:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>python <span class="k">${</span><span class="nv">COMMON</span><span class="k">}</span>/doChore.py --source <span class="k">${</span><span class="nv">RANDOM_DOIT_DIR</span><span class="k">}</span>/chore.json --gitroot <span class="k">${</span><span class="nv">GIT_ROOT</span><span class="k">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This implies a powerful chore processing script, or one that can modularly call other scripts.
As long as the script leads the creation of &#8216;chore&#8217; types, we should be fine whether monolithic or modular.</p>

<p>The core of the routine is just to extract the necessary information from the JSON</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">source_directory</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">dirname</span><span class="p">(</span><span class="n">source</span><span class="p">)</span>
</span><span class='line'><span class="n">source_json</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="nb">open</span><span class="p">(</span><span class="n">source</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="n">chore_kind</span> <span class="o">=</span> <span class="n">source_json</span><span class="p">[</span><span class="s">&#39;kind&#39;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">chore_kind</span> <span class="o">==</span> <span class="s">&quot;buildwar&quot;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">build_repo</span> <span class="o">=</span> <span class="n">source_json</span><span class="p">[</span><span class="s">&#39;event&#39;</span><span class="p">][</span><span class="s">&#39;repochange&#39;</span><span class="p">][</span><span class="s">&#39;repo&#39;</span><span class="p">]</span>
</span><span class='line'>    <span class="n">build_version</span> <span class="o">=</span> <span class="n">source_json</span><span class="p">[</span><span class="s">&#39;event&#39;</span><span class="p">][</span><span class="s">&#39;repochange&#39;</span><span class="p">][</span><span class="s">&#39;version&#39;</span><span class="p">]</span>
</span><span class='line'>    <span class="n">war_repo</span> <span class="o">=</span> <span class="n">source_json</span><span class="p">[</span><span class="s">&#39;war_repo&#39;</span><span class="p">]</span>
</span><span class='line'>    <span class="n">war_path</span> <span class="o">=</span> <span class="n">source_json</span><span class="p">[</span><span class="s">&#39;war_path&#39;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">buildwarfromrepo_version_torepo_path</span><span class="p">(</span><span class="n">build_repo</span><span class="p">,</span> <span class="n">build_version</span><span class="p">,</span> <span class="n">war_repo</span><span class="p">,</span> <span class="n">war_path</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>With this information we can then go to the build repository, do a simple &#8216;grails package&#8217;, and copy it to the
appropriate repo and path.</p>

<h3>Other &#8216;chores&#8217; for this event?</h3>

<p>The event that caused the &#8216;buildwar&#8217; chore could also cause other activities.  Each of the
 application servers could create their own &#8216;chore&#8217; to redeploy, which would enable the &#8216;event&#8217; and &#8216;chore&#8217;
 repository to reflect system activity on a broader sense.  Because they are doing the chore themselves,
 it would just be a way to log the activity vs. being a way to pass it out to a bunch of workers.</p>

<h2>Conclusion</h2>

<p>The event, chore, and worker model is a very flexible, reliable, and scalable way to get stuff done.  It is
especially good at keeping throughput under control even when tasks can get onerous or &#8216;herding&#8217; occurs.<br/>
As the backlog grows, more workers appear to keep it in control.  When the backlog shrinks the workers go
to sleep or decommission.</p>

<p>The biggest issue with the worker approach is to make sure you know the ramp rate and reliability.  Even with a
huge cloud like EC2, there can be stutters and you have to more aggressively try to get resources, or accept that
the user experience may be a bit more lagged.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ADD Stack [Part-9]]]></title>
    <link href="http://markfussell.emenar.com/blog/addstack-9/"/>
    <updated>2015-10-21T01:00:00-07:00</updated>
    <id>http://markfussell.emenar.com/blog/addstack-9</id>
    <content type="html"><![CDATA[<p>This is the second series describing the ADD: a radically more productive development and delivery environment.  The
first article is here: <a href="http://markfussell.emenar.com/blog/addstack-1/">Intro</a> and described the truth and lies about developing software.
The second article dealt with &#8216;Testing&#8217;.  The third dealt with the application stack (Grails and other technologies).
The fourth discussed UI alternatives.  The fifth added some major aspects to the stack: Semi-Structured Data, Templates,
and Dual or Isomorphic scripting. The sixth discussed UI frameworks in a bit more detail and ended with an Angular vs.
Ember as a core choice.  The seventh went into logging, analytics, and monitoring of the running applications and nodes.
The eighth was an overview of Federation Components like caches, queues, payment services, and the like.</p>

<h2>Workers!</h2>

<p>Among the more interesting federation / deployment component are workers.  Workers are interesting because
they can do almost anything imaginable and they do it very efficiently.  How efficiently?  Well, the perfect
worker is at 100% when doing a task and <em>dead</em> when they have no tasks to do.  That is pretty darn efficient
because it approaches 100% and is only not 100% when we choose to not accept the &#8216;spin up&#8217; latency of getting
 a new worker.  As the amount of work increases, our pool of workers increase, and the spin-up-latency decreases
 on a per-chore basis.  That is <em>very cool</em>: as scale goes up, efficiency <em>increases</em>.  There are a lot of places that
 is not true for computers, so it is nice when it is.</p>

<h3>Work?  Chore?</h3>

<p>So we want to have a worker model where we can add a &#8216;chore&#8217; (a unit of work, using a term not otherwise used in
IT and CS&#8230; job, task, etc. are now ambivalent) to a queue of work-to-be-done, and have
 something do that chore.  There are a lot of ways to do this:</p>

<p> <!--more--></p>

<ol>
<li>Use BeanStalk</li>
<li>Use Kafka with a bunch of consumers</li>
<li>Use a database and launch a worker if none is available</li>
<li>Use Quartz and coordinate amongst the application servers which one is going to do the work</li>
<li>Use GitHub and launch one or more workers as needed</li>
</ol>


<p>And that is just a minor collection of simple solutions.  The first two are probably &#8216;the best&#8217; in terms of having
a very clean model.  But they require additional infrastructure and I am trying to keep that at a minimum.  The
second is using a database as a WorkQueue.  Well, it turns out that this is actually commonly done and almost
always <em>regretted</em>.  Most databases are horrible with the characteristics of Chores and their lifecycle.  So it does
work, but not well.</p>

<p>The fourth is quite functional but not scalable.  You don&#8217;t want your application servers doing <em>a lot</em> of work.
A little housekeeping is fine.  But the whole point of the Worker model is to enable as many or as few workers who each
<em>always</em> do <em>a lot</em> of work.  And then go away if no longer needed.  That isn&#8217;t the lifecycle and duty of application
servers.</p>

<p>So if you haven&#8217;t guessed by now, I am going to describe the fifth approach.  Use an annexed Git repository to describe
chores, their media (if any), and to provide the results (if any).  It turns out to be blazingly fast, scalable,
and flexible.  A little weird but sometimes weird really works.</p>

<h3>Chores, Parents, and Workers</h3>

<p>A lot of time, the real world can seriously inspire the computer world.  The Worker model I am about to describe
matches a &#8216;high-speed&#8217;, &#8216;high-efficiency&#8217;, parenting model.  I would guess any parent can see the similarities
and even the Nirvana of this Worker model.  It has a few major components:</p>

<ul>
<li>The World creates some Chores in a to-do list</li>
<li>The World doesn&#8217;t want to do the Chores, because it has other things to do</li>
<li>So The World creates two or more adults (for redundancy) so they can do the Chores

<ul>
<li>And then The World gives responsibility to the adults to do the Chores</li>
</ul>
</li>
<li>The adults don&#8217;t want to actually do the Chores themselves, so they produce Workers to do the Chores</li>
<li>The Workers are so awesome that they automatically <em>all</em> try to do the Chores, as quickly as possible

<ul>
<li>The adults (Parents) have worked out a system to prevent two Workers from doing the same Chore</li>
</ul>
</li>
<li>If the Chores are not getting done fast enough, the Parents produce more Workers</li>
<li>If there is no more work to do, the Workers go to sleep

<ul>
<li>Waking periodically to see if there is more work</li>
<li>Or if the Chores are not getting done fast enough, the Parents wake one or more Workers</li>
</ul>
</li>
</ul>


<p>With this model:</p>

<ul>
<li>The World is the Application Server or something similar</li>
<li>The Parents are special Nodes (or processes on Application Server nodes) that can see the &#8216;to-do&#8217; list</li>
<li>The Workers are special Nodes that are created as the &#8216;to-do&#8217; list backlog gets larger</li>
</ul>


<p>You need at least two Parents at all time to make sure the To-Do list is being watched.  You don&#8217;t need any
Workers until the To-Do list is sufficiently long or latent.</p>

<p>We will put the &#8216;To-Do&#8217; chores into a specially structured, annexed, Git repository.  Because of the annexing,
resources are automatically &#8216;deduped&#8217; and having each &#8216;chore&#8217; be self-contained is both possible and space
efficient.  Imagine all the &#8216;jar&#8217;s needed for a java build.  Given most of these are stable between builds,
they cost nothing at all to include in a &#8216;chore&#8217;.  Where people run fragile artifact servers (fragile because
(a) they exist as something that could fail and (b) they are rarely run redundantly) that have to handle
heavy load, the Annex puts all that load on S3&#8230; which is designed from the ground-up for loads well beyond our workers.</p>

<h4>Chore Structure</h4>

<p>The core of a Chore has to include:</p>

<ul>
<li>The identity of the chore

<ul>
<li>And an ability to &#8216;take it on&#8217;</li>
</ul>
</li>
<li>What the instructions are for the chore</li>
<li>What resources you need for the chore</li>
<li>Where the results of the chore are supposed to go</li>
</ul>


<p>To make the throughput easier to see, we will organize chores by time.  So basically a queue.  We can have &#8216;priority&#8217; within the
metadata of the chore if we want things to jump the queue.  And we can have different chore types (or IT needs) to
make sure a worker can really handle the chore. Using the &#8216;cron_1m&#8217; model of things working on the minute, we will
put things into buckets every minute.  But workers have to look for any not-done chore and pick it up if they can.</p>

<p>An advantage of the one-minute cron is we automatically can have a nice 30-second jitter.  That plus some kind of randomization
in chore selection makes it very unlikely that workers will acquire the same chore at the same time.  But if they do, one will win due
to &#8216;git push&#8217; timing.</p>

<h5>Identity</h5>

<p>Chores are identified by their &#8216;producer&#8217; and a timestamp.  A &#8216;producer&#8217; is a node plus a process id, and the timestamp can
have any precision necessary for the process to know it can&#8217;t collide with itself.  Two of the banes of any identity system
is making sure identity is unique and not having a bottleneck for identity generation.  The identity proposed solves these
two main issues.  A third requirement (sometimes) is keeping identity short / consistent.  A hash of the &#8216;phrase&#8217; is
possible if necessary, but collisions could be an issue if the phrase is too short.</p>

<h5>Instructions</h5>

<p>So we have something like &#8220;chore_ip-1-2-3-4_ps-349467_20151022-110109-123456&#8221; as a chore.  This is simply a directory with
a &#8216;chore.json&#8217; within it where that &#8216;chore.json&#8217; looks something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;chore_id&quot;</span> <span class="p">:</span> <span class="s2">&quot;ip-1-2-3-4_ps-349467_20151022-110109-123456&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;chore_tss&quot;</span> <span class="p">:</span> <span class="s2">&quot;20151022110109&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;producer_id&quot;</span> <span class="p">:</span> <span class="s2">&quot;ip-1-2-3-4_ps-349467&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;runner&quot;</span> <span class="p">:</span> <span class="s2">&quot;bash&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;command&quot;</span> <span class="p">:</span> <span class="s2">&quot;ps -aux&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;result&quot;</span> <span class="p">:</span> <span class="s2">&quot;output.txt&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;error&quot;</span> <span class="p">:</span> <span class="s2">&quot;error.txt&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Another file is in the directory initially called &#8216;do_it.txt&#8217; which can be empty.</p>

<h5>Take on the &#8216;chore&#8217;</h5>

<p>To take this &#8216;chore&#8217; on, a worker adds a &#8216;worker.json&#8217; file to the directory:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;chore_id&quot;</span> <span class="p">:</span>  <span class="s2">&quot;ip-1-2-3-4_ps-349467_20151022-110109-123456&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;work_id&quot;</span> <span class="p">:</span>  <span class="s2">&quot;ip-4-5-6-7_ps-1000_20151022-110209-123456&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;worker_id&quot;</span> <span class="p">:</span> <span class="s2">&quot;ip-4-5-6-7_ps-1000&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;work_start_tss&quot;</span> <span class="p">:</span> <span class="s2">&quot;20151022110209&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;state&quot;</span> <span class="p">:</span> <span class="s2">&quot;working&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;work_finish_tss&quot;</span> <span class="p">:</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>and renames the &#8216;do_it.txt&#8217; to &#8216;doing_it.txt&#8217;</p>

<p>When these changes commit and push successfully, this worker now owns the chore.  The worker can update the &#8216;worker.json&#8217;
through the work if desired, or put files into the directory or elsewhere.  When the chore is complete, the worker
should change worker.json to a finished state, and rename the &#8216;doing_it.txt&#8217; to &#8216;done.txt&#8217;.  With this,
the three states are:</p>

<ul>
<li>do_it.txt</li>
<li>doing_it.txt</li>
<li>done.txt</li>
</ul>


<p>And everyone can quickly tell what the state of a chore is without worrying about the details.  Or dive into the json
and results to figure out those details.</p>

<p>Visually it would look likte this:</p>

<p><img src="http://markfussell.emenar.com/images/addstack-9/addstack9_chore1.png" /></p>

<p><img src="http://markfussell.emenar.com/images/addstack-9/addstack9_chore2.png" /></p>

<p><img src="http://markfussell.emenar.com/images/addstack-9/addstack9_chore3.png" /></p>

<p>The script to acquire a chore is a little involved because of the possibility of failure, but basically it just</p>

<ul>
<li>Finds all the &#8216;doit.txt&#8217; files</li>
<li>Picks one at random</li>
<li>Tries to rename it and push that change

<ul>
<li>If successful, then we are in.  If not, roll-back</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">export </span><span class="nv">RANDOM_DO_IT</span><span class="o">=</span><span class="sb">`</span>find work -name <span class="s1">&#39;do_it.txt&#39;</span> | <span class="k">while </span><span class="nb">read </span>x; <span class="k">do </span><span class="nb">echo</span> <span class="s2">&quot;\`expr $RANDOM % 1000\`:$x&quot;</span>; <span class="k">done</span> | sort -n | sed <span class="s1">&#39;s/[0-9]*://&#39;</span> | head -1<span class="sb">`</span>
</span><span class='line'><span class="c">#...</span>
</span><span class='line'>git mv <span class="nv">$RANDOM_DO_IT</span> <span class="s2">&quot;${RANDOM_DO_IT_DIR}/doing_it.txt&quot;</span>
</span><span class='line'><span class="c">#...</span>
</span><span class='line'>git push
</span><span class='line'><span class="nv">PUSH_RETVAL</span><span class="o">=</span><span class="nv">$?</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> <span class="nv">$PUSH_RETVAL</span> -ne 0 <span class="o">]</span>;
</span><span class='line'><span class="k">then</span>
</span><span class='line'>
</span><span class='line'><span class="c">#=================================================</span>
</span><span class='line'><span class="c">#=== We failed to acquire, so roll-back</span>
</span><span class='line'><span class="c">#=================================================</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Doing the work</h4>

<p>A worker should alway be able to acquire:</p>

<ul>
<li>The root of the work repository – Say &#8220;${GIT_ROOT}&#8221;</li>
<li>The root of the chore itself – Say &#8220;${CHORE_ROOT}&#8221;</li>
</ul>


<p>Where the &#8220;GIT_ROOT&#8221; can have shared scripts in its &#8216;work/bin&#8217; or &#8216;bin&#8217; directories, and the chore can have
individual scripts in it CHORE_ROOT/bin directory.  We also likely have &#8216;repo2&#8217; available,
so we have access to a lot of resources (common and work specific) to leverage.</p>

<h4>Saving the work</h4>

<p>When the worker is done, it needs to do a final &#8216;write&#8217; of all the results.  This could be nothing more than
logs (a worker is &#8216;anonymous&#8217; and ephemeral, so ideally logs go to the chore&#8217;s directory vs. somewhere
effectively &#8216;random&#8217;).  This is just a final pull-push:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#=================================================</span>
</span><span class='line'><span class="c">#=== Done, try to write out the results</span>
</span><span class='line'><span class="c">#===</span>
</span><span class='line'><span class="c">#=== Make sure everything is annexed</span>
</span><span class='line'><span class="c">#=================================================</span>
</span><span class='line'>
</span><span class='line'>./bin/deflatePaths.sh <span class="s2">&quot;${RANDOM_DO_IT_DIR}&quot;</span>
</span><span class='line'>
</span><span class='line'>git pull
</span><span class='line'><span class="c">#...</span>
</span><span class='line'>
</span><span class='line'><span class="c">#=================================================</span>
</span><span class='line'><span class="c">#=== Pull successful, start writing</span>
</span><span class='line'><span class="c">#=================================================</span>
</span><span class='line'>
</span><span class='line'>git mv <span class="s2">&quot;${RANDOM_DO_IT_DIR}/doing_it.txt&quot;</span> <span class="s2">&quot;${RANDOM_DO_IT_DIR}/done.txt&quot;</span>
</span><span class='line'>
</span><span class='line'>git add -A <span class="s2">&quot;${RANDOM_DO_IT_DIR}/../&quot;</span>
</span><span class='line'>git commit -m <span class="s2">&quot;$ME completed chore ${RANDOM_DOIT_DIR}&quot;</span>
</span><span class='line'>
</span><span class='line'>git push
</span></code></pre></td></tr></table></div></figure>


<p>and as long as this is successful, the work is done.</p>

<h4>Jitter</h4>

<p>Although the randomization of chore selection helps with a lot of chores, it does not help when there are very few
chores left.  On the &#8216;go&#8217; of chore selection, all the workers go after the chore.  So we need to say &#8216;go&#8217; at
different times.  This brings back the &#8216;jitter&#8217; concept mentioned previously.  To jitter in this case, we just
create a &#8216;random&#8217; number and then modulo it by whatever jitter interval we want.</p>

<p>For example, using the process id plus the time stamp, and trying for a 0-29 range, we can have:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">TSS_SECOND</span><span class="o">=</span><span class="sb">`</span>date +%s<span class="sb">`</span>
</span><span class='line'><span class="nv">PSEUDO_RANDOM</span><span class="o">=</span><span class="s2">&quot;`expr ${TSS_SECOND} + $$`&quot;</span>
</span><span class='line'><span class="nv">SLEEP_LENGTH</span><span class="o">=</span><span class="k">$((${</span><span class="nv">PSEUDO_RANDOM</span><span class="k">}</span> <span class="o">%</span> <span class="m">30</span> <span class="k">))</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>

<p>The above is a very generic worker model that enables all kinds of flexibility in setting up &#8216;chores&#8217; and scalably
having a &#8216;right-size&#8217; for the number of workers doing the work.  The next article will be more specific and
build new &#8216;wars&#8217; every time the application changes after passing the built-in tests.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ADD Stack [Part-8]]]></title>
    <link href="http://markfussell.emenar.com/blog/addstack-8/"/>
    <updated>2015-10-20T01:00:00-07:00</updated>
    <id>http://markfussell.emenar.com/blog/addstack-8</id>
    <content type="html"><![CDATA[<p>This is the second series describing the ADD: a radically more productive development and delivery environment.  The
first article is here: <a href="http://markfussell.emenar.com/blog/addstack-1/">Intro</a> and described the truth and lies about developing software.
The second article dealt with &#8216;Testing&#8217;.  The third dealt with the application stack (Grails and other technologies).
The fourth discussed UI alternatives.  The fifth added some major aspects to the stack: Semi-Structured Data, Templates,
and Dual or Isomorphic scripting. The sixth discussed UI frameworks in a bit more detail and ended with an Angular vs.
Ember as a core choice.  The seventh went into logging, analytics, and monitoring of the running applications and nodes.</p>

<h2>Federation Application Infrastructure</h2>

<p>The application stack we have so far:</p>

<ul>
<li> UI (both client and server)</li>
<li> Application Server (Grails, Java, potentially scripting engine)</li>
<li> Database (Maria or similar)</li>
</ul>


<p>Is very capable.  Using it combined with the ADD ingredients:</p>

<ul>
<li> GitHub – With resource, presence, application, and configuration information repositories</li>
<li> EC2 Instances – Running continuously or based on load, and running their &#8216;part&#8217; plus any dynamic configuration</li>
<li> S3 – For resources</li>
<li> HipChat – To let everyone know</li>
</ul>


<p>Makes for a very functional application.  The nodes and their applications can talk to each other based on presence.
The nodes and their application can keep certain data in-memory (cached).  The nodes can
 launch other nodes to handle load or do certain tasks.  An Application Server is a very generic thing and
 can do pretty much anything.</p>

<h3>Standard Federation Components</h3>

<p>Doing pretty much anything and everything turns out to be very confusing.  For people.  Big monoliths of capabilities
are basically beyond comprehension.  And the bigger the monolith, the harder it falls.  The more likely it falls.
And even if you have redundant monoliths, the system becomes very painful to maintain and to learn.</p>

<!--more-->


<p>So instead of having the one super-capable application server, we can start breaking out some of the responsibilities
of the application server into other system components, and then decide whether we need them or not.  If we need
them, we will be using a very main-stream approach that is redundant, scalable, and easily managed.  It needs to &#8216;fit&#8217;
with our application, but it doesn&#8217;t have to be similar to the application (e.g. works with Java, written in Erlang,
runs on Linux).</p>

<p>The list of standard system components isn&#8217;t that long, but it is <em>longer than you need</em>.  If you are using all of these,
you are likely over-engineering your solution.  Try to start weaning yourself off some of this technology.</p>

<p>A partial list of federation components</p>

<ul>
<li>Cache – For rapidly retrieving information that changes slowly or needs to be shared broadly</li>
<li>Queue – For getting information from producers (requests) to consumers (workers)</li>
<li>Distributed State – For precise and consistent decision-making among several different entities</li>
<li>Semistructured Database – For persistently storing data in a faster or more flexible format than the main database</li>
<li>SSO (Single Sign-on) – To enable users to get access to various resources without the resources having to authenticate</li>
<li>&#8220;Chat&#8221; – Real-time presence and data communication enabling &#8216;chat&#8217; and various other capabilities</li>
<li>Map-Reduce – Taking large amounts of data and processing it to get answers to questions.  Can be real-time or not</li>
<li>Forum – Supporting forum capabilities for customers to talk with each other</li>
<li>Customer Support – Supporting customer-facing capabilities, including defect and product request tracking</li>
<li>SMS / Email / Contact – Ability to send out emails, SMS, surveys, and other customer contact</li>
<li>Web Site – A separate web site from the main application</li>
<li>Web Content Creator – An ability to enable users to create content within your site (vs. doing it via templating)</li>
<li>Payment Processing – Handling the record of credit cards and payment processing</li>
<li>Freetext Search – The ability to search documents and similar free text</li>
<li>Workers – Special nodes that do work and either go idle or disappear when no work is needed</li>
</ul>


<p>There are some more (e.g. the BI pipeline), but that is a pretty good list.  Especially the &#8216;Workers&#8217; is a category basically as broad as
&#8216;Application&#8217;.</p>

<p>Working through the list, here are some examples:</p>

<ul>
<li>Cache – Redis <a href="http://redis.io">http://redis.io</a></li>
<li>Queue – Kafka <a href="http://kafka.apache.org">http://kafka.apache.org</a></li>
<li>Distributed State - Presence in Git (for minutes), ZooKeeper (for sub-second) <a href="http://zookeeper.apache.org">http://zookeeper.apache.org</a> and Curator <a href="http://curator.apache.org/curator-recipes/index.html">http://curator.apache.org/curator-recipes/index.html</a></li>
<li>Semistructured Database – Riak  <a href="http://basho.com/products/">http://basho.com/products/</a></li>
<li>SSO – Shibboleth <a href="http://shibboleth.net">http://shibboleth.net</a></li>
<li>Chat – Ejabberd <a href="https://www.ejabberd.im">https://www.ejabberd.im</a></li>
<li>Map-Reduce – Spark <a href="https://spark.apache.org">https://spark.apache.org</a>,  Hadoop <a href="https://hadoop.apache.org">https://hadoop.apache.org</a></li>
<li>Forum –  phpBB <a href="https://www.phpbb.com">https://www.phpbb.com</a></li>
<li>Customer Support – Parature <a href="http://www.parature.com">http://www.parature.com</a></li>
<li>SMS / Email / Contact – SendGrid <a href="https://sendgrid.com">https://sendgrid.com</a> , Silverpop <a href="http://www-03.ibm.com/software/products/en/silverpop-engage">http://www-03.ibm.com/software/products/en/silverpop-engage</a> , SurveyMonkey <a href="https://www.surveymonkey.com">https://www.surveymonkey.com</a> , etc.</li>
<li>Web Site –  Expression Engine <a href="https://ellislab.com/expressionengine">https://ellislab.com/expressionengine</a> , Squarespace <a href="http://www.squarespace.com">http://www.squarespace.com</a></li>
<li>Web Content Creator – How about the original &#8216;wiki&#8217; <a href="http://wiki.org">http://wiki.org</a> or a more modern one like Foswiki <a href="http://foswiki.org">http://foswiki.org</a></li>
<li>Payment Processing – PayPal <a href="http://paypal.com">http://paypal.com</a> or even Facebook <a href="http://facebook.com">http://facebook.com</a> and Google <a href="http://google.com">http://google.com</a></li>
<li>Freetext Search – Solr <a href="http://lucene.apache.org/solr/">http://lucene.apache.org/solr/</a></li>
<li>Workers – All kinds of workers and frameworks for doing it, including AWS beanstalks <a href="http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/using-features-managing-env-tiers.html">http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/using-features-managing-env-tiers.html</a></li>
</ul>


<p>Sadly, Rumble did use almost all of the above (and more) in some way or another, but that is seriously off-the-chart
and incredibly expensive.  Yes, it is powerful.  No, your users do not care to pay you for that much power.</p>

<p>A company like Wikipedia/Wikimedia looks more like this:</p>

<p><img src="http://markfussell.emenar.com/images/addstack-8/addstack8_wikimedia1.png" /></p>

<h2>Conclusion</h2>

<p>It is good to understand what kinds of system components are out there and be aware that you don&#8217;t have to
reinvent / recode them when you need them.  Each of the above are good products.  They do what they should
to fill a particular need.  And almost all of them are
fault-tolerant and scalable, so they can join the rest of the <em>very tolerant</em> ADD stack.
Or they are a service and you get what you pay for.  If you really need
one of them, certainly bring it aboard.  It is better than creating a monolith.
But if you can do without it, your application and you IT will be easier to understand and maintain.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ADD Stack [Part-7]]]></title>
    <link href="http://markfussell.emenar.com/blog/addstack-7/"/>
    <updated>2015-10-19T01:00:00-07:00</updated>
    <id>http://markfussell.emenar.com/blog/addstack-7</id>
    <content type="html"><![CDATA[<p>This is the second series describing the ADD: a radically more productive development and delivery environment.  The
first article is here: <a href="http://markfussell.emenar.com/blog/addstack-1/">Intro</a> and described the truth and lies about developing software.
The second article dealt with &#8216;Testing&#8217;.  The third dealt with the application stack (Grails and other technologies).
The fourth discussed UI alternatives.  The fifth added some major aspects to the stack: Semi-Structured Data, Templates,
and Dual or Isomorphic scripting. The sixth discussed UI frameworks in a bit more detail and ended with an Angular vs.
Ember as a core choice.</p>

<h2>Logging, Analytics, and Monitoring</h2>

<p>Returning to a bit more of an &#8216;IT&#8217; issue, how do we handle logging, monitoring, and analytics on our collection of
machines?  There are a number of choices:</p>

<ol>
<li>Run our own infrastructure</li>
<li>Go with an inexpensive provider</li>
<li>Go with a more capable provider</li>
<li>Don&#8217;t</li>
</ol>


<p>Of the above, I believe #3 is usually worth it until your scale gets to the point of needing #1.  Downgrading
from #3 to #2 is fine <em>after</em> you have learned the capabilities you are giving up.</p>

<!--more-->


<h3>Logging: SumoLogic</h3>

<p>The longest standing, very successful, and SaaS capable company is Splunk (<a href="http://splunk.com/">http://splunk.com/</a>) .  But their prices are crazy.  Have no
idea how they can charge that much.  So instead I will demo SumoLogic (<a href="http://SumoLogic.com/">http://SumoLogic.com/</a>) as the &#8216;3B&#8217; tier.</p>

<p>Installing SumoLogic is incredibly easy:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>wget <span class="s2">&quot;https://collectors.us2.sumologic.com/rest/download/linux/64&quot;</span> -O SumoCollector.sh <span class="o">&amp;&amp;</span> chmod +x SumoCollector.sh <span class="o">&amp;&amp;</span> ./SumoCollector.sh -q -VskipDefaultSources<span class="o">=</span><span class="nb">true</span> -Vsumo.token_and_url<span class="o">={</span>token<span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And the collector is on the machine.  If you tell it what you want to aggregate, it starts collecting and indexing files in those paths.  In our case, the nodes
all have files in &#8216;/root/log&#8217; which it would be nice to have aggregated.</p>

<p>The results are visible here:</p>

<p><img src="http://markfussell.emenar.com/images/addstack-7/addstack7_sumo1.png" /></p>

<p><img src="http://markfussell.emenar.com/images/addstack-7/addstack7_sumo2.png" /></p>

<p><img src="http://markfussell.emenar.com/images/addstack-7/addstack7_sumo3.png" /></p>

<h4>Logging Alternative: Graylog</h4>

<p>For Rumble, we had a Graylog (<a href="http://graylog.com/">http://graylog.com/</a>) cluster that dealt with a tremendous amount of data (half a
terabyte a day if memory serves, due to over-enthusiastic logging) and was relatively stable under that load.
Elasticsearch had issues if a node failed (just due to the stress of moving data to another backup), but this
is under pretty extreme load levels.  So if you wanted to roll your own, the Graylog path would be a very
inexpensive and powerful path.</p>

<h3>Analytics and Monitoring: NewRelic</h3>

<p>NewRelic (<a href="http://newrelic.com/">http://newrelic.com/</a>) started out as a Ruby-oriented monitoring service, and basically came about because Ruby/Rails developers
(a) wanted a lot of information about why their apps were running slowly, (b) had very little knowledge about
operations and other ways of monitoring things, and (c) Ruby itself has little support for monitoring.  NewRelic
came along and provided the metrics (as you would expect for Java and similar mature languages) <em>outside</em> the
Ruby environment.  Initially this could be viewed as a crutch for Ruby where Java didn&#8217;t need it, but ultimately
by putting the metrics outside the application everyone&#8217;s life was simpler.</p>

<p>To install NewRelic, you need to get the agent onto the machine.  In our case we are going to leverage the annex:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#====================================================</span>
</span><span class='line'><span class="c">#=== Install NewRelic</span>
</span><span class='line'><span class="c">#====================================================</span>
</span><span class='line'>
</span><span class='line'><span class="c">#===================================</span>
</span><span class='line'><span class="c">#=== Server</span>
</span><span class='line'><span class="c">#===================================</span>
</span><span class='line'>
</span><span class='line'>rpm -Uvh http://download.newrelic.com/pub/newrelic/el5/i386/newrelic-repo-5-3.noarch.rpm
</span><span class='line'>yes | yum -y install newrelic-sysmond
</span><span class='line'>nrsysmond-config --set <span class="nv">license_key</span><span class="o">=</span>key
</span><span class='line'>
</span><span class='line'>/etc/init.d/newrelic-sysmond start
</span><span class='line'>
</span><span class='line'><span class="c">#===================================</span>
</span><span class='line'><span class="c">#=== Java</span>
</span><span class='line'><span class="c">#===================================</span>
</span><span class='line'>
</span><span class='line'><span class="nb">export </span><span class="nv">APP_VERSION</span><span class="o">=</span>3.21.0
</span><span class='line'><span class="nb">export </span><span class="nv">APP_FULL_VERSION</span><span class="o">=</span>newrelic-java-<span class="k">${</span><span class="nv">APP_VERSION</span><span class="k">}</span>
</span><span class='line'>
</span><span class='line'>mkdir -p .temp
</span><span class='line'>cp it/resource/<span class="k">${</span><span class="nv">APP_FULL_VERSION</span><span class="k">}</span>.zip .temp/
</span><span class='line'>
</span><span class='line'>./bin/inflatePaths.sh .temp/<span class="k">${</span><span class="nv">APP_FULL_VERSION</span><span class="k">}</span>.zip
</span><span class='line'>
</span><span class='line'>mkdir -p /opt
</span><span class='line'>cp -fr .temp/newrelic /opt/
</span><span class='line'>
</span><span class='line'>cp -fr <span class="k">${</span><span class="nv">RESOURCE</span><span class="k">}</span>/newrelic.yml /opt/newrelic/newrelic.yml
</span></code></pre></td></tr></table></div></figure>


<p>The first section puts on the system-monitoring agent for newrelic.
The second section has two parts.  The first part puts the general NewRelic agent onto the machine, and the second part
enables us to override (overlay) the default configuration with our own.  The most important part is to replace the
license, but there are many things that can be configured within the NewRelic agent.</p>

<p>Finally, we need to launch with the agent configuration into the java / &#8216;gradew&#8217; launcher:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.</span>
</span><span class='line'><span class="nv">DEFAULT_JVM_OPTS</span><span class="o">=</span><span class="s2">&quot;-javaagent:/opt/newrelic/newrelic.jar&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>After doing this and waiting for the metrics to hit the NewRelic servers, we get some nice visuals:</p>

<p><img src="http://markfussell.emenar.com/images/addstack-7/addstack7_newrelic2.png" />
<img src="http://markfussell.emenar.com/images/addstack-7/addstack7_newrelic4.png" />
<img src="http://markfussell.emenar.com/images/addstack-7/addstack7_newrelic5.png" />
<img src="http://markfussell.emenar.com/images/addstack-7/addstack7_newrelic6.png" />
<img src="http://markfussell.emenar.com/images/addstack-7/addstack7_newrelic7.png" />
<img src="http://markfussell.emenar.com/images/addstack-7/addstack7_newrelic7.png" /></p>

<h3>Operational Monitoring: Nagios and Icinga</h3>

<p>The above monitoring is not &#8216;alert&#8217; oriented.  It lets you drill into the details of what is happening
in operations both currently and somewhat into the past.  To be a bit more alert oriented, you need
to go down a different path.  The most mature open source path is the Nagios / Icinga double path (<a href="http://nagios.org/">http://nagios.org/</a>,
 <a href="http://icinga.org/">http://icinga.org/</a>).</p>

<p>An important aspect of monitoring is to have <em>multiple</em> monitors on your network.  And, in general, for the monitors
to be outside the data center.  Agents within the data center can relay information out, but if your monitors fail
inside the data center, you are (unknowingly) blind.</p>

<p>So for Nagios, we can demonstrate monitoring from the developers (or operations dashboard) machine vs.
within the data center.  Because of the presence being visible from anywhere, monitoring configuration can happen
anywhere that you can pull out a git repository.</p>

<p>Examples of Nagios views are:</p>

<p><img src="http://markfussell.emenar.com/images/addstack-7/addstack7_nagios1.png" /></p>

<p><img src="http://markfussell.emenar.com/images/addstack-7/addstack7_nagios2.png" /></p>

<p>Where the lists of hosts to monitor and what to monitor comes from text configuration files.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>define host <span class="o">{</span>
</span><span class='line'>   host_name   <span class="o">{</span>host_name<span class="o">}</span>
</span><span class='line'>   use         <span class="o">{</span>node_type<span class="o">}</span>
</span><span class='line'>   <span class="nb">alias</span>       <span class="o">{</span>node_id<span class="o">}</span>
</span><span class='line'>   address     <span class="o">{</span>node_public_address<span class="o">}</span>
</span><span class='line'>   register    <span class="o">{</span>registration_order<span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And these files can trivially be generated from the presence information, and updated if
anything changes.  An important aspect is to make sure to turn off the monitoring system
when a node is going down <em>intentionally</em>.  So the &#8216;node_state&#8217; status and &#8216;node_app_state&#8217;
status are critical to have come through the presence information for monitoring to
not be &#8216;noisy&#8217;.  A noisy monitor is a monitor that will quickly be forever ignored.</p>

<p>Although Nagios and Icinga have dashboards, everything should go into HipChat so everyone
can see the history and stability/instability of the system.  You can even publish the status
  publicly so your users will know there is a production problem. If you enable public chat
  in either HipChat or elsewhere, the users can both see the status and ask for predictions
  of when issues are resolved.  A much higher-touch relationship with users can make them
  longer users (this retention aspect was very true of Winster where the CEO was <em>online</em>
  and could be chatted with a good portion of the evening.  Kind of like walking the floors
  of the casino or Tim Cook being in the University Apple Store.).</p>

<h2>Conclusion</h2>

<p>Although it is more operational than &#8220;application stack&#8221;, the ability to monitor and analyze your
application&#8217;s performance and behavior is critical to any production deployment of it.  So you
should think about it early and not as an afterthought.  All logging should go into the logging pipeline
(no System.println or equivalent) and be searchable through that pipeline at one or more aggregators.
Start out with a metrics system like NewRelic to get a bunch  of valuable things for free
and you can later add in new application-specific metrics.
And get the basics of operational monitoring up early and you will know if the application and the
IT is reliable long before it gets into the production data center.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ADD Stack [Part-6]]]></title>
    <link href="http://markfussell.emenar.com/blog/addstack-6/"/>
    <updated>2015-10-17T01:00:00-07:00</updated>
    <id>http://markfussell.emenar.com/blog/addstack-6</id>
    <content type="html"><![CDATA[<p>This is the second series describing the ADD: a radically more productive development and delivery environment.  The
first article is here: <a href="http://markfussell.emenar.com/blog/addstack-1/">Intro</a> and described the truth and lies about developing software.
The second article dealt with &#8216;Testing&#8217;.  The third dealt with the application stack (Grails and other technologies).
The fourth discussed UI alternatives.  The fifth added some major aspects to the stack: Semi-Structured Data, Templates,
and Dual or Isomorphic scripting.</p>

<h2>Which UI framework?</h2>

<p>The <a href="http://markfussell.emenar.com/blog/addstack-4/">fourth article</a> discussed UI alternatives, but it was mostly about &#8216;architectural&#8217; alternatives
 and did not recommend a particular framework to use.  I believe that is the correct order: <em>how you use</em> the framework
 is usually more important than the framework itself.  People can correctly and improperly use all kinds of different technology.
Use a hammer correctly and you might have a slight penalty (rubber vs. metal), but
use it wrong (your thumb is targetable) and you can be seriously hurt.</p>

<p>There are a number of popular frameworks:</p>

<ul>
<li>Angular</li>
<li>Ember</li>
<li>Backbone</li>
<li>Sencha</li>
<li>etc.</li>
</ul>


<p>And deciding between them may seem like it should be done as &#8220;which has the best features?&#8221; but unless
one of them has a killer feature  that you care about
(Sencha can run the same code with both a desktop and mobile UI), and is worth its penalties (Sencha
is proprietary and very &#8216;different&#8217;) then &#8216;best features&#8217; is basically meaningless.  A better question is &#8220;Which
one do I understand the best?&#8221; and &#8220;Which one can other people on the team learn and share-code the best?&#8221;.</p>

<!--more-->


<p>Taking out &#8216;Sencha&#8217; from the above and you get a few different viewpoints on the web:</p>

<ul>
<li><a href="http://blog.yodersolutions.com/why-i-recommend-emberjs-over-angularjs/">http://blog.yodersolutions.com/why-i-recommend-emberjs-over-angularjs/</a></li>
<li><a href="https://www.airpair.com/js/javascript-framework-comparison">https://www.airpair.com/js/javascript-framework-comparison</a></li>
<li><a href="https://www.quora.com/Is-Angular-js-or-Ember-js-the-better-choice-for-JavaScript-frameworks">https://www.quora.com/Is-Angular-js-or-Ember-js-the-better-choice-for-JavaScript-frameworks</a></li>
</ul>


<p>And dropping Backbone, the distinction is really:</p>

<ul>
<li>Angular – Powerful, dry, and scale-limited framework</li>
<li>Ember – Less dry, more opinionated, and more scalable</li>
</ul>


<p>With Angular you have the ability to shoot yourself more and get confused more.  With Ember you will likely
have to be more explicit, but the convention and the explicitness should make the code more readable and
maintainable.</p>

<p>Angular is so similar to Flex that it is very intuitive to me (even directives), but I have seen it used
in ways I think the Angular team would be shocked by.  Sencha is confusing but is so mature, documented,
and powerfully-fragile (do something wrong and you get a terribly visible break) that you can&#8217;t really use it wrong.
Ember appears to have the advantages of Rails and Grails&#8230; as the framework innately &#8216;works&#8217; you can&#8217;t
really deviate very much.  Also, Ember causes certain ripples (handlebars vs. dust) so you need to
decide early whether you want complete alignment.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ADD Stack [Part-5]]]></title>
    <link href="http://markfussell.emenar.com/blog/addstack-5/"/>
    <updated>2015-10-16T01:00:00-07:00</updated>
    <id>http://markfussell.emenar.com/blog/addstack-5</id>
    <content type="html"><![CDATA[<p>This is the second series describing the ADD: a radically more productive development and delivery environment.  The
first article is here: <a href="http://markfussell.emenar.com/blog/addstack-1/">Intro</a> and described the truth and lies about developing software.
The second article dealt with &#8216;Testing&#8217;.  The third dealt with the application stack (Grails and other technologies).
The fourth discussed UI alternatives.</p>

<p>This article is about some fairly advanced capabilities, but capabilities that many projects find useful,
and so should be considered within the context of the overall context.  They are:</p>

<ul>
<li> Data Flexibility and Templating</li>
<li> Server Side Scripting</li>
</ul>


<h2>Data Flexibility and Template Systems</h2>

<p>One of the more interesting capability of an application is when users can control the content and presentation
of information.  Content is relatively easy given pure structured information is trivial to store in most
any database.  As the content becomes more unstructured you need to shift models and store it in a &#8216;meta&#8217;
structure like JSON.  As the content becomes bigger, you need the flexibility of very large objects (BLOBs and CLOBs)
stored either in the database or potentially within content repositories like S3.  Using the Annex model
discussed earlier, you can simply store a hash in the database and the actual content on S3, and then
<em>the client</em> can pull down the information without taxing your server network at all.</p>

<p>Having flexible data is not very useful unless you can present it.  If the data is in JSON, you need to
be able to take JSON and render it into text, HTML, or something the programming language can work with.
There are a number of template systems out there:</p>

<ul>
<li> Mustache</li>
<li> Jade</li>
<li> Dust</li>
</ul>


<!--more-->


<p>Deciding amongst them depends on who is going to be writing the template and &#8216;where&#8217; it is
going to execute.  But I recommend (a) making it language agnostic, (b) making it output agnostic,
and (c) making writing HTML templates a lot like writing HTML (and not something weird even if &#8220;more
powerful&#8221;).  I have seen a lot of developers argue that you should write HTML in some YAML like language.
That is like saying you should write Java in some LISP-like language.  It makes no sense to change
syntax that dramatically even if every language is computationally equivalent.  HTML is verbose
because people like that lack of ambiguity (The original SGML was much more ambiguous and powerful).
There are plenty of auto-complete tools out there that help with HTML.  And everyone can follow
&#8216;fragments&#8217; of HTML better because the fragment has so much redundant information.</p>

<p>Among the above, it seems that Dust <a href="http://dustjs.com/">http://dustjs.com/</a> is a well supported successor to Mustache / Handlebars.
Besides having LinkedIn support, it appears the company <a href="http://cloudcms.com/">http://cloudcms.com/</a> is using it as well.  There is
a comparison of frameworks at <a href="https://engineering.linkedin.com/frontend/client-side-templating-throwdown-mustache-handlebars-dustjs-and-more">Templating Throwdown</a></p>

<p>By combining an ability to retrieve arbitrary information with arbitrary templates, we can enable
a user to generate any page they want&#8230; either for themselves or for other people.</p>

<h3>Scary!</h3>

<p>OK, the above should seem both epic and <em>scary</em>.  A user can generate arbitrary HTML pages
including JavaScript?  Doesn&#8217;t that mean they could do <em>anything</em> including hijack another user?  Get
their password?  Stuff like that?</p>

<p>If you do it wrong&#8230; yes&#8230; yes they can.  Fortunately we have Facebook, MySpace and other companies that
show how to do it wrong and then fix the problem.  The general solution is:</p>

<ul>
<li>Users never authenticate with &#8216;The Page&#8217;.  They only authenticate with you.</li>
<li>You give the page a valid one-time token for that third party to contact you on behalf of a user</li>
<li>You make sure to verify the token before doing anything for the user, and only allow the page / third party to do things you (or the user) approve</li>
</ul>


<p>This model makes sure the third party is not doing anything dangerous to your site&#8230;
or at least not successfully doing anything.</p>

<h2>Server-Side Scripting</h2>

<p>Along with the data flexibility combined with templating described above, there is an even scarier and more powerful
option to enable within-server scripting.  This ability to have code be mutable at run-time enables some easy upgrades
and &#8216;forks&#8217; (customers doing their own thing) in exchange for much less surety that the code is running, some performance
trades, a more complex system model (flowing back and forth between JavaScript and Java), and potential for security
holes.  I have seen a number of systems have scripting and the most successful variations have been:</p>

<ul>
<li>Limited scripting to support customizing very controlled situations (e.g. Templating, Workflow, etc.)</li>
<li>Hog-wild scripting that enables customers to &#8216;fork&#8217; the code base, where that code base is being run on un-shared servers</li>
</ul>


<p>If you want to have a customizable product, the second approach is definitely very powerful.  Otherwise, the first is probably
safer and simpler.  An example of the benefits to server-side (and ultimately hybrid or &#8216;isomorphic&#8217;) is described well here:</p>

<ul>
<li> <a href="https://www.youtube.com/watch?v=pgvlHGi9VXM">https://www.youtube.com/watch?v=pgvlHGi9VXM</a></li>
<li> <a href="http://isomorphic.net">http://isomorphic.net</a></li>
</ul>


<h3>What scripting language?</h3>

<p>The obvious modern scripting language to use is JavaScript.  Because of its&#8217; pervasiveness in the browser, it is among
the better understood languages out there.  It also has a ridiculously simple and powerful language model (JS is a
(maybe accidental?) descendant of Self, which was an amazingly simple and powerful language too).  And although it does
not have a lot of libraries, running JavaScript via Nashorn enables you to call into the Java world.  A tutorial on
Nashorn is here:</p>

<ul>
<li><a href="http://winterbe.com/posts/2014/04/05/java8-nashorn-tutorial/">http://winterbe.com/posts/2014/04/05/java8-nashorn-tutorial/</a></li>
</ul>


<h2>Summary</h2>

<p>This article described augmenting both the server and the client by putting in three stack
&#8216;ingredients&#8217; that enable a lot of power (either broadly or in limited situations):</p>

<ul>
<li>Flexible/Semi-structured Data – JSON – On both the client and the server (and the database)</li>
<li>Templating – Dust – On both the client and the server (by the next one)</li>
<li>Scripting: Dual and Isomorphic – JavaScript / Nashorn – Both client and server can then have leverage the same scripting technologies, and potentially chose whether to run something on the server or on the client (or both to enhance SEO)</li>
</ul>


<p>These ingredients make for a much more powerful and flexible application.  These may be overkill for some projects, but
 they are definitely <em>generally useful</em> and whether &#8216;utilized&#8217; they should be considered &#8216;available&#8217; when needed.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ADD Stack [Part-4]]]></title>
    <link href="http://markfussell.emenar.com/blog/addstack-4/"/>
    <updated>2015-10-15T03:00:00-07:00</updated>
    <id>http://markfussell.emenar.com/blog/addstack-4</id>
    <content type="html"><![CDATA[<p>This is the second series describing the ADD: a radically more productive development and delivery environment.  The
first article is here: <a href="http://markfussell.emenar.com/blog/addstack-1/">Intro</a> and described the truth and lies about developing software.
The second article dealt with &#8216;Testing&#8217;.  The third with the application stack (Grails and other technologies).</p>

<h2>User Interface</h2>

<p>Of all the technologies that change, the User Interface is by far the most diverse and most evolved.  Modern
databases are actually pretty old technology.  Modern languages are not significantly different from ancestors
in the 1970s.  Computers have the same main components.  Programmers interact with them with keyboards and screens.
If you picked well, you are programming better (tens of thousands of hours help) but are sadly
on pretty much the same core concepts you learned in your first five thousand hours.  Sigh.</p>

<p>Except.  Except the User Interface.  The implementation of user interfaces has grown since the 70s (the
first bit-mapped and mouse-based UIs were built way back then) through Smalltalk, Objective-C, Flash, Flex,
Angular, and other paths.  But even the devices have changed.  An iPhone is not a computer.  An Apple Watch
is not an iPhone.  Times they are a changing&#8230; at least for &#8216;devices&#8217;.</p>

<h3>It&#8217;s your face</h3>

<p>The User Interface is also the &#8216;face&#8217; of a company.  It sells the company.  Whether to new customers, existing
customers, employees, stock holders, or potential investors.  A web site like Rumble&#8217;s:</p>

<ul>
<li><a href="http://rumblegames.com/">http://rumblegames.com/</a></li>
</ul>


<p><img src="http://markfussell.emenar.com/images/addstack-4/addstack4_ui1.png" /></p>

<p>And Rumble&#8217;s actual games are trying to appeal to a particular audience (middle aged men) and give
them something they want (to feel powerful and sophisticated).</p>

<p>A web site like PortaPlanter:</p>

<ul>
<li><a href="http://PortaPlanter.com/">http://PortaPlanter.com/</a></li>
</ul>


<p><img src="http://markfussell.emenar.com/images/addstack-4/addstack4_ui2.png" /></p>

<!--more-->


<p>is targeting a different audience (very broad, green-conscious, etc.) and trying to give them something they want
(to help the planet) where hopefully the product speaks mostly for itself so there are no &#8220;frills&#8221; on
the page.  The PortaPlanter site is currently a bit under-skinned, but even sophisticated product sites tend to
mostly <em>show the product</em> in isolation and in use.</p>

<p>The expense of the UI should never be under-estimated.  It is <em>by far</em> the most variable expense/investment a company
can control about their software products.  Like marketing.  Build everything <em>perfectly</em> and the UI will be
the only thing that can change the cost.  Well, next to &#8216;rapid feature changes&#8217; but that is more controllable
because you can turn it on and off.  The PortaPlanter web site cost a few thousand (mostly the pictures),
is trivial to maintain, and costs nothing to run (static hosting by GitHub).
The Rumble web site cost nearly a million dollars, is made from a very sophisticated PHP package
which costs thousands of dollars to do significant changes to, and hosting it costs thousands of dollars.
That is just the web site of the company, not the games themselves.</p>

<h3>What face do you want?</h3>

<p>The million-dollar Rumble site was primarily done by a company called Viget who came into Rumble and
showed us a bunch of different web sites based on certain aspects we told them we wanted.  The CEO
and his right hand were the primary &#8216;Customers&#8217; but we also had a graphic artist that has a great
eye for these things.  Working among the Rumble and Viget teams, we got what you see above.  It is
  implemented in Expression Engine (a PHP engine), but <em>the design</em> and <em>the capabilities</em> are the
  driving factor behind it&#8217;s cost not the implementation technology (although EE is overkill).</p>

<p>Using a firm like Viget is one approach, but another is to simply figure out what you want to look like.
Jerry Kaplan founded &#8216;Winster&#8217; to be an online gambling company.  That was originally illegal, so he
pivoted a bit, but if you look at the site&#8230; it looks like Vegas or Reno:</p>

<ul>
<li><a href="http://www.winster.com/">http://www.winster.com/</a></li>
</ul>


<p><img src="http://markfussell.emenar.com/images/addstack-4/addstack4_ui3.png" /></p>

<p>This is exactly what Jerry wanted.  He (the CEO) was the designer and the rest of us just implemented
 his vision (or face his wrath&#8230;)</p>

<p>Turns out this web site is somewhat expensive because it was initially built in Flash and Flex (and
when &#8216;converted&#8217; Jerry wanted to keep the feel).  So it needs to be quirkier than most web sites
 in spite of its graphic and content simplicity.</p>

<p>For all of my most recent startups, the Face was a huge part:</p>

<ul>
<li>Rumble – Powerful games for powerful people</li>
<li>PeerCase – Modern (iPad caliber), graphically elegant, but intuitive and medical (especially appealing to doctors)</li>
<li>Vive – Must make exercise seem like fun</li>
<li>FooMojo – Make sure virtual pets look as fun as real pets</li>
<li>Winster – Vegas or bust!</li>
</ul>


<p>and each one had a different front-end technology <em>in spite of</em> being written mostly by me and having fairly similar
 back-end technologies (Java, Rails, and Grails).  This isn&#8217;t because I like swapping out the front-end.  I offered
 to use Flex for all of them.  But Flex isn&#8217;t mobile.  And the mobile space was of concern to everyone but &#8216;Winster&#8217;.</p>

<h3>How do you implement?</h3>

<p>By now you may be groaning:</p>

<blockquote><p>OK. OK. I need to decide what &#8216;face&#8217; I want.  I will&#8230; I promise&#8230;
But what are the choices for implementation?
What is &#8216;plausibly&#8217; in the picture as a best implementation approach for the UI.</p></blockquote>

<p>This is pretty easy.  There are simply three productive and effective choices&#8230; with some variants within them.</p>

<ul>
<li>Static web site.  By far the most productive and effective if it fills your needs.  You don&#8217;t write HTML, but the site gets generated from a technology like Markdown.  This site is made that way.</li>
<li>Server-side rendering.  The next most productive and very effective if it fills your needs.  You don&#8217;t write HTML, you write something like GSPs which are templates that get expanded for each server hit.  The &#8216;petclinic&#8217; example is this kind of site.

<ul>
<li>Note this does not mean the client is doing nothing.  It may be doing a lot.  But the server is frequently interacted with to generate pages or partial-pages.</li>
</ul>
</li>
<li>Client-side rendering.  The most sophisticated (sort of) and if this can&#8217;t fill your need, you can always use either of the above.</li>
</ul>


<p>Some other approaches are &#8216;Native Application&#8217; or a &#8216;Native-enhanced web-app&#8217; but those need only be considered for very
particular needs.</p>

<p>Among the three main choices, only &#8216;Server&#8217; vs. &#8216;Client&#8217; lead down interesting paths.  There are lots of &#8216;static&#8217; tools so
that is more an experience and &#8216;taste&#8217; issue.  Markdown is great, but it isn&#8217;t for everyone.  And SAAS like SquareSpace
are very nice if they fill your needs.</p>

<h4>Server-side</h4>

<p>The interesting part about server-side rendering is it says <em>nothing</em> about the sophistication of the page.  Or the number
of pages (could be one&#8230; could be 1000).  I actually believe that server-side rendering must be considered the default
and then you can decide how much to branch off from there.  PeerCase was mostly a one-page-application (in Sencha) and
most of the client-server interaction was JSON.  But there were different versions of the one-page-application depending
on what kind of client hit the server.  The server bundled up the appropriate resources together and down-they-went.
Desktop clients made a lot a &#8216;asset&#8217; requests because they can handle them concurrently and cache them.
Mobile devices got a manifest and did an update in the background.</p>

<p>Grails is great at server-side rendering and can easily use Angular or any framework within each page.</p>

<p>An example of this is the &#8216;angular-grails3&#8217; project.  This is just a grails application that includes angular like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class='line'><span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">&quot;en&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;head&gt;</span>
</span><span class='line'>      <span class="nt">&lt;meta</span> <span class="na">http-equiv=</span><span class="s">&quot;Content-Type&quot;</span> <span class="na">content=</span><span class="s">&quot;text/html; charset=UTF-8&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;meta</span> <span class="na">http-equiv=</span><span class="s">&quot;X-UA-Compatible&quot;</span> <span class="na">content=</span><span class="s">&quot;IE=edge,chrome=1&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;title&gt;&lt;g:layoutTitle</span> <span class="na">default=</span><span class="s">&quot;Grails&quot;</span><span class="nt">/&gt;&lt;/title&gt;</span>
</span><span class='line'>      <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;viewport&quot;</span> <span class="na">content=</span><span class="s">&quot;width=device-width, initial-scale=1.0&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>          <span class="nt">&lt;asset:stylesheet</span> <span class="na">src=</span><span class="s">&quot;application.css&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;asset:script</span> <span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            angular.module(&#39;myApp.core.constants&#39;)
</span><span class='line'>                .constant(&#39;rootUrl&#39;, &#39;${grailsApplication.config.angular.rootUrl}&#39;)
</span><span class='line'>                .constant(&#39;pageSize&#39;, &#39;${grailsApplication.config.angular.pageSize}&#39;)
</span><span class='line'>                .constant(&#39;dateFormat&#39;, &#39;${grailsApplication.config.angular.dateFormat}&#39;);
</span><span class='line'>        <span class="nt">&lt;/asset:script&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;asset:javascript</span> <span class="na">src=</span><span class="s">&quot;application.js&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;asset:deferredScripts</span> <span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;g:layoutHead/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/head&gt;</span>
</span><span class='line'>  <span class="nt">&lt;body</span> <span class="na">id=</span><span class="s">&quot;ng-app&quot;</span> <span class="na">ng-app=</span><span class="s">&quot;${pageProperty(name: &#39;body.ng-app&#39;) ?: &#39;myApp&#39;}&quot;</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>and voilà, we have Angular running in a page that can access Grails configuration and application capabilities.</p>

<h4>Client-side</h4>

<p>Client-side rendering is really more like &#8216;separate client from server&#8217; development.
It is making &#8220;building the client&#8221; into somthing
that makes sense independent of the server.  Picking this over server-side rendering is making a few statements:</p>

<ul>
<li>We want to leverage &#8216;separate-client&#8217; technology</li>
<li>We may have people who are comfortable with &#8216;separate-client&#8217; technology and not with the server technology</li>
<li>We want to increase the chance that we don&#8217;t do something stupid that prevents us from swapping server or client</li>
</ul>


<p>An example of this approach is the &#8216;grails3-angular-duo&#8217; project which has a:</p>

<ul>
<li>backend – In grails</li>
<li>frontend – In Angular + Gulp, Bower, Karma, etc.</li>
</ul>


<p>And although you &#8216;hit the backend&#8217; to get your first web page, that actual page comes from
the frontend build system.  And in this case the &#8216;api&#8217; is pure REST.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kd">class</span> <span class="nc">UrlMappings</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">static</span> <span class="n">mappings</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>        <span class="s2">&quot;/$controller/$action?/$id?(.$format)?&quot;</span><span class="o">{</span>
</span><span class='line'>            <span class="n">constraints</span> <span class="o">{</span>
</span><span class='line'>                <span class="c1">// apply constraints here</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="s2">&quot;/&quot;</span><span class="o">(</span><span class="nl">redirect:</span><span class="s2">&quot;/frontend/index.html&quot;</span><span class="o">)</span>
</span><span class='line'>        <span class="s2">&quot;500&quot;</span><span class="o">(</span><span class="nl">view:</span><span class="s1">&#39;/error&#39;</span><span class="o">)</span>
</span><span class='line'>        <span class="s2">&quot;404&quot;</span><span class="o">(</span><span class="nl">view:</span><span class="s1">&#39;/notFound&#39;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="s2">&quot;/api/books&quot;</span><span class="o">(</span><span class="nl">resources:</span><span class="s2">&quot;book&quot;</span><span class="o">)</span>
</span><span class='line'>        <span class="s2">&quot;/api/authors&quot;</span><span class="o">(</span><span class="nl">resources:</span><span class="s2">&quot;author&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Interestingly, the front-end is now a mostly-static web site.  The content isn&#8217;t static because it depends on JSON,
but most everything else is locked down.  So this is in some ways <em>less</em> flexible than the server side rendering.
Fewer things can change without building another page and sending it out (deploying and referencing it).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!doctype html&gt;</span>
</span><span class='line'>  <span class="nt">&lt;head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">&quot;utf-8&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;meta</span> <span class="na">http-equiv=</span><span class="s">&quot;X-UA-Compatible&quot;</span> <span class="na">content=</span><span class="s">&quot;IE=edge&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;title&gt;&lt;/title&gt;</span>
</span><span class='line'>    <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;description&quot;</span> <span class="na">content=</span><span class="s">&quot;&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;viewport&quot;</span> <span class="na">content=</span><span class="s">&quot;width=device-width&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;shortcut icon&quot;</span> <span class="na">href=</span><span class="s">&quot;favicon.ico&quot;</span> <span class="na">type=</span><span class="s">&quot;image/x-icon&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- build:css styles/vendor.css --&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- bower:css --&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- endbower --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;bower_components/bootstrap/dist/css/bootstrap.css&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- endbuild --&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- build:css({.tmp,app}) styles/main.css --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;styles/main.css&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- endbuild --&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/head&gt;</span>
</span><span class='line'>  <span class="nt">&lt;body</span> <span class="na">ng-app=</span><span class="s">&quot;duo&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="c">&lt;!--[if lt IE 7]&gt;</span>
</span><span class='line'><span class="c">      &lt;p class=&quot;browsehappy&quot;&gt;You are using an &lt;strong&gt;outdated&lt;/strong&gt; browser. Please &lt;a href=&quot;http://browsehappy.com/&quot;&gt;upgrade your browser&lt;/a&gt; to improve your experience.&lt;/p&gt;</span>
</span><span class='line'><span class="c">    &lt;![endif]--&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;header&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;ul</span> <span class="na">class=</span><span class="s">&quot;nav nav-pills pull-right&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">&quot;active&quot;</span><span class="nt">&gt;&lt;a</span> <span class="na">ng-href=</span><span class="s">&quot;#&quot;</span><span class="nt">&gt;</span>Home<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'>        <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">ng-href=</span><span class="s">&quot;#&quot;</span><span class="nt">&gt;</span>About<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'>        <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">ng-href=</span><span class="s">&quot;#&quot;</span><span class="nt">&gt;</span>Contact<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'>      <span class="nt">&lt;h3</span> <span class="na">class=</span><span class="s">&quot;text-muted&quot;</span><span class="nt">&gt;</span>DUO<span class="nt">&lt;/h3&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;jumbotron&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;h1&gt;</span>Grails Angular Duo Sample<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">&lt;!-- Add your site or application content here --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;container&quot;</span> <span class="na">ng-view=</span><span class="s">&quot;&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;footer&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;p&gt;</span>Using : AngularJS, ngRoute, Restangular<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">&lt;!-- build:js scripts/vendor.js --&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- bower:js --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;bower_components/jquery/dist/jquery.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;bower_components/angular/angular.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;bower_components/angular-animate/angular-animate.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;bower_components/angular-aria/angular-aria.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;bower_components/angular-cookies/angular-cookies.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;bower_components/angular-messages/angular-messages.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;bower_components/angular-route/angular-route.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;bower_components/angular-sanitize/angular-sanitize.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;bower_components/angular-touch/angular-touch.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;bower_components/bootstrap/dist/js/bootstrap.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;bower_components/lodash/lodash.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;bower_components/restangular/dist/restangular.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- endbower --&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- endbuild --&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">&lt;!-- build:js({.tmp,app}) scripts/scripts.js --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;scripts/app.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;scripts/controllers/list-author.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;scripts/controllers/create-author.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;scripts/controllers/edit-author.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- endbuild --&gt;</span>
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Hybrid</h4>

<p>OK, so I simplified above to get through the main concepts.  Both server-side and separate-client can be
transformed into the most powerful approach known to man&#8230; the &#8216;anything goes&#8217; or &#8216;hybrid&#8217; approach.</p>

<p>Render client, render server, send JSON, receive JSON, send POST, receive POST, open up a direct socket,
send data or HTML both directions, hook into the device&#8217;s capabilities. take over the camera and capture
 photos of the user, post to twitter, etc.</p>

<p>The problems with Hybrid approaches are:</p>

<ul>
<li>To quantify &#8220;What is allowed&#8221; and &#8220;What is not&#8221;</li>
<li>To have a coherent model</li>
<li>To have people understand the model</li>
</ul>


<p>Winster had a very good hybrid model by the time I left (product development had basically ended and Jerry was working solely on Marketing)</p>

<ul>
<li>You hit a Java server</li>
<li>It sends you a Flex application</li>
<li>Most communication is based on JSON calls to the server</li>
<li>But updates to games, chats, and presence come through an open socket</li>
</ul>


<p>The reason for the socket is that you needed to be told of <em>other people&#8217;s</em> actions.  Some technology (e.g. comet or the socket)
that can &#8220;push&#8221; updates to the client had to be used for this.  Early on, a previous architect picked sockets, and although the protocol through the socket
improved / evolved, the actual use-of-socket was not swapped out.</p>

<p>Rumble had an extreme hybrid model involving mostly open sockets to game servers,
but also ejabberd (XMPP), JSON, and a slew of different technologies solving different problems.
The drawback of using third-party technologies is that they bring in different approaches to client-server
communication.</p>

<h3>Conclusion</h3>

<p>The goal of the UI is to present a good, cost-effective, consistent, and sufficiently capable &#8216;face&#8217; to your
 users and prospects.  There are a number of different approaches that have different benefits.</p>

<p> I recommend
 starting from the position of server-side rendering because that gives a lot of power with almost no extra cost.  It makes people
 work with the entire application and reduces chances of &#8216;schisms&#8217; within the development team.  On the
 other hand, &#8216;separate client&#8217; technologies are quite good and by thinking &#8216;separate client&#8217; you may produce
 a somewhat better API.  But a &#8216;schism&#8217; is more likely, testing is harder, and the separate client is
 less flexible in how it can integrate with the server (at least for &#8216;free&#8217;).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ADD Stack [Part-3]]]></title>
    <link href="http://markfussell.emenar.com/blog/addstack-3/"/>
    <updated>2015-10-15T02:00:00-07:00</updated>
    <id>http://markfussell.emenar.com/blog/addstack-3</id>
    <content type="html"><![CDATA[<p>This is the second series describing the ADD: a radically more productive development and delivery environment.  The
first article is here: <a href="http://markfussell.emenar.com/blog/addstack-1/">Intro</a> and described the truth and lies about developing software.
The second article dealt with &#8216;Testing&#8217;.</p>

<h2>Grails, Groovy, and Java</h2>

<p>The primary stack I believe is a &#8220;Best Practice&#8221; is Grails.  It is in it&#8217;s third full generation, and with
each generation it gets better, easier, more powerful, and more &#8216;aligned&#8217;.  This last part is not that
common with frameworks.  A lot of people start writing a framework and it does more and more.  With more and more
code.  The Grails team has been great at &#8216;pruning&#8217; and &#8216;aligning&#8217; with Spring and other frameworks.</p>

<p>Using Spring alone is certainly a reasonable practice.  The problem is people tend to use Spring wrong.  I don&#8217;t
know why.  Either they don&#8217;t read the tutorials&#8230; or they get confused and a deadline is approaching&#8230; or they
are cowboys (or cowgirls) that wander off into new territory of abuse to the tools that are in front of them.
I used Grails at a company that committed to Spring.  So I simply switched to Spring and my code was simple,
functional, well-tested, and clean.  But the rest of the code base was a complete mess.  So there is nothing
wrong with Spring but it is harder to use properly than Grails.  Spring Boot is trying to help with that.  Grails
is just better.</p>

<p>Grails is &#8216;opinionated&#8217; and &#8216;functional&#8217; and has plenty of examples to show you these opinions and capabilities.
We can see a lot of it in the &#8216;petclinic&#8217; example.</p>

<h3>Build with Gradle</h3>

<p>Grails uses Gradle to build the project.  It used to have it&#8217;s own system, but it pruned that away when Gradle
became stable and capable.  Gradle won a war against other build systems so Grails honored the winner.</p>

<p><img src="http://markfussell.emenar.com/images/addstack-3/addstack3_grails1.png" /></p>

<h3>Align with Spring Boot</h3>

<!--more-->


<p>Spring Boot (<a href="http://projects.spring.io/spring-boot/">http://projects.spring.io/spring-boot/</a>)
is a relatively recent effort to &#8216;default&#8217; a lot of the flexibility within Spring.  So Grails
is now leveraging that effort.  Developing with Grails vs. Spring is becoming just a &#8216;small&#8217; step up
conceptually so it should be easier for people to &#8216;level up&#8217; and also &#8216;wander down&#8217; depending on the needs
of the project.</p>

<p><img src="http://markfussell.emenar.com/images/addstack-3/addstack3_grails2.png" /></p>

<h3>Align with Hibernate, but allow others (include NoSQL)</h3>

<p>Grails has always used Hibernate as the primary database mapping system but it is actually capable of mapping
through GORM to other systems.  Some capabilities go away but basic schema and query capability (CRUD)
is always there.  And depending on the product, some higher level query capabilities may also be present.</p>

<h3>Use modern testing frameworks</h3>

<p>As mentioned before: &#8216;geb&#8217; and &#8216;spock&#8217; are the default testing frameworks included, along with the default
phantomjsdriver and selenium-htmlunit-driver (headless).  This is out-of-the-box, and other testing frameworks
could be used instead or in addition, but there would have to be a compelling reason for it.</p>

<h3>Modern asset pipeline</h3>

<p>Asset management is a big deal for performant websites.  Although the internet is pretty quick, the behavior
of mobile devices is a bit different from (and back a few years from) desktops.  Grails has its own asset
pipeline system that leverages the well-defined layout of a Grails project.</p>

<h3>Good IDE integration</h3>

<p>Grails integrates with IDEA and Eclipse, which are the best (IMO) and most-pervasive (I believe) IDEs
for Java development.</p>

<h3>Plugins!</h3>

<p>Grails has a very simple and powerful plugin system that adds lots of great capabilities.
With the move to 3.x some plugins may not yet be ready, but every month several more should be migrated.</p>

<h3>Standard Layout: assets, controllers, services, views, &#8230;</h3>

<p>Grails has a very clean layout that is mostly aligned with Spring Boot (I believe) and has been mostly
the same over all three generations.  The &#8216;src&#8217; directory is for things outside the Grails world.  And
the &#8216;grails-app&#8217; directory is for things inside the Grails world.  The grails layout is very intuitive
for a modern web application:</p>

<ul>
<li>assets – Assets to go through the pipeline</li>
<li>conf - Configuration of the application</li>
<li>controllers – The UI (or web-api) interaction layer of the application</li>
<li>domain – The business model layer of the application, and the persistent state model</li>
<li>i18n – Internationalization</li>
<li>init – Things to do at startup</li>
<li>services – One or more &#8216;services&#8217; layers to pull logic from controllers and domain into</li>
<li>views – GSP to be used by controllers for rendering (if desired)</li>
</ul>


<p>For the petclinic this layout looks like this when expanded:</p>

<p><img src="http://markfussell.emenar.com/images/addstack-3/addstack3_grails3.png" /></p>

<h3>Modern logging with &#8216;logback&#8217;</h3>

<p>Logging is one of the easiest things to swap out, but Grails defaults to the relatively modern &#8216;logback&#8217;
<a href="http://logback.qos.ch">http://logback.qos.ch</a> framework.</p>

<p><img src="http://markfussell.emenar.com/images/addstack-3/addstack3_grails4.png" /></p>

<h3>Incredibly terse</h3>

<p>One of the horrors of moving from Smalltalk to Java was about 4-8x the number of words were required to
accomplish the same task.  Writing more is painful.  Painful to write.  Painful to read.  Painful to edit.</p>

<p>With Groovy and Grails, the power of meaning actually leap-frogged both Smalltalk and (amazingly) LISP.
Or at least LISP without a really powerful set of macros.</p>

<p>As an example, the &#8216;PetController&#8217; is the main UI functionality of the &#8216;petclinic&#8217;.  But it has only 53 lines,
a third of them are blank.  And a total of 150 &#8216;words&#8217;.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kn">package</span> <span class="n">org</span><span class="o">.</span><span class="na">grails</span><span class="o">.</span><span class="na">samples</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">PetController</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">def</span> <span class="n">petclinicService</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">def</span> <span class="nf">add</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">request</span><span class="o">.</span><span class="na">method</span> <span class="o">==</span> <span class="s1">&#39;GET&#39;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="o">[</span><span class="nl">pet:</span> <span class="k">new</span> <span class="n">Pet</span><span class="o">(</span><span class="nl">owner:</span> <span class="n">Owner</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">params</span><span class="o">.</span><span class="na">owner</span><span class="o">?.</span><span class="na">id</span><span class="o">)),</span> <span class="nl">types:</span> <span class="n">PetType</span><span class="o">.</span><span class="na">list</span><span class="o">()]</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="kt">def</span> <span class="n">pet</span> <span class="o">=</span> <span class="n">petclinicService</span><span class="o">.</span><span class="na">createPet</span><span class="o">(</span><span class="n">params</span><span class="o">.</span><span class="na">pet_name</span><span class="o">,</span> <span class="n">params</span><span class="o">.</span><span class="na">pet</span><span class="o">?.</span><span class="na">birthDate</span><span class="o">,</span>
</span><span class='line'>          <span class="o">(</span><span class="n">params</span><span class="o">.</span><span class="na">pet</span><span class="o">?.</span><span class="na">type</span><span class="o">?.</span><span class="na">id</span> <span class="o">?:</span> <span class="mi">0</span><span class="o">)</span> <span class="k">as</span> <span class="n">Long</span><span class="o">,</span> <span class="o">(</span><span class="n">params</span><span class="o">.</span><span class="na">pet_owner_id</span> <span class="o">?:</span> <span class="mi">0</span><span class="o">)</span> <span class="k">as</span> <span class="n">Long</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">pet</span><span class="o">.</span><span class="na">hasErrors</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="o">[</span><span class="nl">pet:</span> <span class="n">pet</span><span class="o">,</span> <span class="nl">types:</span> <span class="n">PetType</span><span class="o">.</span><span class="na">list</span><span class="o">()]</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">redirect</span> <span class="nl">controller:</span> <span class="s1">&#39;owner&#39;</span><span class="o">,</span> <span class="nl">action:</span> <span class="s1">&#39;show&#39;</span><span class="o">,</span> <span class="nl">id:</span> <span class="n">pet</span><span class="o">.</span><span class="na">owner</span><span class="o">.</span><span class="na">id</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">def</span> <span class="nf">edit</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">request</span><span class="o">.</span><span class="na">method</span> <span class="o">==</span> <span class="s1">&#39;GET&#39;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">render</span> <span class="nl">view:</span> <span class="s1">&#39;add&#39;</span><span class="o">,</span> <span class="nl">model:</span> <span class="o">[</span><span class="nl">pet:</span> <span class="n">Pet</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">params</span><span class="o">.</span><span class="na">id</span><span class="o">),</span> <span class="nl">types:</span> <span class="n">PetType</span><span class="o">.</span><span class="na">list</span><span class="o">()]</span>
</span><span class='line'>          <span class="k">return</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="kt">def</span> <span class="n">pet</span> <span class="o">=</span> <span class="n">Pet</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">params</span><span class="o">.</span><span class="na">id</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">petclinicService</span><span class="o">.</span><span class="na">updatePet</span><span class="o">(</span><span class="n">pet</span><span class="o">,</span> <span class="n">params</span><span class="o">.</span><span class="na">pet_name</span><span class="o">,</span> <span class="n">params</span><span class="o">.</span><span class="na">pet</span><span class="o">?.</span><span class="na">birthDate</span><span class="o">,</span>
</span><span class='line'>          <span class="o">(</span><span class="n">params</span><span class="o">.</span><span class="na">pet</span><span class="o">?.</span><span class="na">type</span><span class="o">?.</span><span class="na">id</span> <span class="o">?:</span> <span class="mi">0</span><span class="o">)</span> <span class="k">as</span> <span class="n">Long</span><span class="o">,</span> <span class="o">(</span><span class="n">params</span><span class="o">.</span><span class="na">pet_owner_id</span> <span class="o">?:</span> <span class="mi">0</span><span class="o">)</span> <span class="k">as</span> <span class="n">Long</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">pet</span><span class="o">.</span><span class="na">hasErrors</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">render</span> <span class="nl">view:</span> <span class="s1">&#39;add&#39;</span><span class="o">,</span> <span class="nl">model:</span> <span class="o">[</span><span class="nl">pet:</span> <span class="n">pet</span><span class="o">,</span> <span class="nl">types:</span> <span class="n">PetType</span><span class="o">.</span><span class="na">list</span><span class="o">()]</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">redirect</span> <span class="nl">controller:</span> <span class="s1">&#39;owner&#39;</span><span class="o">,</span> <span class="nl">action:</span> <span class="s1">&#39;show&#39;</span><span class="o">,</span> <span class="nl">id:</span> <span class="n">pet</span><span class="o">.</span><span class="na">owner</span><span class="o">.</span><span class="na">id</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">def</span> <span class="nf">addVisit</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">request</span><span class="o">.</span><span class="na">method</span> <span class="o">==</span> <span class="s1">&#39;GET&#39;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="o">[</span><span class="nl">visit:</span> <span class="k">new</span> <span class="n">Visit</span><span class="o">(</span><span class="nl">pet:</span> <span class="n">Pet</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">params</span><span class="o">.</span><span class="na">id</span><span class="o">))]</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="kt">def</span> <span class="n">visit</span> <span class="o">=</span> <span class="n">petclinicService</span><span class="o">.</span><span class="na">createVisit</span><span class="o">((</span><span class="n">params</span><span class="o">.</span><span class="na">visit</span><span class="o">?.</span><span class="na">pet</span><span class="o">?.</span><span class="na">id</span> <span class="o">?:</span> <span class="mi">0</span><span class="o">)</span> <span class="k">as</span> <span class="n">Long</span><span class="o">,</span> <span class="n">params</span><span class="o">.</span><span class="na">visit</span><span class="o">?.</span><span class="na">description</span><span class="o">,</span> <span class="n">params</span><span class="o">.</span><span class="na">visit</span><span class="o">?.</span><span class="na">date</span><span class="o">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">visit</span><span class="o">.</span><span class="na">hasErrors</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="o">[</span><span class="nl">visit:</span> <span class="n">visit</span><span class="o">]</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">redirect</span> <span class="nl">controller:</span> <span class="s1">&#39;owner&#39;</span><span class="o">,</span> <span class="nl">action:</span> <span class="s1">&#39;show&#39;</span><span class="o">,</span> <span class="nl">id:</span> <span class="n">visit</span><span class="o">.</span><span class="na">pet</span><span class="o">.</span><span class="na">owner</span><span class="o">.</span><span class="na">id</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>It&#8217;s functionality is not amazing.  But most things people need to do on the web <em>are not amazing</em>.  They are
basically CRUD (Create, Read, Update, Delete).  Include dealing with all kinds of media (documents, images, videos, etc.)
and 99%+ of the web is just doing CRUD.  90%+ is just Read.</p>

<h4>Automatic Wiring</h4>

<p>A lot of things are happening with this controller.  The simple statement</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kt">def</span> <span class="n">petclinicService</span>
</span></code></pre></td></tr></table></div></figure>


<p>gets automatically wired to PetclinicService in the services folder.</p>

<h4>Automatic Rendering</h4>

<p>The line</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'>       <span class="k">return</span> <span class="o">[</span><span class="nl">pet:</span> <span class="k">new</span> <span class="n">Pet</span><span class="o">(</span><span class="nl">owner:</span> <span class="n">Owner</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">params</span><span class="o">.</span><span class="na">owner</span><span class="o">?.</span><span class="na">id</span><span class="o">)),</span> <span class="nl">types:</span> <span class="n">PetType</span><span class="o">.</span><span class="na">list</span><span class="o">()]</span>
</span></code></pre></td></tr></table></div></figure>


<p>causes the view &#8216;pet/add.gsp&#8217; to render with that &#8216;pet&#8217; and &#8216;types&#8217; property set.  So the HTML can also be
quite terse:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'>  <span class="nt">&lt;head&gt;</span>
</span><span class='line'>      <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;layout&quot;</span> <span class="na">content=</span><span class="s">&quot;main&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;title&gt;</span>${ pet.id ? &#39;Update&#39; : &#39;Add&#39;} Pet<span class="nt">&lt;/title&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/head&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;body</span> <span class="na">id=</span><span class="s">&quot;add&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;h2&gt;&lt;g:if</span> <span class="na">test=</span><span class="s">&quot;${!pet.id}&quot;</span><span class="nt">&gt;</span>New <span class="nt">&lt;/g:if&gt;</span>Pet<span class="nt">&lt;/h2&gt;</span>
</span><span class='line'>
</span><span class='line'>      <span class="nt">&lt;b&gt;</span>Owner:<span class="nt">&lt;/b&gt;</span> ${pet.owner?.firstName} ${pet.owner?.lastName}
</span><span class='line'>      <span class="nt">&lt;br/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Powerful redirect and delegation</h4>

<p>Grails can control the client with redirects or delegate to other controllers behind the scenes.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'>   <span class="n">redirect</span> <span class="nl">controller:</span> <span class="s1">&#39;owner&#39;</span><span class="o">,</span> <span class="nl">action:</span> <span class="s1">&#39;show&#39;</span><span class="o">,</span> <span class="nl">id:</span> <span class="n">pet</span><span class="o">.</span><span class="na">owner</span><span class="o">.</span><span class="na">id</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Very flexibly Services</h4>

<p>The PetclinicService is transactional so it can save objects within an automatic transaction.  But this
is optional and can be controlled.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kd">class</span> <span class="nc">PetclinicService</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// PetController</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">Pet</span> <span class="nf">createPet</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="n">Date</span> <span class="n">birthDate</span><span class="o">,</span> <span class="kt">long</span> <span class="n">petTypeId</span><span class="o">,</span> <span class="kt">long</span> <span class="n">ownerId</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="kt">def</span> <span class="n">pet</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Pet</span><span class="o">(</span><span class="nl">name:</span> <span class="n">name</span><span class="o">,</span> <span class="nl">birthDate:</span> <span class="n">birthDate</span><span class="o">,</span> <span class="nl">type:</span> <span class="n">PetType</span><span class="o">.</span><span class="na">load</span><span class="o">(</span><span class="n">petTypeId</span><span class="o">),</span> <span class="nl">owner:</span> <span class="n">Owner</span><span class="o">.</span><span class="na">load</span><span class="o">(</span><span class="n">ownerId</span><span class="o">))</span>
</span><span class='line'>      <span class="n">pet</span><span class="o">.</span><span class="na">save</span><span class="o">()</span>
</span><span class='line'>      <span class="n">pet</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Super-clean domain classes</h4>

<p>A modern tendency is to have domain classes mostly represent the data side of the Domain object and pull the
higher level logic out into other classes.  Although I dislike this (why have two classes), it does work
better with automatic schema generation and migration.  You are less likely to have to restart the container
and make the system check for data migration issues.</p>

<p>Grails supports a very simple, rich, mapping system called GORM.  And with it, the Domain class is very terse
but also very powerful.  And GORM works on multiple database <em>kinds</em> let alone products.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kn">package</span> <span class="n">org</span><span class="o">.</span><span class="na">grails</span><span class="o">.</span><span class="na">samples</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Simple domain object representing a pet.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * @author Graeme Rocher</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">class</span> <span class="nc">Pet</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">String</span> <span class="n">name</span>
</span><span class='line'>  <span class="n">Date</span> <span class="n">birthDate</span>
</span><span class='line'>  <span class="n">PetType</span> <span class="n">type</span>
</span><span class='line'>  <span class="n">Owner</span> <span class="n">owner</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">static</span> <span class="n">hasMany</span> <span class="o">=</span> <span class="o">[</span><span class="nl">visits:</span> <span class="n">Visit</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">static</span> <span class="n">constraints</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">name</span> <span class="nl">blank:</span> <span class="kc">false</span><span class="o">,</span> <span class="nl">validator:</span> <span class="o">{</span> <span class="n">name</span><span class="o">,</span> <span class="n">pet</span> <span class="o">-&gt;</span>
</span><span class='line'>          <span class="k">if</span> <span class="o">(!</span><span class="n">pet</span><span class="o">.</span><span class="na">id</span> <span class="o">&amp;&amp;</span> <span class="n">pet</span><span class="o">.</span><span class="na">owner</span><span class="o">?.</span><span class="na">pets</span><span class="o">?.</span><span class="na">find</span> <span class="o">{</span> <span class="n">it</span><span class="o">.</span><span class="na">name</span> <span class="o">==</span> <span class="n">name</span> <span class="o">})</span>  <span class="o">{</span>
</span><span class='line'>              <span class="k">return</span> <span class="s1">&#39;pet.duplicate&#39;</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Apparently Graeme doesn&#8217;t want people to have duplicate pet names :-/</p>

<h2>Summary</h2>

<p>There is much more functionality to Grails than described above, but that is a good, quick, walk-through.  There
are also certain conventions I believe are best practices on top of the Grails framework (e.g. &#8216;RepoService&#8217; classes
for Domain objects so functionality is easily and consistently located), but again that is an augmentation vs. being
a requirement to getting a good picture of the system.</p>

<p>Next I will go into the UI portion and options for that.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ADD Stack [Part-2]]]></title>
    <link href="http://markfussell.emenar.com/blog/addstack-2/"/>
    <updated>2015-10-15T01:00:00-07:00</updated>
    <id>http://markfussell.emenar.com/blog/addstack-2</id>
    <content type="html"><![CDATA[<p>This is the second series describing the ADD: a radically more productive development and delivery environment.  The
first article is here: <a href="http://markfussell.emenar.com/blog/addstack-1/">Intro</a> and described the truth and lies about developing software.
Basically, assuming you are doing everything in the first series, and are using relatively modern technologies
and techniques, the &#8216;language&#8217;, &#8216;framework&#8217;, &#8216;stack&#8217;, and &#8216;methodology&#8217; does not matter very much.
And how it matters has a lot to do with the development team and the customer.
Customer happiness is the ultimate goal, so if you are not making your customer happy, you should make incremental
adjustments (Educated Guesses) to do so.  And if you can not &#8220;continuously&#8221; deliver valuable products to the
customer, you need to figure out what is the bottleneck and get rid of it (e.g. google Throughput Accounting).</p>

<h2>Testing</h2>

<blockquote><p>&#8220;Hey&#8230; you said testing wasn&#8217;t important&#8221;</p></blockquote>

<p>No, I said automated testing was not <em>necessary</em>.  At times it is not even <em>valuable</em>, but at other times it is.</p>

<p>There is no way to avoid &#8216;Testing&#8217; unless no one is going to use your product.  &#8216;Using&#8217; is &#8216;Testing&#8217;, so everything
useful is continuously tested.  You have one user, you have one tester.  A million users, a million testers.
So you can&#8217;t avoid testing you software.  You can only augment/change <em>who</em> or <em>what</em> tests your software.  There
 are a number of options:</p>

<!--more-->


<ul>
<li>Users – Guaranteed unless you have none</li>
<li>Developers – Should, unless they are crazy.  Not &#8216;testing&#8217; your software is equivalent to not reading (and editing) what you wrote.</li>
<li>Product Management – Should, unless they are crazy or really confident in the development team.  Product management is the Customer and represents the Users.  They are supposed to know what the users want and need to verify the product is doing the right thing</li>
<li>Quality Assurance – Useful if they are really good at being a &#8216;Black Hat&#8217;.  This is a different skill from &#8216;Developing&#8217; and some people are very good at it

<ul>
<li>QA should report to Product Management in spite of having technical skills similar to software developers</li>
</ul>
</li>
</ul>


<p>You could have a few more kinds of people that are stake holders, but the above is the core sources.  These are
people who could know what the software is supposed to do, and then test whether it is doing it.  They have
different talents, different tolerance for failure, and different price-points (or time restrictions).  So choosing
the right balance is again a &#8216;Make Customer Happy&#8217; (given a particular budget) ratio of utilization.</p>

<h3>Automation</h3>

<p>The above lists people.  This is because people have to do the hard work of figuring out &#8216;What should it do?&#8217; and
&#8216;How do I tell it is doing it?&#8217;.  It is true there are some automated test generators&#8230; but they are a rare
and limited breed that do a little bit more than a &#8216;static typed&#8217; language would do.  The benefits for most project
are minimal.</p>

<p>So &#8216;automated testing&#8217; is rarely about generation, but more about repetition.  Doing a manual test over and over
by a human is much more expensive, time consuming, and failure prone to getting a computer to run a similar test
against software.  The problem is someone has to &#8216;spend time&#8217; writing the test.  And time is both money and delay.</p>

<p>But maybe the tests are (magically) free.  Are they worth it?  Are they valuable?  Possibly &#8220;No!&#8221;.
Testing does not make software better.
Testing just proves software does something that passes the test.  Just like in academics a student could
prep for the SAT but be bad at math, software can pass the test and be horrible.  Fragile.  Complex.  Incoherent.
And the tests themselves could be Fragile.  Complex.  Incoherent.  And Obsolete.</p>

<p>Automated tests are neither good nor bad.  Only good tests are good and bad tests are bad.  I have had products with
tens of thousands of great tests.  And very successful products with basically no tests.  And been on teams with
hundreds of horrible tests that made them go slower and produce a worse product than if they just threw all the
tests away.</p>

<h3>Automation with Frameworks</h3>

<p>Because testing can be useful, your frameworks should support it.  And should support it as <em>easily</em> as possible.
They should be easy to read.  Easy to write.  Easy to maintain.  Powerful.  And as much as possible be &#8220;from the outside&#8221;.</p>

<p>Strangely this last truth has been replaced by a lie:</p>

<blockquote><p>&#8220;You should test each unit, each module, each integration, etc.&#8221;</p></blockquote>

<p>It is a variant of the XP &#8216;test first&#8217; mentality.  And it is completely idiotic.  Because it makes you focus on
the &#8216;how&#8217; instead of the &#8216;what&#8217;.  Your customer does not care you wrote something in Java or C.  With Spring
or Netty.  MySQL or Mongo.  Object-Oriented or functional.  They want the food.
And they want it to taste good.  Everything about making that food <em>you</em> can care about, but <em>you can&#8217;t be</em> continuously
testing it or you are wasting your customers time and money.  Testing the knife before each cut.  Testing the pan to see if it is solid.  If something breaks you
might investigate why it broke and do a periodic check in the future.  But you <em>do</em> by <em>doing</em>, and not with a
fear of failing on each step of the way.  You are paid to <em>do</em> not to <em>be afraid</em>.  <em>Do</em>, <em>Fail</em>, <em>Learn</em>, <em>Do</em></p>

<p>I am not saying you can&#8217;t test a few things on the inside.  Sometimes I do that as I bring a system up so it is
obvious (a) whether it is working, and (b) how it is supposed to be working.  A little &#8216;extra documentation&#8217; beyond
the code itself.  But these are a limited set that covers a slice of the system, not the whole thing.</p>

<h3>Automation with Grails</h3>

<p>The team behind Grails leverages other technologies as much as possible when they work.  Among the best technologies
for automated testing in Spring / Java are:</p>

<ul>
<li> Spock – https://code.google.com/p/spock/</li>
<li> Geb – https://github.com/geb/geb</li>
</ul>


<p>So Grails leverages these and has testing built-in to the framework.  It can automatically generate test stubs for
Controllers (the UI interaction classes) and Domain classes (Business Logic).  And it generates both integration
and unit tests. I prefer integration tests as they are the most &#8220;from the outside&#8221;, but all the different tests
are useful in different amounts (some are faster to run).</p>

<p>For our &#8216;petclinic&#8217;, it has a number of tests of two different kinds:</p>

<p><img src="http://markfussell.emenar.com/images/addstack-2/addstack2_grails1.png" /></p>

<h4>Spock / Unit-ty tests</h4>

<p><img src="http://markfussell.emenar.com/images/addstack-2/addstack2_grails2.png" /></p>

<h4>Grub / Integration tests</h4>

<p><img src="http://markfussell.emenar.com/images/addstack-2/addstack2_grails3.png" /></p>

<p><img src="http://markfussell.emenar.com/images/addstack-2/addstack2_grails4.png" /></p>

<p><img src="http://markfussell.emenar.com/images/addstack-2/addstack2_grails5.png" /></p>

<p>The separation of Unit and Integration is somewhat more complex than this because Spock especially has
the ability to be lots of different kinds of tests.  But the basic idea is above.</p>

<h4>When to run?</h4>

<p>So we have some tests in a nice testing framework.  Now the critical questions:</p>

<ul>
<li>When should we run them?  As much as possible without wasting people&#8217;s time.</li>
<li>Should they be run before deploying a new version?  If they are fast enough, sure.  If not, then something should &#8216;go live&#8217; <em>before</em> the tests.

<ul>
<li>I don&#8217;t mean &#8216;go live&#8217; to end users, but go live to a server where others can see it.  Just like the &#8216;fed1_app1&#8217; deployment.</li>
<li>And you can have another server that is &#8216;post-test&#8217; so it is gated by tests being successful.  It is more stable but slightly behind in time and version.  Say &#8216;fed2&#8217;.</li>
</ul>
</li>
<li>Should developers run tests before checking in?  If they want to and are nervous, sure.  Especially tests in the area they are touching.  But breaking &#8216;fed1&#8217; is not a big deal unless you walk away afterwards.  Break it.  Fix it.  Carry on.</li>
</ul>


<p>The tests for the &#8216;petclinic&#8217; are quite fast, so we might as well run them before deploying and let people know the status.  Returning to our deployment script:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">pushd</span> <span class="nv">$APP_PATH</span>
</span><span class='line'>./gradlew <span class="nb">test</span>
</span><span class='line'>
</span><span class='line'><span class="c">### if success then continue with &#39;run&#39;, otherwise leave the current version running.</span>
</span><span class='line'>
</span><span class='line'><span class="nb">popd</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ADD Stack [Part-1]]]></title>
    <link href="http://markfussell.emenar.com/blog/addstack-1/"/>
    <updated>2015-10-14T01:00:00-07:00</updated>
    <id>http://markfussell.emenar.com/blog/addstack-1</id>
    <content type="html"><![CDATA[<p>This is the second series describing the ADD: a radically more productive development and delivery environment.</p>

<h2>Review of the first series</h2>

<p>The first series starts here: <a href="http://markfussell.emenar.com/blog/add-1/">Intro</a> and ends here: <a href="http://markfussell.emenar.com/blog/add-11/">Voilà!</a>.  The bulk of the
series was describing how to combine four ingredients:</p>

<ul>
<li>Amazon EC2 <a href="http://aws.amazon.com/">http://aws.amazon.com/</a></li>
<li>Amazon S3  <a href="http://aws.amazon.com/">http://aws.amazon.com/</a></li>
<li>GitHub.com <a href="http://github.com/">http://github.com/</a></li>
<li>HipChat    <a href="http://HipChat.com/">http://HipChat.com/</a></li>
</ul>


<p>in a way that gives individuals and teams 4x or more productivity.  These resulting environment solves problems for
all three roles in a development team:</p>

<ul>
<li>Changers</li>
<li>Watchers</li>
<li>Machines</li>
</ul>


<p>And can be envisioned as so:</p>

<p><img width="432" height="414" src="http://markfussell.emenar.com/images/add-1/ADD_FourIngredients_ThreeRoles_mlf1a1.png" /></p>

<p>Along the way, the ingredients combined to make:</p>

<ul>
<li>Machines automatically launch and configure themselves, including hooking them up to each other (auto-wire)</li>
<li>Changes to IT roll out automatically to all the running machines.</li>
<li>Changes to the application roll out automatically to all the running machines.</li>
<li>Creating new environments to be as easy providing a simple parameter (e.g. &#8220;fed2&#8221;) to a CloudFormation</li>
<li>The whole thing working on EC2 or inside a Vagrant container&#8230; or even on bare metal (but that was not shown)</li>
<li>Incredible visibility into everything that happens within HipChat&#8230; for the whole team.</li>
</ul>


<p>By the end, we had machines tell us when they launched, when they were operational, when they were deploying a new
version, and whether that new version deployed successfully.</p>

<p><img src="http://markfussell.emenar.com/images/add-11/add11_autodeploy1.png" /></p>

<p>and finally, we had a running application at a human-usable URL:</p>

<p><img src="http://markfussell.emenar.com/images/add-11/add11_dns1.png" /></p>

<p>That could be scaled to any number of servers as load demands.</p>

<h2>Second series</h2>

<p>The above is the core of the ADD and enabling team productivity and customer visibility (even happiness)
to shoot through the roof.  It by itself is basically &#8216;complete&#8217;.  It is missing some details, nuances,
augmentation, and such.  But it alone is the core of a 4x productivity.</p>

<blockquote><p>&#8220;Complete! What nonsense!  Where are your automated tests!  How do you check for code quality!
What kind of programming language do you use!  And where is your description of Scrum, XP, Waterfall, etc. methodology
to use with this ADD?!!&#8221;</p></blockquote>

<p>Ah&#8230; yes.  Over my <em>thirty five years</em> and estimated <em>thirty five thousand hours</em> of developing software,
I have encountered all these things.  I do have opinions
on a lot of these things.  Preferences.  Best practices.  You may be interested.  They matter.  A little.</p>

<p>How little?  Maybe&#8230; maybe&#8230; 2x.</p>

<!--more-->


<p>I mentioned in the first series that when I shifted to Java from Smalltalk, I lost
a lot of productivity.  Part of it was in going from a hyper-productive language (Smalltalk) to a mediocre language.
Most of it was going from a hyper-productive development model (tweak and clone) to a horrible development model (build
most of it from scratch&#8230; because there are no libraries).  I bet I lost 4x in productivity.  And then another 2x
when people started mucking with my code.  4x is a lot.  2x is a little.
And if you try to get the &#8216;2x&#8217; but lose the &#8216;4x&#8217; you just did a win-LOSE bad tradeoff.</p>

<h3>Lies</h3>

<p>There are a lot of lies or confusions in the software industry.  During the nineties we tried to get rid of a lot of them
through actual research-based observations (e.g. &#8220;The Mythical Man-Month&#8221; by Fred Brooks) and experience-based
 observations (e.g. &#8220;The Agile Manifesto&#8221; by Kent, Ken, Ward, etc.).  The <em>truth</em> of software
is available&#8230; but the lies hide it.  And people can&#8217;t tell the difference.  And don&#8217;t believe the science.  Or are
too scared of losing their jobs (or having a more boring job) if they believe and speak the truth vs. the lie.</p>

<h4>Truth: One Brain</h4>

<p>I will first start with among the best researched truth there is:</p>

<ul>
<li>The best software is created by one primary, talented, and skilled &#8216;brain&#8217;

<ul>
<li>Potentially accompanied by some number of &#8216;assistants&#8217;</li>
</ul>
</li>
</ul>


<p>This is the &#8216;surgical team&#8217; model.  You want one primary, talented, and skilled &#8216;Surgeon&#8217;.  A &#8216;Surgeon&#8217; with many thousands
if not many tens-of-thousands of hours of experience.  Nurses can help.  Support doctors can help.  Even other surgeons can
help.  If the operation is long enough, you might need multiple primary surgeons who pass the baton along to each other.
But if someone is opening your body&#8230; you want that person to be fully responsible, fully accountable, insanely competent,
and insanely skilled.  An insanely great surgeon.  She will charge you a lot, and you will get a lot in return.</p>

<p>Software is the same.  The best software is create by one primary, talented, and skilled &#8216;Engineer&#8217;. An &#8216;Engineer&#8217; with
many thousands if not many tens-of-thousands of hours of experience.  QA can help.  Support programmers can help.  Software is
 never needed so quickly as to require a hourly baton, but that can happen if the &#8216;Engineer&#8217; moves on to other things.</p>

<p>If someone is writing an application that you want to be valuable to you&#8230; you want that person to be fully responsible,
fully accountable, insanely competent, and insanely skilled.  An insanely great engineer.
She will charge you a lot, and you will get a lot in return.</p>

<h4>Lie: All together now!</h4>

<p>But software developers don&#8217;t like this truth.  They think they (after less than 5000 hours) can be the point person
for building an application.  I don&#8217;t mean 5000 hours <em>of work</em> I mean 5000 hours <em>in surgery</em> and that is after say
2x the amount of hours of <em>studying surgery</em>.  So 10,000 hours of studying how to build software applications and 5,000
hours of writing code that builds actual production-worthy software applications.  If you work 2000 hours a year and
spend half of it actually on either of those tasks&#8230; it would take you about 15 years to be &#8216;an Engineer&#8217;.  Ten years
of reading and five years of writing.  Done concurrently, where reading dominates early and writing dominates later.</p>

<p>But again, developers don&#8217;t like this truth and instead they say: &#8220;If a bunch of us get together we can reproduce that
surgeon with each of our individual skills.&#8221;</p>

<p>But this is saying: &#8220;Nine people who can dissect frogs can perform brain surgery&#8221;, or
&#8220;Nine club tennis players can beat Roger Federer if they tag-team&#8221;.  Or &#8220;Nine people who are good in the
kitchen can together produce a better meal than Gordon Ramsey in a throw down&#8221;.  Or&#8230;</p>

<p>Hopefully by shifting the context you can see the impossibility of it.  It makes absolutely no sense, yet the lie is
propagated so much as to be systemically the status quo.  Even the smallest XP version of the lie &#8220;You need two people to write better software&#8221; is
ludicrous.  Better to have <em>two surgeons</em> perform <em>two different operations</em> at the same time&#8230; and save <em>two</em> lives.
There is nothing wrong with having an apprentice watch / help.  But that is <em>training</em> (somewhat to both parties) not
<em>doing</em></p>

<h4>Truth: Customer Rules</h4>

<p>The second truth is that the <em>customer</em> rules.  If the customer is happy&#8230; WIN!  If they are not happy&#8230; :-(</p>

<p>Given this is <em>sort of</em> in the Agile Manifesto you would think it would be well known now that everyone is &#8216;Going Agile&#8217;.
But reviewing the <a href="http://www.agilemanifesto.org">Agile Manifesto</a>, I see that it &#8220;backed off&#8221; saying what it should say.
The lines that it should have within it are:</p>

<ul>
<li>Working software over &#8230;everything&#8230;</li>
<li>Customer happiness over &#8230;everything&#8230;</li>
</ul>


<p>But because software developers think they are special&#8230; unusually talented in a way that is beyond the customer&#8230; like &#8216;artists&#8217;&#8230;
they think these two lines do not apply to them.  Again, the insanity of it is evident when you shift industry.  Say &#8216;Food&#8217;:</p>

<ul>
<li> Working food (e.g. good produce, a cooked meal, etc.) over ???</li>
<li> Customer happiness over ???</li>
</ul>


<p>Pretty sure if you nail the second bullet, you nailed the first one (and maybe some more).  And not nailing both these
bullets is a path to failure.  The question marks
are replaceable with &#8216;everything not mentioned&#8217;.  So the actual pyramid is this:</p>

<ul>
<li>Happy Customer (100%)

<ul>
<li>Delivered good product (80%)

<ul>
<li>All the stuff needed to do the above</li>
</ul>
</li>
<li>Other aspects of delivering (20%) –  E.g. customer interaction, appearance of product or delivery person, etc.

<ul>
<li>All the stuff needed to do the above</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>You are allowed to have less than totally happy customers.  But you should try to fix that.  You should care.
Otherwise you are resigning yourself to  being content with the quality of your product being sub-par.  And likely
headed downward.</p>

<p>You are allowed to hate making your customers happy.  You can change industries.  Change role.  Continually grumble about how
bad your job is (but google &#8220;Worst Jobs&#8221; to see you don&#8217;t have it so bad).  But you are not allowed to say that
<em>your customer</em> shouldn&#8217;t be 100% happy&#8230; or at least as happy as you can make them.</p>

<h4>Lie: Automated Testing and Quality Verification</h4>

<p>The second lie is that <em>instead of</em> trying to make the customer 100% happy, we are going to make our automated
tests and our QA verification servers happy.  We are going to make them <em>more</em> happy than our customer and
<em>before</em> we make our customer happy.</p>

<p>This actually pops up as a &#8216;truth&#8217; in education too.  We try to make the tests happy as opposed to the students,
except in exceptional schools that Think Different.  But
in most any <em>normal</em> industry, making a &#8216;test&#8217; happy instead of a customer is a crazy and effective way to
go out of business.  Say we inspected and tested <em>every</em> hamburger before it went out the door.  Fast food would
take on a whole new meaning as it took minutes per-person to do the inspection.  And things like &#8216;salad&#8217; would
be unservable.  Salad almost always has something weird in it, and finding it takes about the same amount of time
as eating it.  And it would basically destroy / consume the salad as you checked each leaf, fruit, and nut.</p>

<p>Again, automated testing is <em>useful</em>.  But it is not <em>necessary</em>.  And it doesn&#8217;t trump releasing to a customer
so they can see the &#8216;Delivered good product&#8217;.</p>

<h3>Conclusion : Customer&#8217;s One Powerful Right and Responsibility</h3>

<p>The ADD described so far, efficiently, effectively, and production-worthy scalably enabled one simple thing:</p>

<p><img src="http://markfussell.emenar.com/images/add-11/add11_dns1.png" /></p>

<p>That is a delivered good product (if you want to run a Pet Clinic).  What the application is beneath that, and
what processes were used to develop it, are all &#8220;of little importance&#8221;.  There are many ways to develop
an identical web site.  The stack and method I will describe is just one of them.  It is a reference
that I consider a &#8220;Best Practice&#8221; among alternative &#8220;Best Practice&#8221; possibilities.  And all of these alternatives
get measured by exactly one macro criteria: &#8220;Customer Satisfaction&#8221;.  For example:</p>

<ul>
<li>Buggy in production, customer is less happy.</li>
<li>Take longer to build, customer is less happy.</li>
</ul>


<p>Neither of the above trumps the other.  The ratio between them &#8216;depends&#8217;.  And that ratio is totally under
the customer&#8217;s control.  They may not know the ratio before the fact, but while &#8216;driving&#8217; the system they
<em>have every right and even responsibility</em> to complain.  The development team can make an &#8216;Educated Guess&#8217;
at the start of the project
but if the customer complains, they need to address that complaint and <em>change</em> the process, tools, people,
or office space <em>as much as possible and reasonable</em> to make the customer more happy.  Maybe just a little
change to become a little more happy: we aren&#8217;t prescient and you don&#8217;t know if the change will cause havoc
(everyone quits) or even address the issue.  But you address the complaint with an another &#8216;Educated Guess&#8217;.
Over and over.</p>

<p>What should your development process be?  It depends&#8230; on your customer and your product and your team and
&#8230; The reason you need an Engineer is they make great &#8216;Educated Guesses&#8217;.  And can iterate incredibly
quickly to fine tune the process and tools to what will work for the customer and the development team.</p>

<p>But the following parts of this series will be a good start.  It is my best recommendation in 2015 for a modern,
JVM-based, web-delivered, set of development methods, tools, frameworks, and other components.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Advanced Development and Delivery (ADD) [Part-11]]]></title>
    <link href="http://markfussell.emenar.com/blog/add-11/"/>
    <updated>2015-10-14T01:00:00-07:00</updated>
    <id>http://markfussell.emenar.com/blog/add-11</id>
    <content type="html"><![CDATA[<p>This is the elevent installment of describing a radically more productive development and delivery environment.</p>

<p>The first part is here: <a href="http://markfussell.emenar.com/blog/add-1/">Intro</a>.  In the previous parts I described the big picture, Vagrant and EC2,
node initialization, the one minute configuration HeartBeat, HipChat integration, presence, EC2, configuring nodes, inter-machine presence,
and configuring an application server and its&#8217; stack.</p>

<h2>It&#8217;s Alive!</h2>

<p>We are close to having a viable semi-production environment running the latest version of our code, and with an incredible
capability of configuring, controlling, and being informed of that environment.  With the simple line:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mkdir -p /root/app/
</span><span class='line'><span class="nb">cd</span> /root/app
</span><span class='line'>
</span><span class='line'>git clone git@github.com:grails-samples/grails-petclinic.git
</span><span class='line'><span class="nb">cd </span>grails-petclinic
</span><span class='line'>./gradlew run
</span></code></pre></td></tr></table></div></figure>


<p>We got:</p>

<p><img src="http://markfussell.emenar.com/images/add-10/add10_grails2.png" /></p>

<!-- more -->


<p>Which is almost what we want&#8230; except.</p>

<ul>
<li> We need that IP address to be a stable domain name</li>
<li> We need the &#8216;clone&#8217; to be augmented with subsequent &#8216;git pull&#8217; in case there are subsequent updates</li>
</ul>


<p>In reverse order</p>

<h2>Pulling the Application</h2>

<p>Going back to the one-minute heartbeat, we had this &#8216;cron&#8217; job:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mkdir -p /root/bin
</span><span class='line'>cp <span class="k">${</span><span class="nv">RESOURCE</span><span class="k">}</span>/cron_1m.sh /root/bin/cron_1m.sh
</span><span class='line'>chmod +x /root/bin/cron_1m.sh
</span><span class='line'>
</span><span class='line'>cat <span class="s">&lt;&lt;EOS &gt; /var/spool/cron/root</span>
</span><span class='line'><span class="s">MAILTO=&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="s">* * * * *  /root/bin/cron_1m.sh</span>
</span><span class='line'><span class="s">EOS</span>
</span></code></pre></td></tr></table></div></figure>


<p>Where part of the cron was described as:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>        bash_ifexist bin/nodework/common/work.sh
</span><span class='line'>        bash_ifexist bin/nodework/part/<span class="sb">`</span>cat /root/nodeinfo/nodepart.txt<span class="sb">`</span>/work.sh
</span><span class='line'>        bash_ifexist bin/nodework/stacktype/<span class="sb">`</span>cat /root/nodeinfo/stacktype.txt<span class="sb">`</span>/work.sh
</span><span class='line'>        bash_ifexist bin/nodework/stacktype/<span class="sb">`</span>cat /root/nodeinfo/stacktype.txt<span class="sb">`</span>/part/<span class="sb">`</span>cat /root/nodeinfo/nodepart.txt<span class="sb">`</span>/work.sh
</span></code></pre></td></tr></table></div></figure>


<p>That is both too much code and too little to understand what is going on.  It is too much because we don&#8217;t need to put anything but
the first line in the &#8216;cron_1b.sh&#8217;.  It is &#8220;fine&#8221; to do so, but if we add some new concept we have to rebuild machines (or
dynamically copy in new &#8216;cron_1m.sh&#8217;) vs. the simpler option of just having the first &#8216;work&#8217; cal the rest of the &#8216;work&#8217;.</p>

<p>The part that is too little is the part where a bunch of git repositories are getting updated.  The full &#8216;cron_1m.sh&#8217; looks
like this:</p>

<h4>cron_1m.sh</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#! /bin/bash</span>
</span><span class='line'><span class="c">#================================</span>
</span><span class='line'><span class="c">#=== Simple worker example</span>
</span><span class='line'><span class="c">#================================</span>
</span><span class='line'>
</span><span class='line'><span class="nb">export </span><span class="nv">ME</span><span class="o">=</span><span class="sb">`</span>basename <span class="nv">$0</span><span class="sb">`</span>
</span><span class='line'><span class="nb">export </span><span class="nv">LOG</span><span class="o">=</span>/root/log/<span class="k">${</span><span class="nv">ME</span><span class="k">}</span>_log.txt
</span><span class='line'><span class="nb">export </span><span class="nv">ERROR</span><span class="o">=</span>/root/log/<span class="k">${</span><span class="nv">ME</span><span class="k">}</span>_error.txt
</span><span class='line'><span class="nb">export </span><span class="nv">START_TSS</span><span class="o">=</span><span class="s2">&quot;`date +%Y%m%d-%H%M%S`&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">export </span><span class="nv">CURRENT_ACTION_FILE</span><span class="o">=</span>./.temp/nodeinfo/currentaction.txt
</span><span class='line'>
</span><span class='line'>bash_ifexist <span class="o">()</span> <span class="o">{</span> <span class="k">if</span> <span class="o">[[</span> -f <span class="s2">&quot;$1&quot;</span> <span class="o">]]</span>; <span class="k">then </span>bash <span class="s2">&quot;$1&quot;</span>; <span class="k">else </span><span class="nb">echo</span> <span class="s2">&quot;Skipped missing: $1&quot;</span>; <span class="k">fi</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>mkdir -p /root/log/
</span><span class='line'>
</span><span class='line'><span class="nb">exec </span>1&gt;&gt; <span class="k">${</span><span class="nv">LOG</span><span class="k">}</span>
</span><span class='line'><span class="nb">exec </span>2&gt;&gt; <span class="k">${</span><span class="nv">ERROR</span><span class="k">}</span>
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;${ME}: Start  ${START_TSS}&quot;</span> &gt;&gt; <span class="k">${</span><span class="nv">LOG</span><span class="k">}</span>
</span><span class='line'>
</span><span class='line'><span class="nb">export </span><span class="nv">REPOS</span><span class="o">=</span><span class="sb">`</span>find /root/gitrepo/ -maxdepth 1 -mindepth 1 <span class="sb">`</span>
</span><span class='line'><span class="k">for </span>REPO in <span class="k">${</span><span class="nv">REPOS</span><span class="k">}</span>; <span class="k">do</span>
</span><span class='line'><span class="k">    </span><span class="nb">pushd</span> <span class="k">${</span><span class="nv">REPO</span><span class="k">}</span>
</span><span class='line'>        git pull
</span><span class='line'>    <span class="nb">popd</span>
</span><span class='line'><span class="k">done</span>
</span><span class='line'>
</span><span class='line'><span class="k">for </span>REPO in <span class="k">${</span><span class="nv">REPOS</span><span class="k">}</span>; <span class="k">do</span>
</span><span class='line'><span class="k">    </span><span class="nb">pushd</span> <span class="k">${</span><span class="nv">REPO</span><span class="k">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">[[</span> -e <span class="k">${</span><span class="nv">CURRENT_ACTION_FILE</span><span class="k">}</span> <span class="o">]]</span>; <span class="k">then</span>
</span><span class='line'>            : <span class="c">#Don&#39;t do anything until the current action completes</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'><span class="k">            </span>bash_ifexist bin/nodework/common/work.sh
</span><span class='line'>        <span class="k">fi</span>
</span><span class='line'><span class="k">    </span><span class="nb">popd</span>
</span><span class='line'><span class="k">done</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nb">export </span><span class="nv">FINISH_TSS</span><span class="o">=</span><span class="s2">&quot;`date +%Y%m%d-%H%M%S`&quot;</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;${ME}: Finish ${FINISH_TSS}&quot;</span> &gt;&gt; <span class="k">${</span><span class="nv">LOG</span><span class="k">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The reason for the double loop is to make sure inter-repository interactions are all &#8220;at the same time&#8221;.  After the set
of &#8216;pulls&#8217;, everything is stable.  We could even slow down the tempo of the system by simply pulling less often and
could jitter before the set of &#8216;pulls&#8217; which would jitter the whole system.</p>

<h3>Where to work?</h3>

<p>So if we have our &#8216;IT&#8217; repo as &#8216;repo2_petulant-cyril&#8217; and our application repo as &#8216;repo3_miniature-ironman&#8217;, where should
we do our &#8216;work.sh&#8217;?  The answer is unfortunatly simple: &#8220;where ever you want&#8221;.  The more you do work in &#8216;repo2&#8217; the
more &#8216;functional&#8217; your system.  Like classic functional / imperative programming.  The more you do work in &#8216;repo3&#8217; the
more &#8216;object-oriented&#8217; your system.  The more &#8216;repo3&#8217; is alive vs. being acted-upon.  On the other hand, the more you
do work in &#8216;repo2&#8217;, the more you can leverage similarities in the work (like knowing directory structures, git versions,
etc.) and the less &#8216;repo3&#8217; is complicated by these things.  Ultimately it would be ideal to be &#8216;aspect-oriented&#8217; and
add a &#8216;trait&#8217; to &#8216;repo3&#8217;.  But for the moment, I will keep things simple and do all the work in &#8216;repo2&#8217; where depending
on the kind of node you are, you <em>know about</em> &#8216;repo3&#8217; vs. &#8216;repo3&#8217; knowing it could be alive.</p>

<h3>&#8216;repo3:miniature-ironman&#8217;</h3>

<p>Why does &#8216;repo3&#8217; have two names?  The first is a simple identifier: it is a &#8216;repo&#8217; and it is the third of its kind.
This simplicity makes sure things like &#8216;find&#8217; produce a simple in-order answer.  If we have a lot of repositories, we
might start with &#8216;101&#8217; to make sure sorting works for a few hundred repositories.  The second part is a human-memorable
name, and to help associate the repository with its purpose.  You shouldn&#8217;t name a repository <em>after</em> its purpose, because
it&#8217;s purpose could change.  Outright change or simply grow.  Or another repo could have the same purpose and now we
can&#8217;t figure out which is right.  It would be like naming a kid &#8216;toddler&#8217;.  At first it might
not even be a toddler yet, but more importantly, eventually it will clearly no longer be a toddler.  And we would have
  a lot of &#8216;toddler&#8217;s so we can&#8217;t figure out which is what.</p>

<p>So instead, each repo just has a unique name.  We have to look at it and interact with it to figure out what it is.  Or
each has a README that we can try to keep current.</p>

<h3>app1/work.sh</h3>

<p>We can fetch &#8216;repo3&#8217; from &#8216;repo2&#8217; within the work of an application server:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#====================================================</span>
</span><span class='line'><span class="c">#=== lad1/app1</span>
</span><span class='line'><span class="c">#====================================================</span>
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;Doing App1 work&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c">#====================================================</span>
</span><span class='line'><span class="c">#=== checkout the application repository</span>
</span><span class='line'><span class="c">#=== if it doesn&#39;t exist</span>
</span><span class='line'><span class="c">#====================================================</span>
</span><span class='line'>
</span><span class='line'><span class="nb">export </span><span class="nv">APP_REPO</span><span class="o">=</span>repo3_miniature-ironman
</span><span class='line'><span class="nb">export </span><span class="nv">APP_NAME</span><span class="o">=</span>app2
</span><span class='line'><span class="nb">export </span><span class="nv">APP_PATH</span><span class="o">=</span><span class="nv">$REPO_ROOT</span>/<span class="nv">$APP_NAME</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> ! -d <span class="s2">&quot;$APP_PATH&quot;</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">  </span><span class="nb">echo</span> <span class="s2">&quot;git clone git@github.com:shaklee/${APP_REPO}.git $APP_PATH&quot;</span>
</span><span class='line'>  git clone git@github.com:shaklee/<span class="k">${</span><span class="nv">APP_REPO</span><span class="k">}</span>.git <span class="nv">$APP_PATH</span>
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure>


<p>The rest of the script looks identical to our main &#8216;work.sh&#8217; except our directory has switched from &#8216;common&#8217; to
something more specific.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#====================================================</span>
</span><span class='line'><span class="c">#=== Temporary files location</span>
</span><span class='line'><span class="c">#=== Override the &#39;TEMP&#39; directory to be for this part</span>
</span><span class='line'><span class="c">#====================================================</span>
</span><span class='line'>
</span><span class='line'><span class="nb">export </span><span class="nv">ADD_TEMP</span><span class="o">=</span><span class="k">${</span><span class="nv">GIT_ROOT</span><span class="k">}</span>/.temp/add/lad1_app1b/
</span><span class='line'><span class="nb">export </span><span class="nv">MY_DIR</span><span class="o">=</span><span class="s2">&quot;$( cd -P &quot;</span><span class="k">$(</span> dirname <span class="s2">&quot;${BASH_SOURCE[0]}&quot;</span> <span class="k">)</span><span class="s2">&quot; &amp;&amp; pwd )&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And we have to push/pop to get in the right directory for the &#8216;GIT&#8217; commands to work.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">pushd</span> <span class="nv">$APP_PATH</span>
</span><span class='line'><span class="nb">export </span><span class="nv">GIT_VERSION</span><span class="o">=</span><span class="sb">`</span>git rev-parse HEAD<span class="sb">`</span>
</span><span class='line'><span class="nb">export </span><span class="nv">DETECT_GIT_CHANGE</span><span class="o">=</span><span class="sb">`</span>git log --pretty<span class="o">=</span>oneline <span class="k">${</span><span class="nv">PREV_WORK_VERSION</span><span class="k">}</span>..  -- <span class="k">${</span><span class="nv">WORK_WATCH_VALUE</span><span class="k">}</span> | awk <span class="s1">&#39;{print $1}&#39;</span><span class="sb">`</span>
</span><span class='line'><span class="nb">popd</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Start / restart</h3>

<p>Ultimately we will run from a Tomcat or similar container, but currently we just have to:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">pushd</span> <span class="nv">$APP_PATH</span>
</span><span class='line'>./gradlew run &amp;
</span><span class='line'><span class="nb">popd</span>
</span></code></pre></td></tr></table></div></figure>


<p>Except for a couple issues</p>

<ul>
<li>We would like the error and standard output to go somewhere in case something goes wrong</li>
<li>We need to not collide with an previous &#8216;run&#8217; because they hold onto the same port</li>
</ul>


<p>Solving these is pretty trivial if we are allowed to be &#8216;brutal&#8217; and accept downtime.  Ultimately this won&#8217;t be
a problem because we will first &#8216;shutdown&#8217; and let the load balancer pull us out of rotation before we actually
upgrade versions.</p>

<h4>Launching</h4>

<p>Making something into a daemon is a common approach, but an even simpler approach is just redirect stdout and stderr
on a detached process.  Trying this from a terminal appears to not work, because everything is a child
of the terminal login process.  But to get out of that problem, you can just use &#8216;screen&#8217; and
create a non-terminal-connected screen.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>screen
</span><span class='line'>./gradlew run &amp;
</span><span class='line'><span class="c">#Control-D</span>
</span><span class='line'>ps aux | grep java
</span></code></pre></td></tr></table></div></figure>


<p>This is just for testing with a manual launch.  Our cron job doesn&#8217;t have this issue and can start and restart
things without the extra effort.</p>

<h4>Logging</h4>

<p>The heartbeat cron job has its own logs, so everything would appear there by default.  We can change the destination to
something more informative / isolated by redirecting stdout and stderr.  Ultimately we would use a logging
framework and infrastructure (e.g. Graylog) to get everything off the machine and into a central logger.</p>

<h4>Killing</h4>

<p>Again, because we will ultimate decommission ourselves, we can be quite brutal to the running application.  Whenever
we are going offline, we mark ourselves as decommissioned and drain out all &#8216;clients&#8217;.  For a web server this is
very quick.  For other servers (like a game server with shared game state), this can take a while.  So the states are:</p>

<ul>
<li>Running

<ul>
<li>Add Users</li>
<li>Keep Steady</li>
<li>Drain Users</li>
</ul>
</li>
<li>Decommissioning

<ul>
<li>Drain Users</li>
<li>Drained</li>
</ul>
</li>
<li>Decommission

<ul>
<li>Graceful shutdown</li>
<li>Kill application</li>
</ul>
</li>
</ul>


<p>The last one is the critical one.  Although &#8216;tomcat&#8217; and others have a graceful shutdown, <em>it does not always work</em>.
We must be able to decommission properly, or we have to kill the application.  If we can&#8217;t decommission a node
successfully, we can not bring it back to &#8216;running&#8217; and so our instance pool has shrunk.  Ideally our infrastructure
recognizes this and either (a) kills the node or (b) marks the node as permanently unavailable and bumps the count
of expected nodes in the array (say from 4 to 5 to include one being permanently unavailable).
The benefit of &#8216;b&#8217; is we can investigate the node later.  But either is operationally reasonable.</p>

<p>So for the moment, lets just do the last one to decommission:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Log what we are killing... could also test whether &#39;kill&#39; is needed</span>
</span><span class='line'>
</span><span class='line'>ps aux | grep java | grep -v grep
</span><span class='line'>ps aux | grep java | grep -v grep | awk <span class="s1">&#39;{print $2}&#39;</span> | xargs <span class="nb">kill</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Are we alive?</h4>

<p>Finally, we should at least reasonably check whether we are alive with the new version.  The load balancer is
checking our URL, so it knows.  But the load balancer can&#8217;t tell the world (HipChat) whether the deploy was
successful.</p>

<p>A simple &#8216;curl&#8217; to our local port can though.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl localhost:8080 &gt; <span class="nv">$ADD_TEMP</span>/curl_test.html
</span><span class='line'><span class="nb">export </span><span class="nv">CURL_TEST</span><span class="o">=</span><span class="sb">`</span>cat  <span class="nv">$ADD_TEMP</span>/curl_test.html<span class="sb">`</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">[[</span> -z <span class="s2">&quot;$CURL_TEST&quot;</span> <span class="o">]]</span> ;
</span><span class='line'><span class="k">then</span>
</span><span class='line'><span class="k">    </span><span class="nb">echo</span> <span class="s1">&#39;Deployment failed!&#39;</span>;
</span><span class='line'><span class="k">else</span>
</span><span class='line'><span class="k">    </span><span class="nb">echo</span> <span class="s1">&#39;Success!&#39;</span>;
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure>


<h2>DNS Stability</h2>

<p>The DNS stability is a trivial thing on EC2 and basically any modern DNS system.  Trivial as long as we understand
one fatal flaw:</p>

<ul>
<li>Everyone caches</li>
</ul>


<p>We can have stability so long as we accept that everyone is trying to cache the DNS to IP address for as long as
possible.  This can be minutes or even longer <em>in spite</em> of our DNS records saying otherwise.  This is actually
 one of the reason load balancers are so important.  Load balancing is a very simple concept.  Your load balancers
 should be simple enough to &#8216;keep running&#8217; and be rarely flipped.  So their IP addresses will be stable: like the person
 who is always hanging out on their front porch.  You can always find them there and ask them to ask someone else
 a question.  They will take care of the rest.</p>

<p>So ultimately we don&#8217;t want the application server obtaining a domain-name, we want it to register with a load
balancer.  But for the moment (and for some useful internal capabilities) we will have each application server
take-a-name.</p>

<h3>How to take a name?</h3>

<p>Before the cloud, the common ways to take a name were:</p>

<ul>
<li>To assign a name via the console of the domain name server</li>
<li>To dynamically attach an IP address to a name via various protocols</li>
</ul>


<p>Pre-cloud, these work fairly well.  If you DN server is smart enough, it can take failed servers out of rotation
with a health check.  And even early versions of cloud computing used a similar model where servers took
possession of a pre-allocated IP address that the DN server knew about.  But these models don&#8217;t scale as
well as a much simpler model.  Route-53.</p>

<p>Route-53 takes the &#8216;dynamically&#8217; to a whole new level.  You can dynamically add / change / delete most anything
and the common latency for the change to take affect is very short.  The rest of the world <em>still caches</em> but
at least you know the DN servers are up to date.  In the following, you can see the &#8216;gaps2c&#8217; project I created
a while ago as a demonstration of this ability.  The main domain registry for &#8216;gaps2c.com&#8217; is elsewhere, but
the subdomain of &#8216;aws.gaps2c.com&#8217; is managed by route53.  The last entry works and says <a href="google.aws.gaps2c.com">google.aws.gaps2c.com</a>
knows where the google servers are.</p>

<p><img src="http://markfussell.emenar.com/images/add-11/add11_route53_1.png" /></p>

<h3>Registering with Route-53</h3>

<p>There are a lot of ways to register with Route-53:</p>

<ul>
<li> Via the console</li>
<li> Via an XML-based payload update</li>
<li> Via adding some elements to a CloudFormation</li>
</ul>


<p>The first is easy, but not scalable.  The second is not hard, but a bit &#8216;peculiar&#8217; in how the payload works.  The
third is trivial and scalable.</p>

<p>So lets start with the third</p>

<h4>Registering via a CloudFormation template</h4>

<p>The good news is it is simple in a CloudFormation.  The bad news is it requires a bit more infrastructure to appear, so
it isn&#8217;t a one-liner.  The issue with CloudFormations is that they must be <em>complete</em>.  They can only auto-wire things
they know about.  So they are relatively monolithic.  It is possible to compose them somewhat, but that is really
just embedding one formation into another vs. wiring two independent formations up.  Ultimately to wire up independent
formations, you need to &#8216;know what you said&#8217; and tell two or more formations enough information that they can find
each other.  That is not hard but it isn&#8217;t free.</p>

<p>But for free, we can add three things to our application stack and get a DNS registration for our application tier.</p>

<ul>
<li> A HostedZone entry – Pointing into the Route 53 database</li>
<li> An ElasticLoadBalancer – Which enables the CloudFormation to know about IP addresses</li>
<li> A PrimaryDnsZone – Which defines the FQDN of the application tier</li>
</ul>


<p>And we need to augment our AutoScalingGroup to know about the ELB.  Adding all this gives:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="s2">&quot;HostedZone&quot;</span> <span class="err">:</span> <span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;Type&quot;</span> <span class="p">:</span> <span class="s2">&quot;String&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;Default&quot;</span> <span class="p">:</span> <span class="s2">&quot;aws.gaps2c.com&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;Description&quot;</span> <span class="p">:</span> <span class="s2">&quot;The DNS name of an existing Amazon Route 53 hosted zone&quot;</span>
</span><span class='line'><span class="p">}</span><span class="err">,</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="s2">&quot;PrimaryElb&quot;</span> <span class="err">:</span> <span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;Type&quot;</span> <span class="p">:</span> <span class="s2">&quot;AWS::ElasticLoadBalancing::LoadBalancer&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;Metadata&quot;</span> <span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;Comment&quot;</span> <span class="p">:</span> <span class="s2">&quot;Configure the Load Balancer with a simple health check and cookie-based stickiness&quot;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nt">&quot;Properties&quot;</span> <span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;AvailabilityZones&quot;</span> <span class="p">:</span> <span class="p">{</span> <span class="nt">&quot;Fn::GetAZs&quot;</span> <span class="p">:</span> <span class="s2">&quot;&quot;</span> <span class="p">},</span>
</span><span class='line'>    <span class="nt">&quot;LBCookieStickinessPolicy&quot;</span> <span class="p">:</span> <span class="p">[</span> <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;PolicyName&quot;</span> <span class="p">:</span> <span class="s2">&quot;CookieBasedPolicy&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;CookieExpirationPeriod&quot;</span> <span class="p">:</span> <span class="s2">&quot;30&quot;</span>
</span><span class='line'>    <span class="p">}</span> <span class="p">],</span>
</span><span class='line'>    <span class="nt">&quot;Listeners&quot;</span> <span class="p">:</span> <span class="p">[</span> <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;LoadBalancerPort&quot;</span> <span class="p">:</span> <span class="s2">&quot;8080&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;InstancePort&quot;</span> <span class="p">:</span> <span class="s2">&quot;8080&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;Protocol&quot;</span> <span class="p">:</span> <span class="s2">&quot;HTTP&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;PolicyNames&quot;</span> <span class="p">:</span> <span class="p">[</span> <span class="s2">&quot;CookieBasedPolicy&quot;</span> <span class="p">]</span>
</span><span class='line'>    <span class="p">}</span> <span class="p">]</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span><span class="err">,</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&quot;PrimaryDnsZone&quot;</span> <span class="err">:</span> <span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;Type&quot;</span> <span class="p">:</span> <span class="s2">&quot;AWS::Route53::RecordSet&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;Properties&quot;</span> <span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;HostedZoneName&quot;</span> <span class="p">:</span> <span class="p">{</span> <span class="nt">&quot;Fn::Join&quot;</span> <span class="p">:</span> <span class="p">[</span> <span class="s2">&quot;&quot;</span><span class="p">,</span> <span class="p">[{</span><span class="nt">&quot;Ref&quot;</span> <span class="p">:</span> <span class="s2">&quot;HostedZone&quot;</span><span class="p">},</span> <span class="s2">&quot;.&quot;</span> <span class="p">]]},</span>
</span><span class='line'>    <span class="nt">&quot;Comment&quot;</span> <span class="p">:</span> <span class="s2">&quot;CNAME redirect to aws.amazon.com.&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;Name&quot;</span> <span class="p">:</span> <span class="p">{</span> <span class="nt">&quot;Fn::Join&quot;</span> <span class="p">:</span> <span class="p">[</span> <span class="s2">&quot;&quot;</span><span class="p">,</span> <span class="p">[{</span> <span class="nt">&quot;Fn::FindInMap&quot;</span> <span class="p">:</span> <span class="p">[</span> <span class="s2">&quot;TemplateConstant&quot;</span><span class="p">,</span> <span class="s2">&quot;deployment&quot;</span><span class="p">,</span> <span class="s2">&quot;value&quot;</span> <span class="p">]</span> <span class="p">},</span> <span class="s2">&quot;-&quot;</span><span class="p">,</span> <span class="p">{</span> <span class="nt">&quot;Fn::FindInMap&quot;</span> <span class="p">:</span> <span class="p">[</span> <span class="s2">&quot;TemplateConstant&quot;</span><span class="p">,</span> <span class="s2">&quot;nodepart&quot;</span><span class="p">,</span> <span class="s2">&quot;value&quot;</span> <span class="p">]</span> <span class="p">},</span> <span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="p">{</span><span class="nt">&quot;Ref&quot;</span> <span class="p">:</span> <span class="s2">&quot;HostedZone&quot;</span><span class="p">},</span> <span class="s2">&quot;.&quot;</span><span class="p">]]},</span>
</span><span class='line'>    <span class="nt">&quot;Type&quot;</span> <span class="p">:</span> <span class="s2">&quot;CNAME&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;TTL&quot;</span> <span class="p">:</span> <span class="s2">&quot;900&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;ResourceRecords&quot;</span> <span class="p">:</span> <span class="p">[{</span> <span class="nt">&quot;Fn::GetAtt&quot;</span> <span class="p">:</span> <span class="p">[</span><span class="s2">&quot;PrimaryElb&quot;</span><span class="p">,</span><span class="s2">&quot;CanonicalHostedZoneName&quot;</span><span class="p">]</span> <span class="p">}]</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span><span class="err">,</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&quot;PrimaryServerGroup&quot;</span> <span class="err">:</span> <span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;Type&quot;</span> <span class="p">:</span> <span class="s2">&quot;AWS::AutoScaling::AutoScalingGroup&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;Properties&quot;</span> <span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;Tags&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>      <span class="p">{</span> <span class="nt">&quot;Key&quot;</span><span class="p">:</span> <span class="s2">&quot;add:deployment&quot;</span><span class="p">,</span> <span class="nt">&quot;Value&quot;</span><span class="p">:</span> <span class="p">{</span> <span class="nt">&quot;Fn::FindInMap&quot;</span> <span class="p">:</span> <span class="p">[</span> <span class="s2">&quot;TemplateConstant&quot;</span><span class="p">,</span> <span class="s2">&quot;deployment&quot;</span><span class="p">,</span> <span class="s2">&quot;value&quot;</span> <span class="p">]</span> <span class="p">},</span> <span class="nt">&quot;PropagateAtLaunch&quot;</span> <span class="p">:</span> <span class="s2">&quot;true&quot;</span> <span class="p">},</span>
</span><span class='line'>      <span class="p">{</span> <span class="nt">&quot;Key&quot;</span><span class="p">:</span> <span class="s2">&quot;add:nodepart&quot;</span><span class="p">,</span> <span class="nt">&quot;Value&quot;</span><span class="p">:</span> <span class="p">{</span> <span class="nt">&quot;Fn::FindInMap&quot;</span> <span class="p">:</span> <span class="p">[</span> <span class="s2">&quot;TemplateConstant&quot;</span><span class="p">,</span> <span class="s2">&quot;nodepart&quot;</span><span class="p">,</span> <span class="s2">&quot;value&quot;</span> <span class="p">]</span> <span class="p">},</span> <span class="nt">&quot;PropagateAtLaunch&quot;</span> <span class="p">:</span> <span class="s2">&quot;true&quot;</span> <span class="p">},</span>
</span><span class='line'>      <span class="p">{</span> <span class="nt">&quot;Key&quot;</span><span class="p">:</span> <span class="s2">&quot;add:stacktype&quot;</span><span class="p">,</span> <span class="nt">&quot;Value&quot;</span><span class="p">:</span> <span class="p">{</span> <span class="nt">&quot;Fn::FindInMap&quot;</span> <span class="p">:</span> <span class="p">[</span> <span class="s2">&quot;TemplateConstant&quot;</span><span class="p">,</span> <span class="s2">&quot;stacktype&quot;</span><span class="p">,</span> <span class="s2">&quot;value&quot;</span> <span class="p">]</span> <span class="p">},</span> <span class="nt">&quot;PropagateAtLaunch&quot;</span> <span class="p">:</span> <span class="s2">&quot;true&quot;</span> <span class="p">},</span>
</span><span class='line'>      <span class="p">{</span> <span class="nt">&quot;Key&quot;</span><span class="p">:</span> <span class="s2">&quot;add:statelog&quot;</span><span class="p">,</span> <span class="nt">&quot;Value&quot;</span><span class="p">:</span> <span class="p">{</span> <span class="nt">&quot;Fn::FindInMap&quot;</span> <span class="p">:</span> <span class="p">[</span> <span class="s2">&quot;TemplateConstant&quot;</span><span class="p">,</span> <span class="s2">&quot;statelog&quot;</span><span class="p">,</span> <span class="s2">&quot;value&quot;</span> <span class="p">]</span> <span class="p">},</span> <span class="nt">&quot;PropagateAtLaunch&quot;</span> <span class="p">:</span> <span class="s2">&quot;true&quot;</span> <span class="p">},</span>
</span><span class='line'>      <span class="p">{</span> <span class="nt">&quot;Key&quot;</span><span class="p">:</span> <span class="s2">&quot;add:state&quot;</span><span class="p">,</span> <span class="nt">&quot;Value&quot;</span><span class="p">:</span> <span class="p">{</span> <span class="nt">&quot;Fn::FindInMap&quot;</span> <span class="p">:</span> <span class="p">[</span> <span class="s2">&quot;TemplateConstant&quot;</span><span class="p">,</span> <span class="s2">&quot;state&quot;</span><span class="p">,</span> <span class="s2">&quot;value&quot;</span> <span class="p">]</span> <span class="p">},</span> <span class="nt">&quot;PropagateAtLaunch&quot;</span> <span class="p">:</span> <span class="s2">&quot;true&quot;</span> <span class="p">},</span>
</span><span class='line'>      <span class="p">{</span> <span class="nt">&quot;Key&quot;</span><span class="p">:</span> <span class="s2">&quot;add:statetss&quot;</span><span class="p">,</span> <span class="nt">&quot;Value&quot;</span><span class="p">:</span> <span class="p">{</span> <span class="nt">&quot;Fn::FindInMap&quot;</span> <span class="p">:</span> <span class="p">[</span> <span class="s2">&quot;TemplateConstant&quot;</span><span class="p">,</span> <span class="s2">&quot;statetss&quot;</span><span class="p">,</span> <span class="s2">&quot;value&quot;</span> <span class="p">]</span> <span class="p">},</span> <span class="nt">&quot;PropagateAtLaunch&quot;</span> <span class="p">:</span> <span class="s2">&quot;true&quot;</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">],</span>
</span><span class='line'>    <span class="nt">&quot;AvailabilityZones&quot;</span> <span class="p">:</span> <span class="p">{</span> <span class="nt">&quot;Fn::GetAZs&quot;</span> <span class="p">:</span> <span class="s2">&quot;&quot;</span> <span class="p">},</span>
</span><span class='line'>    <span class="nt">&quot;LaunchConfigurationName&quot;</span> <span class="p">:</span> <span class="p">{</span> <span class="nt">&quot;Ref&quot;</span> <span class="p">:</span> <span class="s2">&quot;PrimaryLaunchConfig&quot;</span> <span class="p">},</span>
</span><span class='line'>    <span class="nt">&quot;MinSize&quot;</span> <span class="p">:</span> <span class="s2">&quot;1&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;MaxSize&quot;</span> <span class="p">:</span> <span class="s2">&quot;1&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;DesiredCapacity&quot;</span> <span class="p">:</span> <span class="s2">&quot;1&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;LoadBalancerNames&quot;</span> <span class="p">:</span> <span class="p">[</span> <span class="p">{</span> <span class="nt">&quot;Ref&quot;</span> <span class="p">:</span> <span class="s2">&quot;PrimaryElb&quot;</span> <span class="p">}</span> <span class="p">]</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span><span class="err">,</span>
</span></code></pre></td></tr></table></div></figure>


<p>After adding all that, we get a new Route53 entry</p>

<p><img src="http://markfussell.emenar.com/images/add-11/add11_route53_2.png" /></p>

<p>And can also look at our load balancer:</p>

<p><img src="http://markfussell.emenar.com/images/add-11/add11_route53_3.png" /></p>

<p>And the instance associated with it:</p>

<p><img src="http://markfussell.emenar.com/images/add-11/add11_route53_4.png" /></p>

<p>And the rule we use to figure out whether the instance is alive</p>

<p><img src="http://markfussell.emenar.com/images/add-11/add11_route53_5.png" /></p>

<h2>Voilà!</h2>

<h3>Domain-Based, Auto-Scaling, IT and Application Stack</h3>

<p>We now have a stable domain name for our stack: &#8216;fed1-app1.aws.gapcom.com&#8217;</p>

<p><img src="http://markfussell.emenar.com/images/add-11/add11_dns1.png" /></p>

<p>which can scale up and down machines automatically.  Ideally there are at least four in production to make sure
all the availability zones under &#8216;US East&#8217; are covered.  But for anything else, one or two is sufficient depending
on what you are testing.</p>

<h3>Autodeploying IT and Application</h3>

<p>We now have a completely automated upgrade system for both our IT (servers) and
for the applications those servers are running.  Whenever we touch the code base
and &#8216;push&#8217; the changes so the servers can see/pull them (PushMePullYou), they automatically
decommission, deploy and confirm the deploy was successful.</p>

<p><img src="http://markfussell.emenar.com/images/add-11/add11_autodeploy1.png" /></p>

<h3>What Next?</h3>

<p>Basically nothing is left for the core of the ADD.  This series has described how the four ingredients
are cooked/hooked together and shown what that looks like on EC2.  Other topics are just filling in details
that are really just nuances and flavors of the ADD. For example:</p>

<ul>
<li>What is the Grails application stack like?</li>
<li>How does Vagrant handle the one minute crons and other more advanced features?</li>
<li>Should you <em>develop in Vagrant</em> or on the host operating system?

<ul>
<li>Answer: Either depending on what you are doing and how productive you are, but the closer you are to production, the more likely you are to catch issues</li>
</ul>
</li>
<li>How does HAProxy and the database configuration using presence work?</li>
<li>What about NewRelic and other monitoring tools</li>
<li>Where is Angular in all this?</li>
</ul>


<p>The first and last topic I will cover in the next multi-part series called the &#8216;AddStack&#8217;.  The others are more specific topics that I may get to eventually, but
are not critical to understanding and using the ADD.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Advanced Development and Delivery (ADD) [Part-10]]]></title>
    <link href="http://markfussell.emenar.com/blog/add-10/"/>
    <updated>2015-10-10T02:00:00-07:00</updated>
    <id>http://markfussell.emenar.com/blog/add-10</id>
    <content type="html"><![CDATA[<p>This is the tenth installment of describing a radically more productive development and delivery environment.</p>

<p>The first part is here: <a href="http://markfussell.emenar.com/blog/add-1/">Intro</a>.  In the previous parts I described the big picture, Vagrant and EC2,
node initialization, the one minute configuration HeartBeat, HipChat integration, presence, EC2, configuring nodes, and inter-machine presence.</p>

<h2>A good, opinionated, framework</h2>

<p>Back in 1972, Smalltalk became the first Object-Oriented Programming Language (Simula was Object-Based but there is a difference).
For decades this kind of language was &#8216;esoteric&#8217;.  It was like LISP or Prolog or APL: somehow exotic and inaccessible.
I was lucky: I had access to Smalltalk at Caltech.  I had access to lots of crazy expensive things at Caltech and that
made the exotic (e.g. making your own chips) into the mundane (e.g. made lots of chips, they were commonly broken,
had to be re-fabricated, and I eventually got bored with all that and moved a level up).</p>

<!-- more -->


<p>But back to the language of Smalltalk.  The problem with Smalltalk is that it appears to be a language when it is
actually a computer. &#8216;C&#8217; was a language.  It made programs. &#8216;Pascal&#8217;, &#8216;Lisp&#8217; (sans Machine), &#8216;Fortan&#8217;, and so on&#8230;
they were all languages.  Smalltalk <em>contains</em> a language.  It is named Smalltalk (darn).  But Smalltalk-80 was not
<em>just</em> a language, it was an <em>entire running operating system with applications and full source</em>  It could boot on
most any machine that you made the &#8216;bootstrap&#8217; code work on.  To make a new Smalltalk-80 machine, you cloned either
the primordial Smalltalk-80 &#8216;image&#8217; from PARC, or you cloned your own modified &#8216;image&#8217;.  And by &#8216;image&#8217; this is
basically the same concept as cloning a disk&#8230; bit by bit identical copy that happens to be on a different disk / computer.</p>

<p>Eventually OOP became mainstream with Java, C++, Objective-C, Ruby, Python, and the like.  So people thought they
were getting the &#8220;Smalltalk&#8221; (or LISP Machine) benefits.  But they left out the &#8216;computer&#8217; that went with the language.</p>

<h3>Why opinionated?</h3>

<p>The Smalltalk computer was quite functional and thoroughly opinionated.  It <em>already did</em> a bunch of things and showed
you how it did them.  It wasn&#8217;t opinionated like a human usually uses the term: &#8220;You should build that house out of bricks, not straw&#8221;.
It was opinionated like the planet is: &#8220;I have already created lots of flora and fauna&#8230; please use them wisely&#8221;.  Even
how humans on the planet are: &#8220;We have already created plenty of roads&#8230; please use them instead of driving through yards&#8221;</p>

<p>Opinionated is basically a synonym for &#8220;Working&#8221;.  Smalltalk computers &#8220;worked&#8221; so don&#8217;t break it.  They work, so you
should probably copy them for anything similar.  And they work, so you might want to study how they work even if you
are going to be creative later.</p>

<h3>Modern &#8216;working&#8217; frameworks</h3>

<p>Early frameworks (say for Java) &#8216;kind-of-worked&#8217;.  They didn&#8217;t fully work, but you could &#8216;configure&#8217; them to work.
That is like getting all &#8216;IKEA&#8217; furniture for your house.  You could easily build it wrong.  It could not work
together.  Yes, you get to &#8216;tweak&#8217; it, but if someone simply offered &#8220;a furnished house&#8221; you would save a lot of
time and leverage their full sense of design.  Or you could go to a different furnished house that more closely matched your tastes.</p>

<p>The later fully-working / opinionated frameworks (like Ruby/Rails) truly worked out of the box.  They would come up with a UI, Business/Domain
layer, and a Database layer.  You could add things to the UI and it would go down the whole stack.  Add things to the database
or Domain, and it would bubble up/down.  For the framework to do these things it had to have a model for what software (in its full form)
looks like.  These frameworks had patterns/templates/rules for building things at command.  This isn&#8217;t quite as good as Smalltalk (&#8220;it already exists&#8221;)
but it is getting close, especially with sample applications available.
It also gets rid of the one problem / hurdle with Smalltalk full-computers: you had to strip them
of things you didn&#8217;t want customers to see / use / clone.</p>

<h3>Languages</h3>

<p>There are many modern languages.  They are mostly quite similar and boring in the language themselves.  The community around the
language makes much more of a difference, and the libraries / frameworks that exist based on that community&#8217;s interest.</p>

<p>I mentioned that I switched to Java pretty early on, which cost me productivity.  But I wanted the community and their
libraries.  Java was popular enough that it had multiple communities associated with it.  Some were crazy stupid and
created things (even tried to mandate use of things) that were completely stupid.  But other communities continued
to plug along and evolve libraries and frameworks that are better than you can get in other languages.  On the whole,
I believe the Java ecosystem is by far the best &#8216;hub&#8217; to build most custom development and to pair
with other tools/components in other languages.  And by Java, I mean Java, Groovy, and potentially other JVM-targeting
languages.  The less Java-like the language, the less likely I would consider it acceptably an &#8216;other&#8217;.</p>

<h3>Framework</h3>

<p>I believe the best (general) application framework in Java is Grails, which lives on top of the Spring stack.  It is
very mature and has good minds in the drivers seat.  It gets simpler and more powerful every generation.  If Spring
does something right, Grails simply uses it.  If not, Grails augments it.  Very rational.  Very powerful.</p>

<h2>The first application</h2>

<p>The first application will simply be the default applications with a grails &#8216;create-app&#8217;.  To get the application we
need to get grails on the &#8216;app1&#8217; nodes, create the application, and then run it.</p>

<p>Grails needs Java, but ec2 instances automatically have that.  In other environments we would use something like:</p>

<h3>installJava.sh</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'><span class="c">#================================================</span>
</span><span class='line'><span class="c">#=== Java</span>
</span><span class='line'><span class="c">#================================================</span>
</span><span class='line'>
</span><span class='line'><span class="nb">export </span><span class="nv">JAVA_VERSION</span><span class="o">=</span>7u79
</span><span class='line'><span class="nb">export </span><span class="nv">JAVA_FULL_VERSION</span><span class="o">=</span>jdk-<span class="k">${</span><span class="nv">JAVA_VERSION</span><span class="k">}</span>-linux-x64
</span><span class='line'>
</span><span class='line'>mkdir -p .temp
</span><span class='line'>cp it/resource/<span class="k">${</span><span class="nv">JAVA_FULL_VERSION</span><span class="k">}</span>.rpm .temp/
</span><span class='line'>
</span><span class='line'>./bin/inflatePaths.sh .temp/<span class="k">${</span><span class="nv">JAVA_FULL_VERSION</span><span class="k">}</span>.rpm
</span><span class='line'>
</span><span class='line'>rpm -i .temp/<span class="k">${</span><span class="nv">JAVA_FULL_VERSION</span><span class="k">}</span>.rpm
</span></code></pre></td></tr></table></div></figure>


<p>The advantage of storing the RPM within our own system is speed of access and reliability.  EC2 to S3 communication
is very fast.  And S3 has never been down (AFAIK) at all, let alone when EC2 is running.  We also lock down on the
version we want vs. using &#8216;yum&#8217; without an explicit version.</p>

<h3>installGrails3_x.sh</h3>

<p>For grails we will get the latest version</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'><span class="c">#==========================================================</span>
</span><span class='line'><span class="c">#=== Install Grails 3.x</span>
</span><span class='line'><span class="c">#==========================================================</span>
</span><span class='line'>
</span><span class='line'>curl -s get.sdkman.io | bash
</span><span class='line'><span class="nb">source</span> <span class="s2">&quot;$HOME/.sdkman/bin/sdkman-init.sh&quot;</span>
</span><span class='line'>yes | sdk install grails
</span><span class='line'>
</span><span class='line'><span class="nb">source</span> ~/.bashrc
</span><span class='line'>grails -version
</span></code></pre></td></tr></table></div></figure>


<p>We need to source &#8216;~/.bashrc&#8217; so we get the additions to our path.</p>

<h3>Create &#8216;test&#8217; application</h3>

<p>At this point we have grails on the machine and can simply</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mkdir -p /root/app/
</span><span class='line'><span class="nb">cd</span> /root/app
</span><span class='line'>
</span><span class='line'>grails create-app <span class="nb">test</span>
</span><span class='line'><span class="nb">cd test</span>
</span><span class='line'>grails run-app
</span></code></pre></td></tr></table></div></figure>


<p>The application will come up at &#8216;localhost:8080&#8217; and if you wget/curl it, it returns the generated &#8216;index.html&#8217; file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!doctype html&gt;</span>
</span><span class='line'><span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">&quot;en&quot;</span> <span class="na">class=</span><span class="s">&quot;no-js&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;head&gt;</span>
</span><span class='line'>        <span class="nt">&lt;meta</span> <span class="na">http-equiv=</span><span class="s">&quot;Content-Type&quot;</span> <span class="na">content=</span><span class="s">&quot;text/html; charset=UTF-8&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;meta</span> <span class="na">http-equiv=</span><span class="s">&quot;X-UA-Compatible&quot;</span> <span class="na">content=</span><span class="s">&quot;IE=edge&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;title&gt;</span>Welcome to Grails<span class="nt">&lt;/title&gt;</span>
</span><span class='line'>        <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;viewport&quot;</span> <span class="na">content=</span><span class="s">&quot;width=device-width, initial-scale=1&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>...
</span><span class='line'>        <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;page-body&quot;</span> <span class="na">role=</span><span class="s">&quot;main&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;h1&gt;</span>Welcome to Grails<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>            <span class="nt">&lt;p&gt;</span>Congratulations, you have successfully started your first Grails application! At the moment
</span><span class='line'>               this is the default page, feel free to modify it to either redirect to a controller or display whatever
</span><span class='line'>               content you may choose. Below is a list of controllers that are currently deployed in this application,
</span><span class='line'>               click on each to execute its default action:<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'>            <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;controller-list&quot;</span> <span class="na">role=</span><span class="s">&quot;navigation&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                <span class="nt">&lt;h2&gt;</span>Available Controllers:<span class="nt">&lt;/h2&gt;</span>
</span><span class='line'>                <span class="nt">&lt;ul&gt;</span>
</span><span class='line'>
</span><span class='line'>                <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;footer&quot;</span> <span class="na">role=</span><span class="s">&quot;contentinfo&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'>        <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;spinner&quot;</span> <span class="na">class=</span><span class="s">&quot;spinner&quot;</span> <span class="na">style=</span><span class="s">&quot;display:none;&quot;</span><span class="nt">&gt;</span>Loading<span class="ni">&amp;hellip;</span><span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Firewalls</h3>

<p>Unfortunately, you won&#8217;t be able to test this app from the outside unless you open the &#8216;8080&#8217; port.</p>

<p>If we open that port either initially or through commands:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;IpProtocol&quot;</span><span class="p">:</span><span class="s2">&quot;tcp&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;FromPort&quot;</span><span class="p">:</span><span class="s2">&quot;8080&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;ToPort&quot;</span><span class="p">:</span><span class="s2">&quot;8080&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;CidrIp&quot;</span><span class="p">:</span><span class="s2">&quot;0.0.0.0/0&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We get the latest and greatest &#8216;Grails&#8217; application (3.0.8 as of this writing)</p>

<p><img src="http://markfussell.emenar.com/images/add-10/add10_grails1.png" /></p>

<h3>Demo2: PetClinic</h3>

<p>There is a PetClinic demo at: https://github.com/grails-samples/grails-petclinic .  Doing the same simple launch procedure you would get something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mkdir -p /root/app/
</span><span class='line'><span class="nb">cd</span> /root/app
</span><span class='line'>
</span><span class='line'>git clone git@github.com:grails-samples/grails-petclinic.git
</span><span class='line'><span class="nb">cd </span>grails-petclinic
</span><span class='line'>./gradlew run
</span></code></pre></td></tr></table></div></figure>


<p>And you get:</p>

<p><img src="http://markfussell.emenar.com/images/add-10/add10_grails2.png" /></p>

<p>But an important difference between the two: the second is now <em>wired</em> into the git repository and can &#8216;pull&#8217; or &#8216;push&#8217; to it as needed.
We now have a live server with both alive &#8216;IT&#8217; and alive &#8216;APP&#8217;!  It will happily and automatically bend to our will and needs.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Advanced Development and Delivery (ADD) [Part-9]]]></title>
    <link href="http://markfussell.emenar.com/blog/add-9/"/>
    <updated>2015-10-08T02:00:00-07:00</updated>
    <id>http://markfussell.emenar.com/blog/add-9</id>
    <content type="html"><![CDATA[<p>This is the ninth installment of describing a radically more productive development and delivery environment.</p>

<p>The first part is here: <a href="http://markfussell.emenar.com/blog/add-1/">Intro</a>.  In the previous parts I described the big picture, Vagrant and EC2,
node initialization, the one minute configuration HeartBeat, HipChat integration, presence, EC2, and configuring nodes.</p>

<h2>Using Presence for configuration</h2>

<p>So far, presence has been just information that &#8216;humans&#8217; consume.  It shows up on dashboards, in chat rooms, and so on,
but nothing has acted upon it.  Until now!</p>

<p>We have &#8216;app&#8217; and &#8216;db&#8217; nodes.  Clearly the &#8216;app&#8217; nodes need to find the &#8216;db&#8217; nodes or the app is not going to be
able to persist much.  The &#8216;db&#8217; here happens to be &#8216;Maria&#8217; but it could be anything from a single DB node to a
cluster of Riak nodes.  At the moment, I just want to get the information that a &#8216;db&#8217; node knows (&#8220;I exist!&#8221;, &#8220;My IP is this!&#8221;)
over to the &#8216;app&#8217; nodes so they can process it.</p>

<h3>It is already there?</h3>

<p>But wait?  All nodes have &#8216;repo4&#8217; for writing?  Don&#8217;t they already have everything in &#8216;repo4&#8217; for reading as well?</p>

<p>And so they do.  The presence information is already there waiting patiently for somebody or someboty to read it.</p>

<!-- more -->


<p>As of this writing, repo4 looks like this:</p>

<p><img src="http://markfussell.emenar.com/images/add-9/add9_all.png" /></p>

<p>And the live hipchat still looks like this:</p>

<p><img src="http://markfussell.emenar.com/images/add-8/add8_demo1.png" /></p>

<p>So the DB server is definitely there:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>i-4e7cb59a:fed1/db1: Launched!</span></code></pre></td></tr></table></div></figure>


<p>And the information is there:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;filetype&quot;</span><span class="p">:</span> <span class="s2">&quot;nodepresence&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;value&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;a&quot;</span><span class="p">:</span> <span class="s2">&quot;a&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;deployment&quot;</span><span class="p">:</span> <span class="s2">&quot;fed1&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;initgitrepo&quot;</span><span class="p">:</span> <span class="s2">&quot;repo2_petulant-cyril&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;instance-id&quot;</span><span class="p">:</span> <span class="s2">&quot;i-4e7cb59a&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;nodepart&quot;</span><span class="p">:</span> <span class="s2">&quot;db1&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;stacktype&quot;</span><span class="p">:</span> <span class="s2">&quot;lad1&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;state&quot;</span><span class="p">:</span> <span class="s2">&quot;done&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;statelog&quot;</span><span class="p">:</span> <span class="s2">&quot;setup:20151008-174646;initdone:20151008-174830;&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;statetss&quot;</span><span class="p">:</span> <span class="s2">&quot;20151008-174830&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>So the only issue is for nodes to &#8216;find their partners&#8217;</p>

<h3>Finding the partners</h3>

<p>By the HipChat there are only three nodes alive, so problem one is finding live nodes vs. dead nodes.  There are
two levels to that:</p>

<ul>
<li> Finding plausibly live nodes</li>
<li> Finding truly awake nodes</li>
</ul>


<p>The simplest approach to the first is to make sure there is some kind of heartbeat within &#8216;statetss&#8217;.  Every-minute
is clearly possible, but a bit noisy if done in the main part of repo4.  It would be nice to not to see the heartbeat
block out the actual state change information that is already there. An interesting alternative is to &#8216;flatten time&#8217;
and have an alternative branch that stores information as &#8216;it/presence/flattime/timestamp&#8217;.  Or given we are storing
the information differently, we could use the main branch and just change the comment to mention &#8216;flattime&#8217;.
Yes, the information in the files would not change very often.  But Git stores files separate from paths,
so there is very little overhead to adding new paths to identical files.</p>

<h4>Time flattened</h4>

<p>repo4 has folder under &#8216;presence&#8217; called &#8216;flattime&#8217; which contains the presence information where every checkin is a new path.
To keep things manageable the timestamp is complete &#8216;YYYYMMDDHHMM&#8217;, but year/month/day/hour/ is used to organize it.
Seconds are not used because we want everything to be together and there is no guarantee the seconds would match
between machines.</p>

<p>Looking at a few minutes of time, we get something like this:</p>

<p><img src="http://markfussell.emenar.com/images/add-9/add9_flattime1.png" /></p>

<p>The files change a bit because the machines are switching states and at the &#8216;capture&#8217; moment could be in almost any state
of their &#8216;state machine&#8217;.</p>

<h4>How precise?</h4>

<p>So this is quite precise in time and you could certainly slow it down.  Sometimes providers get annoyed if you use
git this way, but the software itself is thoroughly comfortable with it.  You can get some impressive merge graphs
as the machine count goes up.</p>

<p><img src="http://markfussell.emenar.com/images/add-9/add9_merge1.png" /></p>

<p>So making things less often and more jittered will help alleviate some stress.  Since
this is only the first stage of presence (what exists and is plausibly alive), we will deal with stale data in the
second stage.</p>

<h3>Who is what?</h3>

<p>So we have a directory of JSON files and we want to find certain kinds of partners.  It is simplest to just
run through all the files and see what is inside them.  The files can be loaded one-by-one or concatenated together
into a working temporary file.</p>

<p>A basic python script could look like this:</p>

<h4>buildLiveServerJson.py</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/env python</span>
</span><span class='line'>
</span><span class='line'><span class="c">#========================================================</span>
</span><span class='line'><span class="c">#=== buildLiveServerJson.py</span>
</span><span class='line'><span class="c">#=== This builds a JSON structure of server presence data</span>
</span><span class='line'><span class="c">#=== from a directory of presence data</span>
</span><span class='line'><span class="c">#=========================================================</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">json</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">string</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">os</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">optparse</span> <span class="kn">import</span> <span class="n">OptionParser</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">datetime</span> <span class="kn">import</span> <span class="n">datetime</span><span class="p">,</span><span class="n">timedelta</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">now</span> <span class="o">=</span> <span class="n">datetime</span><span class="o">.</span><span class="n">utcnow</span><span class="p">()</span>
</span><span class='line'><span class="n">tss</span> <span class="o">=</span> <span class="n">now</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s">&quot;%Y%m</span><span class="si">%d</span><span class="s">%H%M%S&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">backminute</span> <span class="o">=</span> <span class="n">timedelta</span><span class="p">(</span><span class="n">minutes</span><span class="o">=-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="n">before</span> <span class="o">=</span> <span class="n">now</span> <span class="o">+</span> <span class="n">backminute</span>
</span><span class='line'>
</span><span class='line'><span class="n">tsm</span> <span class="o">=</span> <span class="n">before</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s">&quot;%Y%m</span><span class="si">%d</span><span class="s">%H%M&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">datepath</span> <span class="o">=</span> <span class="n">before</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s">&quot;%Y/%m/</span><span class="si">%d</span><span class="s">/%H&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">USAGE_STRING</span> <span class="o">=</span> <span class="s">&quot;usage: %prog [options]&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">parser</span> <span class="o">=</span> <span class="n">OptionParser</span><span class="p">(</span><span class="n">usage</span><span class="o">=</span><span class="n">USAGE_STRING</span><span class="p">)</span>
</span><span class='line'><span class="n">parser</span><span class="o">.</span><span class="n">set_defaults</span><span class="p">(</span><span class="n">verbose</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'><span class="n">parser</span><span class="o">.</span><span class="n">add_option</span><span class="p">(</span><span class="s">&quot;--source&quot;</span><span class="p">,</span> <span class="n">action</span><span class="o">=</span><span class="s">&quot;store&quot;</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="s">&quot;string&quot;</span><span class="p">,</span> <span class="n">dest</span><span class="o">=</span><span class="s">&quot;source&quot;</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="s">&quot;The source directories of the presence files.  Use a comma to separate multiple source directories.&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">parser</span><span class="o">.</span><span class="n">add_option</span><span class="p">(</span><span class="s">&quot;--adddatepath&quot;</span><span class="p">,</span> <span class="n">action</span><span class="o">=</span><span class="s">&quot;store_true&quot;</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">dest</span><span class="o">=</span><span class="s">&quot;adddatepath&quot;</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="s">&quot;Whether to add the current datetime path to the source&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">parser</span><span class="o">.</span><span class="n">add_option</span><span class="p">(</span><span class="s">&quot;--suffix&quot;</span><span class="p">,</span> <span class="n">action</span><span class="o">=</span><span class="s">&quot;store&quot;</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="s">&quot;string&quot;</span><span class="p">,</span> <span class="n">dest</span><span class="o">=</span><span class="s">&quot;suffix&quot;</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="s">&quot;A suffix to add at the end of the source&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="n">options</span><span class="p">,</span> <span class="n">args</span><span class="p">)</span> <span class="o">=</span> <span class="n">parser</span><span class="o">.</span><span class="n">parse_args</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">source</span> <span class="o">=</span> <span class="n">options</span><span class="o">.</span><span class="n">source</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span>
</span><span class='line'><span class="n">adddatepath</span> <span class="o">=</span> <span class="n">options</span><span class="o">.</span><span class="n">adddatepath</span>
</span><span class='line'><span class="n">suffix</span> <span class="o">=</span> <span class="n">options</span><span class="o">.</span><span class="n">suffix</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="ow">not</span> <span class="n">source</span><span class="p">:</span>
</span><span class='line'>    <span class="n">parser</span><span class="o">.</span><span class="n">print_help</span><span class="p">()</span>
</span><span class='line'>    <span class="nb">exit</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">full_source</span> <span class="o">=</span> <span class="n">source</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">adddatepath</span><span class="p">:</span>
</span><span class='line'>   <span class="n">full_source</span> <span class="o">=</span> <span class="n">full_source</span> <span class="o">+</span> <span class="n">datepath</span> <span class="o">+</span> <span class="s">&#39;/&#39;</span> <span class="o">+</span> <span class="n">tsm</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">suffix</span><span class="p">:</span>
</span><span class='line'>   <span class="n">full_source</span> <span class="o">=</span> <span class="n">full_source</span> <span class="o">+</span> <span class="n">suffix</span>
</span><span class='line'>
</span><span class='line'><span class="c">#=========================================================</span>
</span><span class='line'><span class="c">#=========================================================</span>
</span><span class='line'><span class="c">#=========================================================</span>
</span><span class='line'>
</span><span class='line'><span class="n">sys</span><span class="o">.</span><span class="n">stdout</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">&#39;{&quot;source&quot;:&quot;&#39;</span><span class="o">+</span><span class="n">source</span><span class="o">+</span><span class="s">&#39;&quot;,&quot;suffix&quot;:&quot;&#39;</span><span class="o">+</span><span class="n">suffix</span><span class="o">+</span><span class="s">&#39;&quot;,&quot;full_source&quot;:&quot;&#39;</span><span class="o">+</span><span class="n">full_source</span><span class="o">+</span><span class="s">&#39;&quot;,&quot;tss&quot;:&quot;&#39;</span><span class="o">+</span><span class="n">tss</span><span class="o">+</span><span class="s">&#39;&quot;,&quot;tsm&quot;:&quot;&#39;</span><span class="o">+</span><span class="n">tsm</span><span class="o">+</span><span class="s">&#39;&quot;,&quot;datepath&quot;:&quot;&#39;</span><span class="o">+</span><span class="n">datepath</span><span class="o">+</span><span class="s">&#39;&quot;,&quot;nodes&quot;:[&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">isfirst</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class='line'><span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="n">os</span><span class="o">.</span><span class="n">listdir</span><span class="p">(</span><span class="n">full_source</span><span class="p">):</span>
</span><span class='line'>  <span class="n">f_json</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="nb">open</span><span class="p">(</span><span class="n">full_source</span><span class="o">+</span><span class="n">f</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="n">isfirst</span><span class="p">:</span>
</span><span class='line'>     <span class="n">isfirst</span> <span class="o">=</span> <span class="bp">False</span>
</span><span class='line'>  <span class="k">else</span><span class="p">:</span>
</span><span class='line'>     <span class="n">sys</span><span class="o">.</span><span class="n">stdout</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">&quot;,&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">sys</span><span class="o">.</span><span class="n">stdout</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">f_json</span><span class="p">))</span>
</span><span class='line'><span class="n">sys</span><span class="o">.</span><span class="n">stdout</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">&quot;]}&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">sys</span><span class="o">.</span><span class="n">stdout</span><span class="o">.</span><span class="n">flush</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Our first stage is to get a list of plausible nodes and store that:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>python buildLiveServerJson.py --source<span class="o">=</span>/root/gitrepo/repo4_sagacious-adventure/it/presence/flattime/ --adddatepath --suffix /all/ | python -mjson.tool &gt; /root/nodeinfo/liveserver.json
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://markfussell.emenar.com/images/add-9/add9_json1.png" /></p>

<p>Next we can filter out the ones that don&#8217;t respond to our &#8216;awake&#8217; check.  That leaves
us with one or more remaining.  Depending on the kind of system you may actually want to know a bunch of nodes vs.
just one (e.g. ZooKeeper).</p>
]]></content>
  </entry>
  
</feed>
