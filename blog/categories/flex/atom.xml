<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Flex | Polyglot]]></title>
  <link href="http://markfussell.emenar.com/blog/categories/flex/atom.xml" rel="self"/>
  <link href="http://markfussell.emenar.com/"/>
  <updated>2015-10-01T11:08:15-07:00</updated>
  <id>http://markfussell.emenar.com/</id>
  <author>
    <name><![CDATA[Mark Fussell]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A Taste of Ruby (Part 6)]]></title>
    <link href="http://markfussell.emenar.com/blog/a-taste-of-ruby-part-6/"/>
    <updated>2008-09-03T02:18:00-07:00</updated>
    <id>http://markfussell.emenar.com/blog/a-taste-of-ruby-part-6</id>
    <content type="html"><![CDATA[<p>This is a multi-part series.  The first in the series is <a href="/blog/a-taste-of-ruby">here</a>.</p>

<h2>Tower of Hanoi — With Rule Disks (and no stack)</h2>

<p>The first passes at the Tower of Hanoi algorithm were all done with the algorithm being a recursive call on the stack.  This is 'true' as an algorithm, but comes off as a bit unnatural for humans.</p>

<!-- more -->


<p>But it also has a problem in that the algorithm can not be 'suspended' in mid activity unless the language allows a feature (called a continuation) that can suspend the stack itself.  Although Ruby is multi-threaded and running two threads works in RubyShoes, Rails does not work either with a stateful server (and multiple threads) or with continuations.  At the end of each controller dispatch the session or the database has to have persisted all state.  So we need to do something like formalizing the state of the Disks and Towers to make the Tower of Hanoi work with Rails.</p>

<p>Also, the Smalltalk code in this section was among the most 'closure-oriented', so this helps show how that maps to Ruby.</p>

<h3>You aren't capitalizing right?</h3>

<p>Before continuing into the code, people should realize I actively object to Ruby's choice to have only one 'word' delimiter by convention.  See my article <a href="/blog/ruby-naming-convention-failure">Ruby Naming Convention Failure</a> for details and the naming conventions I use, especially for methods.  But the quick summary is:</p>

<ul>
<li><p>I use CamelCase for combining words into a 'part' of a method name or variable name</p></li>
<li><p>I use an underscore as a placeholder for the parameters of the method</p></li>
<li><p>I use an underscore to break up a phrase into logical parts</p></li>
</ul>


<p>If Ruby supported some other word delimiter than underscore (say hyphen "-" or ":"), I would be agnostic to dropping the CamelCase, but without that second word delimiter, dropping CamelCase is a losing proposition in expressiveness.  In a team setting we might have to discuss this, but in this case this is my code alone... and my standard actually makes it easier to convert to-from Smalltalk, Ruby, Flex, Java, etc.  The standard works cleanly with all of them.</p>

<h3>Tower...</h3>

<p>To migrate to the Rules version of the HanoiTower, it is easiest to start with the Disks themselves.</p>

<h4>RulesHanoiDisk</h4>

<p>A Rules based HanoiDisk just needs to be able to say "Can I move somewhere" and "If so, where".  It does this in collaboration with the Tower.  "@tower" is now an instance variable that every Disk has set when it is created.  By using an instance variable, it is cleaner than using class variables (we can have multiple towers at the same time) and it works under Ruby serialization/marshalling.</p>

<p>```ruby
class RulesHanoiDisk &lt; AnimatedHanoiDisk
  def hasLegalMove()</p>

<pre><code>@towers.forPolesOtherThan_do(self) do | eachTopDisk |
  if (eachTopDisk.width  &gt; self.width) then return true end
end
return false
</code></pre>

<p>  end</p>

<p>  def bestMove()</p>

<pre><code>@towers.forPolesOtherThan_do(self) do | eachTopDisk |
  if ( (eachTopDisk.width &gt; self.width) &amp;&amp; (eachTopDisk.pole != @previousPole) ) then return eachTopDisk end
end
return nil
</code></pre>

<p>  end</p>

<p>  def move_upon(destination)</p>

<pre><code>@previousPole = @pole

super(destination)
</code></pre>

<p>  end</p>

<p>end
```</p>

<p>Among the interesting things with the new RulesHanoiDisk is the extensive use of Blocks.  By using Blocks, we can iterate over the collection of stacks without creating new collections.  The Disk and the Tower collaborate to create custom iterators with minimal code.  See RulesTowerOfHanoi for the example.</p>

<h4>RulesTowerOfHanoi</h4>

<p>```ruby
class RulesTowerOfHanoi &lt; AnimatedTowerOfHanoi
  def initHeight(height)</p>

<pre><code>@height = height

return self
</code></pre>

<p>  end</p>

<p>  def move_tower(height, fromPin, toPin, usingPin)</p>

<pre><code>while (!doNextMove_IsDone()) do end
</code></pre>

<p>  end</p>

<p>  def createDisk()</p>

<pre><code>result = RulesHanoiDisk.new
result.setupTowers(self)

return result
</code></pre>

<p>  end</p>

<p>  def doNextMove_IsDone()</p>

<pre><code>@currentDisk = decide()

@stacks[@currentDisk.pole-1].pop()
@stacks[@destinationDisk.pole-1].push(@currentDisk)
@currentDisk.move_upon(@destinationDisk)

@oldDisk = @currentDisk

@app.noteChange if @app

return isAllOnOneTower()
</code></pre>

<p>  end</p>

<p>  def isAllOnOneTower()</p>

<pre><code>foundStack = @stacks.detect { |eachStack|  eachStack.size == @height }
return foundStack != nil
</code></pre>

<p>  end</p>

<p>  def forTopsOtherThan_do(disk)</p>

<pre><code>@stacks.each do | eachStack |
  if (eachStack.empty?) then next end

  topDisk = eachStack.last
  if (topDisk == disk) then next end

  yield topDisk
end
</code></pre>

<p>  end</p>

<p>  def forPolesOtherThan_do(disk)</p>

<pre><code>@stacks.each_with_index do | eachStack, i |
  if (i == disk.pole-1) then next end;

  topDisk = if (eachStack.empty?) then @mockDisks[i] else eachStack.last end;

  yield topDisk
end
</code></pre>

<p>  end</p>

<p>  def decide</p>

<pre><code>forTopsOtherThan_do(@oldDisk) do | eachDisk |
  if (eachDisk.hasLegalMove) then
    @destinationDisk = eachDisk.bestMove

    return eachDisk
  end
end
</code></pre>

<p>  end</p>

<p>end</p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Taste of Flex (Part 6)]]></title>
    <link href="http://markfussell.emenar.com/blog/a-taste-of-flex-part-6/"/>
    <updated>2008-09-02T16:46:00-07:00</updated>
    <id>http://markfussell.emenar.com/blog/a-taste-of-flex-part-6</id>
    <content type="html"><![CDATA[<p>This is a multi-part series.  The first in the series is <a href="/blog/a-taste-of-flex">here</a>.</p>

<h2>Tower of Hanoi &mdash; With Rule Disks (and no stack)</h2>

<p>The first passes at the Tower of Hanoi algorithm were all done with the algorithm being a recursive call on the stack.  This is 'true' as an algorithm, but comes off as a bit unnatural for humans.  But it also has a problem in that the algorithm can not be 'suspended' in mid activity unless the language allows a feature (called a continuation) that can suspend the stack itself.  For a multi-threaded language, this inability to suspend may not be a problem because you could create one thread for the algorithm and another thread to listen for whenever a new (interesting) change in state occurs.  This is how the RubyShoes version works: the algorithm is in a new thread separate from the GUI thread (otherwise things behave badly).  Similarly, the Smalltalk-80 GUI is being drawn in a different thread than the main execution thread.  But in many circumstances even this multi-thread version would not work: say you have a client-server version (e.g. Rails) or want to pause/suspend the execution of the 100-tall tower of hanoi.  And finally, if you only have a single-threaded language like Flex, things just don't work at all for intermediate renderings unless you can make the algorithm not be dependent on the call stack.</p>

<!-- more -->


<h3>Tower of Hanoi — With Rule Disks (and no stack) -- Flex</h3>

<p>I think it is easiest to work up from the Disk perspective, although see the book for a different flow.  The main changes to HanoiDisk are to have it be able to figure out whether it has any legal moves, and what the bestMove (next move) would be.  To do each of these, the disk needs to communicate back with the towers.  In the Smalltalk code this was done through a Class Variable, but it is far simpler and more scalable to do this through instance variables: each Disk needs to know what tower it belongs to.</p>

<h4>HanoiDiskRules</h4>

<p>```actionscript
package {</p>

<p>public class HanoiDiskRules extends HanoiDisk {</p>

<pre><code>protected var my_previousPole : Number;
protected var my_towers : AnimatedRulesTowerOfHanoi;

public function setupTowers(towers : AnimatedRulesTowerOfHanoi) : void {
    my_towers = towers;
}

public function hasLegalMove() : Boolean {
    var otherTops : Array = my_towers.selectPolesOtherThan(this);
    for (var i:int = 0; i&lt;otherTops.length; i++) {
        var eachTopDisk : HanoiDisk = otherTops[i];
        if (eachTopDisk.width &gt; this.width) return true;
    }
    return false;
}

public function bestMove() : HanoiDisk {
    var otherTops : Array = my_towers.selectPolesOtherThan(this);
    for (var i:int = 0; i&lt;otherTops.length; i++) {
        var eachTopDisk : HanoiDisk = otherTops[i];
        if ( (eachTopDisk.width &gt; this.width) &amp;&amp; (eachTopDisk.pole != my_previousPole) ) return eachTopDisk;
    }
    return null;
}

public override function moveUpon(destination : HanoiDisk) : void {
    my_previousPole = pole;

    super.moveUpon(destination);
}
</code></pre>

<p>}</p>

<p>} //package
```</p>

<p>Compared to the Smalltalk version of this, the main difference is we are creating Array objects instead of passing a function into an iterator.  Again this seems the more natural for Flex... but... it is starting to get annoying looking and has real performance impact, so later we should try to do an iterator + function-based version.</p>

<h4>AnimatedRulesTowerOfHanoi (No Animation)</h4>

<p>The change to the Tower code for Flex is two parts:</p>

<ul>
<li><p>Provide methods that support the rules that the smarter HanoiDiskRules has</p></li>
<li><p>Drive the algorithm in a way to enable Flex to render the intermediary results</p></li>
</ul>


<p>We can do these in two steps, with the current step focused on just the algorithm changes</p>

<p>```actionscript
package {</p>

<p>public class AnimatedRulesTowerOfHanoi extends AnimatedTowerOfHanoi {</p>

<pre><code>protected var my_oldDisk : HanoiDisk;
protected var my_currentDisk : HanoiDisk;
protected var my_destinationDisk : HanoiDisk;

protected override function moveTower(height : int, fromPin : *, toPin : *, usingPin : *) : void {
    //Now that the disks know all the rules... we can ignore all the arguments!

    while (!doNextMove_IsDone) {};
}

protected function doNextMove_IsDone() : Boolean {
    my_currentDisk = this.decide();

    (my_stacks[my_currentDisk.pole-1] as Array).pop();
    (my_stacks[my_destinationDisk.pole-1] as Array).push(my_currentDisk);
    my_currentDisk.moveUpon(my_destinationDisk);

    my_oldDisk = my_currentDisk;

    my_view.noteChange();

    return isAllOnOneTower();
}

protected function isAllOnOneTower() : Boolean {
    for (var i:int = 0; i&lt;my_stacks.length; i++) {
        var eachStack : Array = my_stacks[i];
        if (eachStack.length == my_height) return true;
    }
    return false;
}

public function selectTopsOtherThan(disk : HanoiDisk) : Array {
    var result : Array = new Array();
    for (var i:int = 0; i&lt;my_stacks.length; i++) {
        var eachStack : Array = my_stacks[i];

        if (eachStack.length == 0) continue;

        var topDisk : HanoiDisk = eachStack[eachStack.length-1];
        if (topDisk !== disk) {
            result.push(topDisk);
        }
    }
    return result;
}

public function selectPolesOtherThan(disk : HanoiDisk) : Array {
    var result : Array = new Array();
    for (var i:int = 0; i&lt;my_stacks.length; i++) {
        var eachStack : Array = my_stacks[i];

        if (i == disk.pole-1) continue;

        if (eachStack.length == 0)  {
            result.push(my_mockDisks[i]);
        } else {
            var topDisk : HanoiDisk = eachStack[eachStack.length-1];
            result.push(topDisk);
        }
    }
    return result;
}

protected function decide() : HanoiDisk {
    var tops : Array = selectTopsOtherThan(my_oldDisk);
    for (var i:int = 0; i&lt;tops.length; i++) {
        var movingDisk : HanoiDiskRules = tops[i];
        if (movingDisk.hasLegalMove()) {
            my_destinationDisk = movingDisk.bestMove();

            return movingDisk;
        }
    }
    //This should never happen
    return null;
}

protected override function createDisk() : HanoiDisk {
    var result : HanoiDiskRules = new HanoiDiskRules();
    result.setupTowers(this);
    return result;
}
</code></pre>

<p>}</p>

<p>} //package
```</p>

<p>As mentioned in HanoiDiskRules section, the main annoyance of this particular implementation of the new algorithm compared to Smalltalk is having to create intermediate array objects just to communicate between the Disk and the Tower.</p>

<p>But things should work again.  Except we will still get only one rendering because the whole algorithm is executed in one call within a "while" loop.</p>

<h3>Tower of Hanoi — With Rule Disks and Correct Animation -- Flex</h3>

<p>To make things work in Flex now, all we do is have to unwrap the immediacy [single call stack] of the while loop.  Instead of calling each 'doNextMove' immediately, we will wait for an event.  That event could be anything, like clicking a button or the server sending a response.  Each time we get an event, we will do the next step.  To be easy to present and view, we will make the events be driven by a simple timer.  Each time the timer fires an event, we will do the next step.  Repeating this until we are done.</p>

<p>The only method changes are to 'moveTower' and to 'handleTimer'.  Everything else works just the way it was.</p>

<h4>AnimatedRulesTowerOfHanoi (No Animation)</h4>

<p>```actionscript
package {</p>

<pre><code>import flash.events.TimerEvent;
import flash.utils.Timer;
</code></pre>

<p>public class AnimatedRulesTowerOfHanoi extends AnimatedTowerOfHanoi {</p>

<pre><code>protected var my_oldDisk : HanoiDisk;
protected var my_currentDisk : HanoiDisk;
protected var my_destinationDisk : HanoiDisk;

protected var my_timer : Timer;

protected override function moveTower(height : int, fromPin : *, toPin : *, usingPin : *) : void {
    //Now that the disks know all the rules... we can ignore all the arguments!

    my_timer = new Timer(300)
    my_timer.addEventListener(TimerEvent.TIMER, handleTimer);
    my_timer.start();

}

public function handleTimer(evt:TimerEvent):void {
    var isDone : Boolean = doNextMove_IsDone();

    if (isDone) {
        my_timer.stop();
        my_timer = null;
    }
}




protected function doNextMove_IsDone() : Boolean {
    my_currentDisk = this.decide();

    (my_stacks[my_currentDisk.pole-1] as Array).pop();
    (my_stacks[my_destinationDisk.pole-1] as Array).push(my_currentDisk);
    my_currentDisk.moveUpon(my_destinationDisk);

    my_oldDisk = my_currentDisk;

    my_view.noteChange();

    return isAllOnOneTower();
}

protected function isAllOnOneTower() : Boolean {
    for (var i:int = 0; i&lt;my_stacks.length; i++) {
        var eachStack : Array = my_stacks[i];
        if (eachStack.length == my_height) return true;
    }
    return false;
}

public function selectTopsOtherThan(disk : HanoiDisk) : Array {
    var result : Array = new Array();
    for (var i:int = 0; i&lt;my_stacks.length; i++) {
        var eachStack : Array = my_stacks[i];

        if (eachStack.length == 0) continue;

        var topDisk : HanoiDisk = eachStack[eachStack.length-1];
        if (topDisk !== disk) {
            result.push(topDisk);
        }
    }
    return result;
}

public function selectPolesOtherThan(disk : HanoiDisk) : Array {
    var result : Array = new Array();
    for (var i:int = 0; i&lt;my_stacks.length; i++) {
        var eachStack : Array = my_stacks[i];

        if (i == disk.pole-1) continue;

        if (eachStack.length == 0)  {
            result.push(my_mockDisks[i]);
        } else {
            var topDisk : HanoiDisk = eachStack[eachStack.length-1];
            result.push(topDisk);
        }
    }
    return result;
}

protected function decide() : HanoiDisk {
    var tops : Array = selectTopsOtherThan(my_oldDisk);
    for (var i:int = 0; i&lt;tops.length; i++) {
        var movingDisk : HanoiDiskRules = tops[i];
        if (movingDisk.hasLegalMove()) {
            my_destinationDisk = movingDisk.bestMove();

            return movingDisk;
        }
    }
    //This should never happen
    return null;
}

protected override function createDisk() : HanoiDisk {
    var result : HanoiDiskRules = new HanoiDiskRules();
    result.setupTowers(this);
    return result;
}
</code></pre>

<p>}</p>

<p>} //package
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Taste of Flex (Part 5)]]></title>
    <link href="http://markfussell.emenar.com/blog/a-taste-of-flex-part-5/"/>
    <updated>2008-09-02T07:44:00-07:00</updated>
    <id>http://markfussell.emenar.com/blog/a-taste-of-flex-part-5</id>
    <content type="html"><![CDATA[<p>This is a multi-part series.  The first in the series is <a href="/blog/a-taste-of-flex">here</a>.</p>

<h2>Tower of Hanoi — With Graphics</h2>

<p>To follow the flow of code progress within "A Taste of Smalltalk", we next need to include a graphical representation of the disks and their movement between the poles.  Flex lives inside a Flash player (or app), so it is inherently capable of doing sophisticated graphics.  Actually it is hard to 'contain' yourself to just doing the simplest possible thing when animating sprites around the screen is very easy.  But to try to compare Flex to Ruby and Smalltalk, we want to keep things in about the same ballpark -- and again study how different languages work with the same problem.</p>

<!-- more -->


<h3>Tower of Hanoi — With Graphics -- Flex</h3>

<p>Given our Flex version is already in a graphics environment, and the model (TowerOfHanoi) is already aware of having to talk the View, the changes are relatively minimal to get things working.  We need to render the disks in the Application/View and we need to notify the view whenever the model changes.</p>

<h4>Main Application</h4>

<p>To add rendering in, we just create a render canvas area and then create the UIComponents (shapes) on each redraw.  Normally we would be more likely to animate a single set of disks (vs. destroying them and recreating them), which would be both better in performance and be <em>much cooler</em>, but this matches the RubyShoes version better.</p>

<p>```xml
&lt;?xml version="1.0" encoding="utf-8"?>
&lt;mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" layout="vertical"</p>

<pre><code>creationComplete="handleCreationComplete()"
</code></pre>

<blockquote><p>&lt;mx:Script></p>

<pre><code>&lt;![CDATA[
    import mx.core.UIComponent;
    var my_model : AnimatedTowerOfHanoi;
</code></pre></blockquote>

<pre><code>    function handleCreationComplete() : void {
        Array.prototype.first = function():Object { return this[0]; }

        my_model = new AnimatedTowerOfHanoi();
        my_model.initView(this);
    }

    function handleDoItClicked() : void {
        logToConsole("\n=== Doing a Hanoi tower "+vTowerInput.text+" tall\n");
        my_model.doHanoi(new Number(vTowerInput.text));
    }

    public function logToConsole(string : String) : void {
        vConsole.text = vConsole.text+string;
    }

    public function noteChange() : void {
        vRenderArea.removeAllChildren();

        var stacks : Array = my_model.getStacks();
        for (var i : int = 0; i&lt;stacks.length; i++) {
            var eachStack : Array = stacks[i];
            var poleCenterX : Number = i*100 + 50;

            for (var j:int = 0; j&lt;eachStack.length; j++) {
                var eachDisk : HanoiDisk = eachStack[j];

                var diskHeight : int = 180 - (j * 15);
                var diskWidth  : int = eachDisk.width * 10;

                var eachShape : UIComponent = new UIComponent();
                eachShape.graphics.beginFill(0xA00000);
                eachShape.graphics.drawRect(poleCenterX - diskWidth / 2, diskHeight, diskWidth, 10);

                vRenderArea.addChild(eachShape);
            }
        }
    }
]]]]&gt;&lt;![CDATA[&gt;
</code></pre>

<p>&lt;/mx:Script>
&lt;mx:HBox></p>

<pre><code>&lt;mx:Text text="How tall a tower?" /&gt;
&lt;mx:TextInput id="vTowerInput" /&gt;
&lt;mx:Button label="Do It" click="handleDoItClicked()" /&gt;
</code></pre>

<p>&lt;/mx:HBox>
&lt;mx:Canvas id="vRenderArea" width="300" height="200" borderStyle="solid" />
&lt;mx:TextArea id="vConsole" width="100%" height="100%" />
&lt;/mx:Application>
```</p>

<h4>AnimatedTowerOfHanoi</h4>

<p>The AnimatedTower just needs to send out change events (via a simple callback vs. true event listeners that are in Flex).</p>

<p>```actionscript
package {</p>

<p>public class AnimatedTowerOfHanoi extends ModeledTowerOfHanoi {</p>

<pre><code>protected override function setupDisks() : void {
    super.setupDisks();

    my_view.noteChange();
}

public function getStacks() : Array {
    return my_stacks;
}

protected override function moveDisk(fromPin : *, toPin : *) : void {
    super.moveDisk(fromPin, toPin);

    my_view.noteChange();
}
</code></pre>

<p>}</p>

<p>} //package
```</p>

<h3>Super Easy...But doesn't work</h3>

<p>Well, that was really easy... except it doesn't really work :-(  You can only see the final result of all the nice disks on the last stack.  None of the intermediary steps before this last rendering are shown at all.</p>

<p>Clearly we are missing something... where is the "Sleep" equivalent?  If we could add a 'sleep' then everything would work right?  Unfortunately both "No" and "NO!".  When Flex/Flash are running user code, they are doing it between screen renderings and a bunch of other tasks Flash does.  So you can't just keep rendering things in the same thread (same stack) and have any of that be visible except the last version.  If you could 'sleep', you would just make Flash pause for no good reason.</p>

<p>The solution is to do each rendering on some kind of event.  Something simple like do the next step of the hanoi algorithm every 0.3 seconds.  That sounds easy but: (1) Flex doesn't have continuations either so you can't just 'pause' the stack and (2) The current hanoi algorithm is completely stack based.</p>

<p>Fortunately the fix is both "not that hard" and also happens to be the next chapter of "A Taste of Smalltalk" called "An Algorithm for the Rest of Us".  So for the moment, lets punt on getting the animation in Flex right until we get to the next part.</p>

<h3>What's Next</h3>

<p>A new non-stack algorithm.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Taste of Flex (Part 4)]]></title>
    <link href="http://markfussell.emenar.com/blog/a-taste-of-flex-part-4/"/>
    <updated>2008-09-02T07:13:00-07:00</updated>
    <id>http://markfussell.emenar.com/blog/a-taste-of-flex-part-4</id>
    <content type="html"><![CDATA[<p>This is a multi-part series.  The first in the series is <a href="/blog/a-taste-of-flex">here</a>.</p>

<h2>Tower of Hanoi &mdash; With Model Objects</h2>

<p>The book "A Taste of Smalltalk" jumps from showing a single 'TowerOfHanoi' object to both adding in Disk model objects and putting on a graphical representation of those Disk objects.  Even though Flex has no issue with graphics, I want to separate these two changes both to match Ruby and because the changes are logically somewhat separate.  So first we can put in Disk objects and study that change.  After that, we can go into the GUI code.</p>

<!-- more -->


<h3>The Code</h3>

<p>```actionscript
package {</p>

<p>/<em>*
 * A ModeledTowerOfHanoi is the TowerOfHanoi algorithm
 * but it keeps track of the state of the Disks
 * with actual objects.  This makes it suitable for
 * model-based behavior (say tracking moves, animation or
 * other event listening) on top of those Disks
 </em>/
public class ModeledTowerOfHanoi extends TowerOfHanoi{</p>

<pre><code>protected var my_height : Number;
protected var my_mockDisks : Array;

public override function doHanoi(height : int) : void {
    my_height = height;

    setupDisks();

    logToConsole("\n\nStart\n");
    printStacks();

    logToConsole("\n\nMoves\n");
    moveTower(my_height, 1, 3, 2);

    logToConsole("\n\nResult\n");
    printStacks();
}

protected function setupDisks() : void {
    my_stacks = new Array();
    for (var i:int = 0; i&lt;3; i++) {
        my_stacks.push(new Array());
    }

    var firstStack : Array = my_stacks.first(); //[0];
    for (var j:int = 0; j&lt;my_height; j++) {
        firstStack.unshift(new HanoiDisk().initWidth_pole(j,1));
    }

    my_mockDisks = new Array();
    for (var k:int = 0; k&lt;3; k++) {
        my_mockDisks[k]=new HanoiDisk().initWidth_pole(1000,k);
    }
}

protected function printStacks() : void {
    for (var i:int = 0; i&lt;my_stacks.length; i++) {
        var eachStack : Array = my_stacks[i];
        logToConsole("   &lt;stack&gt;\n");
        for (var j:int = eachStack.length-1; j&gt;=0; j--) {
            var eachDisk : * = eachStack[j];
            logToConsole(eachDisk.toString()+"\n");
        }
        logToConsole("   &lt;/stack&gt;\n");
    }
}


protected override function moveDisk(fromPin : *, toPin : *) : void {
    var supportDisk = (my_stacks[toPin-1].length == 0) ? my_mockDisks[toPin-1] : my_stacks[toPin-1][0];

    var disk : HanoiDisk = my_stacks[fromPin-1].pop();
    my_stacks[toPin-1].push(disk);

    disk.moveUpon(supportDisk);

    logToConsole(disk + " moved " + fromPin + "-&gt;" + toPin+"\n");
}

public function logToConsole(string : String) {
    my_view.logToConsole(string);
}
</code></pre>

<p>}</p>

<p>} //package
```</p>

<h4>HanoiDisk</h4>

<p>```actionscript
package {</p>

<p>public class HanoiDisk {</p>

<pre><code>protected const CONST_asciiA : Number = "A".charCodeAt();

public var width : Number;
public var pole : Number;

protected var my_name : String;
protected var my_moveCount : Number = 0;

public function initWidth_pole(aWidth : Number, aPole : Number) : HanoiDisk {
    width = aWidth;
    pole = aPole;

    if (width &lt; 1000) {
        my_name = "Disk-#"+String.fromCharCode(CONST_asciiA+width);
    } else {
        my_name = "Base-#"+pole;
    }

    return this;
}


public function toString() : String {
    return my_name+"("+my_moveCount+")";
}

public function moveUpon(destination : HanoiDisk) : void {
    pole = destination.pole;
    my_moveCount++;
}
</code></pre>

<p>}</p>

<p>} //package
```</p>

<h4>ModeledTowerOfHanoi</h4>

<p>I believe the following are the most interesting aspects:</p>

<ol>
<li><p>Public Attributes (which may be wrapped or unwrapped instance variables)</p></li>
<li><p>Explicit 'override'</p></li>
<li><p>Explicit return values</p></li>
</ol>


<h3>Public Attributes</h3>

<p>Flex allows you to have attributes that are either (1) just instance variables or (2) one or a pair of 'set' and 'get' accessors.  The notation of access looks the same, so it is up to the receiver/implementer to decide whether 'wrapping' is necessary.  Although the Macro approach of Ruby is nicer than having to do add accessors manually (or even 'refactor' them in with a tool), the Flex approach is by far the best for this kind of situation.  The language/compiler actually understands the intent of the programmer (declaratively) vs. running through a macro and the results just happen to be the same.</p>

<p>Note that Flex goes beyond simple public attributes and can attach notification capabilities on top of it.</p>

<h3>Explicit 'override'</h3>

<p>Flex and ActionScript again clearly try to help the programmer avoid making a mistake, in this case by making sure code <em>knows</em> it is overriding inherited code and that within that override you have to consider what the superclass wants, whether you need to call 'super', etc.</p>

<h3>Explicit return values</h3>

<p>Flex enables you to avoid specifying the type of a return value (defaulting to 'Any'), but you have to decide whether you are going to return anything or nothing at all.  And if you are going to return anything, you need to explicitly say what you are going to return.</p>

<p>As I mentions in Part 4 of a Taste of Ruby, this approach is clearly the best -- actually better than what I mentioned there.  So then returning 'null' by default becomes a good second best (no language so far mentioned),  Returning 'self' by default is third best (Smalltalk).  And Ruby returning of "whatever happens to be returned by the last statement" is a distant fourth.</p>

<h3>What Next</h3>

<p>Now onto the GUI itself.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Taste of Flex (Part 3)]]></title>
    <link href="http://markfussell.emenar.com/blog/a-taste-of-flex-part-3/"/>
    <updated>2008-09-02T05:11:00-07:00</updated>
    <id>http://markfussell.emenar.com/blog/a-taste-of-flex-part-3</id>
    <content type="html"><![CDATA[<p>This is a multi-part series.  The first in the series is <a href="/blog/a-taste-of-flex">here</a>.</p>

<h2>Tower of Hanoi -- With A Real Object</h2>

<p>The first two examples were not really object-based.  They are purely procedural, the algorithm is expressed completely recursively, and execution state is maintained on the call stack.  This works fine if we are just 'tracing' the algorithm, but it does not let us show the state of the towers at any given time.  We also don't see much in the way of real objects.  By adding the state of the towers in, we now have a reason to have stateful objects and new Classes of objects to maintain that state.  The added code with some explanation is in Chapter 4, Page 45.</p>

<!-- more -->


<p>```actionscript
package {</p>

<p>public class TowerOfHanoi {</p>

<pre><code>protected const CONST_asciiA : Number = "A".charCodeAt();

protected var my_view : *;
protected var my_stacks : Array;

public function initView(view : *) : void {
    my_view = view;
}

public function doHanoi(height : int) : void {
    my_stacks = new Array();
    for (var i:int = 0; i&lt;3; i++) {
        my_stacks.push(new Array());
    }

    var firstStack : Array = my_stacks[0];
    for (var j:int = 0; j&lt;height; j++) {
        firstStack.unshift("Disk-#"+String.fromCharCode(CONST_asciiA+j));
    }

    moveTower(height, 1, 3, 2);
}


protected function moveTower(height : int, fromPin : *, toPin : *, usingPin : *) : void {
    if (height &gt; 0) {
        moveTower(height-1, fromPin, usingPin, toPin);
        moveDisk(fromPin, toPin);
        moveTower(height-1, usingPin, toPin, fromPin);
    }
}

protected function moveDisk(fromPin : *, toPin : *) : void {
    var disk = my_stacks[fromPin-1].pop();
    my_stacks[toPin-1].push(disk);

    my_view.logToConsole(disk + " moved " + fromPin + "-&gt;" + toPin+"\n");
}
</code></pre>

<p>}</p>

<p>} //package
```</p>

<h3>TowerOfHanoi</h3>

<p>The TowerOfHanoi main class is now able to be a pure ActionScript class, so it looks much cleaner and formats nicely now.  The only additional feature it needs (compared to say the Smalltalk or Ruby version) is a reference to its View so it can print into the Console of that view.  I could actually just use 'Application.application' to get the outer view, but this is cleaner, more scalable, and makes it clearer what is happening [even though many people like to cheat with those kinds of Globals].</p>

<h3>Main Application</h3>

<p>The main Application is now clean of model code and just (1) holds onto the outer model and (2) provides view services to others.  I made logToConsole public so people could identify what is meant to be used by others vs. what is not.  Ultimately 'logToConsole' could be put into an interface to make it clearer that is all the 'TowerOfHanoi' needs from its view.</p>

<p>```xml
&lt;?xml version="1.0" encoding="utf-8"?>
&lt;mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" layout="vertical"</p>

<pre><code>creationComplete="handleCreationComplete()"
</code></pre>

<blockquote><p>&lt;mx:Script></p>

<pre><code>&lt;![CDATA[
    var my_model : TowerOfHanoi;
</code></pre></blockquote>

<pre><code>    function handleCreationComplete() : void {
        my_model = new TowerOfHanoi();
        my_model.initView(this);
    }

    function handleDoItClicked() : void {
        logToConsole("\n=== Doing a Hanoi tower "+vTowerInput.text+" tall\n");
        my_model.doHanoi(new Number(vTowerInput.text));
    }

    public function logToConsole(string : String) : void {
        vConsole.text = vConsole.text+string;
    }
]]]]&gt;&lt;![CDATA[&gt;
</code></pre>

<p>&lt;/mx:Script>
&lt;mx:HBox></p>

<pre><code>&lt;mx:Text text="How tall a tower?" /&gt;
&lt;mx:TextInput id="vTowerInput" /&gt;
&lt;mx:Button label="Do It" click="handleDoItClicked()" /&gt;
</code></pre>

<p>&lt;/mx:HBox>
&lt;mx:TextArea id="vConsole" width="100%" height="100%" />
&lt;/mx:Application>
```</p>

<h2>Comments</h2>

<p>By moving the ActionScript portion out of the main Application XML, the syntax becomes clearer.  Another feature of Flex that is starting to show is that we can document and compile-time verify visibility (as needed), contractual interfaces (as needed), etc.  But we can also leave them off and things work fine.</p>

<p>We do need to document the existence of instance variables, local variables, and methods of whatever types we use (e.g. 'self' / 'this') or the compiler will complain.  I believe this is far better (most of the time) than leaving that as a pure runtime issue and having typos potentially take significant time to debug.  And this does not interfere with things being 'dynamic' ('duck typed') in most cases although it is related to some meta-language capabilities.</p>

<p>Going into the Flex code itself, we can see a stronger relationship to 'C' style control structures and not the higher-level block/closure structuring of things.  Although iterators and Functions are available in Flex/AS, they are not as natural in the language as in Smalltalk or Ruby because they don't work well with collections (as defined in the current API) and are just a bit too verbose in general.  You could modify (monkey-patch) collections, but then the compiler would not understand the new functionality.    Although that is no worse than in Java/Ruby, it would be unusual in the community.  Maybe if Adobe adds it to AS4 just to be cross-language similar, it would be more natural.  But I didn't want to augment the existing classes just to have the language match another language's idioms</p>

<p>Examples of this kind of Monkey-Patch are:</p>

<ul>
<li><p><a href="http://www.rocketboots.com.au/blog/index.cfm?mode=entry&amp;entry=A5C356B1-E081-51EF-A79F47A1601ADEDF">RocketBoots</a></p></li>
<li><p><a href="http://www.kirupa.com/forum/archive/index.php/t-246045.html">Kirupa</a></p></li>
</ul>


<p>A minor note, the CharCode conversion is actually a Unicode conversion.  So you can put pretty much any character in the world languages you want to in there :-)  For example, try it with '50023' for the CONST value.</p>

<h3>Where Next?</h3>

<p>Next we should go to Chapter 5 (Animating the Program) — Page 64.  This involves some graphic work for the 'model' aspects to be realistic, and for Flex this is not at all difficult, but I will follow the same pattern of 'Parts' that I did with Ruby, so the next Part is just changing to having real Domain Model Objects (vs. the UI Model separation that occurred above for TowerOfHanoi vs the Application)</p>
]]></content>
  </entry>
  
</feed>
