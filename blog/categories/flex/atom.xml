<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Flex | Polyglot]]></title>
  <link href="http://markfussell.github.com/blog/categories/flex/atom.xml" rel="self"/>
  <link href="http://markfussell.github.com/"/>
  <updated>2013-02-06T20:18:14-08:00</updated>
  <id>http://markfussell.github.com/</id>
  <author>
    <name><![CDATA[Mark Fussell]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A Taste of Ruby (Part 6)]]></title>
    <link href="http://markfussell.github.com/blog/2008/09/03/a-taste-of-ruby-part-6/"/>
    <updated>2008-09-03T02:18:00-07:00</updated>
    <id>http://markfussell.github.com/blog/2008/09/03/a-taste-of-ruby-part-6</id>
    <content type="html"><![CDATA[<p>This is a multi-part series.  The first in the series is <a href="../../08/28/a-taste-of-ruby">here</a>.</p>

<h2>Tower of Hanoi — With Rule Disks (and no stack)</h2>

<p>The first passes at the Tower of Hanoi algorithm were all done with the algorithm being a recursive call on the stack.  This is 'true' as an algorithm, but comes off as a bit unnatural for humans.</p>

<p>But it also has a problem in that the algorithm can not be 'suspended' in mid activity unless the language allows a feature (called a continuation) that can suspend the stack itself.  Although Ruby is multi-threaded and running two threads works in RubyShoes, Rails does not work either with a stateful server (and multiple threads) or with continuations.  At the end of each controller dispatch the session or the database has to have persisted all state.  So we need to do something like formalizing the state of the Disks and Towers to make the Tower of Hanoi work with Rails.</p>

<p>Also, the Smalltalk code in this section was among the most 'closure-oriented', so this helps show how that maps to Ruby.</p>

<h3>You aren't capitalizing right?</h3>

<p>Before continuing into the code, people should realize I actively object to Ruby's choice to have only one 'word' delimiter by convention.  See my article <a href="ruby-naming-convention-failure">Ruby Naming Convention Failure</a> for details and the naming conventions I use, especially for methods.  But the quick summary is:</p>

<ul>
<li><p>I use CamelCase for combining words into a 'part' of a method name or variable name</p></li>
<li><p>I use an underscore as a placeholder for the parameters of the method</p></li>
<li><p>I use an underscore to break up a phrase into logical parts</p></li>
</ul>


<p>If Ruby supported some other word delimiter than underscore (say hyphen "-" or ":"), I would be agnostic to dropping the CamelCase, but without that second word delimiter, dropping CamelCase is a losing proposition in expressiveness.  In a team setting we might have to discuss this, but in this case this is my code alone... and my standard actually makes it easier to convert to-from Smalltalk, Ruby, Flex, Java, etc.  The standard works cleanly with all of them.</p>

<h3>Tower...</h3>

<p>To migrate to the Rules version of the HanoiTower, it is easiest to start with the Disks themselves.</p>

<h4>RulesHanoiDisk</h4>

<p>A Rules based HanoiDisk just needs to be able to say "Can I move somewhere" and "If so, where".  It does this in collaboration with the Tower.  "@tower" is now an instance variable that every Disk has set when it is created.  By using an instance variable, it is cleaner than using class variables (we can have multiple towers at the same time) and it works under Ruby serialization/marshalling.</p>

<p>```ruby
class RulesHanoiDisk &lt; AnimatedHanoiDisk
  def hasLegalMove()</p>

<pre><code>@towers.forPolesOtherThan_do(self) do | eachTopDisk |
  if (eachTopDisk.width  &gt; self.width) then return true end
end
return false
</code></pre>

<p>  end</p>

<p>  def bestMove()</p>

<pre><code>@towers.forPolesOtherThan_do(self) do | eachTopDisk |
  if ( (eachTopDisk.width &gt; self.width) &amp;&amp; (eachTopDisk.pole != @previousPole) ) then return eachTopDisk end
end
return nil
</code></pre>

<p>  end</p>

<p>  def move_upon(destination)</p>

<pre><code>@previousPole = @pole

super(destination)
</code></pre>

<p>  end</p>

<p>end
```</p>

<p>Among the interesting things with the new RulesHanoiDisk is the extensive use of Blocks.  By using Blocks, we can iterate over the collection of stacks without creating new collections.  The Disk and the Tower collaborate to create custom iterators with minimal code.  See RulesTowerOfHanoi for the example.</p>

<h4>RulesTowerOfHanoi</h4>

<p>```ruby
class RulesTowerOfHanoi &lt; AnimatedTowerOfHanoi
  def initHeight(height)</p>

<pre><code>@height = height

return self
</code></pre>

<p>  end</p>

<p>  def move_tower(height, fromPin, toPin, usingPin)</p>

<pre><code>while (!doNextMove_IsDone()) do end
</code></pre>

<p>  end</p>

<p>  def createDisk()</p>

<pre><code>result = RulesHanoiDisk.new
result.setupTowers(self)

return result
</code></pre>

<p>  end</p>

<p>  def doNextMove_IsDone()</p>

<pre><code>@currentDisk = decide()

@stacks[@currentDisk.pole-1].pop()
@stacks[@destinationDisk.pole-1].push(@currentDisk)
@currentDisk.move_upon(@destinationDisk)

@oldDisk = @currentDisk

@app.noteChange if @app

return isAllOnOneTower()
</code></pre>

<p>  end</p>

<p>  def isAllOnOneTower()</p>

<pre><code>foundStack = @stacks.detect { |eachStack|  eachStack.size == @height }
return foundStack != nil
</code></pre>

<p>  end</p>

<p>  def forTopsOtherThan_do(disk)</p>

<pre><code>@stacks.each do | eachStack |
  if (eachStack.empty?) then next end

  topDisk = eachStack.last
  if (topDisk == disk) then next end

  yield topDisk
end
</code></pre>

<p>  end</p>

<p>  def forPolesOtherThan_do(disk)</p>

<pre><code>@stacks.each_with_index do | eachStack, i |
  if (i == disk.pole-1) then next end;

  topDisk = if (eachStack.empty?) then @mockDisks[i] else eachStack.last end;

  yield topDisk
end
</code></pre>

<p>  end</p>

<p>  def decide</p>

<pre><code>forTopsOtherThan_do(@oldDisk) do | eachDisk |
  if (eachDisk.hasLegalMove) then
    @destinationDisk = eachDisk.bestMove

    return eachDisk
  end
end
</code></pre>

<p>  end</p>

<p>end</p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Taste of Flex (Part 6)]]></title>
    <link href="http://markfussell.github.com/blog/2008/09/02/a-taste-of-flex-part-6/"/>
    <updated>2008-09-02T09:46:40-07:00</updated>
    <id>http://markfussell.github.com/blog/2008/09/02/a-taste-of-flex-part-6</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Taste of Flex (Part 2)]]></title>
    <link href="http://markfussell.github.com/blog/2008/09/02/a-taste-of-flex-part-2/"/>
    <updated>2008-09-02T04:12:00-07:00</updated>
    <id>http://markfussell.github.com/blog/2008/09/02/a-taste-of-flex-part-2</id>
    <content type="html"><![CDATA[<p>This is a multi-part series.  The first in the series is <a href="a-taste-of-flex">here</a>.</p>

<h2>Tower of Hanoi -- Procedural With Input</h2>

<p>The second example from "A Taste of Smalltalk" is in Chapter 3, page 36 and does basic IO.  Except that Smalltalk-80 includes a Windowing graphics system so it can automatically open Dialogs and other things.    Fortunately Flex includes a Windowing system too, and can easily open up dialogs.  Opening up a Dialog might match the Smalltalk example the best, but given Flex is already running within a Window, opening up an extra dialog is a bit artificial.  Instead we can just add an input field for the value and a button to kick off the Hanoi.</p>

<h3>Tower of Hanoi -- Procedural With Input -- Flex</h3>

<p>[sourcecode language="xml"]</p>

<p>[/sourcecode]</p>

<p>To replace the dialog (in Smalltalk) or the command line request (in Ruby), we just create a horizontal row of a question label, an input field, and a Do It button.  Whenever a user clicks Do It, it takes the current value of the field and runs the Hanoi algorithm.</p>

<p>This is both pleasingly simply and also has the added benefit that we produced an interactive tool: you can just keep typing new numbers into it and it will give you new results.</p>

<h2>Comments</h2>

<p>Flex is highly capable with user input and interactivity.  It has a cleaner / simpler UI model than Smalltalk (IMO), which is good given we have had about 30 years of working with UIs to take things forward.  Compared to Ruby, Flex is as easy as RubyShoes for simple things like this example.</p>

<h3>Where Next?</h3>

<p>Next we should go to Chapter 4 — Page 44. The Third Example (with Real Hanoi Classes)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Taste of Flex (Part 5)]]></title>
    <link href="http://markfussell.github.com/blog/2008/09/02/a-taste-of-flex-part-5/"/>
    <updated>2008-09-02T00:44:58-07:00</updated>
    <id>http://markfussell.github.com/blog/2008/09/02/a-taste-of-flex-part-5</id>
    <content type="html"><![CDATA[<p>This is a multi-part series. The first in the series is <a href="a-taste-of-flex">here</a>.</p>

<h2>Tower of Hanoi — With Graphics</h2>

<p>To follow the flow of code progress within "A Taste of Smalltalk", we next need to include a graphical representation of the disks and their movement between the poles.  Flex lives inside a Flash player (or app), so it is inherently capable of doing sophisticated graphics.  Actually it is hard to 'contain' yourself to just doing the simplest possible thing when animating sprites around the screen is very easy.  But to try to compare Flex to Ruby and Smalltalk, we want to keep things in about the same ballpark -- and again study how different languages work with the same problem.</p>

<h3>Tower of Hanoi — With Graphics -- Flex</h3>

<p>Given our Flex version is already in a graphics environment, and the model (TowerOfHanoi) is already aware of having to talk the View, the changes are relatively minimal to get things working.  We need to render the disks in the Application/View and we need to notify the view whenever the model changes.</p>

<h4>Main Application</h4>

<p>To add rendering in, we just create a render canvas area and then create the UIComponents (shapes) on each redraw.  Normally we would be more likely to animate a single set of disks (vs. destroying them and recreating them), which would be both better in performance and be <em>much cooler</em>, but this matches the RubyShoes version better.</p>

<p>[sourcecode language="xml"]</p>

<p>[/sourcecode]</p>

<h4>AnimatedTowerOfHanoi</h4>

<p>The AnimatedTower just needs to send out change events (via a simple callback vs. true event listeners that are in Flex).</p>

<p>[sourcecode language="jscript"]
package {</p>

<p>public class AnimatedTowerOfHanoi extends ModeledTowerOfHanoi {</p>

<pre><code>protected override function setupDisks() : void {
    super.setupDisks();

    my_view.noteChange();
}

public function getStacks() : Array {
    return my_stacks;
}

protected override function moveDisk(fromPin : *, toPin : *) : void {
    super.moveDisk(fromPin, toPin);

    my_view.noteChange();
}
</code></pre>

<p>}</p>

<p>} //package
[/sourcecode]</p>

<h3>Super Easy...But doesn't work</h3>

<p>Well, that was really easy... except it doesn't really work :-(  You can only see the final result of all the nice disks on the last stack.  None of the intermediary steps before this last rendering are shown at all.</p>

<p>Clearly we are missing something... where is the "Sleep" equivalent?  If we could add a 'sleep' then everything would work right?  Unfortunately both "No" and "NO!".  When Flex/Flash are running user code, they are doing it between screen renderings and a bunch of other tasks Flash does.  So you can't just keep rendering things in the same thread (same stack) and have any of that be visible except the last version.  If you could 'sleep', you would just make Flash pause for no good reason.</p>

<p>The solution is to do each rendering on some kind of event.  Something simple like do the next step of the hanoi algorithm every 0.3 seconds.  That sounds easy but: (1) Flex doesn't have continuations either so you can't just 'pause' the stack and (2) The current hanoi algorithm is completely stack based.</p>

<p>Fortunately the fix is both "not that hard" and also happens to be the next chapter of "A Taste of Smalltalk" called "An Algorithm for the Rest of Us".  So for the moment, lets punt on getting the animation in Flex right until we get to the next part.</p>

<h3>What's Next</h3>

<p>A new non-stack algorithm.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Taste of Flex (Part 4)]]></title>
    <link href="http://markfussell.github.com/blog/2008/09/02/a-taste-of-flex-part-4/"/>
    <updated>2008-09-02T00:13:17-07:00</updated>
    <id>http://markfussell.github.com/blog/2008/09/02/a-taste-of-flex-part-4</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
</feed>
