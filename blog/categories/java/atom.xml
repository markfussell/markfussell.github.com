<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Java | Polyglot]]></title>
  <link href="http://markfussell.emenar.com/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://markfussell.emenar.com/"/>
  <updated>2015-10-14T08:36:25-07:00</updated>
  <id>http://markfussell.emenar.com/</id>
  <author>
    <name><![CDATA[Mark Fussell]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby Naming Convention Failure]]></title>
    <link href="http://markfussell.emenar.com/blog/ruby-naming-convention-failure/"/>
    <updated>2008-09-04T01:20:00-07:00</updated>
    <id>http://markfussell.emenar.com/blog/ruby-naming-convention-failure</id>
    <content type="html"><![CDATA[<p>Ruby has a strong recommendation against using CamelCase for method and variable names and to use only underscores instead.  There are lots of arguments out there on different naming conventions, and whatever side I pick in isolation is fairly irrelevant since either the whole community or the individual team has to chose the best approach.</p>

<!-- more -->


<p>In case people care, in isolation of other issues, I would pick this order as being the most natural:</p>

<ol>
<li><p>Mark-Fussell (or mark-fussell)</p></li>
<li><p>MarkFussell</p></li>
<li><p>Mark_Fussell (or mark_fussell)</p></li>
</ol>


<p>where the underscore goes third mostly because it can be hard to see [URLs and other things put underlines <em>on top</em> of that underline like thus <em>Mark_Fussell</em>], is harder to type, and it over spaces things visually.  So I (and lots of people actually) believe programming languages <em>should</em> use hyphens, but because a bunch of programming languages want 'a-b' to be interpreted as 'a - b', they cop out and prevent the hyphen from being part of a name.  Ruby has that same cop out, so we can't use hyphens in Ruby :-(</p>

<h2>Missing Phrase Delimiter</h2>

<p>So I said my opinion is fairly irrelevant, but I also want to say that people have missed an important aspect to this argument.  I may have a small preference for CamelCase over underlines as a single word delimiter, but I have a <em>huge</em> preference to having both a 'word' and a 'phrase' delimiter.  And by insisting on just one delimiter in this naming standard, Ruby has significantly interfered with expressiveness.  Maybe I am unusual, but I have long-time argued that we should have both words and phrases in methods and frequently even in classes.  Back in the 1990s, I documented this as part of my <a href="/blog/java-development-standards">JavaStandards</a> and this was based on Smalltalk naturally having both of these pieces.  It was clearly more readable and you were much less likely to produce bad method names.</p>

<p>For method naming, the quick summary is:</p>

<ul>
<li><p>When naming a method</p></li>
<li><p>Start with a verb phrase (what you are asking the object to do)</p></li>
<li><p>Put an underscore where a parameter is expected (up to the first two at least)</p></li>
<li><p>Describe what that parameter is for right before the underscore, if it is not obvious from the verb</p></li>
</ul>


<p>this way, the reader of the code can immediately know how the parameters (in the parentheses) map onto their role in the method itself.  And the whole method name becomes a readable phrase... not just a weird long word strung together (by whatever convention you want).</p>

<h3>Array::insert</h3>

<p>So an example is:</p>

<pre><code>Array::insert(index, obj)
</code></pre>

<p>This is a method name that is ambiguous in usage:</p>

<pre><code>anArray.insert(3,2)
</code></pre>

<p>It is not clear what the code is going to do and I would actually intuitively expect it to be the other way around (except I know about getting burned so would then have to look it up).</p>

<p>A better name would be:</p>

<pre><code>Array::insert_at(obj,index)
</code></pre>

<p>so reading:</p>

<pre><code>anArray.insert_at(3,2)
</code></pre>

<p>is clearly inserting the '3' not inserting the '2'.</p>

<p>Or if people like the order the other way:</p>

<pre><code>   Array::insertAt_value(index,obj)

   anArray.insertAt_value(2,3)
</code></pre>

<p>And in the Ruby case where any number of values could follow, we should have:</p>

<pre><code>   Array::insertAt_values(index,obj...)

   anArray.insertAt_values(2,3)
   anArray.insertAt_values(2,5,3)
</code></pre>

<p>and everything reads naturally something like this "anArray insertAt: 2 values: 5 and 3".</p>

<h3>forPolesOtherThan_do(disk)</h3>

<p>Related to a recent post on the Tower of Hanoi, I believe the resulting choice of:</p>

<pre><code>forPolesOtherThan_do(disk) [block]
</code></pre>

<p>is much clearer in both communicating what the passed in 'disk' is for and that it requires a block as a second (semi-hidden) argument than if you have only a word delimiter and have any of:</p>

<pre><code>   for_poles_other_than
   for_poles_other_than_do
   forPolesOtherThan
   forPolesOtherThanDo
</code></pre>

<h2>What to do?</h2>

<p>Given Ruby wants to use underscore to separate words... I can't separate the phrases at all.  I tried to wrestle my mind around using something different, but Ruby surprisingly (for a modern and internationally-created) language does not have any other punctuation that is allowed and could plausibly work.  So maybe use two underscores for the phrase point?  That seems seriously ugly and also two underscores don't really look different from one underscore:</p>

<pre><code>   insert_at__values
   for_poles_other_than__do
</code></pre>

<p>Using capitals for this purpose just comes off weird (plausible but weird):</p>

<pre><code>   insert_at_Values
   for_poles_other_than_Do
</code></pre>

<p>It is also exactly the opposite of Smalltalk, and I try to be able to work across languages without having to flip upside down all the time.  Same regarding Java and Flex (two other languages I actively work in).  For reference, the Smalltalk version of these examples are:</p>

<pre><code>   insertAt: values:
   forPolesOtherThan: do:
</code></pre>

<h3>Arguments about non-English speakers</h3>

<p>One argument I (so far) find specious is that using capitals prevents non-native speakers from understanding the code.  I could maybe believe this is true in rare cases -- but (1) nobody has a study referenced that shows that, and (2) if that were true, someone simply has to learn the language better.  You can't argue that some people's inability to use a language is a reason to not use a feature of that language.  That would argue that almost all syntax in languages should be stripped, and few languages (and especially computer languages) can survive that.  Actually only Lisp survives that (give me just a pair of delimiters, and I can rule the world :-) )</p>

<p>Also given Ruby uses CamelCase for classes, you already have a requirement to understand this kind of syntax aspect.  So Ruby is presupposing the reader can read the syntax it is arguing the reader can't read.</p>

<h3>The standard, in different languages</h3>

<p>A more interesting question is whether the "word and phrase standard" survives human-language change.  Obviously the standard does not work "as written" if the language used is not a capital-capable language.  And an obviously important language for that test is written Chinese (traditional or simplified).  But actually the 'underscores for phrases and parameters' degrades with Chinese better than 'underscores for words'.  Chinese doesn't require spaces for words to be apparent, and does not use spaces at all for that purpose (normally) -- it is obvious where each word starts and ends without spacing because a word is only a couple characters long.  So given words are apparent, the only thing left is to have phrases.  Although unnatural to use underscores for phrases and parameters, it at least seems plausibly useful.</p>

<p>Admittedly I have not tried in depth to program in Chinese (Smalltalk/Agents by QKS had the ability way back but I only played with it a little) and have not found a study on it...  so I can't say for sure whether the underscore for parameters would make sense.  But it is at least plausible it would make sense and it would make much more sense than underscore to separate (already separated) words.</p>

<p>Another plausible language to test against would be Hindi, but (I believe) most writers of Hindi in the computer field are also excellent English writers, so that is harder to argue for.</p>

<h3>Could be hyphens</h3>

<p>Note that the convention is totally happy with using 'hyphens' as word separators if the environment supports it.</p>

<pre><code>   insert-at_values
   for-poles-other-than_do
</code></pre>

<h2>Summary: Ruby has it wrong -- We need CamelWords or hyphen-words</h2>

<p>So I believe Ruby has it wrong and am very unhappy a modern language started 20 years after Smalltalk and several years after Dylan would get this kind of thing wrong.  And I recommend moving the Ruby standard to the CamelWord_UnderPhrase standard, or allowing the hyphen and use the hyphen-word_under-phrase standard.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Taste of Flex (Part 6)]]></title>
    <link href="http://markfussell.emenar.com/blog/a-taste-of-flex-part-6/"/>
    <updated>2008-09-02T16:46:00-07:00</updated>
    <id>http://markfussell.emenar.com/blog/a-taste-of-flex-part-6</id>
    <content type="html"><![CDATA[<p>This is a multi-part series.  The first in the series is <a href="/blog/a-taste-of-flex">here</a>.</p>

<h2>Tower of Hanoi &mdash; With Rule Disks (and no stack)</h2>

<p>The first passes at the Tower of Hanoi algorithm were all done with the algorithm being a recursive call on the stack.  This is 'true' as an algorithm, but comes off as a bit unnatural for humans.  But it also has a problem in that the algorithm can not be 'suspended' in mid activity unless the language allows a feature (called a continuation) that can suspend the stack itself.  For a multi-threaded language, this inability to suspend may not be a problem because you could create one thread for the algorithm and another thread to listen for whenever a new (interesting) change in state occurs.  This is how the RubyShoes version works: the algorithm is in a new thread separate from the GUI thread (otherwise things behave badly).  Similarly, the Smalltalk-80 GUI is being drawn in a different thread than the main execution thread.  But in many circumstances even this multi-thread version would not work: say you have a client-server version (e.g. Rails) or want to pause/suspend the execution of the 100-tall tower of hanoi.  And finally, if you only have a single-threaded language like Flex, things just don't work at all for intermediate renderings unless you can make the algorithm not be dependent on the call stack.</p>

<!-- more -->


<h3>Tower of Hanoi — With Rule Disks (and no stack) -- Flex</h3>

<p>I think it is easiest to work up from the Disk perspective, although see the book for a different flow.  The main changes to HanoiDisk are to have it be able to figure out whether it has any legal moves, and what the bestMove (next move) would be.  To do each of these, the disk needs to communicate back with the towers.  In the Smalltalk code this was done through a Class Variable, but it is far simpler and more scalable to do this through instance variables: each Disk needs to know what tower it belongs to.</p>

<h4>HanoiDiskRules</h4>

<p>```actionscript
package {</p>

<p>public class HanoiDiskRules extends HanoiDisk {</p>

<pre><code>protected var my_previousPole : Number;
protected var my_towers : AnimatedRulesTowerOfHanoi;

public function setupTowers(towers : AnimatedRulesTowerOfHanoi) : void {
    my_towers = towers;
}

public function hasLegalMove() : Boolean {
    var otherTops : Array = my_towers.selectPolesOtherThan(this);
    for (var i:int = 0; i&lt;otherTops.length; i++) {
        var eachTopDisk : HanoiDisk = otherTops[i];
        if (eachTopDisk.width &gt; this.width) return true;
    }
    return false;
}

public function bestMove() : HanoiDisk {
    var otherTops : Array = my_towers.selectPolesOtherThan(this);
    for (var i:int = 0; i&lt;otherTops.length; i++) {
        var eachTopDisk : HanoiDisk = otherTops[i];
        if ( (eachTopDisk.width &gt; this.width) &amp;&amp; (eachTopDisk.pole != my_previousPole) ) return eachTopDisk;
    }
    return null;
}

public override function moveUpon(destination : HanoiDisk) : void {
    my_previousPole = pole;

    super.moveUpon(destination);
}
</code></pre>

<p>}</p>

<p>} //package
```</p>

<p>Compared to the Smalltalk version of this, the main difference is we are creating Array objects instead of passing a function into an iterator.  Again this seems the more natural for Flex... but... it is starting to get annoying looking and has real performance impact, so later we should try to do an iterator + function-based version.</p>

<h4>AnimatedRulesTowerOfHanoi (No Animation)</h4>

<p>The change to the Tower code for Flex is two parts:</p>

<ul>
<li><p>Provide methods that support the rules that the smarter HanoiDiskRules has</p></li>
<li><p>Drive the algorithm in a way to enable Flex to render the intermediary results</p></li>
</ul>


<p>We can do these in two steps, with the current step focused on just the algorithm changes</p>

<p>```actionscript
package {</p>

<p>public class AnimatedRulesTowerOfHanoi extends AnimatedTowerOfHanoi {</p>

<pre><code>protected var my_oldDisk : HanoiDisk;
protected var my_currentDisk : HanoiDisk;
protected var my_destinationDisk : HanoiDisk;

protected override function moveTower(height : int, fromPin : *, toPin : *, usingPin : *) : void {
    //Now that the disks know all the rules... we can ignore all the arguments!

    while (!doNextMove_IsDone) {};
}

protected function doNextMove_IsDone() : Boolean {
    my_currentDisk = this.decide();

    (my_stacks[my_currentDisk.pole-1] as Array).pop();
    (my_stacks[my_destinationDisk.pole-1] as Array).push(my_currentDisk);
    my_currentDisk.moveUpon(my_destinationDisk);

    my_oldDisk = my_currentDisk;

    my_view.noteChange();

    return isAllOnOneTower();
}

protected function isAllOnOneTower() : Boolean {
    for (var i:int = 0; i&lt;my_stacks.length; i++) {
        var eachStack : Array = my_stacks[i];
        if (eachStack.length == my_height) return true;
    }
    return false;
}

public function selectTopsOtherThan(disk : HanoiDisk) : Array {
    var result : Array = new Array();
    for (var i:int = 0; i&lt;my_stacks.length; i++) {
        var eachStack : Array = my_stacks[i];

        if (eachStack.length == 0) continue;

        var topDisk : HanoiDisk = eachStack[eachStack.length-1];
        if (topDisk !== disk) {
            result.push(topDisk);
        }
    }
    return result;
}

public function selectPolesOtherThan(disk : HanoiDisk) : Array {
    var result : Array = new Array();
    for (var i:int = 0; i&lt;my_stacks.length; i++) {
        var eachStack : Array = my_stacks[i];

        if (i == disk.pole-1) continue;

        if (eachStack.length == 0)  {
            result.push(my_mockDisks[i]);
        } else {
            var topDisk : HanoiDisk = eachStack[eachStack.length-1];
            result.push(topDisk);
        }
    }
    return result;
}

protected function decide() : HanoiDisk {
    var tops : Array = selectTopsOtherThan(my_oldDisk);
    for (var i:int = 0; i&lt;tops.length; i++) {
        var movingDisk : HanoiDiskRules = tops[i];
        if (movingDisk.hasLegalMove()) {
            my_destinationDisk = movingDisk.bestMove();

            return movingDisk;
        }
    }
    //This should never happen
    return null;
}

protected override function createDisk() : HanoiDisk {
    var result : HanoiDiskRules = new HanoiDiskRules();
    result.setupTowers(this);
    return result;
}
</code></pre>

<p>}</p>

<p>} //package
```</p>

<p>As mentioned in HanoiDiskRules section, the main annoyance of this particular implementation of the new algorithm compared to Smalltalk is having to create intermediate array objects just to communicate between the Disk and the Tower.</p>

<p>But things should work again.  Except we will still get only one rendering because the whole algorithm is executed in one call within a "while" loop.</p>

<h3>Tower of Hanoi — With Rule Disks and Correct Animation -- Flex</h3>

<p>To make things work in Flex now, all we do is have to unwrap the immediacy [single call stack] of the while loop.  Instead of calling each 'doNextMove' immediately, we will wait for an event.  That event could be anything, like clicking a button or the server sending a response.  Each time we get an event, we will do the next step.  To be easy to present and view, we will make the events be driven by a simple timer.  Each time the timer fires an event, we will do the next step.  Repeating this until we are done.</p>

<p>The only method changes are to 'moveTower' and to 'handleTimer'.  Everything else works just the way it was.</p>

<h4>AnimatedRulesTowerOfHanoi (No Animation)</h4>

<p>```actionscript
package {</p>

<pre><code>import flash.events.TimerEvent;
import flash.utils.Timer;
</code></pre>

<p>public class AnimatedRulesTowerOfHanoi extends AnimatedTowerOfHanoi {</p>

<pre><code>protected var my_oldDisk : HanoiDisk;
protected var my_currentDisk : HanoiDisk;
protected var my_destinationDisk : HanoiDisk;

protected var my_timer : Timer;

protected override function moveTower(height : int, fromPin : *, toPin : *, usingPin : *) : void {
    //Now that the disks know all the rules... we can ignore all the arguments!

    my_timer = new Timer(300)
    my_timer.addEventListener(TimerEvent.TIMER, handleTimer);
    my_timer.start();

}

public function handleTimer(evt:TimerEvent):void {
    var isDone : Boolean = doNextMove_IsDone();

    if (isDone) {
        my_timer.stop();
        my_timer = null;
    }
}




protected function doNextMove_IsDone() : Boolean {
    my_currentDisk = this.decide();

    (my_stacks[my_currentDisk.pole-1] as Array).pop();
    (my_stacks[my_destinationDisk.pole-1] as Array).push(my_currentDisk);
    my_currentDisk.moveUpon(my_destinationDisk);

    my_oldDisk = my_currentDisk;

    my_view.noteChange();

    return isAllOnOneTower();
}

protected function isAllOnOneTower() : Boolean {
    for (var i:int = 0; i&lt;my_stacks.length; i++) {
        var eachStack : Array = my_stacks[i];
        if (eachStack.length == my_height) return true;
    }
    return false;
}

public function selectTopsOtherThan(disk : HanoiDisk) : Array {
    var result : Array = new Array();
    for (var i:int = 0; i&lt;my_stacks.length; i++) {
        var eachStack : Array = my_stacks[i];

        if (eachStack.length == 0) continue;

        var topDisk : HanoiDisk = eachStack[eachStack.length-1];
        if (topDisk !== disk) {
            result.push(topDisk);
        }
    }
    return result;
}

public function selectPolesOtherThan(disk : HanoiDisk) : Array {
    var result : Array = new Array();
    for (var i:int = 0; i&lt;my_stacks.length; i++) {
        var eachStack : Array = my_stacks[i];

        if (i == disk.pole-1) continue;

        if (eachStack.length == 0)  {
            result.push(my_mockDisks[i]);
        } else {
            var topDisk : HanoiDisk = eachStack[eachStack.length-1];
            result.push(topDisk);
        }
    }
    return result;
}

protected function decide() : HanoiDisk {
    var tops : Array = selectTopsOtherThan(my_oldDisk);
    for (var i:int = 0; i&lt;tops.length; i++) {
        var movingDisk : HanoiDiskRules = tops[i];
        if (movingDisk.hasLegalMove()) {
            my_destinationDisk = movingDisk.bestMove();

            return movingDisk;
        }
    }
    //This should never happen
    return null;
}

protected override function createDisk() : HanoiDisk {
    var result : HanoiDiskRules = new HanoiDiskRules();
    result.setupTowers(this);
    return result;
}
</code></pre>

<p>}</p>

<p>} //package
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java Development Standards]]></title>
    <link href="http://markfussell.emenar.com/blog/java-development-standards/"/>
    <updated>1997-10-30T18:00:00-08:00</updated>
    <id>http://markfussell.emenar.com/blog/java-development-standards</id>
    <content type="html"><![CDATA[<p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>This document
describes the standards ChiMu Corporation uses for Java development.<span
style="mso-spacerun: yes">&nbsp; </span>Documenting these standards is
important for our own needs and our customers, but we provide these standards
publicly to help other teams who are establishing or growing their own
standards.<span style="mso-spacerun: yes">&nbsp; </span>These standards may
also help developers to better understand good software design: they are
especially designed to help a developer think about the issues (e.g. some of
them are "radical").<span style="mso-spacerun: yes">&nbsp; </span>In many cases
you may object to our recommendations and decide on a different standard, but
the acts of reasoning about the issues and documenting your solutions is even
more important</span><a style='mso-footnote-id:ftn' href="#_ftn1" name="_ftnref"
title=""><span style='mso-bookmark:_Toc390967791'><span
class=MsoFootnoteReference><span style='mso-special-character:footnote'><![if !supportFootnotes]>[*]<![endif]></span></span></span></a><span
style='mso-bookmark:_Toc390967791'>.<span style="mso-spacerun: yes">&nbsp;
</span></span></p>




<!-- more -->




<p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>This document is
organized with an initial introduction and then the summary of our
standards.<span style="mso-spacerun: yes">&nbsp; </span>Following this is the
main discussion, explanation, and details of the standards.<span
style="mso-spacerun: yes">&nbsp; </span>The document ends with definitions and
references.</span></p>




<div style='mso-element:para-border-div;border:none;border-bottom:solid windowtext 1.5pt;
padding:0in 0in 1.0pt 0in'>

<h1 style='margin-top:24.0pt;page-break-before:auto'><span style='mso-bookmark:
_Toc390967791'><a name="_Toc402802553"></a><a name="_Toc408310742"><span
style='mso-bookmark:_Toc402802553'><![if !supportLists]><span style='mso-list:
Ignore'>2<span style="mso-spacerun: yes">&nbsp; </span></span><![endif]>Introduction</span></a></span></h1>

</div>




<p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>The two most important
principles to consider for high-quality software development are:</span></p>




<p class=MsoListBullet2><span style='mso-bookmark:_Toc390967791'><![if !supportLists]><span
style='mso-list:Ignore'>1.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]>To think from the client's point of view</span></p>




<p class=MsoListBullet2><span style='mso-bookmark:_Toc390967791'><![if !supportLists]><span
style='mso-list:Ignore'>2.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]>To think from the maintainer's point of view</span></p>




<p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>Understanding and
considering these two customers' needs during development makes most of the difference
between poorly designed and very nicely designed systems.<span
style="mso-spacerun: yes">&nbsp; </span>Object-oriented techniques can help
support both of these customers' needs, but the principles must always be on
your mind.<span style="mso-spacerun: yes">&nbsp; </span>Codifying those needs
into your standards will help.</span></p>




<p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>Some of the
guidelines may sound like more work than you as designer or coder would like to
do, but over time they will pay off to your clients, your maintainers, and you
yourself when you are filling those two roles.<span style="mso-spacerun:
yes">&nbsp; </span>And in these two roles is where most of the time and energy
for software development is spent, even for a one-person project.<span
style="mso-spacerun: yes">&nbsp; </span>Anything we write today will be used
and maintained for many days, months, and years ahead.<span
style="mso-spacerun: yes">&nbsp; </span>Or so we hope.</span></p>




<h2><span style='mso-bookmark:_Toc390967791'><a name="_Toc402802554"></a><a
name="_Toc408310743"><span style='mso-bookmark:_Toc402802554'><![if !supportLists]><span
style='mso-list:Ignore'>2.1 </span><![endif]>Sources of Standards</span></a></span></h2>




<p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>The design and
development standards documented here are summaries and extractions from more
general standards as well as our own experiences.<span style="mso-spacerun:
yes">&nbsp; </span>The following sources document these general "software
engineering" practices.<span style="mso-spacerun: yes">&nbsp; </span>The full
references are at the end of the document.</span></p>




<p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>For publicly
available coding standards I recommend the following resources for Java,
Smalltalk, and Eiffel.<span style="mso-spacerun: yes">&nbsp; </span>I choose
these standards because Java is best thought of as simplified Smalltalk with
interfaces and bare-bones static typing added to it.<span style="mso-spacerun:
yes">&nbsp; </span>The syntax looks like 'C' or 'C++', but the semantics are
much closer to a cross between a very diluted Eiffel and Smalltalk.</span></p>




<table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0
 style='margin-left:36.9pt;border-collapse:collapse;mso-table-layout-alt:fixed;
 mso-padding-alt:0in 5.4pt 0in 5.4pt'>
 <tr>
  <td width=230 valign=top style='width:229.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>Doug Lea's Java
  coding standards </span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=177 valign=top style='width:177.3pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>[Lea]</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr>
  <td width=230 valign=top style='width:229.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>Smalltalk Best
  Practice Patterns: Coding </span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=177 valign=top style='width:177.3pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>[Beck 96]</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr>
  <td width=230 valign=top style='width:229.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>Code Complete </span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=177 valign=top style='width:177.3pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>[McConnell 93]</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr>
  <td width=230 valign=top style='width:229.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>Object-Oriented
  Software Construction, 2<sup>nd</sup> Edition </span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=177 valign=top style='width:177.3pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>[Meyer 97]</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr>
  <td width=230 valign=top style='width:229.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>Eiffel, The
  Language</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=177 valign=top style='width:177.3pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>[Meyer 92]</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr style='mso-yfti-lastrow:yes'>
  <td width=230 valign=top style='width:229.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>Smalltalk with
  Style </span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=177 valign=top style='width:177.3pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>[Skublics+KT 96]</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
</table>




<p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>Software design and
object oriented design have a much broader range of relevant topics and
resources, but the following are some good introductions. </span></p>




<table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0
 style='margin-left:36.9pt;border-collapse:collapse;mso-table-layout-alt:fixed;
 mso-padding-alt:0in 5.4pt 0in 5.4pt'>
 <tr>
  <td width=230 valign=top style='width:229.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>Design Patterns</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=177 valign=top style='width:177.3pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>[Gamma+HJV 95]</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr>
  <td width=230 valign=top style='width:229.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>Object-Oriented
  Analysis and Design with Applications</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=177 valign=top style='width:177.3pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>[Booch 94]</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr>
  <td width=230 valign=top style='width:229.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>Object-Oriented
  Modeling and Design</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=177 valign=top style='width:177.3pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>[Rumbaugh+BPEL
  91]<span style="mso-spacerun: yes">&nbsp; </span></span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr style='mso-yfti-lastrow:yes'>
  <td width=230 valign=top style='width:229.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>Information
  Modeling</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=177 valign=top style='width:177.3pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>[Kilov+R 94]</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
</table>




<p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>Finally, in terms
of relational databases, there are two primary authors (Codd and Date) and much
of the recent discussions have been in Database Programming and Design.<span
style="mso-spacerun: yes">&nbsp; </span>The following are some of the books
that may be useful.</span></p>




<table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0
 style='margin-left:36.9pt;border-collapse:collapse;mso-table-layout-alt:fixed;
 mso-padding-alt:0in 5.4pt 0in 5.4pt'>
 <tr>
  <td width=230 valign=top style='width:229.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>The Relational
  Model for Database Management</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=177 valign=top style='width:177.3pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>[Codd 90]</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr>
  <td width=230 valign=top style='width:229.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>An Introduction
  to Database Systems</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=177 valign=top style='width:177.3pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>[Date 95]</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr>
  <td width=230 valign=top style='width:229.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>Relational
  Database Writing</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=177 valign=top style='width:177.3pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>[Date 95b] and
  the previous editions</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr>
  <td width=230 valign=top style='width:229.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>The Object
  Database Standard: ODMG-93</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=177 valign=top style='width:177.3pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>[Cattell+ 96]</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr style='mso-yfti-lastrow:yes'>
  <td width=230 valign=top style='width:229.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>Object-Relation
  DBMSs</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=177 valign=top style='width:177.3pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>[Stonebraker+M
  96]</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
</table>




<p class=MsoNormal><span style='mso-bookmark:_Toc390967791'><a
name="_Toc402802555"><o:p>&nbsp;</o:p></a></span></p>




<p class=MsoNormal><span style='mso-bookmark:_Toc390967791'><span
style='mso-bookmark:_Toc402802555'>There is a collection of terms and
definitions at the end of this document, which form part of our standard
development dictionary.<span style="mso-spacerun: yes">&nbsp; </span>Many of
these terms are reconciled with:</span></span></p>




<table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0
 style='margin-left:36.9pt;border-collapse:collapse;mso-table-layout-alt:fixed;
 mso-padding-alt:0in 5.4pt 0in 5.4pt'>
 <tr style='mso-yfti-lastrow:yes'>
  <td width=230 valign=top style='width:229.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'><span
  style='mso-bookmark:_Toc402802555'>Directory of Object Technology</span></span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'><span style='mso-bookmark:_Toc402802555'></span></span>
  <td width=177 valign=top style='width:177.3pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'><span
  style='mso-bookmark:_Toc402802555'>[Firesmith+E 95]</span></span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'><span style='mso-bookmark:_Toc402802555'></span></span>
 </tr>
</table>


<p><span style='mso-bookmark:_Toc402802555'></span></p>

<div style='mso-element:para-border-div;border:none;border-bottom:solid windowtext 1.5pt;
padding:0in 0in 1.0pt 0in'>

<h1><span style='mso-bookmark:_Toc390967791'><a name="_Toc402802556"></a><a
name="_Toc408310744"><span style='mso-bookmark:_Toc402802556'><![if !supportLists]><span
style='mso-list:Ignore'>3<span style="mso-spacerun: yes">&nbsp; </span></span><![endif]>Standards Summary</span></a></span></h1>

</div>




<h3><span style='mso-bookmark:_Toc390967791'><a name="_Toc402802557"></a><a
name="_Toc408310745"><span style='mso-bookmark:_Toc402802557'>Ultimate Principles</span></a></span></h3>




<table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0
 style='border-collapse:collapse;mso-table-layout-alt:fixed;mso-padding-alt:
 0in 5.4pt 0in 5.4pt'>
 <tr>
  <td width=149 valign=top style='width:149.4pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:6.0pt'><span style='mso-bookmark:_Toc390967791'><i
  style='mso-bidi-font-style:normal'><span style='font-size:12.0pt;mso-bidi-font-size:
  10.0pt'>Think from the Client's point of view<o:p></o:p></span></i></span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=293 valign=top style='width:292.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:8.0pt'><span style='mso-bookmark:_Toc390967791'>Think
  about what a client needs and how a client will be using your
  functionality.<span style="mso-spacerun: yes">&nbsp; </span>Support their
  needs before yours.<span style="mso-spacerun: yes">&nbsp; </span>Protect
  their code from changes.<span style="mso-spacerun: yes">&nbsp; </span>Make
  sure they will know how to correctly use you system.</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr style='mso-yfti-lastrow:yes'>
  <td width=149 valign=top style='width:149.4pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:6.0pt'><span style='mso-bookmark:_Toc390967791'><i
  style='mso-bidi-font-style:normal'><span style='font-size:12.0pt;mso-bidi-font-size:
  10.0pt'>Think from the Maintainer's<span style="mso-spacerun: yes">&nbsp;
  </span>point of view<o:p></o:p></span></i></span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=293 valign=top style='width:292.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:8.0pt'><span style='mso-bookmark:_Toc390967791'>Think
  about what a maintainer needs to support the maintenance and enhancement
  process.<span style="mso-spacerun: yes">&nbsp; </span>Make sure they can
  understand your code's responsibilities and its implementation.<span
  style="mso-spacerun: yes">&nbsp; </span>Make life as simple as possible.</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
</table>




<h3><span style='mso-bookmark:_Toc390967791'><a name="_Toc402802558"></a><a
name="_Toc408310746"><span style='mso-bookmark:_Toc402802558'>Interfaces and Classes</span></a></span></h3>




<table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0
 style='border-collapse:collapse;mso-table-layout-alt:fixed;mso-padding-alt:
 0in 5.4pt 0in 5.4pt'>
 <tr>
  <td width=149 valign=top style='width:149.4pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:6.0pt'><span style='mso-bookmark:_Toc390967791'><i
  style='mso-bidi-font-style:normal'><span style='font-size:12.0pt;mso-bidi-font-size:
  10.0pt'>Interface with 'interface's<o:p></o:p></span></i></span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=293 valign=top style='width:292.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:8.0pt'><span style='mso-bookmark:_Toc390967791'>Use
  interface as the glue throughout your code instead of classes.<span
  style="mso-spacerun: yes">&nbsp; </span>Interfaces focus on the client's
  needs: they define what functionality a client will receive without coupling
  them to the implementation. Variables, parameters, return values, and casts
  should all use interfaces.<span style="mso-spacerun: yes">&nbsp; </span></span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr>
  <td width=149 valign=top style='width:149.4pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:6.0pt'><span style='mso-bookmark:_Toc390967791'><i
  style='mso-bidi-font-style:normal'><span style='font-size:12.0pt;mso-bidi-font-size:
  10.0pt'>Avoid exposing classes<o:p></o:p></span></i></span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=293 valign=top style='width:292.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:8.0pt'><span style='mso-bookmark:_Toc390967791'>Avoid
  exposing implementation classes at all.<span style="mso-spacerun: yes">&nbsp;
  </span>Provide creation methods on interfaces to other objects or on
  Packs.<span style="mso-spacerun: yes">&nbsp; </span>Only expose classes that
  are meant to be subclassed.</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr>
  <td width=149 valign=top style='width:149.4pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:6.0pt'><span style='mso-bookmark:_Toc390967791'><i
  style='mso-bidi-font-style:normal'><span style='font-size:12.0pt;mso-bidi-font-size:
  10.0pt'>Do not suffix interfaces<o:p></o:p></span></i></span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=293 valign=top style='width:292.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:8.0pt'><span style='mso-bookmark:_Toc390967791'>Do
  not suffix or prefix interfaces.<span style="mso-spacerun: yes">&nbsp;
  </span>Interfaces describe functionality publicly and own the "normal"
  namespace. </span></p>
  <p class=MsoNormal style='margin-top:8.0pt'><span style='mso-bookmark:_Toc390967791'><b
  style='mso-bidi-font-weight:normal'><i style='mso-bidi-font-style:normal'><span
  style='font-size:9.0pt;mso-bidi-font-size:10.0pt;font-family:"Courier New"'>Example</span></i></b></span><span
  style='mso-bookmark:_Toc390967791'><i style='mso-bidi-font-style:normal'><span
  style='font-size:9.0pt;mso-bidi-font-size:10.0pt;font-family:"Courier New"'>:
  Query, Table, Sequence</span></i></span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr>
  <td width=149 valign=top style='width:149.4pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:6.0pt'><span style='mso-bookmark:_Toc390967791'><i
  style='mso-bidi-font-style:normal'><span style='font-size:12.0pt;mso-bidi-font-size:
  10.0pt'>Suffix classes with 'Class'<o:p></o:p></span></i></span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=293 valign=top style='width:292.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:8.0pt'><span style='mso-bookmark:_Toc390967791'>To
  avoid collisions between interfaces and implementation classes, suffix your
  classes with 'Class'.<span style="mso-spacerun: yes">&nbsp; </span>Classes
  provide implementation and are both localized and secondary compared to
  interfaces.<span style="mso-spacerun: yes">&nbsp; </span>If it is an abstract
  class suffix it with 'AbsClass'.<span style="mso-spacerun: yes">&nbsp;
  </span></span></p>
  <p class=MsoNormal style='margin-top:8.0pt'><span style='mso-bookmark:_Toc390967791'>An
  exception is a class called from the command line (i.e. main entrypoints)
  which does not need to be suffixed for user convenience.</span></p>
  <p class=MsoNormal style='margin-top:8.0pt'><span style='mso-bookmark:_Toc390967791'><b
  style='mso-bidi-font-weight:normal'><i style='mso-bidi-font-style:normal'><span
  style='font-size:9.0pt;mso-bidi-font-size:10.0pt;font-family:"Courier New"'>Example</span></i></b></span><span
  style='mso-bookmark:_Toc390967791'><i style='mso-bidi-font-style:normal'><span
  style='font-size:9.0pt;mso-bidi-font-size:10.0pt;font-family:"Courier New"'>:
  QueryClass, TableAbsClass, JdkVectorWrapperClass</span></i></span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr>
  <td width=149 valign=top style='width:149.4pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:6.0pt'><span style='mso-bookmark:_Toc390967791'><i
  style='mso-bidi-font-style:normal'><span style='font-size:12.0pt;mso-bidi-font-size:
  10.0pt'>Provide different interfaces for different clients<o:p></o:p></span></i></span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=293 valign=top style='width:292.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:8.0pt'><span style='mso-bookmark:_Toc390967791'>Use
  different interfaces to document and control the functionality provided to
  different types of clients.<span style="mso-spacerun: yes">&nbsp; </span>For
  example, you can document the functionality provided to users of a subsystem
  through a public interface, which is separate from the interface used within
  the subsystem.</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr>
  <td width=149 valign=top style='width:149.4pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:6.0pt'><span style='mso-bookmark:_Toc390967791'><i
  style='mso-bidi-font-style:normal'><span style='font-size:12.0pt;mso-bidi-font-size:
  10.0pt'>Suffix Extended, Subsystem, and Package interfaces <o:p></o:p></span></i></span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=293 valign=top style='width:292.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:8.0pt'><span style='mso-bookmark:_Toc390967791'>Use
  suffixes for extended (Xi), subsystem (Si), and package (Pi) interfaces and
  inherit in a hierarchy (Xi&lt;-Si&lt;-Pi). This allows you to identify which
  interfaces should be visible to whom, and also to know whether an internal
  cast will succeed.</span></p>
  <p class=MsoNormal style='margin-top:8.0pt'><span style='mso-bookmark:_Toc390967791'><b
  style='mso-bidi-font-weight:normal'><i style='mso-bidi-font-style:normal'><span
  style='font-size:9.0pt;mso-bidi-font-size:10.0pt;font-family:"Courier New"'>Example</span></i></b></span><span
  style='mso-bookmark:_Toc390967791'><i style='mso-bidi-font-style:normal'><span
  style='font-size:9.0pt;mso-bidi-font-size:10.0pt;font-family:"Courier New"'>:
  Query, QueryXi, QuerySi, QueryPi</span></i></span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr style='mso-yfti-lastrow:yes'>
  <td width=149 valign=top style='width:149.4pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:6.0pt'><span style='mso-bookmark:_Toc390967791'><i
  style='mso-bidi-font-style:normal'><span style='font-size:12.0pt;mso-bidi-font-size:
  10.0pt'>Provide creation methods<o:p></o:p></span></i></span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=293 valign=top style='width:292.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:8.0pt'><span style='mso-bookmark:_Toc390967791'>Instead
  of having clients use 'new' provide creation methods to construct
  objects.<span style="mso-spacerun: yes">&nbsp; </span>Prefix these creation
  methods with 'new' and place them on interfaces of an appropriate object or
  on a 'Pack'.</span></p>
  <p class=MsoNormal style='margin-top:8.0pt;margin-right:0in;margin-bottom:
  0in;margin-left:17.1pt;margin-bottom:.0001pt;text-indent:-17.1pt'><span
  style='mso-bookmark:_Toc390967791'><b style='mso-bidi-font-weight:normal'><i
  style='mso-bidi-font-style:normal'><span style='font-size:9.0pt;mso-bidi-font-size:
  10.0pt;font-family:"Courier New"'>Example</span></i></b></span><span
  style='mso-bookmark:_Toc390967791'><i style='mso-bidi-font-style:normal'><span
  style='font-size:9.0pt;mso-bidi-font-size:10.0pt;font-family:"Courier New"'>:
  MetaPack.newMethodReference, Orm.newObjectMapperNamed_table</span></i></span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
</table>




<h3><span style='mso-bookmark:_Toc390967791'><a name="_Toc402802559"></a><a
name="_Toc408310747"><span style='mso-bookmark:_Toc402802559'>Naming</span></a></span></h3>




<table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0
 style='border-collapse:collapse;mso-table-layout-alt:fixed;mso-padding-alt:
 0in 5.4pt 0in 5.4pt'>
 <tr>
  <td width=149 valign=top style='width:149.4pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:6.0pt'><span style='mso-bookmark:_Toc390967791'><i
  style='mso-bidi-font-style:normal'><span style='font-size:12.0pt;mso-bidi-font-size:
  10.0pt'>Name things well<o:p></o:p></span></i></span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=293 valign=top style='width:292.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:8.0pt'><span style='mso-bookmark:_Toc390967791'>Spend
  extra effort to choose good names for your Types and Methods.<span
  style="mso-spacerun: yes">&nbsp; </span>Choose intention revealing method
  names [Beck 96] and simple, appropriate class names.<span
  style="mso-spacerun: yes">&nbsp; </span>Always try out a name by using it in
  client code before committing to a name in real code.</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr>
  <td width=149 valign=top style='width:149.4pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:6.0pt'><span style='mso-bookmark:_Toc390967791'><i
  style='mso-bidi-font-style:normal'><span style='font-size:12.0pt;mso-bidi-font-size:
  10.0pt'>Standardize your naming<o:p></o:p></span></i></span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=293 valign=top style='width:292.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:8.0pt'><span style='mso-bookmark:_Toc390967791'>Decide
  on the meaning of a word or pattern and then use it consistently.<span
  style="mso-spacerun: yes">&nbsp; </span>This is especially important for
  method naming patterns, which should be reused as much as possible.</span></p>
  <p class=MsoNormal style='margin-top:8.0pt'><span style='mso-bookmark:_Toc390967791'><b
  style='mso-bidi-font-weight:normal'><i style='mso-bidi-font-style:normal'><span
  style='font-size:9.0pt;mso-bidi-font-size:10.0pt;font-family:"Courier New"'>Example</span></i></b></span><span
  style='mso-bookmark:_Toc390967791'><i style='mso-bidi-font-style:normal'><span
  style='font-size:9.0pt;mso-bidi-font-size:10.0pt;font-family:"Courier New"'>:
  is..., setup..., new..., with </span></i></span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr style='mso-yfti-lastrow:yes'>
  <td width=149 valign=top style='width:149.4pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:6.0pt'><span style='mso-bookmark:_Toc390967791'><i
  style='mso-bidi-font-style:normal'><span style='font-size:12.0pt;mso-bidi-font-size:
  10.0pt'>Use Woven Parameters<o:p></o:p></span></i></span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=293 valign=top style='width:292.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:8.0pt'><span style='mso-bookmark:_Toc390967791'>Put
  underscores ('_') as placeholders for where parameters belong in a
  selector.<span style="mso-spacerun: yes">&nbsp; </span>Leave off any trailing
  underscores.</span></p>
  <p class=MsoNormal style='margin-top:8.0pt'><span style='mso-bookmark:_Toc390967791'><b
  style='mso-bidi-font-weight:normal'><i style='mso-bidi-font-style:normal'><span
  style='font-size:9.0pt;mso-bidi-font-size:10.0pt;font-family:"Courier New"'>Example</span></i></b></span><span
  style='mso-bookmark:_Toc390967791'><i style='mso-bidi-font-style:normal'><span
  style='font-size:9.0pt;mso-bidi-font-size:10.0pt;font-family:"Courier New"'>:
  atIndex_put, newDirectSlot_column_type<o:p></o:p></span></i></span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
</table>




<h3><span style='mso-bookmark:_Toc390967791'><a name="_Toc402802560"></a><a
name="_Toc408310748"><span style='mso-bookmark:_Toc402802560'>Organizing</span></a></span></h3>




<table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0
 style='border-collapse:collapse;mso-table-layout-alt:fixed;mso-padding-alt:
 0in 5.4pt 0in 5.4pt'>
 <tr>
  <td width=149 valign=top style='width:149.4pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:6.0pt'><span style='mso-bookmark:_Toc390967791'><i
  style='mso-bidi-font-style:normal'><span style='font-size:12.0pt;mso-bidi-font-size:
  10.0pt'>Use 'Pack' classes<o:p></o:p></span></i></span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=293 valign=top style='width:292.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:8.0pt'><span style='mso-bookmark:_Toc390967791'>Every
  package should have a 'Pack' class that documents the package's functionality
  and provides a common place for creation methods and required static
  functionality.</span></p>
  <p class=MsoNormal style='margin-top:8.0pt;margin-right:0in;margin-bottom:
  0in;margin-left:17.1pt;margin-bottom:.0001pt;text-indent:-.25in'><span
  style='mso-bookmark:_Toc390967791'><b style='mso-bidi-font-weight:normal'><i
  style='mso-bidi-font-style:normal'><span style='font-size:9.0pt;mso-bidi-font-size:
  10.0pt;font-family:"Courier New"'>Example</span></i></b></span><span
  style='mso-bookmark:_Toc390967791'><i style='mso-bidi-font-style:normal'><span
  style='font-size:9.0pt;mso-bidi-font-size:10.0pt;font-family:"Courier New"'>:
  FunctorsPack<span style="mso-spacerun: yes">&nbsp; </span>/** Functors
  contains interfaces that support using object that encapsulate functions (aka
  Commands)... **/<o:p></o:p></span></i></span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr>
  <td width=149 valign=top style='width:149.4pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:6.0pt'><span style='mso-bookmark:_Toc390967791'><i
  style='mso-bidi-font-style:normal'><span style='font-size:12.0pt;mso-bidi-font-size:
  10.0pt'>Avoid 'static' methods<o:p></o:p></span></i></span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=293 valign=top style='width:292.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:8.0pt'><span style='mso-bookmark:_Toc390967791'>Try
  to avoid making public members 'static'.<span style="mso-spacerun:
  yes">&nbsp; </span>Instead try to allocate the functionality to another
  appropriate object or use the Singleton pattern.</span></p>
  <p class=MsoNormal style='margin-top:8.0pt'><span style='mso-bookmark:_Toc390967791'><b
  style='mso-bidi-font-weight:normal'><i style='mso-bidi-font-style:normal'><span
  style='font-size:9.0pt;mso-bidi-font-size:10.0pt;font-family:"Courier New"'>Example</span></i></b></span><span
  style='mso-bookmark:_Toc390967791'><i style='mso-bidi-font-style:normal'><span
  style='font-size:9.0pt;mso-bidi-font-size:10.0pt;font-family:"Courier New"'>:
  VmPack.theVm().canSupportWeakReferences().</span></i></span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr>
  <td width=149 valign=top style='width:149.4pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:6.0pt'><span style='mso-bookmark:_Toc390967791'><i
  style='mso-bidi-font-style:normal'><span style='font-size:12.0pt;mso-bidi-font-size:
  10.0pt'>Consistently order your modifiers<o:p></o:p></span></i></span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=293 valign=top style='width:292.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:8.0pt'><span style='mso-bookmark:_Toc390967791'>Use
  a consistent ordering of class and member modifiers. Put 'static' first to
  make conspicuous this different (non-OO) kind of member.<span
  style="mso-spacerun: yes">&nbsp; </span>Put access modifiers next so a client
  can tell if a method is visible.<span style="mso-spacerun: yes">&nbsp;
  </span>Follow access with the special modifiers.<span style="mso-spacerun:
  yes">&nbsp; </span>Finish with return type.</span></p>
  <p class=MsoNormal style='margin-top:8.0pt'><span style='mso-bookmark:_Toc390967791'><b
  style='mso-bidi-font-weight:normal'><i style='mso-bidi-font-style:normal'><span
  style='font-size:9.0pt;mso-bidi-font-size:10.0pt;font-family:"Courier New"'>Example</span></i></b></span><span
  style='mso-bookmark:_Toc390967791'><i style='mso-bidi-font-style:normal'><span
  style='font-size:9.0pt;mso-bidi-font-size:10.0pt;font-family:"Courier New"'>:
  public int, static protected void, private synchronized final Object</span></i></span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr>
  <td width=149 valign=top style='width:149.4pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:6.0pt'><span style='mso-bookmark:_Toc390967791'><i
  style='mso-bidi-font-style:normal'><span style='font-size:12.0pt;mso-bidi-font-size:
  10.0pt'>Augment access modifiers<span style="mso-spacerun: yes">&nbsp;
  </span>with comments<o:p></o:p></span></i></span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=293 valign=top style='width:292.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:8.0pt'><span style='mso-bookmark:_Toc390967791'>Use
  comments to describe more precisely what type of access you are
  providing.<span style="mso-spacerun: yes">&nbsp; </span>Be explicit about
  'package' visibility, mention if you expect 'protected' to really be
  'progeny' (i.e. no package visibility), and specify if a method is 'public'
  but is only so to support a 'system' or 'package' interface (interfaces
  require methods to be public).</span></p>
  <p class=MsoNormal style='margin-top:8.0pt;margin-right:0in;margin-bottom:
  0in;margin-left:17.1pt;margin-bottom:.0001pt;text-indent:-17.1pt'><span
  style='mso-bookmark:_Toc390967791'><b style='mso-bidi-font-weight:normal'><i
  style='mso-bidi-font-style:normal'><span style='font-size:9.0pt;mso-bidi-font-size:
  10.0pt;font-family:"Courier New"'>Example</span></i></b></span><span
  style='mso-bookmark:_Toc390967791'><i style='mso-bidi-font-style:normal'><span
  style='font-size:9.0pt;mso-bidi-font-size:10.0pt;font-family:"Courier New"'>:
  public, /*subsystem*/&nbsp;public, /*package*/&nbsp;public, /*package*/,
  protected, /*progeny*/&nbsp;protected, private</span><o:p></o:p></i></span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr style='mso-yfti-lastrow:yes'>
  <td width=149 valign=top style='width:149.4pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:6.0pt'><span style='mso-bookmark:_Toc390967791'><i
  style='mso-bidi-font-style:normal'><span style='font-size:12.0pt;mso-bidi-font-size:
  10.0pt'>Categorize your methods<o:p></o:p></span></i></span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=293 valign=top style='width:292.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:8.0pt'><span style='mso-bookmark:_Toc390967791'>Divide
  your methods into categories and organize your class structure around them.</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
</table>




<h3><span style='mso-bookmark:_Toc390967791'><a name="_Toc402802561"></a><a
name="_Toc408310749"><span style='mso-bookmark:_Toc402802561'>Abbreviation and Acronyms</span></a></span></h3>




<table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0
 style='border-collapse:collapse;mso-table-layout-alt:fixed;mso-padding-alt:
 0in 5.4pt 0in 5.4pt'>
 <tr>
  <td width=149 valign=top style='width:149.4pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:6.0pt'><span style='mso-bookmark:_Toc390967791'><i
  style='mso-bidi-font-style:normal'><span style='font-size:12.0pt;mso-bidi-font-size:
  10.0pt'>Initial cap acronyms<o:p></o:p></span></i></span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=293 valign=top style='width:292.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:8.0pt'><span style='mso-bookmark:_Toc390967791'>Initial
  cap acronyms instead of putting them in all capitals (i.e. treat them as
  words).</span></p>
  <p class=MsoNormal style='margin-top:8.0pt'><span style='mso-bookmark:_Toc390967791'><b
  style='mso-bidi-font-weight:normal'><i style='mso-bidi-font-style:normal'><span
  style='font-size:9.0pt;mso-bidi-font-size:10.0pt;font-family:"Courier New"'>Example</span></i></b></span><span
  style='mso-bookmark:_Toc390967791'><i style='mso-bidi-font-style:normal'><span
  style='font-size:9.0pt;mso-bidi-font-size:10.0pt;font-family:"Courier New"'>:
  JdbcConnection, JglCollection, FormPack</span></i></span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr style='mso-yfti-lastrow:yes'>
  <td width=149 valign=top style='width:149.4pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:6.0pt'><span style='mso-bookmark:_Toc390967791'><i
  style='mso-bidi-font-style:normal'><span style='font-size:12.0pt;mso-bidi-font-size:
  10.0pt'>Keep capitalization when abbreviating<o:p></o:p></span></i></span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=293 valign=top style='width:292.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:8.0pt'><span style='mso-bookmark:_Toc390967791'>Abbreviate
  long names by reducing their internal words to the initial letter.<span
  style="mso-spacerun: yes">&nbsp; </span>A sequences of capitals indicates
  multiple words abbreviated in a row.</span></p>
  <p class=MsoNormal style='margin-top:8.0pt'><span style='mso-bookmark:_Toc390967791'><b
  style='mso-bidi-font-weight:normal'><i style='mso-bidi-font-style:normal'><span
  style='font-size:9.0pt;mso-bidi-font-size:10.0pt;font-family:"Courier New"'>Example</span></i></b></span><span
  style='mso-bookmark:_Toc390967791'><i style='mso-bidi-font-style:normal'><span
  style='font-size:9.0pt;mso-bidi-font-size:10.0pt;font-family:"Courier New"'>:
  CompLangJava -&gt; CLJava.</span></i></span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
</table>




<h3><span style='mso-bookmark:_Toc390967791'><a name="_Toc402802562"></a><a
name="_Toc408310750"><span style='mso-bookmark:_Toc402802562'>Growing and changing standards</span></a></span></h3>




<table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0
 style='border-collapse:collapse;mso-table-layout-alt:fixed;mso-padding-alt:
 0in 5.4pt 0in 5.4pt'>
 <tr>
  <td width=149 valign=top style='width:149.4pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:6.0pt'><span style='mso-bookmark:_Toc390967791'><i
  style='mso-bidi-font-style:normal'><span style='font-size:12.0pt;mso-bidi-font-size:
  10.0pt'>Try it out<o:p></o:p></span></i></span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=293 valign=top style='width:292.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:8.0pt'><span style='mso-bookmark:_Toc390967791'>Live
  with a standard for a while before deciding to scrap or change it.<span
  style="mso-spacerun: yes">&nbsp; </span>Let the goals of a standard grow into
  your habits so you fully understand its value to you.</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr>
  <td width=149 valign=top style='width:149.4pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:6.0pt'><span style='mso-bookmark:_Toc390967791'><i
  style='mso-bidi-font-style:normal'><span style='font-size:12.0pt;mso-bidi-font-size:
  10.0pt'>Prove performance<o:p></o:p></span></i></span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=293 valign=top style='width:292.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:8.0pt'><span style='mso-bookmark:_Toc390967791'>Do
  not sacrifice a standard for performance reasons until you see the profiling
  numbers.<span style="mso-spacerun: yes">&nbsp; </span>Only optimize when it
  will quantifiably be worth the maintenance penalty.<span style="mso-spacerun:
  yes">&nbsp; </span></span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr style='mso-yfti-lastrow:yes'>
  <td width=149 valign=top style='width:149.4pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:6.0pt'><span style='mso-bookmark:_Toc390967791'><i
  style='mso-bidi-font-style:normal'><span style='font-size:12.0pt;mso-bidi-font-size:
  10.0pt'>Take out the trash<o:p></o:p></span></i></span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=293 valign=top style='width:292.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:8.0pt'><span style='mso-bookmark:_Toc390967791'>If
  a standard does not work for your team, create a new one or let the issue be
  context and programmer dependent until a new standard emerges.</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
</table>


<p><span style='font-size:10.0pt;font-family:"Times New Roman";mso-fareast-font-family:
"Times New Roman";mso-bidi-font-family:"Times New Roman";mso-ansi-language:
EN-US;mso-fareast-language:EN-US'><br clear=ALL style='mso-special-character:
line-break;page-break-before:always'>
</span></p>

<div style='mso-element:para-border-div;border:none;border-bottom:solid windowtext 1.5pt;
padding:0in 0in 1.0pt 0in'>

<h1><span style='mso-bookmark:_Toc390967791'><a name="_Toc402802563"></a><a
name="_Toc408310751"><span style='mso-bookmark:_Toc402802563'><![if !supportLists]><span
style='mso-list:Ignore'>4<span style="mso-spacerun: yes">&nbsp; </span></span><![endif]>Coding and Design Standards</span></a></span></h1>

</div>




<p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>This chapter
describes our standards for both coding and coding related design.<span
style="mso-spacerun: yes">&nbsp; </span>I believe these to be inseparable: All
object-oriented software development project I have dealt with require the
"coder" to also be at least a partial designer, and the better the design
skills the better the software.<span style="mso-spacerun: yes">&nbsp; </span></span></p>




<h2><span style='mso-bookmark:_Toc390967791'><a name="_Toc402802564"></a><a
name="_Toc408310752"><span style='mso-bookmark:_Toc402802564'><![if !supportLists]><span
style='mso-list:Ignore'>4.1 </span><![endif]>Classes, Interfaces, Types and Protocol standards</span></a></span></h2>




<p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>Interfaces and
Classes are the dominant structuring mechanism for object-oriented
programming.<span style="mso-spacerun: yes">&nbsp; </span>They determine how
your system looks to clients and they help organize your implementation.<span
style="mso-spacerun: yes">&nbsp; </span>It is important to consider the
client's point of view first.</span></p>




<h3><span style='mso-bookmark:_Toc390967791'><a name="_Toc402802565"></a><a
name="_Toc408310753"><span style='mso-bookmark:_Toc402802565'>Interfaces for interfacing</span></a></span></h3>




<p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>Use interfaces as
the glue throughout your code instead of classes.<span style="mso-spacerun:
yes">&nbsp; </span>Interfaces focus on the client's needs: they define what
functionality a client will receive without coupling them to the
implementation. Variables, parameters, return values, and casts should all use
interfaces.<span style="mso-spacerun: yes">&nbsp; </span></span></p>




<p class=Normal2nd><span style='mso-bookmark:_Toc390967791'>Classes are
implementations of interfaces and should provide no public behavior beyond the
interface itself (other than how to create and initialize an object of that
class).<span style="mso-spacerun: yes">&nbsp; </span>Avoid exposing classes except
when you want to provide the ability for a client to subclass.</span></p>




<p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>Interfaces should
be given no suffixes or prefixes: they have the &quot;normal&quot; name
space.<span style="mso-spacerun: yes">&nbsp; </span>Classes are given a suffix
of &quot;Class&quot; if they are meant to be instantiated or are given a suffix
of &quot;AbsClass&quot; if they are an abstract class that provides inheritable
implementation but is not complete and instantiable by itself.<span
style="mso-spacerun: yes">&nbsp; </span></span></p>




<h4><span style='mso-bookmark:_Toc390967791'><a name="_Toc402802566">Examples</a></span></h4>




<p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>All variables,
return values, and parameters are typed to an interface (a Type).</span></p>




<div style='mso-element:para-border-div;border:solid windowtext 1.5pt;
padding:1.0pt 1.0pt 1.0pt 1.0pt;mso-border-shadow:yes;margin-left:.25in;
margin-right:1.0in'>

<p class=CodeExample1Line style='margin:0in;margin-bottom:.0001pt'><span
style='mso-bookmark:_Toc390967791'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>Point aPoint = GeometryPack.newPointX_y(3,5);</span></p>

</div>




<p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>Methods commit to
what type they return, but not the particular implementation class</span></p>




<div style='mso-element:para-border-div;border:solid windowtext 1.5pt;
padding:1.0pt 1.0pt 1.0pt 1.0pt;mso-border-shadow:yes;margin-left:.25in;
margin-right:1.0in'>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt;tab-stops:.5in .75in 1.0in 1.25in 1.5in 1.75in 2.0in 2.25in'><span
style='mso-bookmark:_Toc390967791'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>Point newPointX_y(float x, float y) {</span></p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt;tab-stops:.5in .75in 1.0in 1.25in 1.5in 1.75in 2.0in 2.25in'><span
style='mso-bookmark:_Toc390967791'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>if ((x == 0) &amp;&amp;
(y ==0)) return ZERO_POINT;</span></p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt;tab-stops:.5in .75in 1.0in 1.25in 1.5in 1.75in 2.0in 2.25in'><span
style='mso-bookmark:_Toc390967791'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>if (y == 0) return
newPointR_theta(x,0);<span style="mso-spacerun: yes">&nbsp; </span>//Just to show
the encapsulation</span></p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt;tab-stops:.5in .75in 1.0in 1.25in 1.5in 1.75in 2.0in 2.25in'><span
style='mso-bookmark:_Toc390967791'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>return new
PointXYClass(x,y);</span></p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt;tab-stops:.5in .75in 1.0in 1.25in 1.5in 1.75in 2.0in 2.25in'><span
style='mso-bookmark:_Toc390967791'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>}</span></p>

</div>




<p class=MsoNormal><span style='mso-bookmark:_Toc390967791'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span></span></p>




<div style='mso-element:para-border-div;border:solid windowtext 1.5pt;
padding:1.0pt 1.0pt 1.0pt 1.0pt;mso-border-shadow:yes;margin-left:.25in;
margin-right:1.0in'>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt;tab-stops:.5in .75in 1.0in 1.25in 1.5in 1.75in 2.0in 2.25in'><span
style='mso-bookmark:_Toc390967791'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>Point newPointR_theta(float r, float theta) {</span></p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt;tab-stops:.5in .75in 1.0in 1.25in 1.5in 1.75in 2.0in 2.25in'><span
style='mso-bookmark:_Toc390967791'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>if (r == 0) return
ZERO_POINT;</span></p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt;tab-stops:.5in .75in 1.0in 1.25in 1.5in 1.75in 2.0in 2.25in'><span
style='mso-bookmark:_Toc390967791'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>return new
PointRThetaClass(r,theta);</span></p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt;tab-stops:.5in .75in 1.0in 1.25in 1.5in 1.75in 2.0in 2.25in'><span
style='mso-bookmark:_Toc390967791'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>}</span></p>

</div>




<p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>Similarly, methods
specify the parameter type they need but do not restrict the implementation of
that type:</span></p>




<div style='mso-element:para-border-div;border:solid windowtext 1.5pt;
padding:1.0pt 1.0pt 1.0pt 1.0pt;mso-border-shadow:yes;margin-left:.25in;
margin-right:1.0in'>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt;tab-stops:.5in .75in 1.0in 1.25in 1.5in 1.75in 2.0in 2.25in'><span
style='mso-bookmark:_Toc390967791'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>Rectangle newRectangle(Point c1, Point c2) {</span></p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt;tab-stops:.5in .75in 1.0in 1.25in 1.5in 1.75in 2.0in 2.25in'><span
style='mso-bookmark:_Toc390967791'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>if (c1.equals(c2))
return new DegenRectangleClass(c1);</span></p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt;tab-stops:.5in .75in 1.0in 1.25in 1.5in 1.75in 2.0in 2.25in'><span
style='mso-bookmark:_Toc390967791'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>return new
RectangleClass(c1.x(), c1.y(), c2.x(), c2.y());</span></p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt;tab-stops:.5in .75in 1.0in 1.25in 1.5in 1.75in 2.0in 2.25in'><span
style='mso-bookmark:_Toc390967791'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
style="mso-spacerun: yes">&nbsp;&nbsp;</span>//We know c1 can tell us x(), y(),
but not if it</span></p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt;tab-stops:.5in .75in 1.0in 1.25in 1.5in 1.75in 2.0in 2.25in'><span
style='mso-bookmark:_Toc390967791'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>//actually stores 'x' and 'y' as instance variables</span></p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt;tab-stops:.5in .75in 1.0in 1.25in 1.5in 1.75in 2.0in 2.25in'><span
style='mso-bookmark:_Toc390967791'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>}</span></p>

</div>




<p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>The only place
where the Class itself is exposed is within the implementation of the factory
method (as above) and the methods of the actual object.</span></p>




<p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>Classes and
abstract classes can implement the &quot;unsuffixed&quot; interface directly:</span></p>




<div style='mso-element:para-border-div;border:solid windowtext 1.5pt;
padding:1.0pt 1.0pt 1.0pt 1.0pt;mso-border-shadow:yes;margin-left:.25in;
margin-right:1.0in'>

<p class=CodeExample1Line style='margin:0in;margin-bottom:.0001pt'><span
style='mso-bookmark:_Toc390967791'><span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp; </span>public
class PointAbsClass implements Point {...</span></p>

</div>




<p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>or indirectly when
a parent class implements it for them:</span></p>




<div style='mso-element:para-border-div;border:solid windowtext 1.5pt;
padding:1.0pt 1.0pt 1.0pt 1.0pt;mso-border-shadow:yes;margin-left:.25in;
margin-right:1.0in'>

<p class=CodeExample1Line style='margin:0in;margin-bottom:.0001pt'><span
style='mso-bookmark:_Toc390967791'><span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp; </span>public
class PointXYClass extends PointAbsClass {...</span></p>

</div>




<h4><span style='mso-bookmark:_Toc390967791'><a name="_Toc402802567">Discussion</a></span></h4>




<p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>There are many
benefits to using interfaces as the glue throughout your systems, the following
are just two of the most important benefits.<span style="mso-spacerun:
yes">&nbsp; </span>First, clients will not be coupled to the specific
implementation, so you can have much more flexibility in evolving the
implementation plus you can provide alternative implementations to support
proxies, tracing, and performance variations.<span style="mso-spacerun:
yes">&nbsp; </span>Second, you can use multiple inheritance among interfaces
and between interfaces and classes, which can help with OO modeling and can
support different access views of the same class (see below on Access Control).</span></p>




<p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>The penalties of
using interfaces everywhere are having to managing interfaces separately from
classes and any performance penalty a particular JVM has for calling through
interfaces.<span style="mso-spacerun: yes">&nbsp; </span>Managing separate
files is overhead but it provides an important reward: you are focused on the
client when modifying the 'interface' file.<span style="mso-spacerun:
yes">&nbsp; </span>It is much harder to keep a 'client' focus when in a 'class'
file with all the implementation details around.<span style="mso-spacerun:
yes">&nbsp; </span></span></p>




<p class=Normal2nd><span style='mso-bookmark:_Toc390967791'>The performance
penalty depends on the particular VM.<span style="mso-spacerun: yes">&nbsp;
</span>On some current VMs it varies between 30% overhead and 150% overhead
over a straight message call</span><a style='mso-footnote-id:ftn' href="#_ftn2"
name="_ftnref" title=""><span style='mso-bookmark:_Toc390967791'><span
class=MsoFootnoteReference><span style='mso-special-character:footnote'><![if !supportFootnotes]>[&dagger;]<![endif]></span></span></span></a><span
style='mso-bookmark:_Toc390967791'>.<span style="mso-spacerun: yes">&nbsp;
</span>Rarely is this "message overhead" a significant burden for an
application, but in a few tight circumstances it may be and 'class-typing' can
replacing the 'interface-typing'</span><a style='mso-footnote-id:ftn'
href="#_ftn3" name="_ftnref" title=""><span style='mso-bookmark:_Toc390967791'><span
class=MsoFootnoteReference><span style='mso-special-character:footnote'><![if !supportFootnotes]>[&Dagger;]<![endif]></span></span></span></a><span
style='mso-bookmark:_Toc390967791'>.<span style="mso-spacerun: yes">&nbsp;
</span>Because classes are conspicuous these cases will be easy to identify and
reverse if other needs take precedence.</span></p>




<p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>Overall, the
advantages of using interfaces far outweigh the disadvantages, especially for
the client and maintainer.<span style="mso-spacerun: yes">&nbsp; </span>The
extra flexibility, object modeling improvement, and client consideration
provided by interfaces improve programs significantly.</span></p>




<h3><span style='mso-bookmark:_Toc390967791'><a name="_Toc402802568"></a><a
name="_Toc408310754"><span style='mso-bookmark:_Toc402802568'>Interface and Class naming</span></a></span></h3>




<p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>Make sure the name
of an interface or a class matches the range of usage of the interface or
class.<span style="mso-spacerun: yes">&nbsp; </span>If it is designed to be
very general, choose a very simple name.<span style="mso-spacerun: yes">&nbsp;
</span>If it is designed to be used in a more specific context, qualify it
enough to describe the range of functionality that it is meant to have.</span></p>




<p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>You should spend a
fair amount of time making sure your interface and class names are very
good.<span style="mso-spacerun: yes">&nbsp; </span>Try names out and fix them
if they don't work well in actual use or if they do not fit well with other
interfaces and classes in the system.<span style="mso-spacerun: yes">&nbsp;
</span>This is especially valuable in the younger stages of a project &#8211;
before other people have mentally and programmatically committed to a name.</span></p>




<h3><span style='mso-bookmark:_Toc390967791'><a name="_Toc402802569"></a><a
name="_Toc408310755"><span style='mso-bookmark:_Toc402802569'>Types and protocols</span></a></span></h3>




<p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>We separate
specifying an object's public interfaces in two ways: specifying what an object
is (its Types) and specifying what an object responds to (its Protocols).<span
style="mso-spacerun: yes">&nbsp; </span>These are both specified using Java
interfaces, but protocols tend to be "mixed in" to the Types as opposed to
having their own hierarchy.<span style="mso-spacerun: yes">&nbsp; </span>It is
useful for modeling to make the distinction, and we to suffix the mixin
protocol with "able" (Printable, Sortable).</span></p>




<h3><span style='mso-bookmark:_Toc390967791'><a name="_Toc402802570"></a><a
name="_Toc408310756"><span style='mso-bookmark:_Toc402802570'>Access Control</span></a></span></h3>




<p class=MsoNormal style='page-break-after:avoid'><span style='mso-bookmark:
_Toc390967791'>Java has 4 levels of access control</span><a style='mso-footnote-id:
ftn' href="#_ftn4" name="_ftnref" title=""><span style='mso-bookmark:_Toc390967791'><span
class=MsoFootnoteReference><span style='mso-special-character:footnote'><![if !supportFootnotes]>[&sect;]<![endif]></span></span></span></a><span
style='mso-bookmark:_Toc390967791'>:</span></p>




<table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0
 style='margin-left:36.9pt;border-collapse:collapse;mso-table-layout-alt:fixed;
 mso-padding-alt:0in 5.4pt 0in 5.4pt'>
 <tr>
  <td width=54 valign=top style='width:.75in;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>Public</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=353 valign=top style='width:4.9in;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>Visible to
  everyone</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr>
  <td width=54 valign=top style='width:.75in;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>Protected</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=353 valign=top style='width:4.9in;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>Visible only to
  the class and its subclasses (when each is acting as a subclass)</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr>
  <td width=54 valign=top style='width:.75in;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>Private</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=353 valign=top style='width:4.9in;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>Visible only to
  the class itself (no subclasses)</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr style='mso-yfti-lastrow:yes'>
  <td width=54 valign=top style='width:.75in;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>Package</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=353 valign=top style='width:4.9in;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>Visible only to
  the classes within the same package</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
</table>




<p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>We primarily use
Public and Protected access control.<span style="mso-spacerun: yes">&nbsp;
</span>Since we use interfaces to specify the public interface of a class, the
only methods that are public and not in some interface are creation methods
(constructors and initialization). We use package visibility if we want a
method to be visible to other classes in the package to support implementation
that is not part of the public behavior.<span style="mso-spacerun: yes">&nbsp;
</span>We rarely use Private because we rarely find it necessary to consider a
subclass as not having the ability to access its superclasses'
implementation.<span style="mso-spacerun: yes">&nbsp; </span></span></p>




<p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>Our default order
of access is:</span></p>




<table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0
 style='margin-left:36.9pt;border-collapse:collapse;mso-table-layout-alt:fixed;
 mso-padding-alt:0in 5.4pt 0in 5.4pt'>
 <tr>
  <td width=54 valign=top style='width:.75in;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>Protected</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=353 valign=top style='width:4.9in;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>All instance
  variables and methods that are not part of the public interface to the class.</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr>
  <td width=54 valign=top style='width:.75in;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>Public</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=353 valign=top style='width:4.9in;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>Methods that are
  part of the public Type interface or are publicly needed to create the object</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr>
  <td width=54 valign=top style='width:.75in;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>Package</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=353 valign=top style='width:4.9in;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>Any non-public
  methods that other classes in the package need for implementation</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr style='mso-yfti-lastrow:yes'>
  <td width=54 valign=top style='width:.75in;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>Private</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=353 valign=top style='width:4.9in;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>Special use.</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
</table>




<p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>Although the above
access control standards work fine on their own, they do not work well with
interfaces which requires methods to be public.<span style="mso-spacerun:
yes">&nbsp; </span>The following section overrides the current section because
of this limitation in Java.</span></p>




<h3><span style='mso-bookmark:_Toc390967791'><a name="_Toc402802571"></a><a
name="_Toc408310757"><span style='mso-bookmark:_Toc402802571'>Package Interfaces and Subsystem Interfaces</span></a></span></h3>




<p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>In a continued
attempt to document and encapsulate types and classes, We now use interfaces
for package access as well as public access.<span style="mso-spacerun:
yes">&nbsp; </span>Unfortunately, Java does not allow you to specify that an
interface contains methods that are only package accessible.<span
style="mso-spacerun: yes">&nbsp; </span>When you create an interface, its
methods are automatically public and that means the methods must be public in
the class implementing those methods.<span style="mso-spacerun: yes">&nbsp;
</span>So if we use an interface to specify the package interface, all those methods
must be public on the class.</span></p>




<p class=Normal2nd><span style='mso-bookmark:_Toc390967791'>Fortunately, this
is not a problem when considered with the other standards.<span
style="mso-spacerun: yes">&nbsp; </span>Since no client of the class is
expected to ever see the class itself, but must instead interact with the
interface that is available to the client.<span style="mso-spacerun:
yes">&nbsp; </span>So if a class only has access to a public interface, it can
only use the methods specified in that interface and can not normally see or
use methods (although also "public" on the class).<span style="mso-spacerun:
yes">&nbsp; </span>A class that has the package interface (which is private to the
package) will be able to use both the public and the "package public"
interfaces.</span></p>




<p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>The standard is
still that the public interfaces have no suffixes.<span style="mso-spacerun:
yes">&nbsp; </span>The naming convention for the additional Package and
Subsystem interfaces is as follows:</span></p>




<table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0
 style='margin-left:36.9pt;border-collapse:collapse;mso-table-layout-alt:fixed;
 mso-padding-alt:0in 5.4pt 0in 5.4pt'>
 <tr>
  <td width=23 valign=top style='width:22.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal align=center style='text-align:center'><span
  style='mso-bookmark:_Toc390967791'>Pi</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=383 valign=top style='width:382.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>Package Interface:
  Interface <i style='mso-bidi-font-style:normal'>for within</i> Package .<span
  style="mso-spacerun: yes">&nbsp; </span>This specifies the interface/methods
  available to other classes in the same package.<span style="mso-spacerun:
  yes">&nbsp; </span>This is usually the most inclusive interface (other than
  for the class itself).</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr>
  <td width=23 valign=top style='width:22.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal align=center style='text-align:center'><span
  style='mso-bookmark:_Toc390967791'>Si</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=383 valign=top style='width:382.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>Subsystem
  Interface: Interface <i style='mso-bidi-font-style:normal'>for within </i>Subsystem.<span
  style="mso-spacerun: yes">&nbsp; </span>This specifies the interface/methods
  available to other classes in the same subsystem but in a different
  package.<span style="mso-spacerun: yes">&nbsp; </span>This is more inclusive
  than the public interface but more restrictive than the package interface.</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr style='mso-yfti-lastrow:yes'>
  <td width=23 valign=top style='width:22.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal align=center style='text-align:center'><span
  style='mso-bookmark:_Toc390967791'>Xi</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=383 valign=top style='width:382.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>Extended
  Interface: An extension of an interface to provide more functionality than is
  commonly needed.<span style="mso-spacerun: yes">&nbsp; </span>Only certain
  "sophisticated" clients will want to use an Xi interface.</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
</table>




<p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>In this case, these
interfaces form a "perfect" hierarchy (Foo - FooXi - FooSi - FooPi) so moving
both up and down the hierarchy is guaranteed to succeed for an instance of
'FooClass'.</span></p>




<h3><span style='mso-bookmark:_Toc390967791'><a name="_Toc402802572"></a><a
name="_Toc408310758"><span style='mso-bookmark:_Toc402802572'>Constructors and Factory methods</span></a></span></h3>




<p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>For Java we always
use Factories and Factory methods for "public" object construction.<span
style="mso-spacerun: yes">&nbsp; </span>We use factory creation methods instead
of straight constructors because they </span></p>




<p class=MsoListBullet2 style='mso-list:l3 level1 lfo1'><span style='mso-bookmark:
_Toc390967791'><![if !supportLists]><span style='font-family:Symbol;mso-fareast-font-family:
Symbol;mso-bidi-font-family:Symbol'><span style='mso-list:Ignore'>&bull;<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span></span><![endif]>Allow
more flexibility in creating a new object: maybe we just reuse an existing
object</span></p>




<p class=MsoListBullet2 style='mso-list:l3 level1 lfo1'><span style='mso-bookmark:
_Toc390967791'><![if !supportLists]><span style='font-family:Symbol;mso-fareast-font-family:
Symbol;mso-bidi-font-family:Symbol'><span style='mso-list:Ignore'>&bull;<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span></span><![endif]>Can
have better names: "newTimeNow()" and "newTimeFromSeconds(...)" instead of "new
Time()" and "new Time(...)"</span></p>




<p class=MsoListBullet2 style='mso-list:l3 level1 lfo1'><span style='mso-bookmark:
_Toc390967791'><![if !supportLists]><span style='font-family:Symbol;mso-fareast-font-family:
Symbol;mso-bidi-font-family:Symbol'><span style='mso-list:Ignore'>&bull;<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span></span><![endif]>Provide
better separation between interface and implementation: we can document the
factory method in an interface</span></p>




<p class=MsoListBullet2 style='mso-list:l3 level1 lfo1'><span style='mso-bookmark:
_Toc390967791'><![if !supportLists]><span style='font-family:Symbol;mso-fareast-font-family:
Symbol;mso-bidi-font-family:Symbol'><span style='mso-list:Ignore'>&bull;<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span></span><![endif]>Naturally
flow into more sophisticated factory designs (See [Gamma+HJV<span
style="mso-spacerun: yes">&nbsp; </span>95])</span></p>




<p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>Generally we try to
use another appropriate object as the Factory for a particular class (a database
object create Tables).<span style="mso-spacerun: yes">&nbsp; </span>For classes
that have no other appropriate factory object we use the 'Pack' object as the
factory.<span style="mso-spacerun: yes">&nbsp; </span></span></p>




<h3><span style='mso-bookmark:_Toc390967791'><a name="_Toc402802573"></a><a
name="_Toc408310759"><span style='mso-bookmark:_Toc402802573'>Pack Objects</span></a></span></h3>




<p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>It is very useful
to be able to treat a Package as an object, so in every package we have a class
named "&lt;packageName&gt;Pack" (e.g. java.util would have a "UtilPack"
class).<span style="mso-spacerun: yes">&nbsp; </span>This provides clients with
a single interface for creating objects, finding singleton objects, and any
other "static" (non-object) behavior.<span style="mso-spacerun: yes">&nbsp;
</span>It also prevents the problem of exposing a class from behind the
interfaces: class constructors and static methods can be private to the package
with the pack object exposing what ever functionality is needed.<span
style="mso-spacerun: yes">&nbsp; </span>Clients of a package see only the
public interfaces and the Pack's functionality and have no visibility to the
implementation classes.</span></p>




<p class=MsoNormal><span style='mso-bookmark:_Toc390967791'><span
style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>You
can interact with a Pack in two ways: as either a singleton object or as a
"static-side" virtual object.<span style="mso-spacerun: yes">&nbsp; </span>The
singleton object is more flexible because you can pass the object around within
a program (for example, to recurse a package hierarchy).<span
style="mso-spacerun: yes">&nbsp; </span>The static object is more convenient
for construction (e.g. "UtilPack.newDate()") but is less flexible and more
coupled.<span style="mso-spacerun: yes">&nbsp; </span>Overall, convenience
tends to win out because construction is the main use of a Pack (but remember
that it is better to give Factory responsibilities to another suitable object
than the Pack).</span></p>




<h3><span style='mso-bookmark:_Toc390967791'><a name="_Toc402802574"></a><a
name="_Toc408310760"><span style='mso-bookmark:_Toc402802574'>Abbreviations</span> note</a></span></h3>




<p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>Using initial
capitalization for words implies abbreviations should be initial capitalized as
well.<span style="mso-spacerun: yes">&nbsp; </span>This makes it easier to
identify the word boundaries but is against normal abbreviation policies: in
this approach abbreviations are inherently all lowercase and are only
capitalized when the start of a word boundary.<span style="mso-spacerun:
yes">&nbsp; </span>Effectively abbreviations are treated like normal 'words'
(i.e. as if they had come into common usage for English).<span
style="mso-spacerun: yes">&nbsp; </span>This also means that if a word is
abbreviated to a single letter, there can be a series of capital letters that
indicate a series of one letter abbreviated words.<span style="mso-spacerun:
yes">&nbsp; </span>DomainStorageInformation can be abbreviated to DSInformation
and would have three words ('D', 'S', 'Information').<span style="mso-spacerun:
yes">&nbsp; </span>The previous example of PointXYClass is four words ('Point',
'X', 'Y', 'Class).<span style="mso-spacerun: yes">&nbsp; </span>Numbers are
considered to start their own word consisting of numbers followed by any
non-capitalized letters.<span style="mso-spacerun: yes">&nbsp; </span>For example,<span
style="mso-spacerun: yes">&nbsp; </span>'Procedure2Arg' is three words
('Procedure', '2', 'Arg'),<span style="mso-spacerun: yes">&nbsp; </span>'49ers'
is one word, and 'root4The49ers' is 4 words ('root', '4', 'the', '49ers').</span></p>




<h2><span style='mso-bookmark:_Toc390967791'><a name="_Toc402802575"></a><a
name="_Toc408310761"><span style='mso-bookmark:_Toc402802575'><![if !supportLists]><span
style='mso-list:Ignore'>4.2 </span><![endif]>Method Standards</span></a></span></h2>




<p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>Although not as
visibly dominant as Classes and Interfaces, methods form a potentially equally
valuable organization of a programs behavior.<span style="mso-spacerun:
yes">&nbsp; </span>By having well named methods that are used consistently a
client can correctly use and predict the functionality in interfaces and
objects.<span style="mso-spacerun: yes">&nbsp; </span>This makes a potentially
complex program much simpler and understandable.</span></p>




<h3><span style='mso-bookmark:_Toc390967791'><a name="_Toc402802576"></a><a
name="_Toc408310762"><span style='mso-bookmark:_Toc402802576'>Standardized, woven, intention-revealing method names</span></a></span></h3>




<p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>We use intention
revealing method names where parameter positions are interwoven into the name
by the inclusion of underscores &quot;_&quot;.<span style="mso-spacerun:
yes">&nbsp; </span>Any underscores at the end of the name (before the open parenthesis)
are omitted from the name.<span style="mso-spacerun: yes">&nbsp;
</span>Generally a method's name will uniquely determine the number and types
of parameters it requires, but if there are a large number of parameters, the
signature may not be unique without including the number of parameters.<span
style="mso-spacerun: yes">&nbsp; </span>It is a rare and very controlled
condition for when we will have two methods with signature's that are unique
except for the type of a parameter.<span style="mso-spacerun: yes">&nbsp;
</span></span></p>




<p class=MsoNormal><span style='mso-bookmark:_Toc390967791'><span
style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>We
have many standardized words (especially prefixes) used in naming methods which
reveal what the method does.<span style="mso-spacerun: yes">&nbsp; </span>We <i
style='mso-bidi-font-style:normal'>do not</i> use &quot;get&quot; as a prefix
for asking about an attribute (see below for the discussion of attributes).</span></p>




<h4><span style='mso-bookmark:_Toc390967791'><a name="_Toc402802577">Examples</a></span></h4>




<table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0
 style='margin-left:36.9pt;border-collapse:collapse;mso-table-layout-alt:fixed;
 mso-padding-alt:0in 5.4pt 0in 5.4pt'>
 <tr>
  <td width=189 valign=top style='width:189.0pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>dictionary.atKey_put(key,value);</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=176 valign=top style='width:175.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>Woven parameters</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr>
  <td width=189 valign=top style='width:189.0pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>person.name();</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=176 valign=top style='width:175.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>GetAttribute</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr>
  <td width=189 valign=top style='width:189.0pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>person.setName(newName);</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=176 valign=top style='width:175.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>SetAttribute (if
  necessary and atomic)</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr>
  <td width=189 valign=top style='width:189.0pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>array.atIndex(index);</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=176 valign=top style='width:175.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>&quot;at&quot; is
  not overloaded to take both a key (Object) and an index (int)</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr>
  <td width=189 valign=top style='width:189.0pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>person.isHappy();</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=176 valign=top style='width:175.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>Returns Boolean</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr style='mso-yfti-lastrow:yes'>
  <td width=189 valign=top style='width:189.0pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>factory.paintCar_using(aCar,white,quickly)</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=176 valign=top style='width:175.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>Extra unwoven
  parameters</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
</table>




<h3><span style='mso-bookmark:_Toc390967791'><a name="_Toc402802578"></a><a
name="_Toc408310763"><span style='mso-bookmark:_Toc402802578'>Intention revealing names</span></a></span></h3>




<p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>Having &quot;intention
revealing method names&quot; is the primary rule for naming methods.<span
style="mso-spacerun: yes">&nbsp; </span>Create a name that suggests what the
method &quot;provides for the caller&quot;, not how the method accomplishes
this service.<span style="mso-spacerun: yes">&nbsp; </span>The clearer you can
make your methods behavior by the name of the method, the easier it is for the
client (who repeatedly uses your method) to understand your class or
interface.<span style="mso-spacerun: yes">&nbsp; </span>This is one of the many
incarnations of thinking from the client's perspective.<span
style="mso-spacerun: yes">&nbsp; </span>See the coding pattern &quot;Intention
revealing selector&quot; in [Beck 96].<span style="mso-spacerun: yes">&nbsp;
</span></span></p>




<h3><span style='mso-bookmark:_Toc390967791'><a name="_Toc402802579"></a><a
name="_Toc408310764"><span style='mso-bookmark:_Toc402802579'>Standardized naming patterns</span></a></span></h3>




<p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>The next rule after
picking intention revealing method names is to standardize the vocabulary used
in the name.<span style="mso-spacerun: yes">&nbsp; </span>As much as possible,
words should be used consistently and uniquely when part of a method.<span
style="mso-spacerun: yes">&nbsp; </span>The following is an example subset of
the standard meanings for method name parts and method categories (see the
Source code format section below). </span></p>




<p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>The following are
common method prefixes</span></p>




<table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0
 style='margin-left:36.9pt;border-collapse:collapse;mso-table-layout-alt:fixed;
 mso-padding-alt:0in 5.4pt 0in 5.4pt'>
 <tr>
  <td width=77 valign=top style='width:76.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'><b
  style='mso-bidi-font-weight:normal'>Prefixes<o:p></o:p></b></span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=77 valign=top style='width:76.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'><b
  style='mso-bidi-font-weight:normal'>Category<o:p></o:p></b></span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=212 valign=top style='width:211.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'><b
  style='mso-bidi-font-weight:normal'>Description<o:p></o:p></b></span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr>
  <td width=77 valign=top style='width:76.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>is, can, has,
  will</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=77 valign=top style='width:76.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>Testing</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=212 valign=top style='width:211.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>Return a Boolean
  and test the state of the object</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr>
  <td width=77 valign=top style='width:76.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>copy, <br>
  copy&lt;Property&gt;</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=77 valign=top style='width:76.5pt;padding:0in 5.4pt 0in 5.4pt'><span
  style='mso-bookmark:_Toc390967791'></span>
  
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=212 valign=top style='width:211.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>Produce a copy of
  the current object.<span style="mso-spacerun: yes">&nbsp; </span>Suffix
  describes properties that the new object will have. </span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr>
  <td width=77 valign=top style='width:76.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>init, setup</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=77 valign=top style='width:76.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>Initializing</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=212 valign=top style='width:211.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>These methods are
  called before you can use an object.<span style="mso-spacerun: yes">&nbsp;
  </span>Only a single init function should be called which can then be
  followed by whatever setup methods you need to change the default
  configuration of the object.<span style="mso-spacerun: yes">&nbsp; </span></span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr>
  <td width=77 valign=top style='width:76.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>doneSetup</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=77 valign=top style='width:76.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>Initializing</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=212 valign=top style='width:211.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>Some objects
  require calling a &quot;doneSetup&quot; to allow them to prepare themselves
  for normal, post initialization, interactions.</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr>
  <td width=77 valign=top style='width:76.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>new</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=77 valign=top style='width:76.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>Creating</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=212 valign=top style='width:211.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>Create and return
  a new object from a factory that creates only a single type of object</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr>
  <td width=77 valign=top style='width:76.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>new&lt;Type&gt;</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=77 valign=top style='width:76.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>Creating</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=212 valign=top style='width:211.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>Create and return
  a new object of a specific type</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr>
  <td width=77 valign=top style='width:76.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>as&lt;Type&gt;,<br>
  as&lt;Property&gt;</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=77 valign=top style='width:76.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>Converting</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=212 valign=top style='width:211.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>Produce a copy of
  the object (if changes were required) converted to a different type or
  property. 'asString', 'asUppercase'</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr style='mso-yfti-lastrow:yes'>
  <td width=77 valign=top style='width:76.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>to&lt;Type&gt;,<br>
  to&lt;Property&gt;</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=77 valign=top style='width:76.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>Converting</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=212 valign=top style='width:211.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>If the current
  object is mutable, modify it to satisfy the type or property.<span
  style="mso-spacerun: yes">&nbsp; </span>Otherwise this is synonymous with
  as&lt;Type&gt;.</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
</table>




<p class=MsoNormal style='margin-left:189.0pt;text-indent:-189.0pt;tab-stops:
.5in 112.5pt 189.0pt'><span style='mso-bookmark:_Toc390967791'><o:p>&nbsp;</o:p></span></p>




<p class=MsoNormal style='margin-left:189.0pt;text-indent:-189.0pt;tab-stops:
.5in 112.5pt 189.0pt'><span style='mso-bookmark:_Toc390967791'>A few type
specific prefixes are:</span></p>




<table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0
 style='margin-left:36.9pt;border-collapse:collapse;mso-table-layout-alt:fixed;
 mso-padding-alt:0in 5.4pt 0in 5.4pt'>
 <tr>
  <td width=77 valign=top style='width:76.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>find</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=77 valign=top style='width:76.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>Searching</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=212 valign=top style='width:211.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>Retrieve a single
  object or null if unsuccessful</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr>
  <td width=77 valign=top style='width:76.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>select</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=77 valign=top style='width:76.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>Searching</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=212 valign=top style='width:211.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>Retrieve multiple
  objects or an empty collection</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr>
  <td width=77 valign=top style='width:76.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>value</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=77 valign=top style='width:76.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>Evaluating</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=212 valign=top style='width:211.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>Evaluate the
  function and return an object</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr>
  <td width=77 valign=top style='width:76.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>execute</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=77 valign=top style='width:76.5pt;padding:0in 5.4pt 0in 5.4pt'><span
  style='mso-bookmark:_Toc390967791'></span>
  
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=212 valign=top style='width:211.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>Execute the
  procedure, no return value</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr style='mso-yfti-lastrow:yes'>
  <td width=77 valign=top style='width:76.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>add</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=77 valign=top style='width:76.5pt;padding:0in 5.4pt 0in 5.4pt'><span
  style='mso-bookmark:_Toc390967791'></span>
  
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=212 valign=top style='width:211.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>Add an object to
  a collection</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
</table>




<p class=MsoNormal style='margin-left:189.0pt;text-indent:-189.0pt;tab-stops:
.5in 112.5pt 189.0pt'><span style='mso-bookmark:_Toc390967791'><span
style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span></p>




<p class=MsoNormal style='margin-left:189.0pt;text-indent:-189.0pt;tab-stops:
.5in 112.5pt 189.0pt'><span style='mso-bookmark:_Toc390967791'>Non-prefix
method name patterns</span></p>




<table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0
 style='margin-left:36.9pt;border-collapse:collapse;mso-table-layout-alt:fixed;
 mso-padding-alt:0in 5.4pt 0in 5.4pt'>
 <tr>
  <td width=77 valign=top style='width:76.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>with</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=293 valign=top style='width:292.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>This prefix is
  used to add subsequent parameters to a basic method when the parameters have
  no distinguishing features (an example is the &quot;value, valueWith,
  valueWith_with&quot; series for Function objects)</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr>
  <td width=77 valign=top style='width:76.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>any</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=293 valign=top style='width:292.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>Return any object
  that satisfies the request (findAny)</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr style='mso-yfti-lastrow:yes'>
  <td width=77 valign=top style='width:76.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>all</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=293 valign=top style='width:292.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>Return all
  objects that satisfy the request (selectAll)</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
</table>




<p class=MsoNormal style='margin-left:1.5in;text-indent:-1.5in;tab-stops:.5in 1.5in'><span
style='mso-bookmark:_Toc390967791'><o:p>&nbsp;</o:p></span></p>




<p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>Within each Type or
domain area (Collections, Functors, SQL, Mapping, Domain models) there will be
both reused vocabulary and new vocabulary.</span></p>




<h3><span style='mso-bookmark:_Toc390967791'><a name="_Toc402802580"></a><a
name="_Toc408310765"><span style='mso-bookmark:_Toc402802580'>Java method signatures</span></a></span></h3>




<p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>Java selects the
method to execute based on the name of the method, the number of parameters to
the method, and the declared (not actual) types of the parameters to the method.
[&sect;8.4.2]<span style="mso-spacerun: yes">&nbsp; </span>Together these form the
signature of the method.</span></p>




<p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>To produce good
code, the developer needs to make it easy for the client of the code to do what
was intended.<span style="mso-spacerun: yes">&nbsp; </span>The developer, the
client, and the compiler must all agree on what will happen when the program
executes; it should be easy for a client to remember what methods are needed
and how to call them.<span style="mso-spacerun: yes">&nbsp; </span>Allowing
differences in certain features of a signature to change what method is called
makes life harder on the client.<span style="mso-spacerun: yes">&nbsp; </span></span></p>




<p class=MsoNormal><span style='mso-bookmark:_Toc390967791'><span
style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>The
first problem is with using the declared type of a variable to modify what
method is called.<span style="mso-spacerun: yes">&nbsp; </span>This makes it
harder for the caller to realize they are calling the wrong method because the
information used to decide which method to call is spread over two locations:
the actual method call and the variable declaration.<span style="mso-spacerun:
yes">&nbsp; </span>For example, given the methods:</span></p>




<div style='mso-element:para-border-div;border:solid windowtext 1.5pt;
padding:1.0pt 1.0pt 1.0pt 1.0pt;mso-border-shadow:yes;margin-left:.25in;
margin-right:1.0in'>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style='mso-bookmark:_Toc390967791'><span
style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>void
doItTo(Person person);</span></p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style='mso-bookmark:_Toc390967791'><span
style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>void
doItTo(Company company);</span></p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style='mso-bookmark:_Toc390967791'><span
style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>void
doItTo(Object anyObject);</span></p>

</div>




<p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>the call to a
method:</span></p>




<div style='mso-element:para-border-div;border:solid windowtext 1.5pt;
padding:1.0pt 1.0pt 1.0pt 1.0pt;mso-border-shadow:yes;margin-left:.25in;
margin-right:1.0in'>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style='mso-bookmark:_Toc390967791'><span
style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>doItTo(person);</span></p>

</div>




<p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>is not enough to
determine which method is called.<span style="mso-spacerun: yes">&nbsp;
</span>Even if the object in the variable person is really a person (not a
company), it will depend on whether the variable 'person' was declared as type
Person or as only a general object.<span style="mso-spacerun: yes">&nbsp;
</span>In general we consider this to be unacceptable, so we only use this
feature (overloading of signature based on a parameters declared type) in very
controlled circumstances (See below).</span></p>




<p class=MsoNormal><span style='mso-bookmark:_Toc390967791'><span
style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>The
second problem is having the number of parameters determine different behavior
of methods.<span style="mso-spacerun: yes">&nbsp; </span>Although it is visible
which version of the method you are calling (simply count the parameters), it
is unclear what the purpose of the parameters are and what order they should be
placed in.<span style="mso-spacerun: yes">&nbsp; </span>Although we do allow
methods that are only distinguishable by the number of parameters, we try to avoid
it.</span></p>




<h3><span style='mso-bookmark:_Toc390967791'><a name="_Toc402802581"></a><a
name="_Toc408310766"><span style='mso-bookmark:_Toc402802581'>Principles for signatures</span></a></span></h3>




<p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>Our standard for
method signatures is to have them be mostly distinguishable by name.<span
style="mso-spacerun: yes">&nbsp; </span>Ideally two methods with the same name
will take the same number and type of arguments.<span style="mso-spacerun:
yes">&nbsp; </span>In infrequent cases the number of parameters will determine
what method to call, but this primarily happens when a method has a significant
number of parameters (4 or more) so the &quot;Parameter positions interwoven
into the method name&quot; pattern is cumbersome.</span></p>




<p class=MsoNormal><span style='mso-bookmark:_Toc390967791'><span
style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>The
only time the type of a parameter will determine which method to call is to
support using literal values (Strings, Numbers, and Booleans) as direct
parameters.<span style="mso-spacerun: yes">&nbsp; </span>These types will
always be incompatible with the &quot;standard&quot; type of the parameter.<span
style="mso-spacerun: yes">&nbsp; </span>For example, if the standard method
requires an object of type Person, say &quot;Company::firePerson(Person
p)&quot;, it is acceptable to have a method with an identical name that takes a
String instead of a Person in that parameter position
&quot;Company::firePerson(String personName)&quot;.<span style="mso-spacerun:
yes">&nbsp; </span>This is disapproved of, and it would be better to name the
method &quot;Company::firePersonNamed(String personName)&quot;.<span
style="mso-spacerun: yes">&nbsp; </span>Usually this is only a problem when a
set of related messages all have a significant number of parameters (4 or
more), so the names are not likely to be unique.</span></p>




<h3><span style='mso-bookmark:_Toc390967791'><a name="_Toc402802582"></a><a
name="_Toc408310767"><span style='mso-bookmark:_Toc402802582'>Parameter positions woven into the method name</span></a></span></h3>




<p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>A general problem
with parenthesized parameters is that there is no reminder of the order of
parameters. This is especially true of methods with more than two arguments,
but can also be a problem even with only two parameters.<span
style="mso-spacerun: yes">&nbsp; </span>Examples of these problems are:</span></p>




<div style='mso-element:para-border-div;border:solid windowtext 1.5pt;
padding:1.0pt 1.0pt 1.0pt 1.0pt;mso-border-shadow:yes;margin-left:.25in;
margin-right:1.0in'>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style='mso-bookmark:_Toc390967791'><span
style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>hash.put(value,key)<span
style='mso-tab-count:3'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span></p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style='mso-bookmark:_Toc390967791'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>//
put value at key? no, wrong order</span></p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style='mso-bookmark:_Toc390967791'><span
style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>statement.setObject(index,type,value)<span
style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span></p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style='mso-bookmark:_Toc390967791'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>//
set the entry at index to the type using value?</span></p>

</div>




<p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>Generally Smalltalk
has less of a problem with this because the parameters are woven into the
method call, which encourages a much higher level of readability.<span
style="mso-spacerun: yes">&nbsp; </span>The example of a method definition in
Smalltalk is:</span></p>




<div style='mso-element:para-border-div;border:solid windowtext 1.5pt;
padding:1.0pt 1.0pt 1.0pt 1.0pt;mso-border-shadow:yes;margin-left:.25in;
margin-right:1.0in'>

<p class=CodeExample1Line style='margin:0in;margin-bottom:.0001pt'><span
style='mso-bookmark:_Toc390967791'><span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp; </span>Dictionary&gt;&gt;at:
key put: value</span></p>

</div>




<p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>or to put it into
close to Java terms:</span></p>




<div style='mso-element:para-border-div;border:solid windowtext 1.5pt;
padding:1.0pt 1.0pt 1.0pt 1.0pt;mso-border-shadow:yes;margin-left:.25in;
margin-right:1.0in'>

<p class=CodeExample1Line style='margin:0in;margin-bottom:.0001pt'><span
style='mso-bookmark:_Toc390967791'><span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp; </span>public
void at: Object key put: Object value {...};</span></p>

</div>




<p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>Because of this
message weaving, we have come up with a clearer name &quot;at:put:&quot;
instead of just &quot;put&quot;, both of what the method does and especially of
which parameter is expected in what position.<span style="mso-spacerun:
yes">&nbsp; </span>Even though Java does not allow this type of syntax, it
would be nice to encourage these improved message names and to have the
messages document for the client the order to put the parameters.</span></p>




<h4><span style='mso-bookmark:_Toc390967791'><a name="_Toc402802583">First
Solution</a></span></h4>




<p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>The first solution
we used was to put underscores &quot;_&quot; as place holders to identify where
a particular parameter is woven into the message send.<span
style="mso-spacerun: yes">&nbsp; </span>For example:</span></p>




<div style='mso-element:para-border-div;border:solid windowtext 1.5pt;
padding:1.0pt 1.0pt 1.0pt 1.0pt;mso-border-shadow:yes;margin-left:.25in;
margin-right:1.0in'>

<p class=CodeExample1Line style='margin:0in;margin-bottom:.0001pt'><span
style='mso-bookmark:_Toc390967791'><span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp; </span>at_put_(key,value)</span></p>

</div>




<p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>would read as
at_(first parameter)put_(second parameter) or &quot;at (key) put
(value)&quot;.<span style="mso-spacerun: yes">&nbsp; </span>The second example
would be:</span></p>




<div style='mso-element:para-border-div;border:solid windowtext 1.5pt;
padding:1.0pt 1.0pt 1.0pt 1.0pt;mso-border-shadow:yes;margin-left:.25in;
margin-right:1.0in'>

<p class=CodeExample1Line style='margin:0in;margin-bottom:.0001pt'><span
style='mso-bookmark:_Toc390967791'><span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp; </span>setIndex_to_asType_(index,value,type)</span></p>

</div>




<p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>or &quot;set index
(index) to (value) as type (type)&quot;.<span style="mso-spacerun: yes">&nbsp;
</span>This does a good job of specifying the meaning of the message, the
number of parameters, and the specific positions of all the parameters.<span
style="mso-spacerun: yes">&nbsp; </span>If you have a large number of
parameters that you do not want to specifically mention/weave into the method
name, you can use a double underscore to indicate two or more values.<span
style="mso-spacerun: yes">&nbsp; </span>For example:</span></p>




<div style='mso-element:para-border-div;border:solid windowtext 1.5pt;
padding:1.0pt 1.0pt 1.0pt 1.0pt;mso-border-shadow:yes;margin-left:.25in;
margin-right:1.0in'>

<p class=CodeExample1Line style='margin:0in;margin-bottom:.0001pt'><span
style='mso-bookmark:_Toc390967791'><span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp; </span>at_putStuff__(key,value1,value2,value3)</span></p>

</div>




<p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>Although this was a
very consistent and logically understandable solution, all the added
underscores were annoying, especially because the underscores at the end of the
name visibly separated the method name from the parameter list.<span
style="mso-spacerun: yes">&nbsp; </span>Those trailing underscores were also
the hardest to remember to put in, probably partially because they were not
really part of the &quot;spoken name&quot; itself: it is easy to pause within a
name, but hard to express a pause at the end of a name.</span></p>




<h4><span style='mso-bookmark:_Toc390967791'><a name="_Toc402802584">Better
Solution</a></span></h4>




<p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>A better working
solution is a hybrid approach.<span style="mso-spacerun: yes">&nbsp; </span>Put
in the underscores just as before, but drop all trailing underscores.<span
style="mso-spacerun: yes">&nbsp; </span>The examples become:</span></p>




<div style='mso-element:para-border-div;border:solid windowtext 1.5pt;
padding:1.0pt 1.0pt 1.0pt 1.0pt;mso-border-shadow:yes;margin-left:.25in;
margin-right:1.0in'>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style='mso-bookmark:_Toc390967791'><span
style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>at_put(key,value)</span></p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style='mso-bookmark:_Toc390967791'><span
style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>setIndex_to_asType(index,value,type)</span></p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style='mso-bookmark:_Toc390967791'><span
style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>at_putStuff(key,value1,value,value3)</span></p>

</div>




<p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>So there are
underscores to indicate the position of all parameters except the last one (and
any unwoven ones).<span style="mso-spacerun: yes">&nbsp; </span>This means
&quot;put(value,key)&quot; is also valid, because it has an intermediary form
&quot;put__(value,key)&quot; and then the underscores are dropped.<span
style="mso-spacerun: yes">&nbsp; </span>Although &quot;put&quot; is valid using
the standard, it is still an inferior method name to &quot;at_put&quot; which
reveals intention and its use better.</span></p>




<p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>Because the
trailing underscores have now been dropped, we can not tell how many parameters
a method takes.<span style="mso-spacerun: yes">&nbsp; </span>We know the
minimum: 0 if no underscores and 1+#underscores if there are any.<span
style="mso-spacerun: yes">&nbsp; </span>Unfortunately we can not tell the
difference between 0 and 1, or between 3 and 7.<span style="mso-spacerun:
yes">&nbsp; </span>Luckily other standards or the obvious intention of caller
make these not much of a problem: calling a method that requires no parameters
(asking about an attribute) is so significantly different from calling a method
that requires a parameter (setting an attribute) that they are not likely to be
confused.</span></p>




<h3><span style='mso-bookmark:_Toc390967791'><a name="_Toc402802585"></a><a
name="_Toc408310768"><span style='mso-bookmark:_Toc402802585'>Attributes</span></a></span></h3>




<p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>An attribute is a
public property of an object that shows the state of the object.<span
style="mso-spacerun: yes">&nbsp; </span>Frequently there is a minimal
collection of attributes that uniquely determine the state of the object, but
this should not be confused with the instance variables which may be used to
store that state.</span></p>




<h4><span style='mso-bookmark:_Toc390967791'><a name="_Toc402802586">No 'get'
prefix for attributes</a></span></h4>




<p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>We do not use the
prefix &quot;get&quot; to ask the value of an object's attributes.<span
style="mso-spacerun: yes">&nbsp; </span>A method sounding like a noun indicates
an attribute, which distinguishes it from a method that changes the state of an
object (which will use an active verb).<span style="mso-spacerun: yes">&nbsp;
</span>This has several positive and a couple negative consequences.</span></p>




<p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>On the positive
side, leaving off the 'get' avoids a noisy and uninformative word</span><a
style='mso-footnote-id:ftn' href="#_ftn5" name="_ftnref" title=""><span
style='mso-bookmark:_Toc390967791'><span class=MsoFootnoteReference><span
style='mso-special-character:footnote'><![if !supportFootnotes]>[**]<![endif]></span></span></span></a><span
style='mso-bookmark:_Toc390967791'>.<span style="mso-spacerun: yes">&nbsp;
</span>Not using 'get' makes code read better in terms of objects and is
consistent with the standards in most other OO languages.<span
style="mso-spacerun: yes">&nbsp; </span>On the negative side, leaving off 'get'
causes two problems.<span style="mso-spacerun: yes">&nbsp; </span>It is
different from the standard Java idiom and it is different from the 'pattern'
used by JavaBeans to automatically guess a class's BeanInfo description.<span
style="mso-spacerun: yes">&nbsp; </span>The second of these is solvable by
using explicit BeanInfos, which provides a number of benefits in addition to
naming flexibility.</span></p>




<p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>Overall, considered
in isolation, it is the better choice to avoid 'get'.<span style="mso-spacerun:
yes">&nbsp; </span>Considered in the context of Java's idioms and libraries it
might be better to use 'get', but it will depend on your particular context.<span
style="mso-spacerun: yes">&nbsp; </span>For us the conceptual correctness and
improved naming is worth the overhead.<span style="mso-spacerun: yes">&nbsp;
</span>We do use 'get' for classes designed to be treated like basic data
structures.</span></p>




<h4><span style='mso-bookmark:_Toc390967791'><a name="_Toc402802587">Attribute
setting</a></span></h4>




<p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>Not all attributes
are changeable, in which case they will not have a setter.<span
style="mso-spacerun: yes">&nbsp; </span>Not all attributes can be changed
independently (state transitions should be as valid and complete as possible),
in which case they will not have a setter, but will instead be changed as the
result of another method.<span style="mso-spacerun: yes">&nbsp; </span>Finally,
if an attribute is independently changeable it will have a setter with a
signature of the attribute name prefixed with "set", returning "void", and
taking a single argument.</span></p>




<h3><span style='mso-bookmark:_Toc390967791'><a name="_Toc402802588"></a><a
name="_Toc408310769"><span style='mso-bookmark:_Toc402802588'>Avoid 'static'</span></a></span></h3>




<p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>Rarely use 'static'
members as part of a class or subsystems public interface.</span><span
style='mso-bookmark:_Toc390967791'><span style='font-size:14.0pt;mso-bidi-font-size:
10.0pt'> </span>The keyword 'static' is the most powerful destructive force in
Java.<span style="mso-spacerun: yes">&nbsp; </span>With one word you can turn
Java from an object-oriented, interface-based language into a very poor
compile-time binding and implementation binding.<span style="mso-spacerun:
yes">&nbsp; </span>You can not use interfaces with 'static' functionality and
you can not subclass to provide a different implementation.</span></p>




<p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>The better option
is to place the functionality on another appropriate object, which allows you
to have all the interface and implementation benefits of OO programming.<span
style="mso-spacerun: yes">&nbsp; </span>If there is currently no Type
appropriate for the functionality, use the Singleton pattern [see Gamma+HJV
95].<span style="mso-spacerun: yes">&nbsp; </span>With this pattern you would
create a real interface and class that you expect only a single instance
of.<span style="mso-spacerun: yes">&nbsp; </span>Then you can provide (through
another object or the 'Pack') a way for clients to retrieve that object and
interact with it normally from then on.<span style="mso-spacerun: yes">&nbsp;
</span>The client is only bound to the interface, so you can swap out the
implementation (or have multiple instances) without the client being harmed.</span></p>




<h3><span style='mso-bookmark:_Toc390967791'><a name="_Toc402802589"></a><a
name="_Toc408310770"><span style='mso-bookmark:_Toc402802589'>Instance variables</span></a> </span></h3>




<p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>An instance
variable is an implementation detail of a class and should be "private" or
"protected".<span style="mso-spacerun: yes">&nbsp; </span>Whether we wrap an
instance variable with private get/set methods is dependent on the needs of the
class.<span style="mso-spacerun: yes">&nbsp; </span>We never use the ability to
access another object's (of the same class) instance variables except in
"clone" type methods.</span></p>




<h2><span style='mso-bookmark:_Toc390967791'><a name="_Toc402802590"></a><a
name="_Toc408310771"><span style='mso-bookmark:_Toc402802590'><![if !supportLists]><span
style='mso-list:Ignore'>4.3 </span><![endif]>Source code format</span></a></span></h2>




<p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>Almost none of this
standards document is focused on the actual formatting of code.<span
style="mso-spacerun: yes">&nbsp; </span>This is because the most important
rules "be consistent" and "be logical" seem to suffice in most cases and the
set of existing formatting standards suffice for the rest.<span
style="mso-spacerun: yes">&nbsp; </span>The following sections discuss some
higher level or less well covered considerations for Java code formatting.</span></p>




<h3><span style='mso-bookmark:_Toc390967791'><a name="_Toc402802591"></a><a
name="_Toc408310772"><span style='mso-bookmark:_Toc402802591'>Sectioning</span></a></span></h3>




<p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>The following
describes the general sectioning of interface and class files. There are also
method categories within these major sections, and these are visible in source
files but not in the JavaDoc API.<span style="mso-spacerun: yes">&nbsp;
</span>Because classes are encapsulated within interfaces and "packs", the
sectioning of a class file is only important for the class developer or
maintainer and should be organized to help that person.</span></p>




<h4><span style='mso-bookmark:_Toc390967791'><a name="_Toc385013955"></a><a
name="_Toc402802592"><span style='mso-bookmark:_Toc385013955'>Section ordering
for Interfaces</span></a></span></h4>




<p class=MsoListBullet2 style='page-break-after:avoid;mso-list:l3 level1 lfo1'><span
style='mso-bookmark:_Toc390967791'><![if !supportLists]><span style='font-family:
Symbol;mso-fareast-font-family:Symbol;mso-bidi-font-family:Symbol'><span
style='mso-list:Ignore'>&bull;<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]>Constants</span></p>




<p class=MsoListBullet2 style='mso-list:l3 level1 lfo1'><span style='mso-bookmark:
_Toc390967791'><![if !supportLists]><span style='font-family:Symbol;mso-fareast-font-family:
Symbol;mso-bidi-font-family:Symbol'><span style='mso-list:Ignore'>&bull;<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span></span><![endif]>Methods</span></p>




<h4><span style='mso-bookmark:_Toc390967791'><a name="_Toc385013956"></a><a
name="_Toc402802593"><span style='mso-bookmark:_Toc385013956'>Section Ordering
for Classes</span></a></span></h4>




<table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0
 style='border-collapse:collapse;mso-table-layout-alt:fixed;mso-padding-alt:
 0in 5.4pt 0in 5.4pt'>
 <tr style='mso-yfti-lastrow:yes'>
  <td width=221 valign=top style='width:221.4pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoListBullet2 style='page-break-after:avoid;mso-list:l3 level1 lfo1'><span
  style='mso-bookmark:_Toc390967791'><![if !supportLists]><span
  style='font-family:Symbol;mso-fareast-font-family:Symbol;mso-bidi-font-family:
  Symbol'><span style='mso-list:Ignore'>&bull;<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  </span></span></span><![endif]>Object</span></p>
  <p class=MsoListBullet3 style='margin-left:.75in;text-indent:-.25in;
  page-break-after:avoid;mso-list:l2 level1 lfo2'><span style='mso-bookmark:
  _Toc390967791'><![if !supportLists]><span style='font-family:Symbol;
  mso-fareast-font-family:Symbol;mso-bidi-font-family:Symbol'><span
  style='mso-list:Ignore'>&bull;<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  </span></span></span><![endif]>Public</span></p>
  <p class=MsoListBullet4 style='page-break-after:avoid;mso-list:l1 level1 lfo6;
  tab-stops:list 1.0in'><span style='mso-bookmark:_Toc390967791'><![if !supportLists]><span
  style='font-family:Symbol;mso-fareast-font-family:Symbol;mso-bidi-font-family:
  Symbol'><span style='mso-list:Ignore'>&bull;<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  </span></span></span><![endif]>Constructors</span></p>
  <p class=MsoListBullet4 style='page-break-after:avoid;mso-list:l1 level1 lfo6;
  tab-stops:list 1.0in'><span style='mso-bookmark:_Toc390967791'><![if !supportLists]><span
  style='font-family:Symbol;mso-fareast-font-family:Symbol;mso-bidi-font-family:
  Symbol'><span style='mso-list:Ignore'>&bull;<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  </span></span></span><![endif]>Constants </span></p>
  <p class=MsoListBullet4 style='page-break-after:avoid;mso-list:l1 level1 lfo6;
  tab-stops:list 1.0in'><span style='mso-bookmark:_Toc390967791'><![if !supportLists]><span
  style='font-family:Symbol;mso-fareast-font-family:Symbol;mso-bidi-font-family:
  Symbol'><span style='mso-list:Ignore'>&bull;<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  </span></span></span><![endif]>Methods</span></p>
  <p class=MsoListBullet3 style='margin-left:.75in;text-indent:-.25in;
  page-break-after:avoid;mso-list:l2 level1 lfo2'><span style='mso-bookmark:
  _Toc390967791'><![if !supportLists]><span style='font-family:Symbol;
  mso-fareast-font-family:Symbol;mso-bidi-font-family:Symbol'><span
  style='mso-list:Ignore'>&bull;<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  </span></span></span><![endif]>Private</span></p>
  <p class=MsoListBullet4 style='page-break-after:avoid;mso-list:l1 level1 lfo6;
  tab-stops:list 1.0in'><span style='mso-bookmark:_Toc390967791'><![if !supportLists]><span
  style='font-family:Symbol;mso-fareast-font-family:Symbol;mso-bidi-font-family:
  Symbol'><span style='mso-list:Ignore'>&bull;<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  </span></span></span><![endif]>Constructors</span></p>
  <p class=MsoListBullet4 style='page-break-after:avoid;mso-list:l1 level1 lfo6;
  tab-stops:list 1.0in'><span style='mso-bookmark:_Toc390967791'><![if !supportLists]><span
  style='font-family:Symbol;mso-fareast-font-family:Symbol;mso-bidi-font-family:
  Symbol'><span style='mso-list:Ignore'>&bull;<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  </span></span></span><![endif]>Methods </span></p>
  <p class=MsoListBullet4 style='page-break-after:avoid;mso-list:l1 level1 lfo6;
  tab-stops:list 1.0in'><span style='mso-bookmark:_Toc390967791'><![if !supportLists]><span
  style='font-family:Symbol;mso-fareast-font-family:Symbol;mso-bidi-font-family:
  Symbol'><span style='mso-list:Ignore'>&bull;<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  </span></span></span><![endif]>Instance variables</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=221 valign=top style='width:221.4pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoListBullet2 style='page-break-after:avoid;mso-list:l3 level1 lfo1'><span
  style='mso-bookmark:_Toc390967791'><![if !supportLists]><span
  style='font-family:Symbol;mso-fareast-font-family:Symbol;mso-bidi-font-family:
  Symbol'><span style='mso-list:Ignore'>&bull;<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  </span></span></span><![endif]>Static/Class</span></p>
  <p class=MsoListBullet3 style='margin-left:.75in;text-indent:-.25in;
  page-break-after:avoid;mso-list:l2 level1 lfo2'><span style='mso-bookmark:
  _Toc390967791'><![if !supportLists]><span style='font-family:Symbol;
  mso-fareast-font-family:Symbol;mso-bidi-font-family:Symbol'><span
  style='mso-list:Ignore'>&bull;<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  </span></span></span><![endif]>Public</span></p>
  <p class=MsoListBullet4 style='page-break-after:avoid;mso-list:l1 level1 lfo6;
  tab-stops:list 1.0in'><span style='mso-bookmark:_Toc390967791'><![if !supportLists]><span
  style='font-family:Symbol;mso-fareast-font-family:Symbol;mso-bidi-font-family:
  Symbol'><span style='mso-list:Ignore'>&bull;<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  </span></span></span><![endif]>Constants</span></p>
  <p class=MsoListBullet4 style='page-break-after:avoid;mso-list:l1 level1 lfo6;
  tab-stops:list 1.0in'><span style='mso-bookmark:_Toc390967791'><![if !supportLists]><span
  style='font-family:Symbol;mso-fareast-font-family:Symbol;mso-bidi-font-family:
  Symbol'><span style='mso-list:Ignore'>&bull;<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  </span></span></span><![endif]>Methods</span></p>
  <p class=MsoListBullet3 style='margin-left:.75in;text-indent:-.25in;
  page-break-after:avoid;mso-list:l2 level1 lfo2'><span style='mso-bookmark:
  _Toc390967791'><![if !supportLists]><span style='font-family:Symbol;
  mso-fareast-font-family:Symbol;mso-bidi-font-family:Symbol'><span
  style='mso-list:Ignore'>&bull;<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  </span></span></span><![endif]>Private</span></p>
  <p class=MsoListBullet4 style='page-break-after:avoid;mso-list:l1 level1 lfo6;
  tab-stops:list 1.0in'><span style='mso-bookmark:_Toc390967791'><![if !supportLists]><span
  style='font-family:Symbol;mso-fareast-font-family:Symbol;mso-bidi-font-family:
  Symbol'><span style='mso-list:Ignore'>&bull;<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  </span></span></span><![endif]>Constants</span></p>
  <p class=MsoListBullet4 style='page-break-after:avoid;mso-list:l1 level1 lfo6;
  tab-stops:list 1.0in'><span style='mso-bookmark:_Toc390967791'><![if !supportLists]><span
  style='font-family:Symbol;mso-fareast-font-family:Symbol;mso-bidi-font-family:
  Symbol'><span style='mso-list:Ignore'>&bull;<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  </span></span></span><![endif]>Methods</span></p>
  <p class=MsoListBullet4 style='page-break-after:avoid;mso-list:l1 level1 lfo6;
  tab-stops:list 1.0in'><span style='mso-bookmark:_Toc390967791'><![if !supportLists]><span
  style='font-family:Symbol;mso-fareast-font-family:Symbol;mso-bidi-font-family:
  Symbol'><span style='mso-list:Ignore'>&bull;<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  </span></span></span><![endif]>Instance variables</span></p>
  <span style='mso-bookmark:_Toc390967791'></span>
  <p class=MsoNormal style='page-break-after:avoid'><span style='mso-bookmark:
  _Toc390967791'><o:p>&nbsp;</o:p></span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
</table>




<h4><span style='mso-bookmark:_Toc390967791'><a name="_Toc402802594">Subsectioning</a></span></h4>




<p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>Within each section
are method categories that organize the methods of that section.<span
style="mso-spacerun: yes">&nbsp; </span>These are equivalent to Eiffel features
labels (without the export control) or Smalltalk protocols/method-categories
(without having a nice browser).<span style="mso-spacerun: yes">&nbsp; </span>A
category normally ends with 'ing'.<span style="mso-spacerun: yes">&nbsp;
</span>Categories can have subcategories that organize on a more refined level.<span
style="mso-spacerun: yes">&nbsp; </span>Categorizing is designed to make a
class or interface file more organized and readable, so you should try to stay
in the happy middle between too few categories (e.g. none) and too many
sections (e.g. one per method) </span></p>




<p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>The following is an
ordered list of categories and definitions:</span></p>




<table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0
 style='margin-left:23.4pt;border-collapse:collapse;mso-table-layout-alt:fixed;
 mso-padding-alt:0in 5.4pt 0in 5.4pt'>
 <tr>
  <td width=95 valign=top style='width:95.4pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'><b
  style='mso-bidi-font-weight:normal'>Constructing<o:p></o:p></b></span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=266 valign=top style='width:265.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>A section and
  category.<span style="mso-spacerun: yes">&nbsp; </span>The constructors for
  the class.</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr>
  <td width=95 valign=top style='width:95.4pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'><b
  style='mso-bidi-font-weight:normal'>&nbsp;&nbsp;Initializing<o:p></o:p></b></span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=266 valign=top style='width:265.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>An additional
  method that should be applied directly after constructing the object.</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr>
  <td width=95 valign=top style='width:95.4pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'><b
  style='mso-bidi-font-weight:normal'>&nbsp;&nbsp;Setup<o:p></o:p></b></span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=266 valign=top style='width:265.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>Methods that can
  optionally be applied to an object but must be done immediately after
  construction and initialization and before using the object normally.</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr>
  <td width=95 valign=top style='width:95.4pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'><b
  style='mso-bidi-font-weight:normal'>&nbsp;&nbsp;Validating<o:p></o:p></b></span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=266 valign=top style='width:265.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>Check whether the
  current object is in an acceptable state (could also be under asking if this
  is possible after construction is finishing).</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr>
  <td width=95 valign=top style='width:95.4pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'><b
  style='mso-bidi-font-weight:normal'>Asking<o:p></o:p></b></span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=266 valign=top style='width:265.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>Asking the state
  of the current object without causing any (visible) side effects.<span
  style="mso-spacerun: yes">&nbsp; </span>A pure function.<span
  style="mso-spacerun: yes">&nbsp; </span>ISE Eiffel 'Query'.</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr>
  <td width=95 valign=top style='width:95.4pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'><b
  style='mso-bidi-font-weight:normal'>&nbsp;&nbsp;Testing<o:p></o:p></b></span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=266 valign=top style='width:265.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>An asking method
  that returns a Boolean value</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr>
  <td width=95 valign=top style='width:95.4pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'><b
  style='mso-bidi-font-weight:normal'>&nbsp;&nbsp;Querying<o:p></o:p></b></span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=266 valign=top style='width:265.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>More complicated
  asking questions.</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr>
  <td width=95 valign=top style='width:95.4pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'><b
  style='mso-bidi-font-weight:normal'>&nbsp;&nbsp;Printing<o:p></o:p></b></span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=266 valign=top style='width:265.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>Return a
  printable representation of the object</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr>
  <td width=95 valign=top style='width:95.4pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'><b
  style='mso-bidi-font-weight:normal'>&nbsp;&nbsp;Displaying<o:p></o:p></b></span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=266 valign=top style='width:265.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>Render an object
  (as text or graphics) on a display medium</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr>
  <td width=95 valign=top style='width:95.4pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'><b
  style='mso-bidi-font-weight:normal'>&nbsp;&nbsp;Creating<o:p></o:p></b></span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=266 valign=top style='width:265.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>Create new
  objects</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr>
  <td width=95 valign=top style='width:95.4pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'><b
  style='mso-bidi-font-weight:normal'>&nbsp;&nbsp;&nbsp;&nbsp;Copying<o:p></o:p></b></span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=266 valign=top style='width:265.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>Produce a copy of
  the current object with possibly different properties (e.g., a subset of a
  collection)</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr>
  <td width=95 valign=top style='width:95.4pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'><b
  style='mso-bidi-font-weight:normal'>&nbsp;&nbsp;&nbsp;&nbsp;Converting<o:p></o:p></b></span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=266 valign=top style='width:265.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>Transform the
  current object to another type of object</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr>
  <td width=95 valign=top style='width:95.4pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'><b
  style='mso-bidi-font-weight:normal'>&nbsp;&nbsp;Enumerating<o:p></o:p></b></span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=266 valign=top style='width:265.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>Perform an
  element-by-element operation on a collection</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr>
  <td width=95 valign=top style='width:95.4pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'><b
  style='mso-bidi-font-weight:normal'>Altering<o:p></o:p></b></span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=266 valign=top style='width:265.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>General changing
  of the state of an object.<span style="mso-spacerun: yes">&nbsp;
  </span>Altering methods can also return values so they are not guaranteed to
  be pure procedures although they frequently are.</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr>
  <td width=95 valign=top style='width:95.4pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'><b
  style='mso-bidi-font-weight:normal'>&nbsp;&nbsp;Adding<o:p></o:p></b></span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=266 valign=top style='width:265.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>Add elements to a
  collection</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr>
  <td width=95 valign=top style='width:95.4pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'><b
  style='mso-bidi-font-weight:normal'>&nbsp;&nbsp;Removing<o:p></o:p></b></span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=266 valign=top style='width:265.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>Remove elements
  from a collection</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr>
  <td width=95 valign=top style='width:95.4pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'><b
  style='mso-bidi-font-weight:normal'>&nbsp;&nbsp;Notifying<o:p></o:p></b></span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=266 valign=top style='width:265.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>Notify a
  dependent of a change</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr>
  <td width=95 valign=top style='width:95.4pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'><b
  style='mso-bidi-font-weight:normal'>&nbsp;&nbsp;Releasing<o:p></o:p></b></span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=266 valign=top style='width:265.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>Remove any
  dependents and references to other objects (this helps with garbage
  collection)</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr style='mso-yfti-lastrow:yes'>
  <td width=95 valign=top style='width:95.4pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'><b
  style='mso-bidi-font-weight:normal'>Utilities<o:p></o:p></b></span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=266 valign=top style='width:265.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>Usually part of
  the private section.<span style="mso-spacerun: yes">&nbsp; </span>Just internal
  private methods that help get a job done.<span style="mso-spacerun:
  yes">&nbsp; </span>Not-elsewhere-classified.</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
</table>




<p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>The following is an
example of sectioning in code.<span style="mso-spacerun: yes">&nbsp;
</span>This would look a bit more balanced if the method bodies were included.</span></p>




<div style='mso-element:para-border-div;border:solid windowtext 1.5pt;
padding:1.0pt 1.0pt 1.0pt 1.0pt;mso-border-shadow:yes;margin-left:.25in;
margin-right:1.0in'>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style='mso-bookmark:_Toc390967791'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;
</span>//**********************************************************</span></p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style='mso-bookmark:_Toc390967791'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>//(P)*********************
Copying *************************</span></p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style='mso-bookmark:_Toc390967791'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;
</span>//**********************************************************</span></p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style='mso-bookmark:_Toc390967791'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span></span></p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style='mso-bookmark:_Toc390967791'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>public Object copy() {..}</span></p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style='mso-bookmark:_Toc390967791'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>protected void
initFrom(CompanyClass company) {..}</span></p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style='mso-bookmark:_Toc390967791'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span></span></p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style='mso-bookmark:_Toc390967791'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>//**********************************************************</span></p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style='mso-bookmark:_Toc390967791'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>//(P)******************
Displaying *************************</span></p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style='mso-bookmark:_Toc390967791'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;
</span>//**********************************************************</span></p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style='mso-bookmark:_Toc390967791'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span></span></p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style='mso-bookmark:_Toc390967791'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>public String toString()
{...}</span></p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style='mso-bookmark:_Toc390967791'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>public String info() {..}</span></p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style='mso-bookmark:_Toc390967791'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span></span></p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style='mso-bookmark:_Toc390967791'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>//**********************************************************</span></p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style='mso-bookmark:_Toc390967791'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>//(P)*********************
Asking **************************</span></p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style='mso-bookmark:_Toc390967791'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;
</span>//**********************************************************</span></p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style='mso-bookmark:_Toc390967791'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span></span></p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style='mso-bookmark:_Toc390967791'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>public String name() {..}</span></p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style='mso-bookmark:_Toc390967791'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>public int revenue() {..}</span></p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style='mso-bookmark:_Toc390967791'><span
style="mso-spacerun: yes">&nbsp; </span><span style="mso-spacerun:
yes">&nbsp;&nbsp;</span></span></p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style='mso-bookmark:_Toc390967791'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;
</span>//**********************************************************</span></p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style='mso-bookmark:_Toc390967791'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>//(P)********************
Creating *************************</span></p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style='mso-bookmark:_Toc390967791'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;
</span>//**********************************************************</span></p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style='mso-bookmark:_Toc390967791'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span></span></p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style='mso-bookmark:_Toc390967791'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>public Project
newProject(String name, Date startDate) {..}</span></p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style='mso-bookmark:_Toc390967791'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span></span></p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style='mso-bookmark:_Toc390967791'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;
</span>//**********************************************************</span></p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style='mso-bookmark:_Toc390967791'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>//(P)********************
Altering *************************</span></p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style='mso-bookmark:_Toc390967791'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;
</span>//**********************************************************</span></p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style='mso-bookmark:_Toc390967791'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span></span></p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style='mso-bookmark:_Toc390967791'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>public void setName(String
name) {..}</span></p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style='mso-bookmark:_Toc390967791'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>public void setRevenue(int
revenue) ..}</span></p>

</div>




<h3><span style='mso-bookmark:_Toc390967791'><a name="_Toc402802595"></a><a
name="_Toc408310773"><span style='mso-bookmark:_Toc402802595'>Comments</span></a></span></h3>




<p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>We place the
JavaDoc comments immediately above and inset relative to the method
declaration.<span style="mso-spacerun: yes">&nbsp; </span>This is so it is easy
to read the method declaration <b style='mso-bidi-font-weight:normal'><i
style='mso-bidi-font-style:normal'>before</i></b> reading the comment.<span
style="mso-spacerun: yes">&nbsp; </span>A method should have a good, intention
revealing selector, good parameter names, and a suitable return value
type.<span style="mso-spacerun: yes">&nbsp; </span>This implies that the
declaration itself is the best first source for documentation of the public use
of the method.</span></p>




<div style='mso-element:para-border-div;border:solid windowtext 1.5pt;
padding:1.0pt 1.0pt 1.0pt 1.0pt;mso-border-shadow:yes;margin-left:.25in;
margin-right:1.0in'>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style='mso-bookmark:_Toc390967791'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>/**</span></p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style='mso-bookmark:_Toc390967791'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>*
Prepare the query so that its unbound variables can</span></p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style='mso-bookmark:_Toc390967791'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>*
be bound</span></p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style='mso-bookmark:_Toc390967791'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>*/</span></p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style='mso-bookmark:_Toc390967791'><span
style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>public void
prepareForBinding() {</span></p>

</div>




<p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>In effect, we
consider the comment to be inside and subservient to the declaration, but
JavaDoc requires it to be before the declaration.</span></p>




<p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>Because we try to
have communicative method names and standard patterns for categories of method,
we will frequently leave off method comments.<span style="mso-spacerun:
yes">&nbsp; </span>We never repeat the information that can be found simply by
reading the declaration.</span></p>




<p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>We do not indent
Class comments.<span style="mso-spacerun: yes">&nbsp; </span>Class comments
have enough information that they are not optional on released software.</span></p>




<h3><span style='mso-bookmark:_Toc390967791'><a name="_Toc402802596"></a><a
name="_Toc408310774"><span style='mso-bookmark:_Toc402802596'>Interfaces and comments</span></a></span></h3>




<p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>Interfaces are
where the public protocols of a system are defined, so they provide the main
documentation.<span style="mso-spacerun: yes">&nbsp; </span>Documentation is
not repeated in a class for the methods that are defined in an interface.<span
style="mso-spacerun: yes">&nbsp; </span>Only implementation documentation will
be in a class.</span></p>




<h3><span style='mso-bookmark:_Toc390967791'><a name="_Toc402802597"></a><a
name="_Toc408310775"><span style='mso-bookmark:_Toc402802597'>Keyword Order</span></a></span></h3>




<p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>Since we consider
static methods to be a completely different kind of method (they are actually
statically bound functions and procedures), this is the first qualifier
mentioned.<span style="mso-spacerun: yes">&nbsp; </span>After this comes the
access control (including the comment specifying more specific access than Java
currently provides).<span style="mso-spacerun: yes">&nbsp; </span>This is followed
by all the not-elsewhere-mentioned qualifiers.<span style="mso-spacerun:
yes">&nbsp; </span>Finally we have the type specification.</span></p>




<p class=MsoListNumber2 style='margin-left:.5in;text-indent:-.25in;mso-list:
l0 level1 lfo9;tab-stops:list .5in'><span style='mso-bookmark:_Toc390967791'><![if !supportLists]><span
style='mso-list:Ignore'>1.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]>['static']</span></p>




<p class=MsoListNumber2 style='margin-left:.5in;text-indent:-.25in;mso-list:
l0 level1 lfo9;tab-stops:list .5in'><span style='mso-bookmark:_Toc390967791'><![if !supportLists]><span
style='mso-list:Ignore'>2.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]>'public' | '/*subsystem*/ public' | '/*package*/
public' | '/*package*/' | 'protected' | '/*progeny*/ protected' | 'private'</span></p>




<p class=MsoListNumber2 style='margin-left:.5in;text-indent:-.25in;mso-list:
l0 level1 lfo9;tab-stops:list .5in'><span style='mso-bookmark:_Toc390967791'><![if !supportLists]><span
style='mso-list:Ignore'>3.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]>['abstract'], ['synchronized'], ['final'], ['native'],
['transient'], ['volatile']</span></p>




<p class=MsoListNumber2 style='margin-left:.5in;text-indent:-.25in;mso-list:
l0 level1 lfo9;tab-stops:list .5in'><span style='mso-bookmark:_Toc390967791'><![if !supportLists]><span
style='mso-list:Ignore'>4.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]>'void' | &lt;TypeName&gt;</span></p>


<p><span style='font-size:10.0pt;font-family:"Times New Roman";mso-fareast-font-family:
"Times New Roman";mso-bidi-font-family:"Times New Roman";mso-ansi-language:
EN-US;mso-fareast-language:EN-US'><br clear=ALL style='mso-special-character:
line-break;page-break-before:always'>
</span></p>

<div style='mso-element:para-border-div;border:none;border-bottom:solid windowtext 1.5pt;
padding:0in 0in 1.0pt 0in'>

<h1><span style='mso-bookmark:_Toc390967791'><a name="_Toc402802598"></a><a
name="_Toc408310776"><span style='mso-bookmark:_Toc402802598'><![if !supportLists]><span
style='mso-list:Ignore'>5<span style="mso-spacerun: yes">&nbsp; </span></span><![endif]>Design Notation</span></a></span></h1>

</div>




<p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>Design notation
enhances communication among people.<span style="mso-spacerun: yes">&nbsp;
</span>It is an important tool for both the design process itself and for
communicating the finished design to clients and maintainers.<span
style="mso-spacerun: yes">&nbsp; </span>Design notation needs to be
standardized because it is shared among many people who must all interpret it
consistently.<span style="mso-spacerun: yes">&nbsp; </span>On the other hand,
the notation needs flexibility to grow and support the expression of newer
ideas.</span></p>




<p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>We use an object
design notation that is similar to UML (see [Rational-1
http://www.rational.com/uml/]), but it has some variations that are
improvements, additions, or legacies from earlier notations.<span
style="mso-spacerun: yes">&nbsp; </span>We also consider the work by Kilov and
Ross on information modeling [Kilov+R 94] to be very useful and important.<span
style="mso-spacerun: yes">&nbsp; </span>Although [Kilov+R 94] does not require
a specific visual notation, they do suggest one, which I merged into my
notation.</span></p>




<p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>The following
describe my notation's differences from UML.<span style="mso-spacerun:
yes">&nbsp; </span>If something is not mentioned it should be assumed that the
UML notation is the correct notation.</span></p>




<h2><span style='mso-bookmark:_Toc390967791'><a name="_Toc402802599"></a><a
name="_Toc408310777"><span style='mso-bookmark:_Toc402802599'><![if !supportLists]><span
style='mso-list:Ignore'>5.1 </span><![endif]>Objects and Classes</span></a></span></h2>




<table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0
 style='border-collapse:collapse;mso-table-layout-alt:fixed;mso-padding-alt:
 0in 5.4pt 0in 5.4pt'>
 <tr style='mso-yfti-lastrow:yes'>
  <td width=343 valign=top style='width:342.9pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>The most obvious
  difference between UML and my notation is I use hexagons instead of
  rectangles to identify objects and classes.<span style="mso-spacerun:
  yes">&nbsp; </span>This is to maintain the property from Booch notation of
  objects being distinctly recognizable and visible in diagrams.<span
  style="mso-spacerun: yes">&nbsp; </span>UML/OMT rectangles are neither
  distinct (other notations use rectangles to indicate tables, rows, layers,
  etc.) nor particularly visible in complex diagrams.<span style="mso-spacerun:
  yes">&nbsp; </span>These properties are very important for me.</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=90 valign=top style='width:1.25in;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'><!--[if gte vml 1]><v:shape
   id="_x0000_i1025" type="#_x0000_t75" style='width:77pt;height:59pt' o:ole=""
   fillcolor="window">
   <v:imagedata src="http://markfussell.emenar.com/images/Standards_0_8a_files/image003.wmz" o:title=""/>
  </v:shape><![endif]--><![if !vml]><img width=79 height=61
  src="http://markfussell.emenar.com/images/Standards_0_8a_files/image004.png" v:shapes="_x0000_i1025"><![endif]><!--[if gte mso 9]><xml>
   <o:OLEObject Type="Embed" ProgID="Visio.Drawing.4" ShapeID="_x0000_i1025"
    DrawAspect="Content" ObjectID="_1295617734">
   </o:OLEObject>
  </xml><![endif]--></span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
</table>




<p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>Rumbaugh did have a
legitimate argument that Booch clouds were difficult to draw and even to
electronically use (because they are hard to connect to).<span
style="mso-spacerun: yes">&nbsp; </span>Booch and Rumbaugh came up with a very
good (synergistic) solution of using hexagons in early versions of the UML, but
later versions of the UML abandoned them.<span style="mso-spacerun: yes">&nbsp;
</span>This was unfortunate and I decided not to make the same mistake.</span></p>




<h3><span style='mso-bookmark:_Toc390967791'><a name="_Toc402802600"></a><a
name="_Toc408310778"><span style='mso-bookmark:_Toc402802600'>Class Names</span></a></span></h3>




<p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>The examples do not
have the Java standard suffix of "Class" for classes.<span style="mso-spacerun:
yes">&nbsp; </span>This is because it is unneeded: classes and types have
distinct symbols, so do not share the same name space.<span
style="mso-spacerun: yes">&nbsp; </span>When converting design class names to
Java names, all classes will have the "Class" or "AbsClass" suffix added to
them, and variables will be typed to Java interfaces (for the Type) instead of
classes.</span></p>




<h3><span style='mso-bookmark:_Toc390967791'><a name="_Toc402802601"></a><a
name="_Toc408310779"><span style='mso-bookmark:_Toc402802601'>Methods</span></a></span></h3>




<table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0
 style='border-collapse:collapse;mso-table-layout-alt:fixed;mso-padding-alt:
 0in 5.4pt 0in 5.4pt'>
 <tr style='mso-yfti-lastrow:yes'>
  <td width=329 valign=top style='width:329.4pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>The "compartment"
  for methods extends beyond the edge of the hexagon because methods are
  potentially publicly visible.<span style="mso-spacerun: yes">&nbsp;
  </span>Methods can either all be in one compartment, or separated into
  different compartments for the different interfaces to the class.</span></p>
  
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>If placed within
  one compartment, different protocols (groups of methods) are organized like
  lists are in UML.</span></p>
  
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>I use UML method
  annotations.</span></p>
  <span style='mso-bookmark:_Toc390967791'></span>
  
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=113 valign=top style='width:112.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'><!--[if gte vml 1]><v:shape
   id="_x0000_i1026" type="#_x0000_t75" style='width:101pt;height:104pt' o:ole=""
   fillcolor="window">
   <v:imagedata src="http://markfussell.emenar.com/images/Standards_0_8a_files/image005.wmz" o:title=""/>
  </v:shape><![endif]--><![if !vml]><img width=103 height=106
  src="http://markfussell.emenar.com/images/Standards_0_8a_files/image006.png" v:shapes="_x0000_i1026"><![endif]><!--[if gte mso 9]><xml>
   <o:OLEObject Type="Embed" ProgID="Visio.Drawing.4" ShapeID="_x0000_i1026"
    DrawAspect="Content" ObjectID="_1295617735">
   </o:OLEObject>
  </xml><![endif]--></span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
</table>




<h3><span style='mso-bookmark:_Toc390967791'><a name="_Toc402802602"></a><a
name="_Toc408310780"><span style='mso-bookmark:_Toc402802602'>Attributes</span></a></span></h3>




<table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0
 style='border-collapse:collapse;mso-table-layout-alt:fixed;mso-padding-alt:
 0in 5.4pt 0in 5.4pt'>
 <tr style='mso-yfti-lastrow:yes'>
  <td width=212 valign=top style='width:2.95in;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>An attribute is a
  public property of an object that shows the state of the object.<span
  style="mso-spacerun: yes">&nbsp; </span>I do not make any distinction between
  attributes and other methods other than possibly showing them as a separate
  protocol from other methods.<span style="mso-spacerun: yes">&nbsp; </span>If
  attributes are independently changable, they will have a corresponding 'set'
  method.</span></p>
  <span style='mso-bookmark:_Toc390967791'></span>
  
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=113 valign=top style='width:112.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal align=center style='text-align:center'><span
  style='mso-bookmark:_Toc390967791'><!--[if gte vml 1]><v:shape id="_x0000_i1027"
   type="#_x0000_t75" style='width:101pt;height:95pt' o:ole="" fillcolor="window">
   <v:imagedata src="http://markfussell.emenar.com/images/Standards_0_8a_files/image007.wmz" o:title=""/>
  </v:shape><![endif]--><![if !vml]><img width=103 height=97
  src="http://markfussell.emenar.com/images/Standards_0_8a_files/image008.png" v:shapes="_x0000_i1027"><![endif]><!--[if gte mso 9]><xml>
   <o:OLEObject Type="Embed" ProgID="Visio.Drawing.4" ShapeID="_x0000_i1027"
    DrawAspect="Content" ObjectID="_1295617736">
   </o:OLEObject>
  </xml><![endif]--></span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=117 valign=top style='width:117.0pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal align=center style='text-align:center'><span
  style='mso-bookmark:_Toc390967791'><!--[if gte vml 1]><v:shape id="_x0000_i1028"
   type="#_x0000_t75" style='width:103pt;height:95pt' o:ole="" fillcolor="window">
   <v:imagedata src="http://markfussell.emenar.com/images/Standards_0_8a_files/image009.wmz" o:title=""/>
  </v:shape><![endif]--><![if !vml]><img width=105 height=97
  src="http://markfussell.emenar.com/images/Standards_0_8a_files/image010.png" v:shapes="_x0000_i1028"><![endif]><!--[if gte mso 9]><xml>
   <o:OLEObject Type="Embed" ProgID="Visio.Drawing.4" ShapeID="_x0000_i1028"
    DrawAspect="Content" ObjectID="_1295617737">
   </o:OLEObject>
  </xml><![endif]--></span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
</table>




<p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>Frequently there is
a minimal collection of attributes that uniquely determine the state of the
object, but this should not be confused with the instance variables which may
be used to store that state.</span></p>




<h3><span style='mso-bookmark:_Toc390967791'><a name="_Toc402802603"></a><a
name="_Toc408310781"><span style='mso-bookmark:_Toc402802603'>Instance Variables</span></a></span></h3>




<table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0
 style='border-collapse:collapse;mso-table-layout-alt:fixed;mso-padding-alt:
 0in 5.4pt 0in 5.4pt'>
 <tr style='mso-yfti-lastrow:yes'>
  <td width=334 valign=top style='width:333.9pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>Instance
  variables are private to a class and a shown in a compartment completely
  within the hexagon and (usually) below the methods.<span style="mso-spacerun:
  yes">&nbsp; </span>This is inverted from UML where frequently instance
  variables are considered attributes and are shown before the methods.<span
  style="mso-spacerun: yes">&nbsp; </span>Stylistically they are centered and
  italicized. </span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=108 valign=top style='width:1.5in;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'><!--[if gte vml 1]><v:shape
   id="_x0000_i1029" type="#_x0000_t75" style='width:96pt;height:115pt' o:ole=""
   fillcolor="window">
   <v:imagedata src="http://markfussell.emenar.com/images/Standards_0_8a_files/image011.wmz" o:title=""/>
  </v:shape><![endif]--><![if !vml]><img width=98 height=117
  src="http://markfussell.emenar.com/images/Standards_0_8a_files/image012.png" v:shapes="_x0000_i1029"><![endif]><!--[if gte mso 9]><xml>
   <o:OLEObject Type="Embed" ProgID="Visio.Drawing.4" ShapeID="_x0000_i1029"
    DrawAspect="Content" ObjectID="_1295617738">
   </o:OLEObject>
  </xml><![endif]--></span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
</table>




<h3><span style='mso-bookmark:_Toc390967791'><a name="_Toc402802604"></a><a
name="_Toc408310782"><span style='mso-bookmark:_Toc402802604'>Message Sends</span></a></span></h3>




<table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0
 style='border-collapse:collapse;mso-table-layout-alt:fixed;mso-padding-alt:
 0in 5.4pt 0in 5.4pt'>
 <tr style='mso-yfti-lastrow:yes'>
  <td width=221 valign=top style='width:221.4pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>Inter-class
  interfaces and message sends can be shown by connecting arrows to the
  appropriate method of a class.</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=221 valign=top style='width:221.4pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'><!--[if gte vml 1]><v:shape
   id="_x0000_i1030" type="#_x0000_t75" style='width:210pt;height:136pt' o:ole=""
   fillcolor="window">
   <v:imagedata src="http://markfussell.emenar.com/images/Standards_0_8a_files/image013.wmz" o:title=""/>
  </v:shape><![endif]--><![if !vml]><img width=212 height=138
  src="http://markfussell.emenar.com/images/Standards_0_8a_files/image014.png" v:shapes="_x0000_i1030"><![endif]><!--[if gte mso 9]><xml>
   <o:OLEObject Type="Embed" ProgID="Visio.Drawing.4" ShapeID="_x0000_i1030"
    DrawAspect="Content" ObjectID="_1295617739">
   </o:OLEObject>
  </xml><![endif]--></span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
</table>




<h3><span style='mso-bookmark:_Toc390967791'><a name="_Toc402802605"></a><a
name="_Toc408310783"><span style='mso-bookmark:_Toc402802605'>Shorthand for hand drawings</span></a></span></h3>




<p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>It is acceptable to
fall back on just using a rectangle with three compartments (but having
instance variables at the bottom) when drawing classes by hand.</span></p>




<h2><span style='mso-bookmark:_Toc390967791'><a name="_Toc402802606"></a><a
name="_Toc408310784"><span style='mso-bookmark:_Toc402802606'><![if !supportLists]><span
style='mso-list:Ignore'>5.2 </span><![endif]>Types</span></a></span></h2>




<table class=MsoNormalTable border=1 cellspacing=0 cellpadding=0
 style='border-collapse:collapse;mso-table-layout-alt:fixed;border:none;
 mso-border-alt:solid windowtext .5pt;mso-padding-alt:0in 5.4pt 0in 5.4pt;
 mso-border-insideh:.5pt solid windowtext;mso-border-insidev:.5pt solid windowtext'>
 <tr>
  <td width=311 valign=top style='width:311.4pt;border:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>I use a separate
  notation for Types than for classes.<span style="mso-spacerun: yes">&nbsp;
  </span>Types are shown with a "Set-like" notation of a curly edged box.<span
  style="mso-spacerun: yes">&nbsp; </span>This distinguishes them from classes
  and makes them more distinct then just a rectangle again.<span
  style="mso-spacerun: yes">&nbsp; </span>Otherwise they have the same meaning
  as the rectangles in [Kilov+R 94].</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=117 valign=top style='width:117.0pt;border:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal align=center style='text-align:center'><span
  style='mso-bookmark:_Toc390967791'><!--[if gte vml 1]><v:shape id="_x0000_i1031"
   type="#_x0000_t75" style='width:104pt;height:59pt' o:ole="" fillcolor="window">
   <v:imagedata src="http://markfussell.emenar.com/images/Standards_0_8a_files/image015.wmz" o:title=""/>
  </v:shape><![endif]--><![if !vml]><img width=106 height=61
  src="http://markfussell.emenar.com/images/Standards_0_8a_files/image016.png" v:shapes="_x0000_i1031"><![endif]><!--[if gte mso 9]><xml>
   <o:OLEObject Type="Embed" ProgID="Visio.Drawing.4" ShapeID="_x0000_i1031"
    DrawAspect="Content" ObjectID="_1295617740">
   </o:OLEObject>
  </xml><![endif]--></span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr style='mso-yfti-lastrow:yes'>
  <td width=311 valign=top style='width:311.4pt;border:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>Method (and
  Attribute) compartments can be specified for a Type, but instance variables
  can not be.</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=117 valign=top style='width:117.0pt;border:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal align=center style='text-align:center'><span
  style='mso-bookmark:_Toc390967791'><!--[if gte vml 1]><v:shape id="_x0000_i1032"
   type="#_x0000_t75" style='width:76pt;height:39pt' o:ole="" fillcolor="window">
   <v:imagedata src="http://markfussell.emenar.com/images/Standards_0_8a_files/image017.wmz" o:title=""/>
  </v:shape><![endif]--><![if !vml]><img width=78 height=41
  src="http://markfussell.emenar.com/images/Standards_0_8a_files/image018.png" v:shapes="_x0000_i1032"><![endif]><!--[if gte mso 9]><xml>
   <o:OLEObject Type="Embed" ProgID="Visio.Drawing.4" ShapeID="_x0000_i1032"
    DrawAspect="Content" ObjectID="_1295617742">
   </o:OLEObject>
  </xml><![endif]--></span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
</table>




<table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0
 style='border-collapse:collapse;mso-table-layout-alt:fixed;mso-padding-alt:
 0in 5.4pt 0in 5.4pt'>
 <tr>
  <td width=176 valign=top style='width:2.45in;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>A Class (or
  Object) can be shown to implement a Type by an arrow pointing from the Class
  to the Type.</span></p>
  <span style='mso-bookmark:_Toc390967791'></span>
  
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=230 valign=top style='width:229.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'><!--[if gte vml 1]><v:shape
   id="_x0000_i1033" type="#_x0000_t75" style='width:156pt;height:118pt' o:ole=""
   fillcolor="window">
   <v:imagedata src="http://markfussell.emenar.com/images/Standards_0_8a_files/image019.wmz" o:title=""/>
  </v:shape><![endif]--><![if !vml]><img width=158 height=120
  src="http://markfussell.emenar.com/images/Standards_0_8a_files/image020.png" v:shapes="_x0000_i1033"><![endif]><!--[if gte mso 9]><xml>
   <o:OLEObject Type="Embed" ProgID="Visio.Drawing.4" ShapeID="_x0000_i1033"
    DrawAspect="Content" ObjectID="_1295617743">
   </o:OLEObject>
  </xml><![endif]--></span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr style='mso-yfti-lastrow:yes'>
  <td width=176 valign=top style='width:2.45in;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>When the class is
  not important enough to be very large, its symbol can be shrunk and the name
  placed outside.<span style="mso-spacerun: yes">&nbsp; </span>This is
  frequently useful for giving example implementations of a Type in a
  complicated diagram.</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=230 valign=top style='width:229.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'><!--[if gte vml 1]><v:shape
   id="_x0000_i1034" type="#_x0000_t75" style='width:217pt;height:92pt' o:ole=""
   fillcolor="window">
   <v:imagedata src="http://markfussell.emenar.com/images/Standards_0_8a_files/image021.wmz" o:title=""/>
  </v:shape><![endif]--><![if !vml]><img width=219 height=94
  src="http://markfussell.emenar.com/images/Standards_0_8a_files/image022.png" v:shapes="_x0000_i1034"><![endif]><!--[if gte mso 9]><xml>
   <o:OLEObject Type="Embed" ProgID="Visio.Drawing.4" ShapeID="_x0000_i1034"
    DrawAspect="Content" ObjectID="_1295617744">
   </o:OLEObject>
  </xml><![endif]--></span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
</table>




<h3><span style='mso-bookmark:_Toc390967791'><a name="_Toc402802607"></a><a
name="_Toc408310785"><span style='mso-bookmark:_Toc402802607'>Shorthand for hand drawings</span></a></span></h3>




<p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>It is acceptable to
draw types as straight rectangles instead of the curly rectangles.</span></p>




<h2><span style='mso-bookmark:_Toc390967791'><a name="_Toc402802608"></a><a
name="_Toc408310786"><span style='mso-bookmark:_Toc402802608'><![if !supportLists]><span
style='mso-list:Ignore'>5.3 </span><![endif]>Relationships</span></a></span></h2>




<p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>Generally I use UML
notation when possible.<span style="mso-spacerun: yes">&nbsp; </span><i
style='mso-bidi-font-style:normal'>Information Modeling</i> [Kilov+R 94] has a
richer set of relationships than UML and a cleaner decomposition of them, so in
certain diagrams I will use them instead of the less precise UML notations.</span></p>




<h3><span style='mso-bookmark:_Toc390967791'><a name="_Toc402802609"></a><a
name="_Toc408310787"><span style='mso-bookmark:_Toc402802609'>Kilov and Ross relationship types</span></a></span></h3>




<p class=MsoNormal><span style='mso-bookmark:_Toc390967791'><!--[if gte vml 1]><v:shape
 id="_x0000_i1035" type="#_x0000_t75" style='width:194pt;height:131pt' o:ole=""
 fillcolor="window">
 <v:imagedata src="http://markfussell.emenar.com/images/Standards_0_8a_files/image023.wmz" o:title=""/>
</v:shape><![endif]--><![if !vml]><img width=196 height=133
src="http://markfussell.emenar.com/images/Standards_0_8a_files/image024.png" v:shapes="_x0000_i1035"><![endif]><!--[if gte mso 9]><xml>
 <o:OLEObject Type="Embed" ProgID="Visio.Drawing.4" ShapeID="_x0000_i1035"
  DrawAspect="Content" ObjectID="_1295617745">
 </o:OLEObject>
</xml><![endif]--></span></p>




<h2><span style='mso-bookmark:_Toc390967791'><a name="_Toc402802610"></a><a
name="_Toc408310788"><span style='mso-bookmark:_Toc402802610'><![if !supportLists]><span
style='mso-list:Ignore'>5.4 </span><![endif]>Code Blocks</span></a></span></h2>




<table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0
 style='border-collapse:collapse;mso-table-layout-alt:fixed;mso-padding-alt:
 0in 5.4pt 0in 5.4pt'>
 <tr style='mso-yfti-lastrow:yes'>
  <td width=347 valign=top style='width:347.4pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>I use the same
  dog-eared notation as <i style='mso-bidi-font-style:normal'>Design Patterns</i>
  [Gamma+HJV 95] for methods and other code annotations</span></p>
  <span style='mso-bookmark:_Toc390967791'></span>
  <p class=MsoHeader style='tab-stops:.5in'><span style='mso-bookmark:_Toc390967791'><o:p>&nbsp;</o:p></span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=99 valign=top style='width:99.0pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'><!--[if gte vml 1]><v:shape
   id="_x0000_i1036" type="#_x0000_t75" style='width:86pt;height:37pt' o:ole=""
   fillcolor="window">
   <v:imagedata src="http://markfussell.emenar.com/images/Standards_0_8a_files/image025.wmz" o:title=""/>
  </v:shape><![endif]--><![if !vml]><img width=88 height=39
  src="http://markfussell.emenar.com/images/Standards_0_8a_files/image026.png" v:shapes="_x0000_i1036"><![endif]><!--[if gte mso 9]><xml>
   <o:OLEObject Type="Embed" ProgID="Visio.Drawing.4" ShapeID="_x0000_i1036"
    DrawAspect="Content" ObjectID="_1295617746">
   </o:OLEObject>
  </xml><![endif]--></span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
</table>




<h2><span style='mso-bookmark:_Toc390967791'><a name="_Toc402802611"></a><a
name="_Toc408310789"><span style='mso-bookmark:_Toc402802611'><![if !supportLists]><span
style='mso-list:Ignore'>5.5 </span><![endif]>Other Notations</span></a></span></h2>




<p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>This section shows
some other more unusual notations that are also interesting.</span></p>




<h3><span style='mso-bookmark:_Toc390967791'><a name="_Toc402802612"></a><a
name="_Toc408310790"><span style='mso-bookmark:_Toc402802612'>Functor</span></a></span></h3>




<table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0
 style='border-collapse:collapse;mso-table-layout-alt:fixed;mso-padding-alt:
 0in 5.4pt 0in 5.4pt'>
 <tr style='mso-yfti-lastrow:yes'>
  <td width=311 valign=top style='width:311.4pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>Functors are
  objects that model operations that can be performed.<span
  style="mso-spacerun: yes">&nbsp; </span>Their notation is interesting because
  of its distinctive combination of other notations already existing: hexagons
  for classes and dog-eared notes for Code blocks.</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=135 valign=top style='width:135.0pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'><!--[if gte vml 1]><v:shape
   id="_x0000_i1037" type="#_x0000_t75" style='width:113pt;height:37pt' o:ole=""
   fillcolor="window">
   <v:imagedata src="http://markfussell.emenar.com/images/Standards_0_8a_files/image027.wmz" o:title=""/>
  </v:shape><![endif]--><![if !vml]><img width=115 height=39
  src="http://markfussell.emenar.com/images/Standards_0_8a_files/image028.png" v:shapes="_x0000_i1037"><![endif]><!--[if gte mso 9]><xml>
   <o:OLEObject Type="Embed" ProgID="Visio.Drawing.4" ShapeID="_x0000_i1037"
    DrawAspect="Content" ObjectID="_1295617747">
   </o:OLEObject>
  </xml><![endif]--></span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
</table>




<h3><span style='mso-bookmark:_Toc390967791'><a name="_Toc402802613"></a><a
name="_Toc408310791"><span style='mso-bookmark:_Toc402802613'>Enhancement</span></a></span></h3>




<table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0
 style='border-collapse:collapse;mso-table-layout-alt:fixed;mso-padding-alt:
 0in 5.4pt 0in 5.4pt'>
 <tr style='mso-yfti-lastrow:yes'>
  <td width=338 valign=top style='width:4.7in;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>An enhancement to
  a class is an added piece of functionality beyond the core class
  functionality.<span style="mso-spacerun: yes">&nbsp; </span>Enhancements
  allow you to manage portions of functionality of a cClass individually while
  still having all that functionality directly available on instance of the
  class.<span style="mso-spacerun: yes">&nbsp; </span>For example, you might
  want your presentation logic to be separate from your true (presentation
  independent) business domain logic.<span style="mso-spacerun: yes">&nbsp;
  </span>You could make the ability to create user-readable information an
  enhancement of your domain class.<span style="mso-spacerun: yes">&nbsp;
  </span>Since Java doesn't support enhancements this notation is only useful
  for conceptual modeling.</span></p>
  <span style='mso-bookmark:_Toc390967791'></span>
  
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=104 valign=top style='width:103.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'><!--[if gte vml 1]><v:shape
   id="_x0000_i1038" type="#_x0000_t75" style='width:90pt;height:118pt' o:ole=""
   fillcolor="window">
   <v:imagedata src="http://markfussell.emenar.com/images/Standards_0_8a_files/image029.wmz" o:title=""/>
  </v:shape><![endif]--><![if !vml]><img width=92 height=120
  src="http://markfussell.emenar.com/images/Standards_0_8a_files/image030.png" v:shapes="_x0000_i1038"><![endif]><!--[if gte mso 9]><xml>
   <o:OLEObject Type="Embed" ProgID="Visio.Drawing.4" ShapeID="_x0000_i1038"
    DrawAspect="Content" ObjectID="_1295617748">
   </o:OLEObject>
  </xml><![endif]--></span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
</table>




<h3><span style='mso-bookmark:_Toc390967791'><a name="_Toc402802614"></a><a
name="_Toc408310792"><span style='mso-bookmark:_Toc402802614'>Private Functionality</span></a></span></h3>




<table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0
 style='border-collapse:collapse;mso-table-layout-alt:fixed;mso-padding-alt:
 0in 5.4pt 0in 5.4pt'>
 <tr style='mso-yfti-lastrow:yes'>
  <td width=284 valign=top style='width:3.95in;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>A class can be
  considered to have a public interface that talks to an inner class that
  manages the state of the object.<span style="mso-spacerun: yes">&nbsp;
  </span>This means all communication from the public interface will go through
  private methods to access state information, which allows the object to
  change its state representation (e.g. delegating to another object) without
  impacting the public methods.</span></p>
  <span style='mso-bookmark:_Toc390967791'></span>
  
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=158 valign=top style='width:157.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal align=center style='text-align:center'><span
  style='mso-bookmark:_Toc390967791'><!--[if gte vml 1]><v:shape id="_x0000_i1039"
   type="#_x0000_t75" style='width:112pt;height:113pt' o:ole="" fillcolor="window">
   <v:imagedata src="http://markfussell.emenar.com/images/Standards_0_8a_files/image031.wmz" o:title=""/>
  </v:shape><![endif]--><![if !vml]><img width=114 height=115
  src="http://markfussell.emenar.com/images/Standards_0_8a_files/image032.png" v:shapes="_x0000_i1039"><![endif]><!--[if gte mso 9]><xml>
   <o:OLEObject Type="Embed" ProgID="Visio.Drawing.4" ShapeID="_x0000_i1039"
    DrawAspect="Content" ObjectID="_1295617749">
   </o:OLEObject>
  </xml><![endif]--></span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
</table>




<div style='mso-element:para-border-div;border:none;border-bottom:solid windowtext 1.5pt;
padding:0in 0in 1.0pt 0in'>

<h1><span style='mso-bookmark:_Toc390967791'><a name="_Toc402802615"></a><a
name="_Toc408310793"><span style='mso-bookmark:_Toc402802615'><![if !supportLists]><span
style='mso-list:Ignore'>6<span style="mso-spacerun: yes">&nbsp; </span></span><![endif]>Standard Definitions</span></a></span></h1>

</div>




<p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>This section
collects our standard project-independent definition of terms.<span
style="mso-spacerun: yes">&nbsp; </span>Though these do include terms that are
relevant to the areas of specialty we normally deal with (Information Systems),
it is only at the highest level.<span style="mso-spacerun: yes">&nbsp;
</span>The following collects terms and definition from many sources, but I
compared and reconciled many of the terms with:</span></p>




<table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0
 style='margin-left:36.9pt;border-collapse:collapse;mso-table-layout-alt:fixed;
 mso-padding-alt:0in 5.4pt 0in 5.4pt'>
 <tr style='mso-yfti-lastrow:yes'>
  <td width=230 valign=top style='width:229.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>Directory of
  Object Technology</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=177 valign=top style='width:177.3pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>[Firesmith+E 95]</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
</table>




<p class=MsoNormal><span style='mso-bookmark:_Toc390967791'>In choosing and
defining terms, I try to follow the following priority (best to worst).<span
style="mso-spacerun: yes">&nbsp; </span>The best term:</span></p>




<p class=MsoListNumber2 style='margin-left:.5in;text-indent:-.25in;mso-list:
l6 level1 lfo10;tab-stops:list .5in'><span style='mso-bookmark:_Toc390967791'><![if !supportLists]><span
style='mso-list:Ignore'>1.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]>Has a precise meaning in a known context (MetaClass for
Smalltalk or CLOS)</span></p>




<p class=MsoListNumber2 style='margin-left:.5in;text-indent:-.25in;mso-list:
l6 level1 lfo10;tab-stops:list .5in'><span style='mso-bookmark:_Toc390967791'><![if !supportLists]><span
style='mso-list:Ignore'>2.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]>Has common meaning in most OO discussions (Object)</span></p>




<p class=MsoListNumber2 style='margin-left:.5in;text-indent:-.25in;mso-list:
l6 level1 lfo10;tab-stops:list .5in'><span style='mso-bookmark:_Toc390967791'><![if !supportLists]><span
style='mso-list:Ignore'>3.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]>Is infrequently used and I will define a precise
meaning (Stub,Replicate,Forwarder)</span></p>




<p class=MsoListNumber2 style='margin-left:.5in;text-indent:-.25in;mso-list:
l6 level1 lfo10;tab-stops:list .5in'><span style='mso-bookmark:_Toc390967791'><![if !supportLists]><span
style='mso-list:Ignore'>4.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]>Has overloaded or disputed meanings (Attribute)</span></p>




<p class=MsoListNumber2 style='margin-left:.5in;text-indent:-.25in;mso-list:
l6 level1 lfo10;tab-stops:list .5in'><span style='mso-bookmark:_Toc390967791'><![if !supportLists]><span
style='mso-list:Ignore'>5.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]>Has a different, somewhat common, meaning than my
definition (Slot)</span></p>




<table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0
 style='border-collapse:collapse;mso-table-layout-alt:fixed;mso-padding-alt:
 0in 5.4pt 0in 5.4pt'>
 <tr>
  <td width=95 valign=top style='width:95.4pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:6.0pt;margin-right:0in;margin-bottom:
  0in;margin-left:9.0pt;margin-bottom:.0001pt;text-indent:-9.0pt'><span
  style='mso-bookmark:_Toc390967791'>Object</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=356 valign=top style='width:355.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:6.0pt;margin-right:0in;margin-bottom:
  0in;margin-left:9.0pt;margin-bottom:.0001pt;text-indent:-9.0pt'><span
  style='mso-bookmark:_Toc390967791'>An identifiable, encapsulated entity that
  is interacted with by sending messages.<span style="mso-spacerun: yes">&nbsp;
  </span>Objects have behavior, state, and identity (but see ValueObject for a
  variation).</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr>
  <td width=95 valign=top style='width:95.4pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:6.0pt;margin-right:0in;margin-bottom:
  0in;margin-left:9.0pt;margin-bottom:.0001pt;text-indent:-9.0pt'><span
  style='mso-bookmark:_Toc390967791'>Type</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=356 valign=top style='width:355.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:6.0pt;margin-right:0in;margin-bottom:
  0in;margin-left:9.0pt;margin-bottom:.0001pt;text-indent:-9.0pt'><span
  style='mso-bookmark:_Toc390967791'>Specifies the public behavior and a
  conceptual grouping for objects that are members of the Type</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr>
  <td width=95 valign=top style='width:95.4pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:6.0pt;margin-right:0in;margin-bottom:
  0in;margin-left:9.0pt;margin-bottom:.0001pt;text-indent:-9.0pt'><span
  style='mso-bookmark:_Toc390967791'>Protocol</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=356 valign=top style='width:355.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:6.0pt;margin-right:0in;margin-bottom:
  0in;margin-left:9.0pt;margin-bottom:.0001pt;text-indent:-9.0pt'><span
  style='mso-bookmark:_Toc390967791'>Specifies a collection of methods that
  together provide a higher level interface to an object.<span
  style="mso-spacerun: yes">&nbsp; </span>An object can <b style='mso-bidi-font-weight:
  normal'>be</b> a Type, an object can <b style='mso-bidi-font-weight:normal'>support</b>
  a Protocol, and a Type can <b style='mso-bidi-font-weight:normal'>specify</b>
  <b style='mso-bidi-font-weight:normal'>support for</b> a Protocol.<span
  style="mso-spacerun: yes">&nbsp; </span>Protocol and interface can be synonymous.<span
  style="mso-spacerun: yes">&nbsp; </span>Certain contexts suggest using one or
  the other to prevent conflict with a language term (e.g. Java's "interface").</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr>
  <td width=95 valign=top style='width:95.4pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:6.0pt;margin-right:0in;margin-bottom:
  0in;margin-left:9.0pt;margin-bottom:.0001pt;text-indent:-9.0pt'><span
  style='mso-bookmark:_Toc390967791'>Class</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=356 valign=top style='width:355.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:6.0pt;margin-right:0in;margin-bottom:
  0in;margin-left:9.0pt;margin-bottom:.0001pt;text-indent:-9.0pt'><span
  style='mso-bookmark:_Toc390967791'>Describes the types and the implementation
  for a set of objects.<span style="mso-spacerun: yes">&nbsp; </span>A class
  conforms to (or implements) a Type, Protocol, or interface.</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr>
  <td width=95 valign=top style='width:95.4pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:6.0pt;margin-right:0in;margin-bottom:
  0in;margin-left:9.0pt;margin-bottom:.0001pt;text-indent:-9.0pt'><span
  style='mso-bookmark:_Toc390967791'>Factory</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=356 valign=top style='width:355.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:6.0pt;margin-right:0in;margin-bottom:
  0in;margin-left:9.0pt;margin-bottom:.0001pt;text-indent:-9.0pt'><span
  style='mso-bookmark:_Toc390967791'>An object that can create other objects. </span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr>
  <td width=95 valign=top style='width:95.4pt;padding:0in 5.4pt 0in 5.4pt'><span
  style='mso-bookmark:_Toc390967791'></span>
  <p class=MsoNormal style='margin-top:6.0pt;margin-right:0in;margin-bottom:
  0in;margin-left:9.0pt;margin-bottom:.0001pt;text-indent:-9.0pt'><span
  style='mso-bookmark:_Toc390967791'><o:p>&nbsp;</o:p></span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=356 valign=top style='width:355.5pt;padding:0in 5.4pt 0in 5.4pt'><span
  style='mso-bookmark:_Toc390967791'></span>
  <p class=MsoNormal style='margin-top:6.0pt;margin-right:0in;margin-bottom:
  0in;margin-left:9.0pt;margin-bottom:.0001pt;text-indent:-9.0pt'><span
  style='mso-bookmark:_Toc390967791'><o:p>&nbsp;</o:p></span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr>
  <td width=95 valign=top style='width:95.4pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:6.0pt;margin-right:0in;margin-bottom:
  0in;margin-left:9.0pt;margin-bottom:.0001pt;text-indent:-9.0pt'><span
  style='mso-bookmark:_Toc390967791'>Identity</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=356 valign=top style='width:355.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:6.0pt;margin-right:0in;margin-bottom:
  0in;margin-left:9.0pt;margin-bottom:.0001pt;text-indent:-9.0pt'><span
  style='mso-bookmark:_Toc390967791'>The ability to tell an object apart from
  another object independent of whether their type and state is equal.</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr>
  <td width=95 valign=top style='width:95.4pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:6.0pt;margin-right:0in;margin-bottom:
  0in;margin-left:9.0pt;margin-bottom:.0001pt;text-indent:-9.0pt'><span
  style='mso-bookmark:_Toc390967791'>Immutable</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=356 valign=top style='width:355.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:6.0pt;margin-right:0in;margin-bottom:
  0in;margin-left:9.0pt;margin-bottom:.0001pt;text-indent:-9.0pt'><span
  style='mso-bookmark:_Toc390967791'>Can not be changed after being created.</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr>
  <td width=95 valign=top style='width:95.4pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:6.0pt;margin-right:0in;margin-bottom:
  0in;margin-left:9.0pt;margin-bottom:.0001pt;text-indent:-9.0pt'><span
  style='mso-bookmark:_Toc390967791'>ValueObject</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=356 valign=top style='width:355.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:6.0pt;margin-right:0in;margin-bottom:
  0in;margin-left:9.0pt;margin-bottom:.0001pt;text-indent:-9.0pt'><span
  style='mso-bookmark:_Toc390967791'>An object that does not have identity
  independent of its value.<span style="mso-spacerun: yes">&nbsp; </span>A
  ValueObject is immutable and should be considered identical to anything that
  it is equal to.<span style="mso-spacerun: yes">&nbsp; </span>Primitive data
  types in Smalltalk (such as most numbers and Symbols) are ValueObjects. Java
  Strings are very close to ValueObjects except they are not guaranteed to be
  identical for the same value (they would be if they did an automatic
  "intern()").<span style="mso-spacerun: yes">&nbsp; </span>Java primitive
  types are not Objects.</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr>
  <td width=95 valign=top style='width:95.4pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:6.0pt;margin-right:0in;margin-bottom:
  0in;margin-left:9.0pt;margin-bottom:.0001pt;text-indent:-9.0pt'><span
  style='mso-bookmark:_Toc390967791'>AbstractDataType</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=356 valign=top style='width:355.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:6.0pt;margin-right:0in;margin-bottom:
  0in;margin-left:9.0pt;margin-bottom:.0001pt;text-indent:-9.0pt'><span
  style='mso-bookmark:_Toc390967791'>Synonymous with ValueObject in the Object
  realm.</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr>
  <td width=95 valign=top style='width:95.4pt;padding:0in 5.4pt 0in 5.4pt'><span
  style='mso-bookmark:_Toc390967791'></span>
  <p class=MsoNormal style='margin-top:6.0pt;margin-right:0in;margin-bottom:
  0in;margin-left:9.0pt;margin-bottom:.0001pt;text-indent:-9.0pt'><span
  style='mso-bookmark:_Toc390967791'><o:p>&nbsp;</o:p></span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=356 valign=top style='width:355.5pt;padding:0in 5.4pt 0in 5.4pt'><span
  style='mso-bookmark:_Toc390967791'></span>
  <p class=MsoNormal style='margin-top:6.0pt;margin-right:0in;margin-bottom:
  0in;margin-left:9.0pt;margin-bottom:.0001pt;text-indent:-9.0pt'><span
  style='mso-bookmark:_Toc390967791'><o:p>&nbsp;</o:p></span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr>
  <td width=95 valign=top style='width:95.4pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:6.0pt;margin-right:0in;margin-bottom:
  0in;margin-left:9.0pt;margin-bottom:.0001pt;text-indent:-9.0pt'><span
  style='mso-bookmark:_Toc390967791'>Attribute</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=356 valign=top style='width:355.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:6.0pt;margin-right:0in;margin-bottom:
  0in;margin-left:9.0pt;margin-bottom:.0001pt;text-indent:-9.0pt'><span
  style='mso-bookmark:_Toc390967791'>A public property of an object that shows
  the state of the object.<span style="mso-spacerun: yes">&nbsp;
  </span>Frequently there is a minimal collection of attributes that uniquely
  determine the state of the object.</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr>
  <td width=95 valign=top style='width:95.4pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:6.0pt;margin-right:0in;margin-bottom:
  0in;margin-left:9.0pt;margin-bottom:.0001pt;text-indent:-9.0pt'><span
  style='mso-bookmark:_Toc390967791'>BasicAttribute</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=356 valign=top style='width:355.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:6.0pt;margin-right:0in;margin-bottom:
  0in;margin-left:9.0pt;margin-bottom:.0001pt;text-indent:-9.0pt'><span
  style='mso-bookmark:_Toc390967791'>An attribute that takes its value from
  ValueObjects.<span style="mso-spacerun: yes">&nbsp; </span>This is as opposed
  to associations which connect two or more objects with identity.</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr>
  <td width=95 valign=top style='width:95.4pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:6.0pt;margin-right:0in;margin-bottom:
  0in;margin-left:9.0pt;margin-bottom:.0001pt;text-indent:-9.0pt'><span
  style='mso-bookmark:_Toc390967791'>Association</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=356 valign=top style='width:355.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:6.0pt;margin-right:0in;margin-bottom:
  0in;margin-left:9.0pt;margin-bottom:.0001pt;text-indent:-9.0pt'><span
  style='mso-bookmark:_Toc390967791'>A defined relationship between two objects
  with identity.</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr>
  <td width=95 valign=top style='width:95.4pt;padding:0in 5.4pt 0in 5.4pt'><span
  style='mso-bookmark:_Toc390967791'></span>
  <p class=MsoNormal style='margin-top:6.0pt;margin-right:0in;margin-bottom:
  0in;margin-left:9.0pt;margin-bottom:.0001pt;text-indent:-9.0pt'><span
  style='mso-bookmark:_Toc390967791'><o:p>&nbsp;</o:p></span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=356 valign=top style='width:355.5pt;padding:0in 5.4pt 0in 5.4pt'><span
  style='mso-bookmark:_Toc390967791'></span>
  <p class=MsoNormal style='margin-top:6.0pt;margin-right:0in;margin-bottom:
  0in;margin-left:9.0pt;margin-bottom:.0001pt;text-indent:-9.0pt'><span
  style='mso-bookmark:_Toc390967791'><o:p>&nbsp;</o:p></span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr>
  <td width=95 valign=top style='width:95.4pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:6.0pt;margin-right:0in;margin-bottom:
  0in;margin-left:9.0pt;margin-bottom:.0001pt;text-indent:-9.0pt'><span
  style='mso-bookmark:_Toc390967791'>Instance Variable</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=356 valign=top style='width:355.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:6.0pt;margin-right:0in;margin-bottom:
  0in;margin-left:9.0pt;margin-bottom:.0001pt;text-indent:-9.0pt'><span
  style='mso-bookmark:_Toc390967791'>A private implementation to remember part
  of an object's state</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr>
  <td width=95 valign=top style='width:95.4pt;padding:0in 5.4pt 0in 5.4pt'><span
  style='mso-bookmark:_Toc390967791'></span>
  <p class=MsoNormal style='margin-top:6.0pt;margin-right:0in;margin-bottom:
  0in;margin-left:9.0pt;margin-bottom:.0001pt;text-indent:-9.0pt'><span
  style='mso-bookmark:_Toc390967791'><o:p>&nbsp;</o:p></span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=356 valign=top style='width:355.5pt;padding:0in 5.4pt 0in 5.4pt'><span
  style='mso-bookmark:_Toc390967791'></span>
  <p class=MsoNormal style='margin-top:6.0pt;margin-right:0in;margin-bottom:
  0in;margin-left:9.0pt;margin-bottom:.0001pt;text-indent:-9.0pt'><span
  style='mso-bookmark:_Toc390967791'><o:p>&nbsp;</o:p></span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr>
  <td width=95 valign=top style='width:95.4pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:6.0pt;margin-right:0in;margin-bottom:
  0in;margin-left:9.0pt;margin-bottom:.0001pt;text-indent:-9.0pt'><span
  style='mso-bookmark:_Toc390967791'>ObjectShadow</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=356 valign=top style='width:355.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:6.0pt;margin-right:0in;margin-bottom:
  0in;margin-left:9.0pt;margin-bottom:.0001pt;text-indent:-9.0pt'><span
  style='mso-bookmark:_Toc390967791'>The information needed to see that an
  object exists without any true representation of the real object.<span
  style="mso-spacerun: yes">&nbsp; </span>Relational databases could be
  considered to work with ObjectShadows: they record the information about an
  object but never have a real object to interact with.</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr>
  <td width=95 valign=top style='width:95.4pt;padding:0in 5.4pt 0in 5.4pt'><span
  style='mso-bookmark:_Toc390967791'></span>
  
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=356 valign=top style='width:355.5pt;padding:0in 5.4pt 0in 5.4pt'><span
  style='mso-bookmark:_Toc390967791'></span>
  
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr>
  <td width=95 valign=top style='width:95.4pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:6.0pt;margin-right:0in;margin-bottom:
  0in;margin-left:9.0pt;margin-bottom:.0001pt;text-indent:-9.0pt'><span
  style='mso-bookmark:_Toc390967791'>Proxy</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=356 valign=top style='width:355.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:6.0pt;margin-right:0in;margin-bottom:
  0in;margin-left:12.95pt;margin-bottom:.0001pt;text-indent:-12.95pt;
  mso-pagination:widow-orphan lines-together'><span style='mso-bookmark:_Toc390967791'>An
  object that stands in for another object (the RealObject) and manages the
  client interaction with the RealObject.</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr>
  <td width=95 valign=top style='width:95.4pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:6.0pt;margin-right:0in;margin-bottom:
  0in;margin-left:9.0pt;margin-bottom:.0001pt;text-indent:-9.0pt'><span
  style='mso-bookmark:_Toc390967791'>Forwarder</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=356 valign=top style='width:355.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:6.0pt;margin-right:0in;margin-bottom:
  0in;margin-left:12.95pt;margin-bottom:.0001pt;text-indent:-12.95pt;
  mso-pagination:widow-orphan lines-together'><span style='mso-bookmark:_Toc390967791'>A
  proxy which immediately forwards messages, possibly over process and machine
  boundaries, to the RealSubject.</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr>
  <td width=95 valign=top style='width:95.4pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:6.0pt;margin-right:0in;margin-bottom:
  0in;margin-left:9.0pt;margin-bottom:.0001pt;text-indent:-9.0pt'><span
  style='mso-bookmark:_Toc390967791'>Replicate</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=356 valign=top style='width:355.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:6.0pt;margin-right:0in;margin-bottom:
  0in;margin-left:12.95pt;margin-bottom:.0001pt;text-indent:-12.95pt;
  mso-pagination:widow-orphan lines-together'><span style='mso-bookmark:_Toc390967791'>A
  proxy which holds local state and performs local operations which are later
  propagated to the RealSubject</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr>
  <td width=95 valign=top style='width:95.4pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:6.0pt;margin-right:0in;margin-bottom:
  0in;margin-left:9.0pt;margin-bottom:.0001pt;text-indent:-9.0pt'><span
  style='mso-bookmark:_Toc390967791'>Stub</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=356 valign=top style='width:355.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:6.0pt;margin-right:0in;margin-bottom:
  0in;margin-left:12.95pt;margin-bottom:.0001pt;text-indent:-12.95pt;
  mso-pagination:widow-orphan lines-together'><span style='mso-bookmark:_Toc390967791'>A
  proxy which is simply a placeholder for the RealObject and must become
  another type of proxy (for example, forwarder or replicate) when interacted
  with by a client.</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr>
  <td width=95 valign=top style='width:95.4pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:6.0pt;margin-right:0in;margin-bottom:
  0in;margin-left:9.0pt;margin-bottom:.0001pt;text-indent:-9.0pt'><span
  style='mso-bookmark:_Toc390967791'>RealIdentity</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=356 valign=top style='width:355.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:6.0pt;margin-right:0in;margin-bottom:
  0in;margin-left:9.0pt;margin-bottom:.0001pt;text-indent:-9.0pt'><span
  style='mso-bookmark:_Toc390967791'>The identity of the RealObject that a
  proxy represents instead of the proxy's independent identity.<span
  style="mso-spacerun: yes">&nbsp; </span>For proxies we are rarely interested
  in their own identity, we just want to know the identity of the RealObject on
  the server.</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr>
  <td width=95 valign=top style='width:95.4pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:6.0pt;margin-right:0in;margin-bottom:
  0in;margin-left:9.0pt;margin-bottom:.0001pt;text-indent:-9.0pt'><span
  style='mso-bookmark:_Toc390967791'>IdentityKey</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=356 valign=top style='width:355.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:6.0pt;margin-right:0in;margin-bottom:
  0in;margin-left:9.0pt;margin-bottom:.0001pt;text-indent:-9.0pt'><span
  style='mso-bookmark:_Toc390967791'>A value that defines the RealIdentity of a
  Proxy. </span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr>
  <td width=95 valign=top style='width:95.4pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:6.0pt;margin-right:0in;margin-bottom:
  0in;margin-left:9.0pt;margin-bottom:.0001pt;text-indent:-9.0pt'><span
  style='mso-bookmark:_Toc390967791'>Binding</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=356 valign=top style='width:355.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:6.0pt;margin-right:0in;margin-bottom:
  0in;margin-left:9.0pt;margin-bottom:.0001pt;text-indent:-9.0pt'><span
  style='mso-bookmark:_Toc390967791'>Associating a client object to a database
  object, which turns the client object into a Proxy</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr>
  <td width=95 valign=top style='width:95.4pt;padding:0in 5.4pt 0in 5.4pt'><span
  style='mso-bookmark:_Toc390967791'></span>
  <p class=MsoNormal style='margin-top:6.0pt;margin-right:0in;margin-bottom:
  0in;margin-left:9.0pt;margin-bottom:.0001pt;text-indent:-9.0pt'><span
  style='mso-bookmark:_Toc390967791'><o:p>&nbsp;</o:p></span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=356 valign=top style='width:355.5pt;padding:0in 5.4pt 0in 5.4pt'><span
  style='mso-bookmark:_Toc390967791'></span>
  <p class=MsoNormal style='margin-top:6.0pt;margin-right:0in;margin-bottom:
  0in;margin-left:9.0pt;margin-bottom:.0001pt;text-indent:-9.0pt'><span
  style='mso-bookmark:_Toc390967791'><o:p>&nbsp;</o:p></span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr>
  <td width=95 valign=top style='width:95.4pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:6.0pt;margin-right:0in;margin-bottom:
  0in;margin-left:9.0pt;margin-bottom:.0001pt;text-indent:-9.0pt'><span
  style='mso-bookmark:_Toc390967791'>Builder</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=356 valign=top style='width:355.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:6.0pt;margin-right:0in;margin-bottom:
  0in;margin-left:9.0pt;margin-bottom:.0001pt;text-indent:-9.0pt'><span
  style='mso-bookmark:_Toc390967791'>Builds up another object that can later be
  extracted</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr>
  <td width=95 valign=top style='width:95.4pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:6.0pt;margin-right:0in;margin-bottom:
  0in;margin-left:9.0pt;margin-bottom:.0001pt;text-indent:-9.0pt'><span
  style='mso-bookmark:_Toc390967791'>Writer</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=356 valign=top style='width:355.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:6.0pt;margin-right:0in;margin-bottom:
  0in;margin-left:9.0pt;margin-bottom:.0001pt;text-indent:-9.0pt'><span
  style='mso-bookmark:_Toc390967791'>Writes information directly to another
  object (usually another writer or a Stream)</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr>
  <td width=95 valign=top style='width:95.4pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:6.0pt;margin-right:0in;margin-bottom:
  0in;margin-left:9.0pt;margin-bottom:.0001pt;text-indent:-9.0pt'><span
  style='mso-bookmark:_Toc390967791'>Reader</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=356 valign=top style='width:355.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:6.0pt;margin-right:0in;margin-bottom:
  0in;margin-left:9.0pt;margin-bottom:.0001pt;text-indent:-9.0pt'><span
  style='mso-bookmark:_Toc390967791'>Reads information from another object
  (another Reader or a Stream)</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr style='mso-yfti-lastrow:yes'>
  <td width=95 valign=top style='width:95.4pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:6.0pt;margin-right:0in;margin-bottom:
  0in;margin-left:9.0pt;margin-bottom:.0001pt;text-indent:-9.0pt'><span
  style='mso-bookmark:_Toc390967791'>Stream</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=356 valign=top style='width:355.5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:6.0pt;margin-right:0in;margin-bottom:
  0in;margin-left:9.0pt;margin-bottom:.0001pt;text-indent:-9.0pt'><span
  style='mso-bookmark:_Toc390967791'>Able to sequentially retrieve or store
  information</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
</table>




<p class=MsoNormal style='margin-left:1.25in;text-indent:-1.25in;tab-stops:
9.0pt'><span style='mso-bookmark:_Toc390967791'><span style='mso-tab-count:
1'>&nbsp;&nbsp; </span>.</span></p>




<div style='mso-element:para-border-div;border:none;border-bottom:solid windowtext 1.5pt;
padding:0in 0in 1.0pt 0in'>

<h1><span style='mso-bookmark:_Toc390967791'><a name="_Toc402802616"></a><a
name="_Toc408310794"><span style='mso-bookmark:_Toc402802616'><![if !supportLists]><span
style='mso-list:Ignore'>7<span style="mso-spacerun: yes">&nbsp; </span></span><![endif]>References</span></a></span></h1>

</div>




<table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0
 style='border-collapse:collapse;mso-table-layout-alt:fixed;mso-padding-alt:
 0in 5.4pt 0in 5.4pt'>
 <tr>
  <td width=113 valign=top style='width:113.4pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal align=right style='margin-top:6.0pt;text-align:right'><span
  style='mso-bookmark:_Toc390967791'><b style='mso-bidi-font-weight:normal'>Beck
  96<o:p></o:p></b></span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=373 valign=top style='width:372.6pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:6.0pt;margin-right:0in;margin-bottom:
  0in;margin-left:30.6pt;margin-bottom:.0001pt;text-indent:-30.6pt'><span
  style='mso-bookmark:_Toc390967791'>Kent Beck. <i style='mso-bidi-font-style:
  normal'>Smalltalk Best Practice Patterns, Volume 1: Coding</i>. (also see
  writings at http://c2.com/ppr/titles.html)</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr>
  <td width=113 valign=top style='width:113.4pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal align=right style='margin-top:6.0pt;text-align:right'><span
  style='mso-bookmark:_Toc390967791'><b style='mso-bidi-font-weight:normal'><span
  style="mso-spacerun: yes">&nbsp;</span>Booch 94<o:p></o:p></b></span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=373 valign=top style='width:372.6pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:6.0pt;margin-right:0in;margin-bottom:
  0in;margin-left:30.6pt;margin-bottom:.0001pt;text-indent:-30.6pt'><span
  style='mso-bookmark:_Toc390967791'>Grady Booch. <i style='mso-bidi-font-style:
  normal'>Object-Oriented Analysis and Design with Applications</i>.
  Benjamin/Cummings, Redwood City, CA, 1994.</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr>
  <td width=113 valign=top style='width:113.4pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal align=right style='margin-top:6.0pt;text-align:right'><span
  style='mso-bookmark:_Toc390967791'><b style='mso-bidi-font-weight:normal'>Brooks
  75<o:p></o:p></b></span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=373 valign=top style='width:372.6pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:6.0pt;margin-right:0in;margin-bottom:
  0in;margin-left:30.6pt;margin-bottom:.0001pt;text-indent:-30.6pt'><span
  style='mso-bookmark:_Toc390967791'>Fred Brooks. <i style='mso-bidi-font-style:
  normal'>The Mythical Man-Month</i>. Addison-Wesley, Reading MA, 1975.</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr>
  <td width=113 valign=top style='width:113.4pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal align=right style='margin-top:6.0pt;text-align:right'><span
  style='mso-bookmark:_Toc390967791'><b style='mso-bidi-font-weight:normal'>Brown+W<o:p></o:p></b></span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=373 valign=top style='width:372.6pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:6.0pt;margin-right:0in;margin-bottom:
  0in;margin-left:30.6pt;margin-bottom:.0001pt;text-indent:-30.6pt'><span
  style='mso-bookmark:_Toc390967791'>Kyle Brown and Bruce G. Whitenack.<span
  style="mso-spacerun: yes">&nbsp; </span>"Crossing Chasms: A Pattern Language
  for Object-RDBMS Integration". http://www.ksccary.com/ORDBJrnl.htm</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr>
  <td width=113 valign=top style='width:113.4pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal align=right style='margin-top:6.0pt;text-align:right'><span
  style='mso-bookmark:_Toc390967791'><b style='mso-bidi-font-weight:normal'>Burbeck<o:p></o:p></b></span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=373 valign=top style='width:372.6pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:6.0pt;margin-right:0in;margin-bottom:
  0in;margin-left:30.6pt;margin-bottom:.0001pt;text-indent:-30.6pt'><span
  style='mso-bookmark:_Toc390967791'>Steve Burbeck, Ph.D. "Applications Programming
  in Smalltalk-80(TM): How to use Model-View-Controller (MVC)". <span
  style='display:none;mso-hide:all'>&lt;a
  href="http://st-www.cs.uiuc.edu/users/smarch/st-docs/mvc.html"&gt;</span>http://st-www.cs.uiuc.edu/users/smarch/st-docs/mvc.html<span
  style='display:none;mso-hide:all'>&lt;/a&gt;</span></span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr>
  <td width=113 valign=top style='width:113.4pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal align=right style='margin-top:6.0pt;text-align:right'><span
  style='mso-bookmark:_Toc390967791'><b style='mso-bidi-font-weight:normal'>Cattell+
  96<o:p></o:p></b></span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=373 valign=top style='width:372.6pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:6.0pt;margin-right:0in;margin-bottom:
  0in;margin-left:30.6pt;margin-bottom:.0001pt;text-indent:-30.6pt'><span
  style='mso-bookmark:_Toc390967791'>R.G.G. Cattell, Editor.<span
  style="mso-spacerun: yes">&nbsp; </span><i style='mso-bidi-font-style:normal'>The
  Object Database Standard: ODMG-93, Release 1.2.</i><span style="mso-spacerun:
  yes">&nbsp; </span>Morgan Kaufmann, San Francisco, 1996.</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr>
  <td width=113 valign=top style='width:113.4pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal align=right style='margin-top:6.0pt;text-align:right'><span
  style='mso-bookmark:_Toc390967791'><b style='mso-bidi-font-weight:normal'>Codd
  90<o:p></o:p></b></span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=373 valign=top style='width:372.6pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:6.0pt;margin-right:0in;margin-bottom:
  0in;margin-left:30.6pt;margin-bottom:.0001pt;text-indent:-30.6pt'><span
  style='mso-bookmark:_Toc390967791'>E.F. Codd. <i style='mso-bidi-font-style:
  normal'>The Relational Model for Database Management, Version 2.</i><span
  style="mso-spacerun: yes">&nbsp; </span>Addison-Wesley, Reading, MA, 1990</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr>
  <td width=113 valign=top style='width:113.4pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal align=right style='margin-top:6.0pt;text-align:right'><span
  style='mso-bookmark:_Toc390967791'><b style='mso-bidi-font-weight:normal'>Coplien
  92<o:p></o:p></b></span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=373 valign=top style='width:372.6pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:6.0pt;margin-right:0in;margin-bottom:
  0in;margin-left:30.6pt;margin-bottom:.0001pt;text-indent:-30.6pt'><span
  style='mso-bookmark:_Toc390967791'>James O. Coplien. <i style='mso-bidi-font-style:
  normal'>Advanced C++ Programming Styles and Idioms. </i><span
  style="mso-spacerun: yes">&nbsp;</span>Addison-Wesley, Reading, MA, 1992.</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr>
  <td width=113 valign=top style='width:113.4pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal align=right style='margin-top:6.0pt;text-align:right'><span
  style='mso-bookmark:_Toc390967791'><b style='mso-bidi-font-weight:normal'>Coplien+S
  95<o:p></o:p></b></span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=373 valign=top style='width:372.6pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:6.0pt;margin-right:0in;margin-bottom:
  0in;margin-left:30.6pt;margin-bottom:.0001pt;text-indent:-30.6pt'><span
  style='mso-bookmark:_Toc390967791'>James Coplien and Douglas Schmidt,
  Editors.<span style="mso-spacerun: yes">&nbsp; </span><i style='mso-bidi-font-style:
  normal'>Pattern Languages of Program Design</i>. Addison-Wesley, Reading, MA,
  1995.</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr>
  <td width=113 valign=top style='width:113.4pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal align=right style='margin-top:6.0pt;text-align:right'><span
  style='mso-bookmark:_Toc390967791'><b style='mso-bidi-font-weight:normal'>Date
  95<o:p></o:p></b></span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=373 valign=top style='width:372.6pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:6.0pt;margin-right:0in;margin-bottom:
  0in;margin-left:30.6pt;margin-bottom:.0001pt;text-indent:-30.6pt'><span
  style='mso-bookmark:_Toc390967791'>C.J. Date.<span style="mso-spacerun:
  yes">&nbsp; </span><i style='mso-bidi-font-style:normal'>An Introduction to
  Database Systems</i>.<span style="mso-spacerun: yes">&nbsp;
  </span>Addison-Wesley, Reading, MA, 1995.</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr>
  <td width=113 valign=top style='width:113.4pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal align=right style='margin-top:6.0pt;text-align:right'><span
  style='mso-bookmark:_Toc390967791'><b style='mso-bidi-font-weight:normal'>Date
  95b<o:p></o:p></b></span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=373 valign=top style='width:372.6pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:6.0pt;margin-right:0in;margin-bottom:
  0in;margin-left:30.6pt;margin-bottom:.0001pt;text-indent:-30.6pt'><span
  style='mso-bookmark:_Toc390967791'>C.J. Date.<span style="mso-spacerun:
  yes">&nbsp; </span><i style='mso-bidi-font-style:normal'>Relational Database
  Writings 1991- 1994.</i><span style="mso-spacerun: yes">&nbsp;
  </span>Addison-Wesley, Reading, MA, 1995.</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr>
  <td width=113 valign=top style='width:113.4pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal align=right style='margin-top:6.0pt;text-align:right'><span
  style='mso-bookmark:_Toc390967791'><b style='mso-bidi-font-weight:normal'>Firesmith+E
  95<o:p></o:p></b></span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=373 valign=top style='width:372.6pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:6.0pt;margin-right:0in;margin-bottom:
  0in;margin-left:30.6pt;margin-bottom:.0001pt;text-indent:-30.6pt'><span
  style='mso-bookmark:_Toc390967791'>Donald Firesmith, Edward Eykholt. <i
  style='mso-bidi-font-style:normal'>Dictionary of Object Technology: The
  Definitive Desk Reference. </i>SIGS Books, Inc., New York, NY, 1995.</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr>
  <td width=113 valign=top style='width:113.4pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal align=right style='margin-top:6.0pt;text-align:right'><span
  style='mso-bookmark:_Toc390967791'><b style='mso-bidi-font-weight:normal'>Gamma+HJV
  95<o:p></o:p></b></span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=373 valign=top style='width:372.6pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:6.0pt;margin-right:0in;margin-bottom:
  0in;margin-left:30.6pt;margin-bottom:.0001pt;text-indent:-30.6pt'><span
  style='mso-bookmark:_Toc390967791'>Erich Gamma, Richard Helm, Ralph Johnson,
  and John Vlissides. <i style='mso-bidi-font-style:normal'>Design Patterns:
  Elements of Object-Oriented Architecture</i>. Addison-Wesley, Reading, MA,
  1995.</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr>
  <td width=113 valign=top style='width:113.4pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal align=right style='margin-top:6.0pt;text-align:right'><span
  style='mso-bookmark:_Toc390967791'><b style='mso-bidi-font-weight:normal'>Goldberg+R
  83<o:p></o:p></b></span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=373 valign=top style='width:372.6pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:6.0pt;margin-right:0in;margin-bottom:
  0in;margin-left:30.6pt;margin-bottom:.0001pt;text-indent:-30.6pt'><span
  style='mso-bookmark:_Toc390967791'>Adele Goldberg and David Robson.<span
  style="mso-spacerun: yes">&nbsp; </span><i style='mso-bidi-font-style:normal'>Smalltalk-80:
  The Language and its Implementation</i>.<span style="mso-spacerun:
  yes">&nbsp; </span>Addison-Wesley, Reading, MA, 1983.</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr>
  <td width=113 valign=top style='width:113.4pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal align=right style='margin-top:6.0pt;text-align:right'><span
  style='mso-bookmark:_Toc390967791'><b style='mso-bidi-font-weight:normal'>Gosling+JS
  96<o:p></o:p></b></span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=373 valign=top style='width:372.6pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:6.0pt;margin-right:0in;margin-bottom:
  0in;margin-left:30.6pt;margin-bottom:.0001pt;text-indent:-30.6pt'><span
  style='mso-bookmark:_Toc390967791'>James Gosling, Bill Joy, Guy Steele.<span
  style="mso-spacerun: yes">&nbsp; </span><i style='mso-bidi-font-style:normal'>The
  Java<sup>TM</sup> Language Specification</i>.<span style="mso-spacerun:
  yes">&nbsp; </span>Addison-Wesley, Reading, MA, 1996.</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr>
  <td width=113 valign=top style='width:113.4pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal align=right style='margin-top:6.0pt;text-align:right'><span
  style='mso-bookmark:_Toc390967791'><b style='mso-bidi-font-weight:normal'>Howard
  95<o:p></o:p></b></span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=373 valign=top style='width:372.6pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:6.0pt;margin-right:0in;margin-bottom:
  0in;margin-left:30.6pt;margin-bottom:.0001pt;text-indent:-30.6pt'><span
  style='mso-bookmark:_Toc390967791'>Tim Howard. <i style='mso-bidi-font-style:
  normal'>The Smalltalk Developer's Guide to VisualWorks</i>. SIGS Books, New
  York, NY, 1995.</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr>
  <td width=113 valign=top style='width:113.4pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal align=right style='margin-top:6.0pt;text-align:right'><span
  style='mso-bookmark:_Toc390967791'><b style='mso-bidi-font-weight:normal'>Kilov+R
  94<o:p></o:p></b></span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=373 valign=top style='width:372.6pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:6.0pt;margin-right:0in;margin-bottom:
  0in;margin-left:30.6pt;margin-bottom:.0001pt;text-indent:-30.6pt'><span
  style='mso-bookmark:_Toc390967791'>Haim Kilov and James Ross. <i
  style='mso-bidi-font-style:normal'>Information Modeling: An Object-Oriented
  Approach</i>. Prentice-Hall, Englewood Cliffs, NJ, 1994.</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr>
  <td width=113 valign=top style='width:113.4pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal align=right style='margin-top:6.0pt;text-align:right'><span
  style='mso-bookmark:_Toc390967791'><b style='mso-bidi-font-weight:normal'><span
  style='display:none;mso-hide:all'>&lt;a name="Lea"&gt;</span>Lea<span
  style='display:none;mso-hide:all'>&lt;/a&gt;</span><o:p></o:p></b></span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=373 valign=top style='width:372.6pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:6.0pt;margin-right:0in;margin-bottom:
  0in;margin-left:30.6pt;margin-bottom:.0001pt;text-indent:-30.6pt'><span
  style='mso-bookmark:_Toc390967791'>Doug Lea.<span style="mso-spacerun:
  yes">&nbsp; </span>"Java Coding standards".<span style="mso-spacerun:
  yes">&nbsp; </span><span style='display:none;mso-hide:all'>&lt;a
  href="http://gee.cs.oswego.edu/dl/html/javaCodingStd.html"&gt;</span>http://gee.cs.oswego.edu/dl/html/javaCodingStd.html<span
  style='display:none;mso-hide:all'>&lt;/a&gt;</span></span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr>
  <td width=113 valign=top style='width:113.4pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal align=right style='margin-top:6.0pt;text-align:right'><span
  style='mso-bookmark:_Toc390967791'><b style='mso-bidi-font-weight:normal'>McConnell
  93<o:p></o:p></b></span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=373 valign=top style='width:372.6pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:6.0pt;margin-right:0in;margin-bottom:
  0in;margin-left:30.6pt;margin-bottom:.0001pt;text-indent:-30.6pt'><span
  style='mso-bookmark:_Toc390967791'>Steve McConnell. <i style='mso-bidi-font-style:
  normal'>Code Complete: A Practical Handbook of Software Construction</i>.
  Microsoft Press, Redmond, WA, 1993.</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr>
  <td width=113 valign=top style='width:113.4pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal align=right style='margin-top:6.0pt;text-align:right'><span
  style='mso-bookmark:_Toc390967791'><b style='mso-bidi-font-weight:normal'>Meyer
  92<o:p></o:p></b></span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=373 valign=top style='width:372.6pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:6.0pt;margin-right:0in;margin-bottom:
  0in;margin-left:30.6pt;margin-bottom:.0001pt;text-indent:-30.6pt'><span
  style='mso-bookmark:_Toc390967791'>Bertrand Meyer. <i style='mso-bidi-font-style:
  normal'>Eiffel, The Language.</i> Prentice-Hall, Englewood Cliffs, NJ, 1992.</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr>
  <td width=113 valign=top style='width:113.4pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal align=right style='margin-top:6.0pt;text-align:right'><span
  style='mso-bookmark:_Toc390967791'><b style='mso-bidi-font-weight:normal'>Meyer
  97<o:p></o:p></b></span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=373 valign=top style='width:372.6pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:6.0pt;margin-right:0in;margin-bottom:
  0in;margin-left:30.6pt;margin-bottom:.0001pt;text-indent:-30.6pt'><span
  style='mso-bookmark:_Toc390967791'>Bertrand Meyer. <i style='mso-bidi-font-style:
  normal'>Object Oriented Software Construction, 2<sup>nd</sup> Edition</i>.<span
  style="mso-spacerun: yes">&nbsp; </span>Prentice-Hall, Englewood Cliffs, NJ,
  1997.</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr>
  <td width=113 valign=top style='width:113.4pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal align=right style='margin-top:6.0pt;text-align:right'><span
  style='mso-bookmark:_Toc390967791'><b style='mso-bidi-font-weight:normal'>Rumbaugh+BPEL
  91<o:p></o:p></b></span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=373 valign=top style='width:372.6pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:6.0pt;margin-right:0in;margin-bottom:
  0in;margin-left:30.6pt;margin-bottom:.0001pt;text-indent:-30.6pt'><span
  style='mso-bookmark:_Toc390967791'>James Rumbaugh, Michael Blaha, William
  Premerlani, Frederick Eddy, and William Lorenson.<span style="mso-spacerun:
  yes">&nbsp; </span><i style='mso-bidi-font-style:normal'>Object-Oriented
  Modeling and Design</i>.<span style="mso-spacerun: yes">&nbsp;
  </span>Prentice-Hall, Englewood Cliffs, NJ, 1991.</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr>
  <td width=113 valign=top style='width:113.4pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal align=right style='margin-top:6.0pt;text-align:right'><span
  style='mso-bookmark:_Toc390967791'><b style='mso-bidi-font-weight:normal'>Skublics+KT
  96<o:p></o:p></b></span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=373 valign=top style='width:372.6pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:6.0pt;margin-right:0in;margin-bottom:
  0in;margin-left:30.6pt;margin-bottom:.0001pt;text-indent:-30.6pt'><span
  style='mso-bookmark:_Toc390967791'>Suzanne Skublics, Edward J. Klimas, David
  A. Thomas.<span style="mso-spacerun: yes">&nbsp; </span><i style='mso-bidi-font-style:
  normal'>Smalltalk with Style</i>.<span style="mso-spacerun: yes">&nbsp;
  </span>Prentice Hall, Upper Saddle River, NJ, 1996</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr>
  <td width=113 valign=top style='width:113.4pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal align=right style='margin-top:6.0pt;text-align:right'><span
  style='mso-bookmark:_Toc390967791'><b style='mso-bidi-font-weight:normal'>Stonebraker+M
  96<o:p></o:p></b></span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=373 valign=top style='width:372.6pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:6.0pt;margin-right:0in;margin-bottom:
  0in;margin-left:30.6pt;margin-bottom:.0001pt;text-indent:-30.6pt'><span
  style='mso-bookmark:_Toc390967791'>Michael Stonebraker with Dorothy
  Moore.<span style="mso-spacerun: yes">&nbsp; </span><i style='mso-bidi-font-style:
  normal'>Object-Relational DBMSs, The Next Great Wave.</i><span
  style="mso-spacerun: yes">&nbsp; </span>Morgan Kauffman, San Francisco, CA,
  1996.</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
 <tr style='mso-yfti-lastrow:yes'>
  <td width=113 valign=top style='width:113.4pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal align=right style='margin-top:6.0pt;text-align:right'><span
  style='mso-bookmark:_Toc390967791'><b style='mso-bidi-font-weight:normal'>Vlissides+CK
  96<o:p></o:p></b></span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
  <td width=373 valign=top style='width:372.6pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:6.0pt;margin-right:0in;margin-bottom:
  0in;margin-left:30.6pt;margin-bottom:.0001pt;text-indent:-30.6pt'><span
  style='mso-bookmark:_Toc390967791'>John Vlissides, James Coplien, and Norman
  Kerth, Editors. <i style='mso-bidi-font-style:normal'>Pattern Languages of
  Program Design 2. </i>Addison-Wesley, Reading, MA, 1996.</span></p>
  </td>
  <span style='mso-bookmark:_Toc390967791'></span>
 </tr>
</table>




<p class=MsoHeader style='tab-stops:.5in'><span style='mso-bookmark:_Toc390967791'><o:p>&nbsp;</o:p></span></p>


<p><span style='mso-bookmark:_Toc390967791'></span></div></p>

<p><span style='font-size:10.0pt;font-family:"Times New Roman";mso-fareast-font-family:
"Times New Roman";mso-bidi-font-family:"Times New Roman";mso-ansi-language:
EN-US;mso-fareast-language:EN-US'><br clear=ALL style='page-break-before:always;
mso-break-type:section-break'>
</span></p>

<div class=Section4>

<p class=MsoSubtitle><span style='font-size:14.0pt;mso-bidi-font-size:10.0pt'><o:p>&nbsp;</o:p></span></p>

<p class=MsoSubtitle><span style='font-size:14.0pt;mso-bidi-font-size:10.0pt'><o:p>&nbsp;</o:p></span></p>

<p class=MsoSubtitle><span style='font-size:14.0pt;mso-bidi-font-size:10.0pt'><o:p>&nbsp;</o:p></span></p>

<p class=MsoSubtitle><span style='font-size:14.0pt;mso-bidi-font-size:10.0pt'><o:p>&nbsp;</o:p></span></p>

<p class=MsoSubtitle><span style='font-size:14.0pt;mso-bidi-font-size:10.0pt'><o:p>&nbsp;</o:p></span></p>

<p class=MsoSubtitle><span style='font-size:14.0pt;mso-bidi-font-size:10.0pt'><o:p>&nbsp;</o:p></span></p>

<p class=MsoSubtitle><span style='font-size:14.0pt;mso-bidi-font-size:10.0pt'><o:p>&nbsp;</o:p></span></p>

<p class=MsoSubtitle><span style='font-size:14.0pt;mso-bidi-font-size:10.0pt'><o:p>&nbsp;</o:p></span></p>

<p class=MsoSubtitle><span style='font-size:14.0pt;mso-bidi-font-size:10.0pt'><o:p>&nbsp;</o:p></span></p>

<p class=MsoSubtitle><span style='font-size:14.0pt;mso-bidi-font-size:10.0pt'><o:p>&nbsp;</o:p></span></p>

<p class=MsoSubtitle><span style='font-size:14.0pt;mso-bidi-font-size:10.0pt'><o:p>&nbsp;</o:p></span></p>

<p class=MsoSubtitle><span style='font-size:14.0pt;mso-bidi-font-size:10.0pt'><o:p>&nbsp;</o:p></span></p>

<p class=MsoSubtitle><span style='font-size:14.0pt;mso-bidi-font-size:10.0pt'><o:p>&nbsp;</o:p></span></p>

<p class=MsoSubtitle><span style='font-size:14.0pt;mso-bidi-font-size:10.0pt'><o:p>&nbsp;</o:p></span></p>

<p class=MsoSubtitle><span style='font-size:14.0pt;mso-bidi-font-size:10.0pt'><o:p>&nbsp;</o:p></span></p>

<p class=MsoSubtitle><span style='font-size:14.0pt;mso-bidi-font-size:10.0pt'><o:p>&nbsp;</o:p></span></p>

<p class=MsoSubtitle><span style='font-size:14.0pt;mso-bidi-font-size:10.0pt'><o:p>&nbsp;</o:p></span></p>

<p class=MsoSubtitle><span style='font-size:14.0pt;mso-bidi-font-size:10.0pt'><o:p>&nbsp;</o:p></span></p>

<p class=MsoSubtitle><span style='font-size:14.0pt;mso-bidi-font-size:10.0pt'><o:p>&nbsp;</o:p></span></p>

<p class=MsoSubtitle><span style='font-size:14.0pt;mso-bidi-font-size:10.0pt'><o:p>&nbsp;</o:p></span></p>

<p class=MsoSubtitle><span style='font-size:14.0pt;mso-bidi-font-size:10.0pt'><o:p>&nbsp;</o:p></span></p>

<p class=MsoSubtitle><span style='font-size:14.0pt;mso-bidi-font-size:10.0pt'><o:p>&nbsp;</o:p></span></p>

<p class=MsoSubtitle><span style='font-size:14.0pt;mso-bidi-font-size:10.0pt'><o:p>&nbsp;</o:p></span></p>

<p class=MsoSubtitle><span style='font-size:14.0pt;mso-bidi-font-size:10.0pt'><o:p>&nbsp;</o:p></span></p>

<p class=MsoSubtitle><span style='font-size:14.0pt;mso-bidi-font-size:10.0pt'><o:p>&nbsp;</o:p></span></p>

<p class=MsoSubtitle><span style='font-size:14.0pt;mso-bidi-font-size:10.0pt'><o:p>&nbsp;</o:p></span></p>

<table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0
 style='border-collapse:collapse;mso-table-layout-alt:fixed;mso-padding-alt:
 0in 0in 0in 0in'>
 <tr style='mso-yfti-lastrow:yes'>
  <td width=221 valign=top style='width:220.5pt;padding:0in 0in 0in 0in'>
  <p class=MsoHeader style='tab-stops:.5in'><!--[if gte vml 1]><v:shape id="_x0000_s1029"
   type="#_x0000_t75" style='position:absolute;margin-left:128.15pt;
   margin-top:7.2pt;width:115.2pt;height:94.9pt;z-index:251658240;
   mso-position-horizontal-relative:text;mso-position-vertical-relative:text'
   o:allowincell="f">
   <v:imagedata src="http://markfussell.emenar.com/images/Standards_0_8a_files/image033.wmz" o:title=""/>
   <v:textbox style='mso-next-textbox:#_x0000_s1029'/>
  </v:shape><![if gte mso 9]><o:OLEObject Type="Embed"
   ProgID="CorelDRAW.Graphic.6" ShapeID="_x0000_s1029" DrawAspect="Content"
   ObjectID="_1295617750">
  </o:OLEObject>
 <![endif]><![endif]--><![if !vml]><span style='mso-ignore:vglayout;position:
  absolute;z-index:251658240;margin-left:128px;margin-top:7px;width:117px;
  height:97px'><img width=117 height=97 src="http://markfussell.emenar.com/images/Standards_0_8a_files/image034.png"
  v:shapes="_x0000_s1029"></span><![endif]><span style='mso-no-proof:yes'><o:p></o:p></span></p>
  </td>
  <td width=195 valign=top style='width:194.95pt;padding:0in 0in 0in 0in'>
  <p class=MsoHeader style='tab-stops:.5in'><span style='font-size:18.0pt;
  mso-bidi-font-size:10.0pt'><o:p>&nbsp;</o:p></span></p>
  <p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span
  style='font-size:14.0pt;mso-bidi-font-size:10.0pt;font-family:Garamond'>ChiMu
  Corporation<o:p></o:p></span></b></p>
  <p class=MsoNormal style='margin-top:3.0pt;tab-stops:.1in .2in .3in .4in .5in .6in .7in'><span
  style='font-size:9.0pt;mso-bidi-font-size:10.0pt;font-family:Garamond;
  mso-no-proof:yes'><span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp; </span>1220
  N. Fair Oaks Ave, #1314<o:p></o:p></span></p>
  <p class=MsoNormal style='tab-stops:8.1pt .2in .3in .4in 35.1pt .6in .7in'><span
  style='font-size:9.0pt;mso-bidi-font-size:10.0pt;font-family:Garamond;
  mso-no-proof:yes'><span style='mso-tab-count:2'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Sunnyvale,
  CA 94089<o:p></o:p></span></p>
  <p class=MsoNormal style='margin-top:3.0pt;tab-stops:8.1pt .2in .3in .4in 35.1pt .6in .7in'><span
  style='font-size:9.0pt;mso-bidi-font-size:10.0pt;font-family:Garamond;
  mso-no-proof:yes'><span style='mso-tab-count:3'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Phone:
  408 734-9068<o:p></o:p></span></p>
  <p class=MsoNormal style='tab-stops:8.1pt .2in .3in .4in 35.1pt .6in .7in'><span
  style='font-size:9.0pt;mso-bidi-font-size:10.0pt;font-family:Garamond;
  mso-no-proof:yes'><span style='mso-tab-count:4'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Email:
  info@chimu.com<o:p></o:p></span></p>
  <p class=MsoNormal style='margin-top:3.0pt;tab-stops:8.1pt .2in .3in .4in 35.1pt .6in .7in'><span
  style='font-size:9.0pt;mso-bidi-font-size:10.0pt;font-family:Garamond'><span
  style='mso-tab-count:5'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
  style='mso-no-proof:yes'>www</span>.chimu.com</span><b style='mso-bidi-font-weight:
  normal'><span style='mso-no-proof:yes'><o:p></o:p></span></b></p>
  </td>
 </tr>
</table>

<p class=MsoNormal><o:p>&nbsp;</o:p></p>

</div>




<div style='mso-element:footnote-list'><![if !supportFootnotes]><br clear=all>

<hr align=left size=1 width="33%">

<![endif]>

<div style='mso-element:footnote' id=ftn>

<p class=MsoFootnoteText><a style='mso-footnote-id:ftn' href="#_ftnref"
name="_ftn1" title=""><span class=MsoFootnoteReference><span style='mso-special-character:
footnote'><![if !supportFootnotes]>[*]<![endif]></span></span></a> Although
this document does not use the Pattern literary form, conceptually it has
similar goals.</p>

</div>

<div style='mso-element:footnote' id=ftn>

<p class=MsoFootnoteText><a style='mso-footnote-id:ftn' href="#_ftnref"
name="_ftn2" title=""><span class=MsoFootnoteReference><span style='mso-special-character:
footnote'><![if !supportFootnotes]>[&dagger;]<![endif]></span></span></a> Although the
percentage is significant, the actual overhead is very small in time: less than
1 microsecond on older VMs on a 100MHz machines and less than 1/10th a
microsecond on newer VMs.</p>

</div>

<div style='mso-element:footnote' id=ftn>

<p class=MsoFootnoteText><a style='mso-footnote-id:ftn' href="#_ftnref"
name="_ftn3" title=""><span class=MsoFootnoteReference><span style='mso-special-character:
footnote'><![if !supportFootnotes]>[&Dagger;]<![endif]></span></span></a> The actual
overhead should be verified through a performance profiler.<span
style="mso-spacerun: yes">&nbsp; </span>Never assume something is a bottleneck
until you actually see the numbers.</p>

</div>

<div style='mso-element:footnote' id=ftn>

<p class=MsoFootnoteText><a style='mso-footnote-id:ftn' href="#_ftnref"
name="_ftn4" title=""><span class=MsoFootnoteReference><span style='mso-special-character:
footnote'><![if !supportFootnotes]>[&sect;]<![endif]></span></span></a> See
[Gosling+JS 96] for more details on these access controls, especially the
formal definition of the protected access level.<span style="mso-spacerun:
yes">&nbsp; </span>Java has a more complicated concept of access than Smalltalk
would because access is considered from the class perspective instead of from
the object perspective.<span style="mso-spacerun: yes">&nbsp; </span>In Java a
method being executed within one object can access another object's private and
protected areas if the other object is of the same class.<span
style="mso-spacerun: yes">&nbsp; </span>In Smalltalk this would not be allowed:
an object would be able to access another object's methods only if they have
public or package visibility.<span style="mso-spacerun: yes">&nbsp; </span>Java
has trades the advantage of easy cloning for breaking encapsulation at the
object level.</p>

</div>

<div style='mso-element:footnote' id=ftn>

<p class=MsoFootnoteText><a style='mso-footnote-id:ftn' href="#_ftnref"
name="_ftn5" title=""><span class=MsoFootnoteReference><span style='mso-special-character:
footnote'><![if !supportFootnotes]>[**]<![endif]></span></span></a> Plus 'get'
itself is not even the right word, which should instead be something like
'give', 'your', or 'produce'.<span style="mso-spacerun: yes">&nbsp; </span></p>

</div>

</div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why dynamic typing?]]></title>
    <link href="http://markfussell.emenar.com/blog/why-dynamic-typing/"/>
    <updated>1997-08-27T18:00:00-07:00</updated>
    <id>http://markfussell.emenar.com/blog/why-dynamic-typing</id>
    <content type="html"><![CDATA[<p>This is a discussion of the benefits and drawbacks of dynamic typing
based on specific questions by Anatol Fomenko.</p>

<p>The following is a reference to the main thread-point that this short paper is on:</p>

<ul>
<li> <a href="https://groups.google.com/forum/?fromgroups=#!topic/comp.lang.java.programmer/hIJfUz2kVIM%5B1-25-false%5D">Re: Why dynamic typing (was: Compiler as mediator)</a></li>
</ul>


<h2>Original Posting: Re: Why dynamic typing (was: Compiler as mediator)</h2>

<pre class="quote1">
Anatol Fomenko wrote:
> ...Why Smalltalk is dynamically typed, and why it
> does not affect negatively the stability of the large Smalltalk
> applications?
</pre>


<p>Rephrasing slightly gives the two following questions:</p>

<OL class="arab">
  <LI>Why is Smalltalk dynamically typed?</LI>
  <LI>Why does dynamic typing (as done with Smalltalk) not negatively
      affect the stability of large applications?</LI>
</OL>


<p>The first question would be better answered by Alan Kay and the
Smalltalk team more than anyone else relaying their reasons.  Alan Kay
has described some of his reasoning in the book "History of Programming
Languages II", various OOPSLA &amp; Smalltalk talks, and other sources.</p>

<!-- more -->


<p>   In my own words, the main reason is that Smalltalk has a simple &amp;
powerful concept of building software out of Objects that send Messages
to other Objects.  This is more powerful in both the small and the large
than a language that adds the additional concept (and constraints) of
"Types".  Note that biology has Objects (e.g. Cells) but no Types,
Humans are Objects but there is no compile-time type-checking between
humans, and even electronics do not have compile-time Types: you can
plug the GROUND pin into +5V if you want although some physical
constructs will discourage (but not prevent) it.  These highly scalable
areas (life, civilization, electronics) have done fantastically without
the support of Types, growing in orders of magnitude of functionality.
Alan Kay (who has a biology background) leveraged insights on how cells
and other highly-scalable areas could scale, and applied them to
Smalltalk.  The main concept was membranes/encapsulation and little else
was needed.</p>

<p>The second question may partially support the first.  The short answer
is dynamic typing can scale well because one tends to create much less
code as the system grows bigger.  As the system grows, objects will get
reused in many different situations for which they work well, and the
layers of "membranes" allow clients to not worry about internal details
very much.  It still requires a good architecture to build a big system,
but the generalizable functionality of the objects is helping a lot with
the design/implementation.</p>

<p>Now someone could argue that static typing should have the same
property: you write less code as you create more functionality.  But the
truth is that static typing does not just avoid/remove bad code, it
REMOVES GOOD CODE too.  And this good code that static typing is
removing is exactly the code that makes Smalltalk so scalable: it is the
code that can be reused in many different situations that were never
planned for by the original authors.  Dynamic typing excels because it
allows this highly reusable, good code that would not pass a static
typecheck.</p>

<h3>Quantifying the benefit of dynamic typing</h3>

<p>To quantify this a bit, consider that ultimately both a correctly
running Smalltalk program and a correctly running Java program will do
the same thing, so lets consider just one aspect:</p>

<UL>
   <LI>How much extra code needs to be written to support static-typing
vs. dynamic-typing?</LI>
</UL>


<p>The following are all rough estimates between Java and Smalltalk, but
they are based on years of experience doing very similar tasks in both
languages [but Your Mileage May Vary].  Smalltalk requires about 1/2 to
1/3 the number of statements within a method to accomplish the same
thing as Java [this is one of the most painful aspects of switching back
and forth between Smalltalk and Java/C++], so the extra code is at least
100% (2x).  The next level is the number of additional methods needed
because of static typing.  From my experience this is probably about
20%: one in six methods in Java would simply not need to exist in
Smalltalk because they are solely solving a static typing problem and
could otherwise be collapsed into the remaining five methods.  The next
level are additional classes, which is at least another 30%.  Finally, I
will end with additional "packages" of functionality which have to be
rewritten or somehow significantly copied/changed to use in the desired
context.  Again, I would say this is about 20% or so (where the 'or so'
can get really large).  All totaled this is a minimum of:</p>

<pre class="code">
   2.0 x 1.2 x 1.3 x 1.2 = 3.75  (275% larger)
</pre>


<p>and could get as large as</p>

<pre class="code">
   3.0 x 1.3 x 1.5 x 1.7 = 9.5   (850% larger)
</pre>


<p>If you take out the method-statement-level multiplier (people don't seem
to mind this growth as much and it is well localized) you get an 85% to
230% growth in overall system size (packages of classes of methods).</p>

<p>It would be better to have real experimental numbers (say for TOPLink or
another cross-language product).  But the above gives the general
concept of an advantage of dynamic languages and the penalty of static
typing.</p>

<p>If you need a specific example, consider the [completely randomly
selected] JDK 1.2 Collection code of:</p>

<pre class="code">
    public boolean AbstractCollection::removeAll(Collection c) {
        boolean modified = false;
        Iterator e = iterator();
        while (e.hasNext()) {
            if(c.contains(e.next())) {
                e.remove();
                modified = true;
            }
        }
        return modified;
    }
</pre>


<p>The static-typing problem in this extremely simple code is that 'c' only
needs to respond to 'contains', not be a Collection.  This means I can't
just use any containment concept I want to (say, remove all people who
are 6' tall) by passing in an object that understands 'contains'.
Because of a static-typing restriction on what would be perfectly good
code, I have to create extra code that reproduces 90% of the above with
the one variation that 'c' is something other than a Collection (and I
am likely to pick something as silly [i.e. too specific] as 'Collection'
again).  This is the type of 'package'-level punishment that static
typing tends to cause.</p>

<h3>Affect on stability</h3>

<p>So returning to the question:</p>

<pre>
  (2) Why does dynamic typing (as done with Smalltalk) not negatively
      affect the stability of large applications?
</pre>


<p>Because large applications written in a dynamic OO language still have
well encapsulated parts that can be verified independently, and the
total implementation can be about 1/2 to 1/3 the size of the
implementation in Java (or another static-typed language)[2].</p>

<p>In the small you may get a type error that static-typing could have
catched, but you also get to build a system such that you never have to
write 40-70% of the code you might otherwise have to.  And a line of
code not written is a 100% guaranteed correct line of code.</p>

<p>A way to really think about the negative impacts of static typing would
be to consider (as you walk around) how many things in the real world
would be extremely difficult to do if static typing was enforced on
them.  For example, could you have a shoe-rack? (no, someone would have
to 'cast' their shoes when they took them out again).  Could you use a
key to cut open a package?  Could gas-injection cork removers exist?
Heterogeneity, flexibility, extensibility, and reusability are all
punished by static typing.</p>

<p>Not that I think static-typing isn't useful... it just has serious
drawbacks.  Certainly Eiffel does it better than Java.  But
dynamic-typing has conceptual advantages that even the best static-typed
languages (e.g. Cecil) can't remove and those advantages are very
helpful in building real, large-scale, applications.</p>

<pre class="signature">
--Mark
</pre>




<p class="footnote">
[1] If you would like a longer example of completely removing static
typing from a Java program and then re-adding it incrementally, see:
<pre>
   <a href="http://www.chimu.com/publications/smallJava/index.html">http://www.chimu.com/publications/smallJava/index.html</a>
</pre>

<p class="footnote">
[2] On the other hand, the value of a programming language is determined
by how well it helps developers solve their problems.  Although the
quality of a language itself can make it a better tool, the real power
comes from high quality libraries and frameworks available to that
language.  Smalltalk has an inherent advantage but if the number of
skilled developers creating for another language (e.g. Java) is high
enough, than that inherent advantage will go away because enough better
frameworks will exist in the other language such that Smalltalk would
not be as close to the solution as the other language is.
</p>


<H2>Subsequent Discussion</H2>

<H3 class="discussion">More details and examples</H3>


<pre class="quote1">
Joern Janneck wrote:
> Mark Fussell wrote:
> >    In my own words, the main reason is that Smalltalk has a simple &
> > powerful concept of building software out of Objects that send Messages
> > to other Objects.  This is more powerful in both the small and the large
> > than a language that adds the additional concept (and constraints) of
> > "Types".
>
> actually, you could have both, couldn't you? many oo languages do, i see
> little reason to present them here as alternatives. the question really
> is, why only one of them is better than the two put together, isn't it?
</pre>

Sure, there are lots of variations:
<OL class="arab">
  <LI>Either you have compile-time types or you don't</LI>
  <LI>Either those compile-time types are mandatory, they are optional,
or there are loopholes [e.g. allow dynamic typechecks]</LI>
  <LI>Either types are explicitly declared or implicit</LI>
  <LI class="etc">... [equal or identical type matching, granularity, DBC enhancements,
type/class separation]...</LI>
</OL>


Some OO languages support multiple variations, but usually even if a
language supports semi-optional compile-time types they will have the
bulk of their code with mandatory compile-time checks and you can't just
turn it off.  Most common compile-time typed languages have mandatory
types with loopholes.


But the questions were:
<pre class="quote2">
>   (1) Why is Smalltalk dynamically typed?
>   (2) Why does dynamic typing (as done with Smalltalk) not negatively
>       affect the stability of large applications?
</pre>


The part you quoted was the auxilary answer to (1): the main answer was
read HOPL-II and similar sources.  And to discuss (2) we have to compare
dynamic (optimistic) typing to static (pessimistic) typing.  It would
certainly be quite valid to consider them within a single language.  I
did a bit of that in:
<pre>
   <a href="http://www.chimu.com/publications/smallJava/index.html">http://www.chimu.com/publications/smallJava/index.html</a>
</pre>


And note that I would prefer not to be comparing relatively
weak/immature languages (in terms of static typing) like Java and C++.
I would much rather be talking in terms of Eiffel or Cecil.  But the
reality is that Java is currently a common language to show examples.  I
certainly would not make a point of a failing in Java (e.g. invariant
return type) as a failing in static typing.  I tend to think primarily
in terms of Eiffel but with the additional separation of types from
classes (that Eiffel supports but does not enforce).  This seems to be a
reasonable perspective considering commonly available languages.


So returning to the topic, I will add a little more explanation for a
few of the points.

### Problems with type-checking

Note that there is nothing conceptually wrong with static
type-checking.  It would be wonderful to create software that can be
completely verified before execution.  That is provably impossible, but
getting closer to that goal would be nice.  Static typing is a possible
approach: you at least make sure that all clients and suppliers agree to
a contract ahead of time before even attempting to run the program.
Some of the problems with static typing are that:
<OL class="upperAlpha">
  <LI>Types are sometimes bound to Implementation Classes</LI>
  <LI>Types have poor granularity.  Frequently a Type will be specified
that has too many operations (is too specific) to be useful in multiple
contexts even though subsets of those operations (a more general
concept) is widely useful.  Since it costs effort to name and create
each Type, there is an impetus of reduction that again impedes reuse and
generalization.  Save now, pay later.</LI>
  <LI>Precise type information is lost when objects are fed through more
generic structures.</LI>
  <LI>Types restrict future type-safe expansion to programs.  Some
programs that could have been written type-correctly if done in one
"lump" are impossible to write given the actual historical growth of a
program (many people, different companies, over time, with limited
foresight).  Choose now, pay later.</LI>
</OL>


Of these (A) is actually easily fixable, and Java has helped with that.
And maybe people accept the workaround with (C): either massive
conceptual (and usually code) bloat for a myriad of homogeneous
structures or using a dynamic-typecheck loophole.  But (B) and (D) are
pretty much intractable flaws in static typing for the near future (next
10 years of commercial software).  I would love to be wrong, but it
seems unlikely at the current rate of change in programming languages
and research.


Someone could say somehow they avoid (B) and (D) but I would bet big
money that they are being bit by them all the time.  I gave an example
from the Java collections.  Everyone who programs in Java had the
opportunity to comment on the JDK 1.2 collections for maybe a year
before they were frozen.  But the final choice was to have neither a
concept of an 'Iterable' object or a 'Containing' object.  This caused
all of the following methods to have poor granularity:
<pre>
    public boolean containsAll(Collection c)
    public boolean addAll(Collection c)
    public boolean removeAll(Collection c)
    public boolean retainAll(Collection c)
</pre>


Each of the above only needed a single operation: 'contains' or
'iterator'.  But Javasoft rejected:
<pre>
    public boolean containsAll(Container c)
    public boolean addAll(Iterable c)
    public boolean removeAll(Container c)
    public boolean retainAll(Container c)
</pre>


Why?  Because it increased the number of interfaces, which would be a
pain (consider their design notes and the analyses of Doug Lea's
collection classes).  A perfect example of both (B) and (D): save now,
choose now, pay later.  And the examples are all over the place in Java,
C++, and Eiffel library code.


The arguments presented against this existing problem actually reinforce
the examples of (B) and (D):

<h3>Changing an existing class/interface</h3>

<pre class="quote1">
Davorin Mestric wrote:
>  Yes you can:
>     ...
>     public interface IContains{ public boolean contains( Object o);}
>     ...
>     public void AbstractCollection::removeAll( IContains c) {
</pre>


No, *I* can't change 'AbstractCollection'.  And Javasoft chose not to do
it that way.  They may have chosen unwisely, but that actually means a
whole community of Java programmers chose unwisely because of other
forces solely attributable to static typing.  The problem was putting
these forces on their decision in the first place.

<pre class="quote1">
Joern Janneck wrote:
> ... now
> assume that for a given class of collection (hashed collections are a
> good example) it is more efficient to implement removeAll by iterating
> over the argument (when it is smaller, maybe) instead of over the
> original collection:
[...]
</pre>


OK, so the original contract/type should have been 'IterableContainer'.
How should I know that ahead of time?  Why did Javasoft not choose that
interface instead?  Collection is definitely too big
a requirement because it dramatically limits the usability of the method
'removeAll'.  I would argue that 'IterableContainer' is also too big.
Why can't I just support the 'contains' method?  As I gave an example:

<pre class="code">
   new Container() { public boolean contains(Object o) {
       ... person is &lt; 6ft...
   }}
</pre>


I can't iterate over all the people under six feet tall, or it would at
least be very painful.  Why should iterability be a requirement to a
method like 'removeAll'?  Intuitively this seems extremely limiting and
I know it to be so in actually building systems.  But the bigger problem
isn't just the choices in contract for the 'removeAll' method, but that
out of simplification that that contract was lumped in with a whole
bunch
of other contracts for Collections in general.

<h3>Summary</h3>


Within just this one simple class (AbstractCollection):
<UL>
  <LI>4 are too specific (they only require an 'Iterable' or 'Container')</LI>
  <LI>3 are non-typed (typed to Object)</LI>
  <LI>4 are non-typed (no parameters)</LI>
  <LI>1 'toArray(Object[])' is redundant (and is effectively dynamically
    typed)</LI>
</UL>


So 7 out of 12 are identical with the dynamic version (considering only
parameters), 1/3 are "incorrect" caused by static typing disincentives,
and 1 is simply redundant.

<pre class="quote1">
Joern Janneck wrote:
> ...let me again point out that i think that code size
> as such is not the issue in big systems. it is design, and code
> complexity. these don't differ in principle between type systems, and
> arguably static type systems might encourage more structure. or not, who
> knows.
</pre>


In principle, with a perfect static type system, there is no
difference.  But that type system does not exist and current languages
are very far away from it.  The problems (A)-(D) are not just affecting
intra-method complexity (semi-harmless code bloat) they are affecting
inter-object and inter-package complexity.  In just the example
presented we will have to increase (potentially many) clients effort to
use a Collection for their goals, or we will have to provide additional
methods somewhere else (a Collection helper) that a client will need to
know of and again increase the clients' efforts.


And the argument can be more informed than just personal opinion.
We have plenty of examples of the various languages to compare[1]:
The libraries of Smalltalk, C++, Perl, Java, Eiffel, etc.; Design
Patterns in various languages; and so on.  If you review all these
languages in depth you will find that static typing is certainly harming
scalability.  It may be helping in certain ways against mistakes in the
small, but it is interfering with good code (code that will execute
properly at runtime, is easy to understand, is easy to maintain, and is
useful to many clients) that helps grow systems in the large and over
time.


But great software can be written in any language in spite of each's
flaws.  It is just important to keep the great ideas in your team's
heads ... and the bad ideas too so you can avoid them (or work around
them) when possible.

<pre class="signature">
--Mark
</pre>


<p class="footnote">
[1] A multi-year immersive experience in each language would be the best
approach, but some of the following might be easier to catch up on:
<UL>
   <LI>Design Patterns: Elements of Reusable Object-Oriented Software</LI>
   <LI>The Design Patterns Smalltalk Companion</LI>
   <LI>Reusable Software: The Base Object-Oriented Component Libraries.</LI>
   <LI>Smalltalk-80: The Language and its Implementation</LI>
   <LI>JDK 1.2 & JGL (www.objectspace.com)</LI>
   <LI>The C++ ANSI/ISO Standard Template Library</LI>
   <LI>CPAN</LI>
</UL>
</p>


<H3 class="discussion">Java Collection</H3>

<pre class="quote">
Joern Janneck wrote:
> Mark Fussell wrote:
> > If you need a specific example, consider the [completely randomly
> > selected] JDK 1.2 Collection code of:
> >     public boolean AbstractCollection::removeAll(Collection c) {
[snip]
> >
> > The static-typing problem in this extremely simple code is that 'c' only
> > needs to respond to 'contains', not be a Collection.  This means I can't
> > just use any containment concept I want to (say, remove all people who
> > are 6' tall)
>
> ... which is something that could be defined as a collection, couldn't
> it? at least in a good design, it should be able to.
</pre>

I don't think you really mean that.  Of the 13 operations for a
Collection:
<pre class="code">
    public boolean contains(Object o);
    public boolean containsAll(Collection c);
    public Iterator iterator();
    public int size();
    public boolean isEmpty();
    public Object[] toArray();
    public Object[] toArray(Object a[]);
    public boolean add(Object o);
    public boolean remove(Object o);
    public boolean addAll(Collection c);
    public boolean removeAll(Collection c);
    public boolean retainAll(Collection c);
    public void clear();
</pre>

The concept of "contains a person 6' tall" could only reasonably be
considered to have the first operation at its core with the second as a
helper (really an "augmentation" from Collection's point of view).
_Maybe_ the third through seventh operation if we insist on the set
being preknown and finite.  All of the rest imply serious mutability
which it would be unreasonable to cause all clients of 'removeAll' to
support for the parameter 'c'.  I can't believe you consider this to be
a good design and good code.  Again, my definition of good code is code
that will execute properly at runtime, is easy to understand, is easy to
maintain, and is useful to many clients.  This problematic restriction
(all 13 operations instead of 1, 2, or maybe 7) makes this code much
less useful, harder too understand ("why do we need a full heavyweight
Collection for a simple predicate-like test"), and the system less
maintainable because we have not specified what we really, precisely,
wanted from the parameter 'c'.

The argument that HashedCollection would like more from the parameter
'c' is really a symptom of this imprecision and a weighting towards
implementers over clients.  Clients are the important ones and need to
be considered first.  There will be many more clients of a particular
operation than implementers of it, so the quality/usefulness of the
contract to the client is much more important to the scalability of the
application.  Client-punishing contracts are the hobgoblins of static
typing.


<H3 class="discussion">Augmenting existing Types</H3>

<pre class="quote1">
Mike Anderson wrote:
[snip]
> ...If, when implementing the client
> of a preexisting class, I could create a new interface and declare that (in the
> context of my client) the preexisting class implements that interface, problem D
> would be solved (wouldn't it?).  Is such a feature feasible?  Are there
> compile-time-checked languages that support something like this?
</pre>

You might look into BeCecil as one example:
<pre>
   <a href="http://www.cs.washington.edu/research/projects/cecil/cecil/www/www/Papers/BeCecil.html">http://www.cs.washington.edu/research/projects/cecil/cecil/www/www/Papers/BeCecil.html</a>
</pre>

<H3 class="discussion">Augmenting existing Types</H3>

<pre class="quote1">
Joern Janneck wrote:
> Markus Kohler wrote:
[snip]
> > Here's a new example
>
> i'd still be interested in your answer to my objection to the first
> example. after all, it was originally supposed to show the virtues of st
> for _large_ sw development. i am still waiting to be answered on that
> issue.
</pre>


If I gave the first example you are referring to (as the originator of
this particular title of thread), I am not sure what answer you are
looking for.  I think multiple people have showed the problem that
static typing has with scaling (in both space and time) because of
certain limitations ['A'-'D'] fairly well.  Nothing that I and others
presented as problems are _unknown_ to static typing research and people
are busily working on solving these types of problems.  Language
families of Cecil, Haskell, ML, and so on are trying to solve these
problems because they *are* problems.  And they affect scalability.

Dynamic OO languages have benefits that cause (well designed
applications) to scale extremely well in size and space because they
allow components to be reused and pieced together in a more optimal way,
and so reduce overall system complexity.  The reason is that dynamic OO
languages simply do not artificially enlarge a contract between two
parties to include irrelevant details from:
<ol class="arab">
  <LI>Other parties (by being lumped together in a single named type).</LI>
  <LI>Other times   (because types were frozen by a compile at one
moment in time)</LI>
  <LI>Implementation </LI>
</ol>
Current static languages unfortunately encourage or require the
inclusion of these artificial restrictions in a system, which impedes
scalability (space and time).

<h3> Specific example </h3>

My example was:
<pre class="code">
    public boolean AbstractCollection::removeAll(Collection c)
</pre>

No, this is not large programming yet, but it is headed that way:
Collections are a core library in any programming language.  If there
are serious restrictions and overhead in dealing with them, this is a
strong indicator of what will come in many areas as the system scales
(in size and over time).  Simply consider the quality and lifetime of
the Smalltalk-80 collections.  They are better (more capable, more
useful, and more maintainable) than anything that has come from the C++
and Java languages over their unstable lifetimes -- even though both
languages could have leveraged this existing work and its published
improvements.  The Smalltalk libraries have been amazingly stable over a
20 year period of use and growth: Smalltalk code I have from 1986 is
still CORRECT and is cleaner than (hopefully much more skillfully
written) Java code from 1999.

My other example included looking at the complexity of all the Design
Patterns in dynamic OO vs. static-typed OO languages.  If you seriously
think that the patterns are more elegant, scalable (size and time), and
maintainable in static-typed OO languages -- Java, for example, needed
three *totally different* implementations of the Observer/Listener
pattern to deal with _primarily_ different typing issues -- there is
unfortunately little to talk about.  If you simply think the tradeoff is
worth it, there is also little to talk about because I accept that
perspective.  Note that I was answering a specific question:
<pre class="quote1">
>   (2) Why does dynamic typing (as done with Smalltalk) not negatively
>       affect the stability of large applications?
</pre>

for someone who had never built a large application in Smalltalk or a
similar language.

<h3> Tradeoffs </h3>

The one aspect I do consider very useful with static typing for building
systems is that it *forces* developers to think formally about
interfaces between objects or their code breaks quickly.  This is a very
good training experience and should be repeated off and on to make sure
people aren't getting sloppy.  But if you are a good designer, the
realities/restrictions of static typing cause you to produce somewhat
less scalable (over size and time) applications[1] than for a dynamic OO
language with similar effort in documentation of protocols and test
suites.  So the idea of switching back and forth between an optional
statically-checked and a dynamic [with documented protocols] OO language
is certainly a good one.  Better than having casting/type-checking
loopholes (a sort of strange intermediate).

Most large dynamic OO projects do have this characteristic
(static-oriented documentation) because UML and most other notations
require a static-type based perspective.  And well-defined
types/contracts exist all throughout good Smalltalk code, but some of
the best contracts (Valuable, Observer, Iterable, etc.) are just too
fine-grained, too pervasive, or too generic to be represented in a
statically-typed program.  Unfortunately, a dynamically simple concept
like "augmentations"[1] is also impossible to correctly represent in the
core UML because of its simplistic (C++ ish) static-typing origin.


<pre class="signature">
--Mark
</pre>

<p class="footnote">
[1] Just the one feature of Envy extensions (the ability to "augment"
existing classes with new behavior without modifying the original code)
is incredibly powerful for building large applications [especially
dealing with layering] and is only possible if the original compiler did
not statically freeze the types.
</p>


<H3 class="discussion">Amount of static typing</H3>

<pre class="quote1">
patrick@c837917-a.potlnd1.or.home.com wrote:
> : David Jenkins wrote:
> : > One of my problems with Java is that it pretends to be statically
> : > typed, but is not--you can always cast your way out of a type.
> : > Eiffel, I've found, is a very stern taskmaster when it comes to
> : > typing, but I've learned to appreciate the lessons it teaches.
>
> Java is no less statically typed than Eiffel, i.e. you cannot cast a
> Java object to anything that it was not defined to be (as could be
> done with C++, at least in years past).
</pre>

<p>
I think "more" or "less" statically typed was referring to "amount of
code that is verifiably type-correct at compile-time" not whether the
type system is safe.  I don't think unsafe type systems are in any way
interesting to those reading these threads.   I agree with David Jenkins
that Java code will be far less compile-time verified than Eiffel
because of weaknesses in the Java type system (especially from the lack
of covariant return types and some form of parametric types).  A Java
typecheck cast (a "type attempt") is just as dynamic as standard
Smalltalk message sends; the Java version just has a larger granularity
and a slightly different timing (before the message as opposed to at
message time).  The amount of "type attempts" within Java code is
enormously larger than the amount of "assignment attempts" within Eiffel
code.  So the Java code is really "much less statically typed" although
we are want for nice short phrases that a precise and accurate: "much
less compile-time type-verified".
</p>

<p>
Interestingly, the Eiffel code will be additionally and more precisely
"dynamically object-verified" through the preconditions, postconditions,
and invariants.  So a stronger verification applied to the Objects
themselves is coming from dynamic checks (just like Smalltalk) as
opposed to compile-time checks.  Smalltalk with Eiffel-like DBC
capabilities would definitely muddle the linearity of type safety[1]:
Smalltalk would be more precisely verified at runtime than a Java
program but less precisely verified at compile time.  This would be
without the problems of compile-time typing (problems with granularity,
evolution, genericity, etc.).  Which is safer?... no I don't want to go
down that topic's path...
</p>

<p>
Actually, this Smalltalk augmentation is pretty easy [I previously did a
prototype and I also recall the concept being published in Smalltalk
Report] since we could: (1) allow DBC anotations in methods or
categorize special unit tests into pre, post, and invariant conditions,
(2) augment the compiler to generate the calls on method entry and exit,
(3) provide the same behavior as Eiffel [no check on intra-object
calls], and (4) throw reasonable exceptions depending on who is
responsible.  The main issues are the exact annotation form (although
UML's OCL pretty much solves that problem) and
standardization/portability across Smalltalk platforms.
</p>

<pre class="signature">
--Mark
</pre>


<p class="footnote">
[1] Type safety: Amount the program is verified to behave correctly
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SmallJava: Smalltalk to Java... Using Language Transformation to Show Language Differences]]></title>
    <link href="http://markfussell.emenar.com/blog/smalljava/"/>
    <updated>1997-05-07T18:00:00-07:00</updated>
    <id>http://markfussell.emenar.com/blog/smalljava</id>
    <content type="html"><![CDATA[<p>There is also a PDF version <a href="/pdfs/SmallJava1d_2.pdf">here</a> which might be easier to read
because it has a bit more formatting.</p>

<div style='mso-element:para-border-div;border:none;border-bottom:solid windowtext 1.5pt;
padding:0in 0in 1.0pt 0in'>

<h1><a name="_Toc387781516">Overview and Introduction</a></h1>

</div>




<p class=MsoNormal>In this document I will compare and contrast Smalltalk and
Java using a somewhat unusual approach: I will transform one language
(Smalltalk) into the other (Java) by a series of small steps in an intermediary
language (SmallJava).<span style="mso-spacerun: yes">&nbsp; </span>With each
step I will discuss how the new properties of the intermediate language compare
and contrast to the properties of the previous version of the language.<span
style="mso-spacerun: yes">&nbsp; </span></p>




<!-- more -->




<p class=MsoNormal>The reason to use this approach is it allows two languages'
features to be compared without the baggage of all the other differences in the
languages.<span style="mso-spacerun: yes">&nbsp; </span>Frequently language
discussions are difficult because there are so many differences in syntax and
unrelated semantics between the two languages that discussing a single point is
impossible unless all parties are fluent in both languages.<span
style="mso-spacerun: yes">&nbsp; </span>The approach of transforming a single
language removes this particular hurdle to analysis.<span style="mso-spacerun:
yes">&nbsp; </span>In addition, by using two publicly known languages as
&quot;end-points&quot;, the intermediate language will also be very familiar.</p>




<p class=MsoNormal>The reason I can use this approach is the incredible amount
of similarity between Smalltalk and Java.<span style="mso-spacerun: yes">&nbsp;
</span>This similarity is surprising because the syntax of the languages look
very different and, more importantly, because Java is called<span
style="mso-spacerun: yes">&nbsp; </span>&quot;statically typed&quot; and
Smalltalk is called &quot;untyped&quot; or &quot;dynamically typed&quot;.<span
style="mso-spacerun: yes">&nbsp; </span>But the similarity is there at the core
and by doing the language transformation we can have very concrete examples of
what terms like &quot;statically typed&quot; and &quot;dynamically type&quot; mean
in the context of a &quot;single&quot; language.<span style="mso-spacerun:
yes">&nbsp; </span></p>




<p class=MsoNormal>This document will require at least introductory background
in both Java and Smalltalk.<span style="mso-spacerun: yes">&nbsp;
</span>Basically the syntax and major concepts of both languages should be
familiar to you.<span style="mso-spacerun: yes">&nbsp; </span>If you get lost
during the postings I suggest you look at FAQ's and book related postings for
&quot;comp.lang.smalltalk&quot;, &quot;comp.lang.java.programmer&quot; and
&quot;comp.object&quot; [using www.dejanews.com might be the easiest
approach].<span style="mso-spacerun: yes">&nbsp; </span>Although I don't ever
consider a single book to be enough for any language, my current favorite two
books may be:</p>




<p class=BookCitation><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;
</span>Smalltalk-80: The Language and its Implementation. </p>




<p class=BookCitation><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Adele Goldberg and David
Robson. </p>




<p class=BookCitation><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Addison-Wesley, Reading,
MA, 1983.</p>




<p class=BookCitation><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;
</span>The Java Language Specification. </p>




<p class=BookCitation><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>James Gosling, Bill Joy,
Guy Steele. </p>




<p class=BookCitation><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Addison-Wesley, Reading,
MA, 1996.</p>




<p class=MsoNormal>But these are not exactly introductory books and will not be
the best choices for all readers.<span style="mso-spacerun: yes">&nbsp; </span></p>




<div style='mso-element:para-border-div;border:none;border-bottom:solid windowtext 1.5pt;
padding:0in 0in 1.0pt 0in'>

<h1><a name="_Toc387781517">SmallJava</a></h1>

</div>




<h2><a name="_Toc387781518">SmallJava-97, The Language</a></h2>




<p class=MsoNormal>This document is comparing Smalltalk and Java through an
intermediary language, SmallJava.<span style="mso-spacerun: yes">&nbsp;
</span>SmallJava will start as the common elements from both Smalltalk and
Java.<span style="mso-spacerun: yes">&nbsp; </span>It will then be used to
discuss how new properties brought into SmallJava from Smalltalk or Java impact
the language.<span style="mso-spacerun: yes">&nbsp; </span>The first item on
the agenda is to specify what the base version of SmallJava will look like in
both semantics and syntax.<span style="mso-spacerun: yes">&nbsp; </span></p>




<h3><a name="_Toc387781519">SmallJava Semantics</a></h3>




<p class=MsoNormal>SmallJava semantics will be the intersection of the common
semantic features of both Smalltalk and Java.<span style="mso-spacerun:
yes">&nbsp; </span>This will enable SmallJava to easily grow with features in
either direction and will allow developers familiar with either language to
also be familiar with SmallJava.<span style="mso-spacerun: yes">&nbsp;
</span>To accomplish this goal requires simplifying the properties of both
languages until the remaining cores overlap sufficiently.<span
style="mso-spacerun: yes">&nbsp; </span>Because of the similarities in the
languages not very much has to be removed from either. </p>




<h4><a name="_Toc387781520">Smalltalk and Java Simplification</a></h4>




<p class=MsoNormal>First I will simplify Smalltalk to get to its core.<span
style="mso-spacerun: yes">&nbsp; </span>To do this SmallJava will:</p>




<p class=MsoList2>(S1) Use class declaration instead of class construction</p>




<p class=MsoList2>(S2) Drop all the Metaclass/Class capabilities</p>




<p class=MsoList2>(S3) Ignore how blocks and control messages are different
from control structures.<span style="mso-spacerun: yes">&nbsp; </span></p>




<p class=MsoList2>(S4) Only have a single root class &quot;Object&quot; that
all classes must inherit from directly or indirectly.<span style="mso-spacerun:
yes">&nbsp; </span></p>




<p class=MsoNormal>This gives us a dialect of Smalltalk like "Little Smalltalk"
[Budd 87].<span style="mso-spacerun: yes">&nbsp; </span>We have dropped (or not
mentioned) a lot of capabilities of professional Smalltalk dialects, but we
still have a valid dialect of the Smalltalk language.</p>




<p class=MsoNormal>Next I will simplify Java to match up with the above simple
Smalltalk.<span style="mso-spacerun: yes">&nbsp; </span>To do this SmallJava
will:</p>




<p class=MsoList2>(J1) Drop access control.<span style="mso-spacerun:
yes">&nbsp; </span>All methods will be public and all instance variables will
be protected which closely matches Smalltalk's standard access controls.</p>




<p class=MsoList2>(J2) Ignore the static side of Java classes.</p>




<p class=MsoList2>(J3) Consider all primitive data types to inherit from
Object.<span style="mso-spacerun: yes">&nbsp; </span>Viewed differently, you
could say that all the Java control structures, operators, and other
expressions work with the Wrapper versions of the primitive data types.</p>




<p class=MsoList2>(J4) Make allowances and simplifications with certain
packages and operators.<span style="mso-spacerun: yes">&nbsp; </span>For
example the "Math" functions will be made available without needing the "Math"
prefix.</p>




<p class=MsoList2>(J5) Drop the use of static typing.<span style="mso-spacerun:
yes">&nbsp; </span>All variables, parameters, and return types will be typed as
"Object" and messages can be successfully sent to an object that has a method
with the right signature.<span style="mso-spacerun: yes">&nbsp; </span>Since
static typing is removed, interfaces are removed also and we simply have
classes extending other classes.</p>




<p class=MsoNormal>The only dramatic change to Java is by J5.<span
style="mso-spacerun: yes">&nbsp; </span>An interesting aspect of J5 is that if
you take a working program it still works after applying J5 to it.<span
style="mso-spacerun: yes">&nbsp; </span>This will be shown in the example
below.</p>




<p class=MsoNormal>The change J3 is also sizable but I believe it is an
"unquestionable" improvement so less interesting although this will also be
discussed in later sections.</p>




<h4><a name="_Toc387781521">SmallJava Semantics Summary</a></h4>




<p class=MsoNormal>Stated again, SmallJava's semantics are the intersection
Smalltalk and Java with each simplified as specified.<span style="mso-spacerun:
yes">&nbsp; </span>A more formal description might be useful but is not in the
scope of this document.<span style="mso-spacerun: yes">&nbsp; </span>It would
also have to be many formal descriptions because SmallJava will be constantly
changing as we add new properties to it.<span style="mso-spacerun: yes">&nbsp;
</span>Beside the above informal description, examples of SmallJava will be
provided as the document progresses.<span style="mso-spacerun: yes">&nbsp;
</span>Next we have to specify SmallJava's syntax.</p>




<h3><a name="_Toc387781522">SmallJava Syntax</a></h3>




<p class=MsoNormal>SmallJava uses primarily Java syntax. This is to allow
easier discussion of adding in Java properties (e.g. static typing and
interfaces) since I can use Java syntax for those properties.<span
style="mso-spacerun: yes">&nbsp; </span>It is also true that many programmers
are more familiar with 'C++' like syntax than with Smalltalk syntax.<span
style="mso-spacerun: yes">&nbsp; </span>Adding in Smalltalk properties to
SmallJava generally does not require extra syntax (blocks "[ | ]" being the notable
exception) but instead either requires objects to become "smarter" (control
messages for Booleans and Collections) or requires developing new types of
objects (Class objects).<span style="mso-spacerun: yes">&nbsp; </span></p>




<p class=MsoNormal><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>If
you are interested in a syntax level comparison between Smalltalk and Java, you
might want to look at: http://www.chimu.com/publications/SmalltalkJavaSyntax.html.<span
style="mso-spacerun: yes">&nbsp; </span>Also some of my naming conventions make
Java look a bit more like Smalltalk so the syntax difference will not be quite
as noticeable.</p>




<h3><a name="_Toc387781523">The SmallJava Language</a></h3>




<p class=MsoNormal>This resulting SmallJava is a language you can view as
either a simple Java without static typing or as a simple Smalltalk with Java
syntax.<span style="mso-spacerun: yes">&nbsp; </span>I will show each of these
views in different ways.<span style="mso-spacerun: yes">&nbsp; </span>First I
will show the similarity to Java by applying the "J" transformations to a Java
program and turn it into SmallJava.<span style="mso-spacerun: yes">&nbsp;
</span>Second I will translate the example's syntax between SmallJava and
Smalltalk.<span style="mso-spacerun: yes">&nbsp; </span>This will result in a
total of three versions of the same example code in each of Smalltalk, Java,
and SmallJava.<span style="mso-spacerun: yes">&nbsp; </span></p>




<h4><a name="_Toc387781524">From Java to SmallJava</a></h4>




<p class=MsoNormal>My primary example will be a simple Point class.<span
style="mso-spacerun: yes">&nbsp; </span>The following is the original, 100%
pure Java.</p>




<div style='mso-element:para-border-div;border:solid windowtext 1.5pt;
padding:1.0pt 1.0pt 1.0pt 1.0pt;mso-border-shadow:yes;margin-left:.25in;
margin-right:1.0in'>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>public class Point {</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>public Point(double x,
double y) {</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>this.x = x;</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>this.y = y;</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>}</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span></p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>public double x()
{return x;}</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>public double y()
{return y;}</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span></p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>public double r()
{return Math.sqrt(Math.pow(x,2)+Math.pow(y,2));}</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>public double theta()
{return Math.atan2(y,x);}</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span></p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>public Point
vectorFrom(Point point) {</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style='mso-tab-count:
1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>return new
Point(x - point.x(), y - point.y());</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>}</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span></p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>protected double x,y;</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>}</p>

</div>




<p class=MsoNormal>Now I will start applying the SmallJava changes.<span
style="mso-spacerun: yes">&nbsp; </span>J2 doesn't apply because there are no
static methods.<span style="mso-spacerun: yes">&nbsp; </span>After applying J1,
J3, and J4 to the example we get:</p>




<div style='mso-element:para-border-div;border:solid windowtext 1.5pt;
padding:1.0pt 1.0pt 1.0pt 1.0pt;mso-border-shadow:yes;margin-left:.25in;
margin-right:1.0in'>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>class Point {</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Point(Double x, Double
y) {</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>this.x = x;</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>this.y = y;</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>}</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span></p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Double x() {return x;}</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Double y() {return y;}</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span></p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Double r() {return
sqrt(x^2+y^2);}</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Double theta() {return
atan2(y,x);}</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span></p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Point vectorFrom(Point
point) {</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style='mso-tab-count:
1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>return new
Point(x - point.x(), y - point.y());</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>}</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span></p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Double x,y;</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>}</p>

</div>




<p class=MsoNormal>The major dramatic effect of these changes is that all our
numbers can now be used like all other objects (e.g. directly placed in Vectors
and Hashtables).<span style="mso-spacerun: yes">&nbsp; </span>Except for these
numbers and the simplified Math calls, the above is completely legal Java.<span
style="mso-spacerun: yes">&nbsp; </span></p>




<p class=MsoNormal>Next we apply J5 part 1: make all the variables typed to
Object.</p>




<div style='mso-element:para-border-div;border:solid windowtext 1.5pt;
padding:1.0pt 1.0pt 1.0pt 1.0pt;mso-border-shadow:yes;margin-left:.25in;
margin-right:1.0in'>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>class Point {</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Point(Object x, Object
y) {</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>this.x
= x;</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>this.y = y;</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>}</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span></p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Object x() {return x;}</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Object y() {return y;}</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span></p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Object r() {return
sqrt(x^2+y^2);}</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Object theta() {return
atan2(y,x);}</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span></p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Object vectorFrom(Object
point) {</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>return
new Point(x - point.x(), y - point.y());</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>}</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span></p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Object x,y;</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>}</p>

</div>




<p class=MsoNormal>Strangely enough, this is almost legal Java also.<span
style="mso-spacerun: yes">&nbsp; </span>Basically it is missing a lot of
casting to make it work.<span style="mso-spacerun: yes">&nbsp; </span>For
example the method #vectorFrom needs to have casts like this to be valid Java:</p>




<div style='mso-element:para-border-div;border:solid windowtext 1.5pt;
padding:1.0pt 1.0pt 1.0pt 1.0pt;mso-border-shadow:yes;margin-left:.25in;
margin-right:1.0in'>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>Object vectorFrom(Object point) {</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span><span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>return
new Point(</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>(Double) x - (Double) ((Point) point).x(), </p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>(Double) y - (Double) ((Point) point).y()</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;</span>);</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>}</p>

</div>




<p class=MsoNormal>Well, that is a whole lot of casting, so it is fortunate we
are dropping it.<span style="mso-spacerun: yes">&nbsp; </span>We will allow a
message to be sent to any Object and if it the actual object does not implement
that method we will throw a "DoesNotUnderstandException" (this behavior will be
discussed in depth in the next section).</p>




<p class=MsoNormal>Now we can finish the J5 transformation and drop all the
superfluous "Object"s.<span style="mso-spacerun: yes">&nbsp; </span>This gives
us:</p>




<div style='mso-element:para-border-div;border:solid windowtext 1.5pt;
padding:1.0pt 1.0pt 1.0pt 1.0pt;mso-border-shadow:yes;margin-left:.25in;
margin-right:1.0in'>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>class Point {</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Point(x, y) {</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>this.x = x;</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>this.y = y;</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>}</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span></p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;</span>x() {return x;}</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>y() {return y;}</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span></p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>r() {return
sqrt(x^2+y^2);}</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>theta() {return
atan2(y,x);}</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span></p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>vectorFrom(point) {</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style='mso-tab-count:
1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>return new
Point(x - point.x(), y - point.y());</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>}</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span></p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>x,y;</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>}</p>

</div>




<h4><a name="_Toc387781525">The first SmallJava example</a></h4>




<p class=MsoNormal>The above is the first example of SmallJava.<span
style="mso-spacerun: yes">&nbsp; </span>From these transformations you can see
that SmallJava is just like Java but with a lot fewer words.<span
style="mso-spacerun: yes">&nbsp; </span>An important observation is, returning
to an earlier comment, if the original Java Point class executed correctly then
the above class would execute correctly too.<span style="mso-spacerun:
yes">&nbsp; </span>The use of the static typing does not impact the correct
behavior of the code at all [1]; it only helps detect incorrect specifications that
will result in incorrect behavior (as does having multiple types of access
control).</p>




<h4><a name="_Toc387781526">SmallJava to Smalltalk</a></h4>




<p class=MsoNormal>Next, to show how similar SmallJava is to Smalltalk, the
following is the SmallJava program converted to Smalltalk-like (see [Budd 87])
syntax (the bar "|" separates method):</p>




<div style='mso-element:para-border-div;border:solid windowtext 1.5pt;
padding:1.0pt 1.0pt 1.0pt 1.0pt;mso-border-shadow:yes;margin-left:.25in;
margin-right:1.0in'>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>class Point<span style="mso-spacerun:
yes">&nbsp; </span>| x y | [</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>newX: newX y: newY </p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>x := newX.</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>y := newY. </p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>|<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>x</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>^x </p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>|<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>y</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>^y </p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>|<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>r </p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>^((x^2) + (y^2)) sqrt </p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>|<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>theta</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>^(y atan2: x) </p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>|<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>vectorFrom: point</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>^Point newX: x - point x </p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>y: y - point y</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>]</p>

</div>




<p class=MsoNormal>The point of defining the SmallJava language is so people
familiar with either Smalltalk or Java will all have a single common language
they also consider familiar.<span style="mso-spacerun: yes">&nbsp; </span>For
Smalltalk developers the transition is mostly a change in syntax.<span
style="mso-spacerun: yes">&nbsp; </span>For Java developers the transition is
mostly relaxing over typing: the Point class will execute correctly whether the
types are there or not.</p>




<h3><a name="_Toc387781527">Summary: SmallJava as a Vehicle</a> </h3>




<p class=MsoNormal>SmallJava is a vehicle to compare and contrast Smalltalk and
Java.<span style="mso-spacerun: yes">&nbsp; </span>SmallJava's existence is the
first comparison: these languages are very similar which makes SmallJava
possible.<span style="mso-spacerun: yes">&nbsp; </span>In the next sections I
will start the contrasting by adding properties of Java into SmallJava.<span
style="mso-spacerun: yes">&nbsp; </span>I will begin by getting "pessimistic".</p>




<p class=MsoNormal>---------------------------------------------------------------------</p>




<p class=EndNote>[1] Static typing can also be used to choose among overloaded
message names, but I would argue that these Type overloaded messages are a very
bad thing.<span style="mso-spacerun: yes">&nbsp; </span>It should be obvious to
the programmer reading or writing a message what will happen.<span
style="mso-spacerun: yes">&nbsp; </span>Overloading excessively hinders this:
you also have to read the Type declarations of all the message parameters and
know all the possible overloaded methods to determine what the compiler
determines (which better be the same thing).<span style="mso-spacerun:
yes">&nbsp; </span>This is not an objection to multi-methods which are a very
different thing.<span style="mso-spacerun: yes">&nbsp; </span>See the comments
on method naming http://www.chimu.com/publications/javaStandards/ for a
slightly longer discussion of this.</p>




<h2><a name="_Toc387781528">Becoming Pessimistic: Changing when an object's
type is verified</a> </h2>




<p class=MsoNormal>SmallJava's most significant difference from Java is that a
message can be sent to an object that is not known to understand that
message.<span style="mso-spacerun: yes">&nbsp; </span>If the object has
implemented a method matching the message signature then everything executes as
expected.<span style="mso-spacerun: yes">&nbsp; </span>If the object has no
matching method then SmallJava throws a "DoesNotUnderstandException".<span
style="mso-spacerun: yes">&nbsp; </span></p>




<p class=MsoNormal>This behavior I call "<b style='mso-bidi-font-weight:normal'><i
style='mso-bidi-font-style:normal'>optimistic</i></b>" messaging: you assume an
object can understand a message and only handle the special cases when the
object does not.<span style="mso-spacerun: yes">&nbsp; </span>This is as
opposed to "<b style='mso-bidi-font-weight:normal'><i style='mso-bidi-font-style:
normal'>pessimistic</i></b>" messaging where you make sure an object
understands a message before sending it to the object [1].<span
style="mso-spacerun: yes">&nbsp; </span>So let us compare these two approaches.</p>




<h3><a name="_Toc387781529">Optimistic and Pessimistic Messaging</a></h3>




<p class=MsoNormal>Optimistic and pessimistic messaging have identical behavior
if the message will be successfully understood.<span style="mso-spacerun:
yes">&nbsp; </span>The main difference between the two approaches is when an
unsuccessful message send is recognized.<span style="mso-spacerun: yes">&nbsp;
</span>For optimistic messaging it will not be recognized until you send the
message and for pessimistic it will be recognized at some time before sending
the message.<span style="mso-spacerun: yes">&nbsp; </span>Using our
Point#vectorFrom [2] example:</p>




<div style='mso-element:para-border-div;border:solid windowtext 1.5pt;
padding:1.0pt 1.0pt 1.0pt 1.0pt;mso-border-shadow:yes;margin-left:.25in;
margin-right:1.0in'>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>vectorFrom(point) {</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style='mso-tab-count:
1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>return new
Point(x - point.x(), y - point.y());</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>}</p>

</div>




<p class=MsoNormal>If we want to make sure messages like #x and #y are
understood by 'point' then for an optimistic approach we would have to do
something like this:</p>




<div style='mso-element:para-border-div;border:solid windowtext 1.5pt;
padding:1.0pt 1.0pt 1.0pt 1.0pt;mso-border-shadow:yes;margin-left:.25in;
margin-right:1.0in'>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>vectorFrom(point) {</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>try {</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>return new
Point(x - point.x(), y - point.y());</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>} catch (DoesNotUnderstandException e) {</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>//Do the right thing</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>}</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>}</p>

</div>




<p class=MsoNormal>The approach is identical to what you would do for handling
any message that could throw an Exception; the only difference is that the
message is never actually "received" by the object [3].</p>




<p class=MsoNormal>So what would pessimistic messaging look like for our
example?<span style="mso-spacerun: yes">&nbsp; </span>Assume we add to
SmallJava a "message-check" with syntax "(#message)" that allows us to check
whether an object understands a particular message.<span style="mso-spacerun:
yes">&nbsp; </span>A message-check will do nothing if the object understands
the message, but will throw a "DoesNotUnderstandException" if the object does
not.<span style="mso-spacerun: yes">&nbsp; </span>Then we can change our
example to:</p>




<div style='mso-element:para-border-div;border:solid windowtext 1.5pt;
padding:1.0pt 1.0pt 1.0pt 1.0pt;mso-border-shadow:yes;margin-left:.25in;
margin-right:1.0in'>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>vectorFrom(point) {</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>try {</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>return new
Point(x - ((#x) point).x(), y - ((#y) point).y());</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>} catch (DoesNotUnderstandException e) {</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>//Do the right thing</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>}</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>}</p>

</div>




<p class=MsoNormal>Now we have guaranteed that 'point' will successfully
respond to #x before sending 'x()' and will successfully respond #y before
sending 'y()'.<span style="mso-spacerun: yes">&nbsp; </span>We do not need the
optimistic messaging anymore.</p>




<p class=MsoNormal>OK, that really didn't provide us with ANY benefit.<span
style="mso-spacerun: yes">&nbsp; </span>We still throw the same exception on
failure and we throw that exception "just a fraction of a second" before we
would actually have sent the message.<span style="mso-spacerun: yes">&nbsp;
</span>Why bother?<span style="mso-spacerun: yes">&nbsp; </span></p>




<h4><a name="_Toc387781530">Advantages of pessimistic messaging</a></h4>




<p class=MsoNormal>The advantage of pessimistic messaging is that we have more
control of when the test is done.<span style="mso-spacerun: yes">&nbsp;
</span>For example, we can make sure nothing happens in the method if we didn't
actually get a 'point' that responds to #x and #y:</p>




<div style='mso-element:para-border-div;border:solid windowtext 1.5pt;
padding:1.0pt 1.0pt 1.0pt 1.0pt;mso-border-shadow:yes;margin-left:.25in;
margin-right:1.0in'>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>vectorFrom(point) {</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>try {</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>(#x,#y) point;</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>} catch (DoesNotUnderstandException e) {</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>//Do the right thing</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>}</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>return new Point(x - point.x(), y - point.y());</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>}</p>

</div>




<p class=MsoNormal>This is now different behavior than what our optimistic
version of the method produced.<span style="mso-spacerun: yes">&nbsp;
</span>Our optimistic version would have sent 'x()' to the point before
checking whether the point responded to #y.<span style="mso-spacerun:
yes">&nbsp; </span>This version verifies [4] that 'point' understands both #x
and #y before sending any messages to it. </p>




<h3><a name="_Toc387781531">Forgetting and Remembering verification</a></h3>




<p class=MsoNormal>SmallJava's message-check verification happens to the object
in a variable at a given time.<span style="mso-spacerun: yes">&nbsp;
</span>What happens when that variable changes or when the object moves to a
new variable?<span style="mso-spacerun: yes">&nbsp; </span>We loose the
verification and must verify again.<span style="mso-spacerun: yes">&nbsp;
</span>The following is not completely pessimistic because of the second
assignment to 'pointCopy':</p>




<div style='mso-element:para-border-div;border:solid windowtext 1.5pt;
padding:1.0pt 1.0pt 1.0pt 1.0pt;mso-border-shadow:yes;margin-left:.25in;
margin-right:1.0in'>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>vectorFrom(point) {</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>try {</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>temp = (#x,#y) point;</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>} catch (DoesNotUnderstandException e) {</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>//Do the right thing</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>}</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>newX = temp.x();</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>temp = this;</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>newX = newX-temp.x();</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>return new Point(newX, y - point.y());</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>}</p>

</div>




<p class=MsoNormal>In the example above we do not know whether the second
'temp.x()' will be successful.<span style="mso-spacerun: yes">&nbsp; </span>We
have to do another check after assigning to the variable a second time:</p>




<div style='mso-element:para-border-div;border:solid windowtext 1.5pt;
padding:1.0pt 1.0pt 1.0pt 1.0pt;mso-border-shadow:yes;margin-left:.25in;
margin-right:1.0in'>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>try {</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>temp = (#x,#y) this;</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>} catch (DoesNotUnderstandException e2) {</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>//Do the right thing</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>}</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>newX = newX-temp.x();</p>

</div>




<h4><a name="_Toc387781532">Remembering verification</a></h4>




<p class=MsoNormal>Well, that produces some very noisy methods.<span
style="mso-spacerun: yes">&nbsp; </span>It would be better if we could have a
little more memory of previous verifications.<span style="mso-spacerun:
yes">&nbsp; </span>We can remember verification of an object by keeping track
of the object during variable assignments:</p>




<div style='mso-element:para-border-div;border:solid windowtext 1.5pt;
padding:1.0pt 1.0pt 1.0pt 1.0pt;mso-border-shadow:yes;margin-left:.25in;
margin-right:1.0in'>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>vectorFrom(point) {</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>try {</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>temp1 = ((#x,#y) point);</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>} catch (DoesNotUnderstandException e) {</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>//Do the right thing</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>}</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>temp2 = temp1;</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>newX = temp1.x();</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>newY = temp2.y();</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>return new Point(x - newX, y - newY);</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>}</p>

</div>




<p class=MsoNormal>Unfortunately this doesn't provide us with too much benefit
in most programs.<span style="mso-spacerun: yes">&nbsp; </span></p>




<p class=MsoNormal>Our other option is to insist that all assignments to a
particular variable will always be message-checked before the assignment:</p>




<div style='mso-element:para-border-div;border:solid windowtext 1.5pt;
padding:1.0pt 1.0pt 1.0pt 1.0pt;mso-border-shadow:yes;margin-left:.25in;
margin-right:1.0in'>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>vectorFrom(point) {</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>(#x,#y) temp1;</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>(#x,#y) temp2;</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>try {</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>temp1 = (#x,#y) point;</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>} catch (DoesNotUnderstandException e) {</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>//Do the right thing</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>}</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>temp2 = temp1;</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>newX = temp1.x();</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>newY = temp2.y();</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>return new Point(x - newX, y - newY);</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>}</p>

</div>




<p class=MsoNormal>All assignments to 'temp1' and 'temp2' must now check
whether the value of the assignment passes the message-check.<span
style="mso-spacerun: yes">&nbsp; </span>This has no impact to our assignment to
'temp1', but it does allow us to assign to 'temp2' without doing a further
check.<span style="mso-spacerun: yes">&nbsp; </span>We have defined invariants
for the variables [5] temp1 and temp2 that guarantee that the assignment from
temp1 to temp2 will succeed.<span style="mso-spacerun: yes">&nbsp; </span>Since
we can do this invariant check at compile-time we now have a simple
"compile-time message-check" capability for SmallJava.</p>




<h3><a name="_Toc387781533">Pessimistic inside: Optimistic outside</a></h3>




<p class=MsoNormal>While adding all this support for pessimistic checking, we
unfortunately have been cheating a bit.<span style="mso-spacerun: yes">&nbsp;
</span>We left out the implementation of "Do the right thing".<span
style="mso-spacerun: yes">&nbsp; </span>What is the right thing to do?<span
style="mso-spacerun: yes">&nbsp; </span>Well, it is possible that a method can
handle different types of 'point's and by finding out which type of point it
has it will behave differently.<span style="mso-spacerun: yes">&nbsp;
</span>For example, we could use a default 'z' value if we are given a 2d point
when we expect a 3d point.<span style="mso-spacerun: yes">&nbsp; </span>This is
useful behavior but is not the most common behavior.</p>




<p class=MsoNormal>The more common answer is that if a method doesn't get what
it expects it doesn't know what to do.<span style="mso-spacerun: yes">&nbsp;
</span>In this case we really can't catch the error at all: we have to let it
go to the caller.<span style="mso-spacerun: yes">&nbsp; </span>That makes us an
optimistic method from the caller's point of view.<span style="mso-spacerun:
yes">&nbsp; </span>For example:</p>




<p class=MsoNormal><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>pointA.vectorFrom(pointB)</p>




<p class=MsoNormal>will throw a DoesNotUnderstandException if pointB is not
able to respond to (#x,#y).<span style="mso-spacerun: yes">&nbsp; </span>So
whether we are optimistic or pessimistic within our method, we are still
optimistic as far as the caller is concerned.</p>




<h4><a name="_Toc387781534">Pessimistic in: Pessimistic out</a></h4>




<p class=MsoNormal>How can we change this?<span style="mso-spacerun:
yes">&nbsp; </span>We need more invariants within our #vectorFrom method so we
don't have any message-checks inside it.<span style="mso-spacerun: yes">&nbsp;
</span>Our only message-check is to 'point' itself, so if we can make the
caller guarantee that 'point' passes our message-check then we will guarantee
we can execute the method without further verification.<span
style="mso-spacerun: yes">&nbsp; </span>Notationally this is simple enough:</p>




<div style='mso-element:para-border-div;border:solid windowtext 1.5pt;
padding:1.0pt 1.0pt 1.0pt 1.0pt;mso-border-shadow:yes;margin-left:.25in;
margin-right:1.0in'>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>vectorFrom((#x,#y)
point) {<span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>return new Point(x - point.x(), y - point.y());</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>}</p>

</div>




<p class=MsoNormal>We are now forcing the caller to explicitly satisfy our
requirement that 'point' understands (#x,#y) before they can even call our
method instead of making the caller handle our DoesNotUnderstandException if
'point' does not understand (#x,#y).<span style="mso-spacerun: yes">&nbsp;
</span>We just passed the verification requirement in a different and
more-explicit manner than before [6].<span style="mso-spacerun:
yes">&nbsp;&nbsp; </span></p>




<h4><a name="_Toc387781535">Repassing the pessimistic requirement</a></h4>




<p class=MsoNormal>SmallJava could previously handle the
DoesNotUnderstandException through the usual exception handling mechanisms, so
only the ultimate handler of the DoesNotUnderstandException (who ever that may
be) would need to be involved [7].<span style="mso-spacerun: yes">&nbsp;
</span>Now we have to handle the pessimistic checking explicitly at all
levels.<span style="mso-spacerun: yes">&nbsp; </span>If the caller to our
#vectorFrom method looked like this under optimistic messaging:</p>




<div style='mso-element:para-border-div;border:solid windowtext 1.5pt;
padding:1.0pt 1.0pt 1.0pt 1.0pt;mso-border-shadow:yes;margin-left:.25in;
margin-right:1.0in'>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>class Line {</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Line(pointA, pointB) {</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>this.pointA = pointA;</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>this.pointB = pointB;</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>}</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>vector() {</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>return vectorFrom(pointA,pointB);</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>}</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>pointA, pointB;</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="mso-spacerun:
yes">&nbsp;</span>}</p>

</div>




<p class=MsoNormal>It would now have to look like this for pessimistic
verification:</p>




<div style='mso-element:para-border-div;border:solid windowtext 1.5pt;
padding:1.0pt 1.0pt 1.0pt 1.0pt;mso-border-shadow:yes;margin-left:.25in;
margin-right:1.0in'>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>class Line {</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Line((#x,#y) pointA, (#x,#y) pointB) {</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>this.pointA = pointA;</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>this.pointB = pointB;</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>}</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>vector()
{</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>return vectorFrom(pointA,pointB);</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>}</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>(#x,#y) pointA, pointB;</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>}</p>

</div>




<h4><a name="_Toc387781536">Where does the buck stop?</a></h4>




<p class=MsoNormal>We keep passing the buck for the pessimistic message-check
verification, but some SmallJava expression must be a "buck consumer" and
"verification producer".<span style="mso-spacerun: yes">&nbsp; </span>We have
already seen one of them: the explicit message-check when used as an expression
instead of an invariant.<span style="mso-spacerun: yes">&nbsp; </span>All the
pessimistic-invariants allowed us to do one thing: remember an earlier message-check.<span
style="mso-spacerun: yes">&nbsp; </span>If we have a method:</p>




<div style='mso-element:para-border-div;border:solid windowtext 1.5pt;
padding:1.0pt 1.0pt 1.0pt 1.0pt;mso-border-shadow:yes;margin-left:.25in;
margin-right:1.0in'>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>(#x,#y) point;</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>try {</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>point = (#x,#y) newPoint;</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>} catch
(DoesNotUnderstandException e) {</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>//Do the right thing</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>}</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>(new
Line(point,point)).vector();</p>

</div>




<p class=MsoNormal>then we can take advantage of the single message-check of
'newPoint' to know all the other messages involved with creating a line and
sending #vector to the line will succeed.<span style="mso-spacerun: yes">&nbsp;
</span>We now have a pretty good memory caused by explicitly stating what we
want to remember (require) about message-understanding throughout the flow of
the program.</p>




<p class=MsoNormal>Having one message-check is better than many, but what if I
want to get rid of that message check too?<span style="mso-spacerun:
yes">&nbsp;&nbsp; </span>Aren't there any other "buck consumers"?<span
style="mso-spacerun: yes">&nbsp; </span>There is one other case where the result
of an expression is guaranteed to respond to certain messages, object
construction.<span style="mso-spacerun: yes">&nbsp; </span>If we build a new
Point we know what messages it responds to, the methods Point implements.<span
style="mso-spacerun: yes">&nbsp; </span>The expression:</p>




<div style='mso-element:para-border-div;border:solid windowtext 1.5pt;
padding:1.0pt 1.0pt 1.0pt 1.0pt;mso-border-shadow:yes;margin-left:.25in;
margin-right:1.0in'>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>new Point(x,y);</p>

</div>




<p class=MsoNormal>is equivalent to:</p>




<div style='mso-element:para-border-div;border:solid windowtext 1.5pt;
padding:1.0pt 1.0pt 1.0pt 1.0pt;mso-border-shadow:yes;margin-left:.25in;
margin-right:1.0in'>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>(#x,#y,#r,#theta,#vectorFrom) new Point(x,y);</p>

</div>




<p class=MsoNormal>so we can finally get rid of our last message-check for our
example program:</p>




<div style='mso-element:para-border-div;border:solid windowtext 1.5pt;
padding:1.0pt 1.0pt 1.0pt 1.0pt;mso-border-shadow:yes;margin-left:.25in;
margin-right:1.0in'>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>(#x,#y) point = new
Point(x,y);</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>(new
Line(point,point)).vector();</p>

</div>




<p class=MsoNormal>Now it is completely verifiable at compile time that all
message sends will be successful (ignoring 'x' and 'y').<span
style="mso-spacerun: yes">&nbsp; </span>We have turned off the need for
Optimistic messaging for SmallJava for this particular example and now have a
completely pessimistic and compile-time verified program.<span
style="mso-spacerun: yes">&nbsp; </span></p>




<h3><a name="_Toc387781537">The Unmentionables</a></h3>




<p class=MsoNormal>There were several aspects unmentioned in the above
discussion of pessimistically verified message checking. What happens when we
get a 'null'?<span style="mso-spacerun: yes">&nbsp; </span>What are the return
values for the methods?<span style="mso-spacerun: yes">&nbsp; </span>How do we
know that the method implementing a message (by name) is semantically equivalent
to what we expect the method to do?<span style="mso-spacerun: yes">&nbsp;
</span>These I will address in future sections on 'null' explicitly and on
'interface' instead of 'message' based typing.<span style="mso-spacerun:
yes">&nbsp; </span>For the moment I will leave them unmentioned.</p>




<h3><a name="_Toc387781538">Where's the static typing?</a></h3>




<p class=MsoNormal>We have shown how we can make SmallJava pessimistic, but how
do we make it completely compile-time verified or "statically typed"?<span
style="mso-spacerun: yes">&nbsp; </span>If all our pessimistic message-checks
can be moved to the point of object construction then all of them can be
verified at compile-time.<span style="mso-spacerun: yes">&nbsp; </span>This would
be a statically message-checked program.<span style="mso-spacerun: yes">&nbsp;
</span>Is this possible?<span style="mso-spacerun: yes">&nbsp;
</span>Generally, no.<span style="mso-spacerun: yes">&nbsp; </span>At some
point we will have to hope that a particular object understands more messages
than we have been assured that it understands.<span style="mso-spacerun:
yes">&nbsp; </span>For example, if we have a keyed collection object:</p>




<div style='mso-element:para-border-div;border:solid windowtext 1.5pt;
padding:1.0pt 1.0pt 1.0pt 1.0pt;mso-border-shadow:yes;margin-left:.25in;
margin-right:1.0in'>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>class KeyedCollection {</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>atKey_put(key, value)
{...}</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>atKey(key) {...; return
value;}</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>}</p>

</div>




<p class=MsoNormal>Then what can we be sure about the object returned from
#atKey?<span style="mso-spacerun: yes">&nbsp; </span>We can't be sure of
anything.<span style="mso-spacerun: yes">&nbsp; </span>For example, in:</p>




<div style='mso-element:para-border-div;border:solid windowtext 1.5pt;
padding:1.0pt 1.0pt 1.0pt 1.0pt;mso-border-shadow:yes;margin-left:.25in;
margin-right:1.0in'>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>(#x,#y) inPoint = ...;</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>namesToPoints.atKey_put(&quot;test&quot;,inPoint);</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>outPoint =
namesToPoints.atKey(&quot;test&quot;);</p>

</div>




<p class=MsoNormal>We can't be sure that 'outPoint' is able to respond to
(#x,#y), so we will have to do a runtime message check to verify it.<span
style="mso-spacerun: yes">&nbsp; </span>We can still be pessimistic by checking
'output' before sending a message to it, but we can not do it statically.<span
style="mso-spacerun: yes">&nbsp; </span></p>




<p class=MsoNormal>Sure we can!<span style="mso-spacerun: yes">&nbsp; </span>We
can define a new class:</p>




<div style='mso-element:para-border-div;border:solid windowtext 1.5pt;
padding:1.0pt 1.0pt 1.0pt 1.0pt;mso-border-shadow:yes;margin-left:.25in;
margin-right:1.0in'>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>class KeyedCollectionOfPoints {</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>atKey_put(key, (#x,#y)
value) {...}</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>(#x,#y) atKey(key) {...;
return value;}</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>}</p>

</div>




<p class=MsoNormal>Well, that solves our problem but now we have added even
more information (or "noise") to our program.<span style="mso-spacerun:
yes">&nbsp; </span>We had to create a whole new class to support being able to
statically verify that a "collection of points" is really a
'CollectionOfPoints'.<span style="mso-spacerun: yes">&nbsp; </span>Also note
that a 'KeyedCollectionOfPoints' can not be just a "wrapper" of a
'KeyedCollection': We can not use a KeyedCollection to implement our
KeyedCollectionOfPoints because we would stilly have to do a runtime check to
convert the "atKey" to an "(#x,#y) atKey".<span style="mso-spacerun:
yes">&nbsp; </span>We have to completely rewrite the KeyedCollectionOfPoints
from scratch to have the new compile-time verifiable message-checks.<span
style="mso-spacerun: yes">&nbsp; </span>So much for code reuse.</p>




<p class=MsoNormal>A solution to all this extra effort is to have parameterized
classes that "effectively" (or actually) code-generate classes that are
compile-time verifiable for a given set of message constraints.<span
style="mso-spacerun: yes">&nbsp; </span>We can develop a "template" class:</p>




<div style='mso-element:para-border-div;border:solid windowtext 1.5pt;
padding:1.0pt 1.0pt 1.0pt 1.0pt;mso-border-shadow:yes;margin-left:.25in;
margin-right:1.0in'>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>class KeyedCollectionOf&lt;valueMessages&gt; {</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>atKey_put(key,
&lt;valueMessages&gt; value) {...}</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>&lt;valueMessages&gt;
atKey(key) {...; return value;}</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>}</p>

</div>




<p class=MsoNormal>And simply use it like so:</p>




<div style='mso-element:para-border-div;border:solid windowtext 1.5pt;
padding:1.0pt 1.0pt 1.0pt 1.0pt;mso-border-shadow:yes;margin-left:.25in;
margin-right:1.0in'>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>(#x,#y) inPoint = ...;</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>namesToPoints = new
KeyedCollectionOf&lt;(#x,#y)&gt;();</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>namesToPoints.atKey_put(&quot;test&quot;,inPoint);</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>outPoint =
namesToPoints.atKey(&quot;test&quot;);</p>

</div>




<p class=MsoNormal>So now we at least don't have to write a bunch of different
classes for every variation we need, we can let the compiler do it for us.<span
style="mso-spacerun: yes">&nbsp; </span>And then the compiler can statically
verify the messages.</p>




<h4><a name="_Toc387781539">Some final remarks about static typing</a></h4>




<p class=MsoNormal>One aspect to notice for the above classes is that they are
not compatible.<span style="mso-spacerun: yes">&nbsp; </span>A
KeyedCollectionOfPoints can not be used where you expect a KeyedCollection
because the method #atKey_put(,(#x,#y)) is more restrictive than #atKey_put(,).<span
style="mso-spacerun: yes">&nbsp; </span>A KeyedCollection can not be used where
you expect a KeyedCollectionOfPoints because the method #atKey() is more
lenient than #atKey()-&gt;(#x,#y).<span style="mso-spacerun: yes">&nbsp;
</span>The classes are completely incompatible and effectively unrelated except
for the design similarity.</p>




<p class=MsoNormal>The second remark is that Java doesn't support parameterized
classes and interferes with developing your own specialized versions of classes
because of weak interaction between types and polymorphism.<span
style="mso-spacerun: yes">&nbsp; </span>For example, even if you have your own
KeyedCollectionOfPoints, you can not develop a subclass of Enumeration that
will return a (#x,#y) point for #nextElement.<span style="mso-spacerun:
yes">&nbsp; </span>Java does not support covariant return types so even if you
defined a 'PointEnumeration' it must either not inherit from 'Enumeration' or
it has to return the same "type" as Enumeration returns, which knows nothing
about (#x,#y) of point.<span style="mso-spacerun: yes">&nbsp; </span>This will
be discussed again in a later section possibly titled "EiffelJava", but for now
we can say Java itself is incapable or poorly capable of making a program
compile-time verifiable.</p>




<p class=MsoNormal><span style="mso-spacerun: yes">&nbsp;</span>The final
remark is that all this static typing ignores 'null' values, which would fail
all the message-checks we have been applying and prevent the ability to
statically type a program.<span style="mso-spacerun: yes">&nbsp; </span>To make
that static typing work we will have to say what a 'null' means and how it
interacts with the message-checking or type system.<span style="mso-spacerun:
yes">&nbsp; </span>This will be discussed in the next posting.</p>




<h3><a name="_Toc387781540">Conclusion</a></h3>




<h4><a name="_Toc387781541">Comparing Optimistic and Pessimistic messaging</a></h4>




<p class=MsoNormal>What are the tradeoffs between optimistic and pessimistic
messaging now that we have shown both for SmallJava?<span style="mso-spacerun:
yes">&nbsp; </span></p>




<p class=MsoNormal>Optimistic messaging requires much less noise to accomplish
the same, if successful, result.<span style="mso-spacerun: yes">&nbsp;
</span>It is also far easier to change: if we decide to send a new message to a
'point' we can just send the message and know (or hope) that the object will
understand it.<span style="mso-spacerun: yes">&nbsp; </span>With pessimistic
messaging we have to explicitly say what messages we require an object to
understand. This caused us to put a lot more information into the program (much
of it "obvious") and means we have to update all this information if we decide to
send a new message to an object. (I will discuss alternative ways to declaring
what new messages can be understood in the section on interfaces.)<span
style="mso-spacerun: yes">&nbsp; </span>Overall, optimistic messaging is much
less painful and correct programs are still correct programs.</p>




<p class=MsoNormal><span style="mso-spacerun: yes">&nbsp;&nbsp; </span></p>




<p class=MsoNormal>Pessimistic messaging allows us to move message-checks
earlier in a program's execution and to consolidate multiple message-checks
into a single check.<span style="mso-spacerun: yes">&nbsp; </span>This allows
us to identify and respond to failed message-checks long before a program needs
to rely on those message checks.<span style="mso-spacerun: yes">&nbsp;
</span>In many cases these message-checks can be moved all the way to the point
of object construction, which allows them to be verified at compile-time.<span
style="mso-spacerun: yes">&nbsp; </span>If this were possible then we could be
surer of what our program does before execution verification.<span
style="mso-spacerun: yes">&nbsp; </span>We have made a good step forward if our
programs frequently have mistakes of expecting an object to respond to a
message that it doesn't understand.<span style="mso-spacerun: yes">&nbsp;
</span></p>




<p class=MsoNormal><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;
</span>Unfortunately complete compile-time checking is rarely possible because
of weak language support, 'null's, or program behavior more complex than the
capabilities of even a good language.<span style="mso-spacerun: yes">&nbsp;
</span>Compile-time type checking also significantly reduces the reusability of
classes: it requires generating new classes with all the proper "types" to be
used in a particular context.</p>




<p class=MsoNormal>All the extra information for pessimistic messaging provided
us with an additional form of documentation.<span style="mso-spacerun:
yes">&nbsp; </span>Besides having the name of a method, the name of its
parameters, and the context of the methods implementation (i.e. its class),
pessimistic messaging allows us to express the expected methods on the
parameters and the return value.<span style="mso-spacerun: yes">&nbsp;
</span>Whether this is valuable documentation or not depends on the quality of
expressiveness of the more core components: the method name, the parameter
names and the context.<span style="mso-spacerun: yes">&nbsp; </span>If these
are very descriptive and consistent through the whole application, then the
pessimistic information may not be at all useful.<span style="mso-spacerun:
yes">&nbsp; </span>The topic of documentation will be discussed in a later
section.</p>




<h4><a name="_Toc387781542">Alternatives to explicit pessimistic messaging</a></h4>




<p class=MsoNormal>There are other alternatives to explicitly declaring the
pessimistic message-checks.<span style="mso-spacerun: yes">&nbsp; </span>We
could have a program try to verify that the optimistic program will work
correctly using either no extra information or much less information than the
explicit pessimistic programs above.<span style="mso-spacerun: yes">&nbsp;
</span>This would provide us with all the benefits of both optimistic and
pessimistic messaging.<span style="mso-spacerun: yes">&nbsp; </span>It could
also generate the additional documentation that a pessimistic program can
provide.<span style="mso-spacerun: yes">&nbsp; </span>See [Brach+G 93][8] for a
starting reference point to these types of languages.<span style="mso-spacerun:
yes">&nbsp; </span>For this document I will ignore inference capabilities since
they are not available in Java, Smalltalk, and other "mainstream" OO languages.</p>




<h4><a name="_Toc387781543">Deciding on Optimistic vs. Pessimistic messaging</a></h4>




<p class=MsoNormal>SmallJava_0 supports optimistic messaging.<span
style="mso-spacerun: yes">&nbsp; </span>You can send a message to any object
and if the object understands the message (it has implemented a matching
method) it will respond.<span style="mso-spacerun: yes">&nbsp; </span>If not,
the object would throw a "DoesNotUnderstandException" that the caller can catch
and respond to.<span style="mso-spacerun: yes">&nbsp; </span>This is very clean
and simple, relying on the same exception handling abilities in the rest of
SmallJava.<span style="mso-spacerun: yes">&nbsp; </span>Optimistic messaging's
problems are that a program can only be verified by running it and that there
is less documentation of what is expected of a variable or parameter.</p>




<p class=MsoNormal>Should SmallJava_1 support pessimistic messaging: Should it
support the ability to check whether an object understands a message before
sending it to it?<span style="mso-spacerun: yes">&nbsp; </span>The answer would
seem to be an emphatic yes.<span style="mso-spacerun: yes">&nbsp; </span>The
only cost is the addition of the syntax "(#message,#message2,...)" that does a
message check or that requires the user of a variable or parameter to do a
message check.<span style="mso-spacerun: yes">&nbsp; </span>This is useful in
several ways:</p>




<p class=MsoNormal><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>It
allows a program to move the location of a message-check to the point where it
can better handle a failure</p>




<p class=MsoNormal><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>It
provides the possibility of compile-time verification.</p>




<p class=MsoNormal><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>It
provides the possibility of extra documentation (that the program will actually
use).</p>




<p class=MsoNormal>These all seem valuable enough to add them to SmallJava. </p>




<p class=MsoNormal>From Java and Smalltalk's point of view this is
uncontroversial: this capability is in both languages.<span
style="mso-spacerun: yes">&nbsp; </span>Java provides the "cast" operation and
typed variables that we will discuss in future sections.<span
style="mso-spacerun: yes">&nbsp; </span>Smalltalk provides the ability to ask
an object whether it #respondsTo: a message.<span style="mso-spacerun:
yes">&nbsp; </span>This returns a boolean instead of throwing an exception, but
the meaning is the same.<span style="mso-spacerun: yes">&nbsp; </span>Smalltalk
does not support an invariant on a variable [actually, some do or at least
document the invariant], but that seems a useful capability within the spirit
of commercial Smalltalk.<span style="mso-spacerun: yes">&nbsp; </span>So
pessimistic message verification is available in both languages and should be
available in SmallJava.</p>




<h4><a name="_Toc387781544">Requiring Pessimistic Checking</a></h4>




<p class=MsoNormal>Now for the big question: Should SmallJava_1 REQUIRE only
pessimistic message checking and abandon the optimistic message checking?<span
style="mso-spacerun: yes">&nbsp; </span>So far, the answer would have to be
no.<span style="mso-spacerun: yes">&nbsp; </span>In many cases the pessimistic
checking is not providing us with any gain because there is no advantage to
moving the message-check point, the checks are not compile-time verifiable, and
the invariant provide poor extra documentation.<span style="mso-spacerun:
yes">&nbsp; </span>But without the gain, there is no point in the pain: every
time we want an explicit message-check we have to add a lot of extra words to
our program and make sure all these message-checks are in agreement with each
other.</p>




<p class=MsoNormal>In future sections we will be discussing other language
features that may make pessimistic message checking more useful and less
painful.<span style="mso-spacerun: yes">&nbsp; </span>We will also be
discussing aspects that make pessimistic message checking less useful (e.g. for
'null's).<span style="mso-spacerun: yes">&nbsp; </span>After dealing with these
features and aspects we can revisit the question of whether pessimistic
checking is useful enough to be required.<span style="mso-spacerun: yes">&nbsp;
</span>For now, SmallJava_1 supports both.</p>




<h4><a name="_Toc387781545">Summary</a></h4>




<p class=MsoNormal>We defined and analyzed optimistic and pessimistic message
checking and found that they are both useful enough to include in SmallJava_1
and that neither is so useful as to warrant excluding the other.<span
style="mso-spacerun: yes">&nbsp; </span>Our change to SmallJava was the addition
of a message-check with syntax (#message1, #message2) and of a
message-requirement invariant which uses the same syntax.</p>




<p class=MsoNormal>---------------------------------------------------------------------</p>




<p class=EndNote>[1] The terminology and behavior is similar to database
transactions.</p>




<p class=EndNote>[2] I use "#foo" to label a message and "Class#foo" for a
method in a particular class.<span style="mso-spacerun: yes">&nbsp; </span>The
use of '#' is similar enough between both Smalltalk (where it indicates a
Symbol) and Java (where for Javadoc it indicates a method) to be the best choice.</p>




<p class=EndNote>[3] Or you could view it that Object defines all methods with
a default behavior of: "throw new DoesNotUnderstandException();"</p>




<p class=EndNote>[4] The database transaction terminology would be a
pessimistic "lock" on 'point'</p>




<p class=EndNote>[5] We might now want to call them "invariables"</p>




<p class=EndNote>[6] We have changed the contract with the caller, see [Meyer
97]</p>




<p class=EndNote>[7] DoesNotUnderstandException is a subclass of
RuntimeException, which explains why it does not have to be in a Throws clause.</p>




<p class=EndNote>[8] If anyone has a good collection of references for type
inferencing, I will add them to this.<span style="mso-spacerun:
yes">&nbsp;&nbsp; </span></p>




<h2><a name="_Toc387781546">Typing: Better support for pessimism</a></h2>




<p class=MsoNormal>SmallJava started with only optimistic messaging.<span
style="mso-spacerun: yes">&nbsp; </span>You could send a message to any object
and if the object did not have a corresponding method, a
"DoesNotUnderstandException" would be thrown.</p>




<p class=MsoNormal>We added pessimistic messaging capabilities to SmallJava_1
but we did not require all messaging to be pessimistic.<span
style="mso-spacerun: yes">&nbsp; </span>Pessimistic messaging allows us to move
and combine message-checks to a point earlier in the execution of a program.<span
style="mso-spacerun: yes">&nbsp; </span>This enables us to catch an error where
we are more capable of handling it and to avoid some errors completely by
compile time verification.<span style="mso-spacerun: yes">&nbsp;
</span>Pessimistic messaging also provides extra documentation of how a
variable is used and what a method does.</p>




<p class=MsoNormal><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>We
did not make SmallJava_1 require all messaging to be pessimistic because it was
not a big enough benefit in all cases to be worth the pain.<span
style="mso-spacerun: yes">&nbsp; </span>The pain is explicitly defining all the
messages we expect an object to understand in all contexts and then make sure
all these message-checks agree with each other so the compiler is happy.<span
style="mso-spacerun: yes">&nbsp; </span>This is not worth it in the cases where
there is no advantage to moving the message-check, the check can not be
compile-time verified, and the extra documentation is not meaningful.</p>




<p class=MsoNormal>Our decision might change if we had a better mechanism to
manage our pessimistic message-checks.<span style="mso-spacerun: yes">&nbsp;
</span>Either the mechanism has to be more convenient or it has to have added
benefits that make it more useful.<span style="mso-spacerun: yes">&nbsp;
</span>This chapter discusses making pessimistic behavior easier and more
useful by using messageGroups, a preliminary form of "Type".<span
style="mso-spacerun: yes">&nbsp; </span>If the pessimism becomes easier we may
make it the required behavior for SmallJava_2.<span style="mso-spacerun:
yes">&nbsp; </span>In any case we will have something close enough to Java like
static typing to be useful to compare.</p>




<h3><a name="_Toc387781547">Annoyances in pessimistic messaging</a></h3>




<p class=MsoNormal>One of the biggest annoyances of pessimism so far is
explicitly enumerating all the messages we expect of an object.<span
style="mso-spacerun: yes">&nbsp; </span>Even our simple example program [1] has
too much noise: </p>




<div style='mso-element:para-border-div;border:solid windowtext 1.5pt;
padding:1.0pt 1.0pt 1.0pt 1.0pt;mso-border-shadow:yes;margin-left:.25in;
margin-right:1.0in'>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>class PointClass {</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>// ...</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>vectorFrom((#x,#y) point) {</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>return new PointClass (x - point.x(), y - point.y());</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>}</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>}</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span></p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>class LineClass {</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>LineClass ((#x,#y,#vectorFrom) pointA, (#x,#y) pointB) {</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>this.pointA = pointA;</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>this.pointB = pointB;</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>}</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>vector() {</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>return pointA.vectorFrom(pointB);</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>}</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>(#x,#y,#vectorFrom) pointA;</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>(#x,#y) pointB;</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>}</p>

</div>




<p class=MsoNormal>It already has twelve individual message references combined
into five pessimistic invariants.<span style="mso-spacerun: yes">&nbsp;
</span>What's worse is that changes in PointClass#vectorFrom could cause all
the other invariants to have to change.<span style="mso-spacerun: yes">&nbsp;
</span>Assuming a point could have a name, then changing #vectorFrom to:</p>




<div style='mso-element:para-border-div;border:solid windowtext 1.5pt;
padding:1.0pt 1.0pt 1.0pt 1.0pt;mso-border-shadow:yes;margin-left:.25in;
margin-right:1.0in'>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>vectorFrom((#x,#y,#name) point) {</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>return new PointClass(name()+point.name(), x - point.x(), y -
point.y());</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>}</p>

</div>




<p class=MsoNormal>will force all the other invariants to be updated to include
#name also or the compile time verification will complain.</p>




<h3><a name="_Toc387781548">Combining messages into messageGroups</a></h3>




<p class=MsoNormal>If we could define a larger unit of granularity that
contains multiple messages, a messageGroup[2], we might have an easier
time.<span style="mso-spacerun: yes">&nbsp; </span>Let's try the following
simple syntax:</p>




<div style='mso-element:para-border-div;border:solid windowtext 1.5pt;
padding:1.0pt 1.0pt 1.0pt 1.0pt;mso-border-shadow:yes;margin-left:.25in;
margin-right:1.0in'>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>messageGroup #Xy = (#x, #y);</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>messageGroup #Point = (#Xy, #vectorFrom);</p>

</div>




<p class=MsoNormal>where mentioning a messageGroup is just like mentioning the
messageGroup's messages explicitly.<span style="mso-spacerun: yes">&nbsp;
</span>Message groups are compared by value: two message groups are equal if
they have the same messages in them after expansion.<span style="mso-spacerun:
yes">&nbsp; </span>Our previous pessimistic message checks and invariants
become inline, unnamed message groups.</p>




<p class=MsoNormal>Using these messageGroups, our program becomes:</p>




<div style='mso-element:para-border-div;border:solid windowtext 1.5pt;
padding:1.0pt 1.0pt 1.0pt 1.0pt;mso-border-shadow:yes;margin-left:.25in;
margin-right:1.0in'>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>class PointClass {</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>// ...</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>vectorFrom((#Xy) point)
{</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>return new PointClass(x - point.x(), y - point.y());</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>}</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>// ...</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>}</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span></p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>class LineClass {</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>LineClass ((#Point)
pointA, (#Xy) pointB) {</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>this.pointA = pointA;</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>this.pointB = pointB;</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>}</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span></p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>vector() {</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>return pointA.vectorFrom(pointB);</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>}</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span></p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>(#Point) pointA;</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>(#Xy) pointB;</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>}</p>

</div>




<p class=MsoNormal>Which now has only two types of message checks in five
invariants.<span style="mso-spacerun: yes">&nbsp; </span>This is a little
simpler, but what about adding #name again?<span style="mso-spacerun:
yes">&nbsp; </span>We can either mention it explicitly as before:</p>




<div style='mso-element:para-border-div;border:solid windowtext 1.5pt;
padding:1.0pt 1.0pt 1.0pt 1.0pt;mso-border-shadow:yes;margin-left:.25in;
margin-right:1.0in'>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>vectorFrom((#Xy,#name)
point) //...</p>

</div>




<p class=MsoNormal>which would cause all the callers to change their invariants
or we can modify our #Xy message group to include #name:</p>




<div style='mso-element:para-border-div;border:solid windowtext 1.5pt;
padding:1.0pt 1.0pt 1.0pt 1.0pt;mso-border-shadow:yes;margin-left:.25in;
margin-right:1.0in'>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>messageGroup #Xy = (#x,
#y, #name);</p>

</div>




<p class=MsoNormal>That is certainly simple. It also feels a bit
disingenuous.<span style="mso-spacerun: yes">&nbsp; </span>We named the group
#Xy for a reason: all we required from the object is that it support #x and
#y.<span style="mso-spacerun: yes">&nbsp; </span>To sneak an extra, unrelated
message into the group just because it is convenient does not seem appropriate
and certainly would confuse the reader of our program.<span
style="mso-spacerun: yes">&nbsp; </span></p>




<p class=MsoNormal>If we don't modify #Xy we can still modify #Point:</p>




<div style='mso-element:para-border-div;border:solid windowtext 1.5pt;
padding:1.0pt 1.0pt 1.0pt 1.0pt;mso-border-shadow:yes;margin-left:.25in;
margin-right:1.0in'>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>messageGroup #Xy = (#x, #y);</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>messageGroup #Point = (#Xy, #vectorFrom, #name);</p>

</div>




<p class=MsoNormal>and </p>




<div style='mso-element:para-border-div;border:solid windowtext 1.5pt;
padding:1.0pt 1.0pt 1.0pt 1.0pt;mso-border-shadow:yes;margin-left:.25in;
margin-right:1.0in'>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>vectorFrom((#Xy,#name) point) //...</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>class Line {</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>LineClass((#Point)
pointA, (#Xy,#name) pointB) //...</p>

</div>




<p class=MsoNormal>Now we only have to change three invariants instead of
five.<span style="mso-spacerun: yes">&nbsp; </span>But why could we modify
#Point if we couldn't modify #Xy?<span style="mso-spacerun: yes">&nbsp;
</span>Just because it had a different name?<span style="mso-spacerun:
yes">&nbsp; </span>Well, yes.</p>




<h3><a name="_Toc387781549">Types</a></h3>




<p class=MsoNormal>The messageGroup named #Point represents a "Type", a
meaningful grouping of objects that provide the same interface.<span
style="mso-spacerun: yes">&nbsp; </span>We can include the ability to respond
to #name as part of the capabilities of a #Point.<span style="mso-spacerun:
yes">&nbsp; </span>For the messageGroup named #Xy we were just providing a
"shortcut" name for several messages without any fuller or independent logical
meaning.</p>




<p class=MsoNormal>So why don't we just throw away #Xy and use just
#Point?<span style="mso-spacerun: yes">&nbsp; </span>This would give us:</p>




<div style='mso-element:para-border-div;border:solid windowtext 1.5pt;
padding:1.0pt 1.0pt 1.0pt 1.0pt;mso-border-shadow:yes;margin-left:.25in;
margin-right:1.0in'>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>messageGroup #Point = (#x, #y , #vectorFrom);</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span></p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>class PointClass {</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>// ...</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>vectorFrom((#Point) point)
{</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>return new PointClass(x - point.x(), y - point.y());</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>}</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>// ...</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>}</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span></p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>class LineClass {</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>LineClass ((#Point)
pointA, (#Point) pointB) {</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>this.pointA = pointA;</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>this.pointB = pointB;</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;</span>}</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span></p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>vector() {</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>return pointA.vectorFrom(pointB);</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>}</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span></p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>(#Point) pointA;</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>(#Point) pointB;</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>}</p>

</div>




<p class=MsoNormal>Now if we add #name as a capability because of:</p>




<div style='mso-element:para-border-div;border:solid windowtext 1.5pt;
padding:1.0pt 1.0pt 1.0pt 1.0pt;mso-border-shadow:yes;margin-left:.25in;
margin-right:1.0in'>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>vectorFrom((#Point)
point) {</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>return new PointClass(point.name(),x - point.x(), y - point.y());</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>}</p>

</div>




<p class=MsoNormal>we can just add it in one place</p>




<div style='mso-element:para-border-div;border:solid windowtext 1.5pt;
padding:1.0pt 1.0pt 1.0pt 1.0pt;mso-border-shadow:yes;margin-left:.25in;
margin-right:1.0in'>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>messageGroup #Point = (#x, #y , #name,
#vectorFrom);</p>

</div>




<p class=MsoNormal>and we don't have to worry about changing anything
else.<span style="mso-spacerun: yes">&nbsp; </span>Life is easy.</p>




<h4><a name="_Toc387781550">Excessively Restrictive Typing</a></h4>




<p class=MsoNormal>Unfortunately, what we have just done has a large negative
impact.<span style="mso-spacerun: yes">&nbsp; </span>We just required that an
object must support all of (#x,#y,#vectorFrom,#name) to be acceptable as a
pointB in our LineClass.<span style="mso-spacerun: yes">&nbsp; </span>But that
is not true.<span style="mso-spacerun: yes">&nbsp; </span>We only need the
object to support (#x,#y,#name).<span style="mso-spacerun: yes">&nbsp;
</span>Similarly we only need pointA to understand (#x,#y,#vectorFrom).<span
style="mso-spacerun: yes">&nbsp; </span>We accidentally became excessively
restrictive of acceptable objects through our simplification.</p>




<p class=MsoNormal>So what?<span style="mso-spacerun: yes">&nbsp; </span>We
were planning on using only PointClasses anyway, and they support all of the
#Point messages anyway.<span style="mso-spacerun: yes">&nbsp; </span></p>




<p class=MsoNormal>Unfortunately that is a sign of being "near-sighted" in both
time and development scope.<span style="mso-spacerun: yes">&nbsp; </span>As the
system grows I could want to use an independently developed library of classes
that includes a 'Point' which does not have a method #name.<span
style="mso-spacerun: yes">&nbsp; </span>But I can not.<span
style="mso-spacerun: yes">&nbsp; </span>Lines require that a Point understand
#name even when it never sends a #name message to them.</p>




<p class=MsoNormal><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;
</span>Over time I could also want to reuse lines to handle some UI points
which are floating point and also have names, but I could not because my #Line
uses #Points and #Point says it only works with #Integers instead of objects
that respond to just (#+, #-, #*).</p>




<p class=MsoNormal>There are words for this type of program: inflexible,
limited, not reusable, and "bad".</p>




<p class=MsoNormal>If a language feature supports easily doing the wrong thing
in the short term it is very hard to keep track of the larger picture and we
have to very consciously strive for it.<span style="mso-spacerun: yes">&nbsp;
</span>The new messageGroups are one of these features so we have to use them
with care.</p>




<p class=MsoNormal>The principal problem preventing us from more exact and
flexible typing is inertia.<span style="mso-spacerun: yes">&nbsp; </span>We do
not want to change five different occurrences of verification checks to include
#name and #vectorFrom.<span style="mso-spacerun: yes">&nbsp; </span>And then do
the same thing again when some objects need to respond to #foo.<span
style="mso-spacerun: yes">&nbsp; </span>And then change them back when we get
rid of #foo.<span style="mso-spacerun: yes">&nbsp; </span>We are just lazy and
want as little of the program to change as possible.</p>




<p class=MsoNormal>There are words for this type of program too: stable,
maintainable, and "good".</p>




<h4><a name="_Toc387781551">Preventing Excessive Typing</a></h4>




<p class=MsoNormal>So how do we get the "good" with as little of the "bad" as
possible?<span style="mso-spacerun: yes">&nbsp; </span>The main way is to think
harder about our object type models.<span style="mso-spacerun: yes">&nbsp;
</span>Do we really want all #Points to respond to #name?<span
style="mso-spacerun: yes">&nbsp; </span>Or do we have a special
#NamedPoint?<span style="mso-spacerun: yes">&nbsp; </span>Is the protocol #Xy
useful in general so we should still include it and try to use it when all we
want are #x and #y?<span style="mso-spacerun: yes">&nbsp; </span>If we produce
a good type model we will probably get the best maintainability and reusability
possible[3]. </p>




<p class=MsoNormal>Although our example is too small to really see much
difference, we might choose the following as the best description of our
domain:</p>




<div style='mso-element:para-border-div;border:solid windowtext 1.5pt;
padding:1.0pt 1.0pt 1.0pt 1.0pt;mso-border-shadow:yes;margin-left:.25in;
margin-right:1.0in'>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>messageGroup #Xy = (#x, #y);</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>messageGroup #Point = (#Xy , #vectorFrom(#Xy),
...other stuff...);</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>messageGroup #Named = (#name);</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>messageGroup #NamedPoint = (#Point , #Named);</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>messageGroup #Line = (#vector);</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span></p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>class PointClass {</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>// ...</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>vectorFrom((#Xy) point)
{</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>return new PointClass(x - point.x(), y - point.y());</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>}</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>// ...</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>}</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span></p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>class LineClass {</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>LineClass ((#Point)
pointA, (#Xy) pointB) {</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>this.pointA = pointA;</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>this.pointB = pointB;</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>}</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span></p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>vector() {</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>return pointA.vectorFrom(pointB);</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>}</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span></p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>(#Point) pointA;</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>(#Xy) pointB;</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>}</p>

</div>




<p class=MsoNormal>If we later decide to use #names with our lines then we can
either change the invariant on pointA (to either "(#Point,#Named)"or
"(#NamedPoint)") or we can decide that we really have a new #NamedLine which
would have a new NamedLineClass to implement it.<span style="mso-spacerun:
yes">&nbsp; </span>We have reduced the excessive restrictions in exchange for
what looks like more work (more Types) but should be more stable and less work
over time.</p>




<h4><a name="_Toc387781552">Types and Classes</a></h4>




<p class=MsoNormal>MessageGroups as simple types make the differences between
classes and types very visible.<span style="mso-spacerun: yes">&nbsp; </span>A
messageGroup is an alias for a set of messages.<span style="mso-spacerun:
yes">&nbsp; </span>This documents a concept, the type, and allows pessimistic
verification of that type.<span style="mso-spacerun: yes">&nbsp; </span>A class
describes an implementation of messages through methods (behavior) and instance
variables (state) so the program can actually build and execute objects.<span
style="mso-spacerun: yes">&nbsp; </span>Types classify and verify.<span
style="mso-spacerun: yes">&nbsp; </span>Classes implement.</p>




<h3><a name="_Toc387781553">Reviewing the variations of Typing</a></h3>




<p class=MsoNormal>We now have three variations of typing, optimistic,
message-level pessimistic, and type-based pessimistic.<span
style="mso-spacerun: yes">&nbsp; </span>These are all different in terms of
typing precision.</p>




<p class=MsoNormal>Optimistic messaging is exactly typed.<span
style="mso-spacerun: yes">&nbsp; </span>The only messages ever required of an
object are the ones actually sent to the object.<span style="mso-spacerun:
yes">&nbsp; </span>It is even exact in terms of different program executions
and flows.<span style="mso-spacerun: yes">&nbsp; </span>During one program
execution a message might not be required, but in the next it would be.<span
style="mso-spacerun: yes">&nbsp; </span></p>




<p class=MsoNormal><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;
</span>The problem with optimistic messaging is that these types can only be
verified by program execution or through a separate inference and pessimistic
checking process.</p>




<p class=MsoNormal>Pessimistic messaging as described in SmallJava_1 is likely
to be almost exactly typed.<span style="mso-spacerun: yes">&nbsp; </span>Since
each message that should be verified must be explicitly listed it is unlikely
that the messages will become excessive except through lack of maintenance.<span
style="mso-spacerun: yes">&nbsp; </span>Another source of inexactness is that
different program flows may have different requirements but the pessimistic
checks will union all the program flows.</p>




<p class=MsoNormal><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;
</span>Pessimistic messaging was a useful addition to SmallJava_1 because it
could help detect errors earlier in program execution or possibly at compile-time.<span
style="mso-spacerun: yes">&nbsp; </span>It could not completely replace
optimistic messaging because it was too much work in the cases where there was
little or no gain.</p>




<p class=MsoNormal>Pessimistic typing is likely to be excessively
restrictive.<span style="mso-spacerun: yes">&nbsp; </span>Pessimistic typing
has messageGroups that can be used to collect messages into Types.<span
style="mso-spacerun: yes">&nbsp; </span>This provides more power for using
pessimistic verification: We can more easily express message requirements with
one or two groups instead of many individual messages and we can reduce program
maintenance by changing a single group instead of many verifications.<span
style="mso-spacerun: yes">&nbsp; </span></p>




<p class=MsoNormal><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;
</span>Unfortunately these messageGroups lead to combining verifications that
are not actually identical and restricting an object more than is needed.<span
style="mso-spacerun: yes">&nbsp; </span>This is not inherently required for
messageGroups, but is the trade-off for increased maintainability.<span
style="mso-spacerun: yes">&nbsp; </span>It is up to the software developer to
consciously pick the designs that are descriptive, maintainable, and do not
cause excessive restriction.<span style="mso-spacerun: yes">&nbsp; </span></p>




<h3><a name="_Toc387781554">SmallJava_2 and Pessimistic Typing</a></h3>




<p class=MsoNormal>For SmallJava_2 we have to decide whether to use the
pessimistic typing capabilities described above and ultimately whether to start
mandating pessimistic behavior.</p>




<p class=MsoNormal>Should SmallJava_2 support messageGroups and pessimistic
typing?<span style="mso-spacerun: yes">&nbsp; </span>Yes.<span
style="mso-spacerun: yes">&nbsp; </span>MessageGroups make pessimistic behavior
easier and more functional while costing very little.<span style="mso-spacerun:
yes">&nbsp; </span>The main language cost is an addition in syntax for defining
messageGroups.<span style="mso-spacerun: yes">&nbsp; </span>Other than that, a
messageGroup works just like an alias for a collection of messages.<span
style="mso-spacerun: yes">&nbsp; </span>It is a simple to understand addition
and is consistent with the behavior of SmallJava_1.<span style="mso-spacerun:
yes">&nbsp; </span>The other main cost is that it can encourage less flexible
software, but it is only a mild encouragement and it is completely under the
control of the developer.</p>




<p class=MsoNormal>Should we REQUIRE pessimistic behavior now that we have
better language support for it?<span style="mso-spacerun: yes">&nbsp; </span>I
will say "no" to defer until covering "null" values, but we are close to making
that decision.<span style="mso-spacerun: yes">&nbsp; </span>For the moment I
will compare optimistic and pessimistic behavior in SmallJava_2 and discuss
choosing between them.</p>




<h3><a name="_Toc387781555">Comparing Optimism and Pessimism</a></h3>




<p class=MsoNormal>We now have a much more useful and interesting pessimistic
mechanism.<span style="mso-spacerun: yes">&nbsp; </span>We can now retouch
bases with our original completely optimistic SmallJava PointClass and see how
our pessimistic abilities change it.</p>




<p class=MsoNormal>The original SmallJava_0 code was:</p>




<div style='mso-element:para-border-div;border:solid windowtext 1.5pt;
padding:1.0pt 1.0pt 1.0pt 1.0pt;mso-border-shadow:yes;margin-left:.25in;
margin-right:1.0in'>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>class PointClass {</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>PointClass (x, y) {</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>this.x = x;</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>this.y = y;</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>}</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span></p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>x() {return x;}</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>//...</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span></p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>vectorFrom(point) {</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>return new PointClass (x - point.x(), y - point.y());</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>}</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span></p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>x,y;</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>}</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span></p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>class LineClass {</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>LineClass(pointA,
pointB) {</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>this.pointA = pointA;</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>this.pointB = pointB;</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>}</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span></p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>vector() {</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>return pointA.vectorFrom(pointB);</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;</span>}</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span></p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>pointA, pointB;</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>}</p>

</div>




<p class=MsoNormal>A SmallJava_2 version with fully pessimistic typing would
be:</p>




<div style='mso-element:para-border-div;border:solid windowtext 1.5pt;
padding:1.0pt 1.0pt 1.0pt 1.0pt;mso-border-shadow:yes;margin-left:.25in;
margin-right:1.0in'>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>messageGroup #Xy = (#x,#y);</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>messageGroup #Point =
(#Xy,#r,#theta,#vectorFrom);</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>messageGroup #Number = (#^,#-,...);</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>messageGroup #Line = (#vector);</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span></p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>class (#Point) PointClass {</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>PointClass((#Number)
x,(#Number) y) {</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>this.x = x;</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>this.y = y;</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>}</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span></p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>(#Number) x() {return
x;}</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>//...</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span></p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>(#Point)
vectorFrom((#Xy) point) {</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style='mso-tab-count:1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>return
new PointClass (x - point.x(), y - point.y());</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>}</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span></p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>(#Number) x,y;</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>}</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span></p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>class (#Line) LineClass {</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>LineClass((#Point)
pointA, (#Point) pointB) {</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>this.pointA = pointA;</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>this.pointB = pointB;</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>}</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span></p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>(#Point) vector() {</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>return pointA.vectorFrom(pointB);</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>}</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span></p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>(#Point) pointA;</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>(#Point) pointB;</p>

<p class=CodeExample style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.75in;margin-bottom:.0001pt'><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp; </span>}</p>

</div>




<p class=MsoNormal>What are the differences between these two programs?<span
style="mso-spacerun: yes">&nbsp; </span></p>




<p class=MsoNormal>In terms of correct program execution, nothing.<span
style="mso-spacerun: yes">&nbsp; </span>The optimistic and pessimistic programs
both send the same messages and both get the same objects back as results.<span
style="mso-spacerun: yes">&nbsp; </span></p>




<p class=MsoNormal>In the case of incorrect calls to Point and Line, the
pessimistic version will throw an exception earlier or quite possibly notify
the developer at compile time.<span style="mso-spacerun: yes">&nbsp; </span>The
optimistic version will throw an exception at run time.</p>




<p class=MsoNormal>The optimistic program is less "noisy" and is easier to
change.<span style="mso-spacerun: yes">&nbsp; </span>We can simply add a new
method to PointClass and use it in LineClass.<span style="mso-spacerun:
yes">&nbsp; </span>But we can also accidentally send a new message without
defining the method in PointClass.<span style="mso-spacerun: yes">&nbsp;
</span>This will cause a runtime error if and when the program sends this
message.<span style="mso-spacerun: yes">&nbsp; </span>It is best if this is
sooner rather than later.</p>




<p class=MsoNormal><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;
</span>The pessimistic program is harder to change but will catch more errors
at compile time.<span style="mso-spacerun: yes">&nbsp; </span>If we add a new
method to PointClass we also need to add it to #Point before we can use it in
LineClass.<span style="mso-spacerun: yes">&nbsp; </span>If we forget to add the
message to #Point we will get a compile time error when we try to call the new
message.<span style="mso-spacerun: yes">&nbsp; </span>If we forget to implement
the method in PointClass we will get a compile time error saying PointClass
does not implement all of the #Point type.</p>




<p class=MsoNormal>The pessimistic program has more description of its
requirements and behavior.<span style="mso-spacerun: yes">&nbsp; </span>We can
study the messageGroups to see what types are important and what messages these
types support.<span style="mso-spacerun: yes">&nbsp; </span>This is completely
separate from the actual Class implementations.<span style="mso-spacerun:
yes">&nbsp; </span>Although an optimistic program could also provide this
documentation there is no encouragement (to put compiler errors in the most
positive light) to keep the documentation up to date.<span style="mso-spacerun:
yes">&nbsp; </span></p>




<p class=MsoNormal>The pessimistic program is less flexible.<span
style="mso-spacerun: yes">&nbsp; </span>We can only use #Points in our
LineClass.<span style="mso-spacerun: yes">&nbsp; </span>We can't use another
type of point that only understand #x and #y because #Point requires #r and #theta
too (even though LineClass may never need #r and #theta).<span
style="mso-spacerun: yes">&nbsp; </span>You should also note the comment in the
next section.</p>




<h4><a name="_Toc387781556">Comments on Reality</a></h4>




<p class=MsoNormal>Unfortunately the type behavior in SmallJava_2 is more
"ideal" and flexible than what most statically typed languages support,
including Java.<span style="mso-spacerun: yes">&nbsp; </span>For example,
instead of message based verification with types as message aggregates, most
statically typed languages use named-type based verification.<span
style="mso-spacerun: yes">&nbsp; </span>For these languages an object can only
pass through a type-check if its class specifically "implements" the named
type.<span style="mso-spacerun: yes">&nbsp; </span>You can not use a third
party PointClass that supports all the #Point messages with LineClass unless it
actually specifically mentions our #Point type.<span style="mso-spacerun:
yes">&nbsp; </span>This is not too likely.<span style="mso-spacerun:
yes">&nbsp; </span>This language "feature" severely punishes reusability for
pessimistic typing.<span style="mso-spacerun: yes">&nbsp; </span>This I will
address in a future chapter when we start bringing some of the idealizations of
SmallJava down to the realities of Java.</p>




<p class=MsoNormal><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;
</span>Although this document is meant to describe the differences between
Smalltalk and Java, I though it was unfair to discuss a language feature only
in the context of a weak version.<span style="mso-spacerun: yes">&nbsp;
</span>In many cases Java is simply missing features which can be discussed as
add-ins.<span style="mso-spacerun: yes">&nbsp; </span>But in other cases Java
has a poor implementation of a language feature that I would rather describe
ideally and then explain how Java parts from that ideal.<span
style="mso-spacerun: yes">&nbsp; </span>Pessimistic type checking is one of
those features.</p>




<h4><a name="_Toc387781557">Environments makes a difference</a></h4>




<p class=MsoNormal>Overall, the above programs are very similar, but coding
them will probably feel very different.<span style="mso-spacerun: yes">&nbsp;
</span>Besides language features this will be because of the development
environments and compiling technology associated with each.<span
style="mso-spacerun: yes">&nbsp; </span>Generally optimistic languages have
much more interactive development environments, so programs feel "directly manipulated"
and grown.<span style="mso-spacerun: yes">&nbsp; </span>Generally pessimistic
language development environments have a specify, implement, and verify
process.<span style="mso-spacerun: yes">&nbsp; </span></p>




<p class=MsoNormal><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;
</span>Although language features have a significant impact on the development
environment I will not consider that as part of SmallJava feature
evaluation.<span style="mso-spacerun: yes">&nbsp; </span>This environment
difference is becoming smaller[4] and comparing environments is beyond the
scope of this document. </p>




<h3><a name="_Toc387781558">Choosing</a></h3>




<p class=MsoNormal>Choosing between optimistic and pessimistic behavior in the
SmallJava language will be hard because they each have tradeoffs.<span
style="mso-spacerun: yes">&nbsp; </span>For most of the tradeoffs we would like
a language that allows you to choose which approach to take at any point.<span
style="mso-spacerun: yes">&nbsp; </span>If you want to document a class more
fully, add and use types.<span style="mso-spacerun: yes">&nbsp; </span>If you
want to be more pessimistic add some pessimistic checks and invariants.<span
style="mso-spacerun: yes">&nbsp; </span>Generally as a subsystem matures it can
and will become more pessimistic so people can understand and rely on its
behavior.</p>




<p class=MsoNormal>The one tradeoff that is hard to swallow is the diminished
flexibility and reusability of an excessively typed pessimistic program.<span
style="mso-spacerun: yes">&nbsp; </span>It is a severe hindrance if a language
or program prevents objects from being useable in appropriate circumstance
solely because of pessimistic typing.<span style="mso-spacerun: yes">&nbsp;
</span>We will have to spend more time recoding (and debugging and documenting)
identical functionality to support different pessimistic variations of the
identical optimistic program.<span style="mso-spacerun: yes">&nbsp; </span>This
is by far worse in named-type verification languages (of which Java is a
member).</p>




<p class=MsoNormal>But no choosing yet, we must first cover "nothing".</p>




<p class=MsoNormal>---------------------------------------------------------------------</p>




<p class=MsoNormal>[1] Note the change to suffixing with "Class", this is to
make discussions about types clearer later on.<span style="mso-spacerun:
yes">&nbsp; </span>It also happens to be my naming convention for Java
code.<span style="mso-spacerun: yes">&nbsp; </span>See [Fussell-1] </p>




<p class=MsoNormal>[2] I use the term messageGroup in this chapter because it
is descriptive and it does not bring in currently unwanted connotations that
other terms like interfaces or protocols due.</p>




<p class=MsoNormal>[3] Different project goals will adjust this too.<span
style="mso-spacerun: yes">&nbsp; </span>Prototypes frequently care more about
speed then either of these criteria.<span style="mso-spacerun: yes">&nbsp;
</span>Larger projects and frameworks tend to care more for reusability than
other types of projects would.</p>




<p class=MsoNormal>[4] For example, see the IBM VisualAge for Java beta
(http://www.software.ibm.com/ad/vajava), which is a (currently immature)
version of one of the best Smalltalk development environments.</p>




<div style='mso-element:para-border-div;border:none;border-bottom:solid windowtext 1.5pt;
padding:0in 0in 1.0pt 0in'>

<h1 style='margin-top:0in'><a name="_Toc384923228"></a><a name="_Toc387781559"><span
style='mso-bookmark:_Toc384923228'>References</span></a></h1>

</div>




<table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0
 style='border-collapse:collapse;mso-table-layout-alt:fixed;mso-padding-alt:
 0in 5.4pt 0in 5.4pt'>
 <tr>
  <td width=113 valign=top style='width:113.4pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal align=right style='margin-top:6.0pt;text-align:right'><b
  style='mso-bidi-font-weight:normal'>Brach+G 93<o:p></o:p></b></p>
  </td>
  <td width=373 valign=top style='width:372.6pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:6.0pt;margin-right:0in;margin-bottom:
  0in;margin-left:30.6pt;margin-bottom:.0001pt;text-indent:-30.6pt'>Gilad
  Bracha and David Griswold. "Stongtalk: Typechecking Smalltalk in a Production
  Environment" in <i style='mso-bidi-font-style:normal'>OOPSLA 1993 Conference
  Proceedings</i>.<span style="mso-spacerun: yes">&nbsp; </span>Addison-Wesley,
  Reading, MA, 1993.</p>
  </td>
 </tr>
 <tr>
  <td width=113 valign=top style='width:113.4pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal align=right style='margin-top:6.0pt;text-align:right'><b
  style='mso-bidi-font-weight:normal'><span style="mso-spacerun:
  yes">&nbsp;</span>Budd 87<o:p></o:p></b></p>
  </td>
  <td width=373 valign=top style='width:372.6pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:6.0pt;margin-right:0in;margin-bottom:
  0in;margin-left:30.6pt;margin-bottom:.0001pt;text-indent:-30.6pt'>Timothy
  Budd.<span style="mso-spacerun: yes">&nbsp; </span><i style='mso-bidi-font-style:
  normal'>A Little Smalltalk</i>.<span style="mso-spacerun: yes">&nbsp;
  </span>Addison-Wesley, Reading MA, 1987.</p>
  </td>
 </tr>
 <tr>
  <td width=113 valign=top style='width:113.4pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal align=right style='margin-top:6.0pt;text-align:right'><b
  style='mso-bidi-font-weight:normal'>Fussell-1<o:p></o:p></b></p>
  </td>
  <td width=373 valign=top style='width:372.6pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:6.0pt;margin-right:0in;margin-bottom:
  0in;margin-left:30.6pt;margin-bottom:.0001pt;text-indent:-30.6pt'>Mark L.
  Fussell. "Java Development Standards" <span class=Html1><span
  style='display:none;mso-hide:all'>&lt;a
  href="http://www.chimu.com/publications/javaStandards/"&gt;</span>http://www.chimu.com/publications/javaStandards/<span
  style='display:none;mso-hide:all'>&lt;/a&gt;</span></span></p>
  </td>
 </tr>
 <tr>
  <td width=113 valign=top style='width:113.4pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal align=right style='margin-top:6.0pt;text-align:right'><b
  style='mso-bidi-font-weight:normal'>Fussell-2<o:p></o:p></b></p>
  </td>
  <td width=373 valign=top style='width:372.6pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:6.0pt;margin-right:0in;margin-bottom:
  0in;margin-left:30.6pt;margin-bottom:.0001pt;text-indent:-30.6pt'>Mark L.
  Fussell. "Java-Smalltalk Syntax comparison" <span class=Html1><span
  style='display:none;mso-hide:all'>&lt;a href="</span></span><span
  style='display:none;mso-hide:all'>http://www.chimu.com/publications/javaSmalltalkSyntax.html/
  <span class=Html1>"&gt;</span></span>http://www.chimu.com/publications/javaSmalltalkSyntax.html<span
  class=Html1>/<span style='display:none;mso-hide:all'>&lt;/a&gt;</span></span>
  </p>
  </td>
 </tr>
 <tr>
  <td width=113 valign=top style='width:113.4pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal align=right style='margin-top:6.0pt;text-align:right'><b
  style='mso-bidi-font-weight:normal'>Goldberg+R 83<o:p></o:p></b></p>
  </td>
  <td width=373 valign=top style='width:372.6pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:6.0pt;margin-right:0in;margin-bottom:
  0in;margin-left:30.6pt;margin-bottom:.0001pt;text-indent:-30.6pt'>Adele
  Goldberg and David Robson.<span style="mso-spacerun: yes">&nbsp; </span><i
  style='mso-bidi-font-style:normal'>Smalltalk-80: The Language and its
  Implementation</i>.<span style="mso-spacerun: yes">&nbsp;
  </span>Addison-Wesley, Reading, MA, 1983.</p>
  </td>
 </tr>
 <tr>
  <td width=113 valign=top style='width:113.4pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal align=right style='margin-top:6.0pt;text-align:right'><b
  style='mso-bidi-font-weight:normal'>Gosling+JS 96<o:p></o:p></b></p>
  </td>
  <td width=373 valign=top style='width:372.6pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:6.0pt;margin-right:0in;margin-bottom:
  0in;margin-left:30.6pt;margin-bottom:.0001pt;text-indent:-30.6pt'>James
  Gosling, Bill Joy, Guy Steele.<span style="mso-spacerun: yes">&nbsp; </span><i
  style='mso-bidi-font-style:normal'>The Java<sup>TM</sup> Language
  Specification</i>.<span style="mso-spacerun: yes">&nbsp;
  </span>Addison-Wesley, Reading, MA, 1996.</p>
  </td>
 </tr>
 <tr style='mso-yfti-lastrow:yes'>
  <td width=113 valign=top style='width:113.4pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal align=right style='margin-top:6.0pt;text-align:right'><b
  style='mso-bidi-font-weight:normal'>Meyer 97<o:p></o:p></b></p>
  </td>
  <td width=373 valign=top style='width:372.6pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='margin-top:6.0pt;margin-right:0in;margin-bottom:
  0in;margin-left:30.6pt;margin-bottom:.0001pt;text-indent:-30.6pt'>Bertrand
  Meyer. <i style='mso-bidi-font-style:normal'>Object Oriented Software
  Construction, 2nd Edition</i>.<span style="mso-spacerun: yes">&nbsp;
  </span>Prentice-Hall, Englewood Cliffs, NJ, 1997.</p>
  </td>
 </tr>
</table>


<p></div></p>
]]></content>
  </entry>
  
</feed>
