<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: RubyShoes | Polyglot]]></title>
  <link href="http://markfussell.emenar.com/blog/categories/rubyshoes/atom.xml" rel="self"/>
  <link href="http://markfussell.emenar.com/"/>
  <updated>2015-10-21T17:40:03-07:00</updated>
  <id>http://markfussell.emenar.com/</id>
  <author>
    <name><![CDATA[Mark Fussell]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A Taste of Flex (Part 6)]]></title>
    <link href="http://markfussell.emenar.com/blog/a-taste-of-flex-part-6/"/>
    <updated>2008-09-02T16:46:00-07:00</updated>
    <id>http://markfussell.emenar.com/blog/a-taste-of-flex-part-6</id>
    <content type="html"><![CDATA[<p>This is a multi-part series.  The first in the series is <a href="/blog/a-taste-of-flex">here</a>.</p>

<h2>Tower of Hanoi &mdash; With Rule Disks (and no stack)</h2>

<p>The first passes at the Tower of Hanoi algorithm were all done with the algorithm being a recursive call on the stack.  This is 'true' as an algorithm, but comes off as a bit unnatural for humans.  But it also has a problem in that the algorithm can not be 'suspended' in mid activity unless the language allows a feature (called a continuation) that can suspend the stack itself.  For a multi-threaded language, this inability to suspend may not be a problem because you could create one thread for the algorithm and another thread to listen for whenever a new (interesting) change in state occurs.  This is how the RubyShoes version works: the algorithm is in a new thread separate from the GUI thread (otherwise things behave badly).  Similarly, the Smalltalk-80 GUI is being drawn in a different thread than the main execution thread.  But in many circumstances even this multi-thread version would not work: say you have a client-server version (e.g. Rails) or want to pause/suspend the execution of the 100-tall tower of hanoi.  And finally, if you only have a single-threaded language like Flex, things just don't work at all for intermediate renderings unless you can make the algorithm not be dependent on the call stack.</p>

<!-- more -->


<h3>Tower of Hanoi — With Rule Disks (and no stack) -- Flex</h3>

<p>I think it is easiest to work up from the Disk perspective, although see the book for a different flow.  The main changes to HanoiDisk are to have it be able to figure out whether it has any legal moves, and what the bestMove (next move) would be.  To do each of these, the disk needs to communicate back with the towers.  In the Smalltalk code this was done through a Class Variable, but it is far simpler and more scalable to do this through instance variables: each Disk needs to know what tower it belongs to.</p>

<h4>HanoiDiskRules</h4>

<p>```actionscript
package {</p>

<p>public class HanoiDiskRules extends HanoiDisk {</p>

<pre><code>protected var my_previousPole : Number;
protected var my_towers : AnimatedRulesTowerOfHanoi;

public function setupTowers(towers : AnimatedRulesTowerOfHanoi) : void {
    my_towers = towers;
}

public function hasLegalMove() : Boolean {
    var otherTops : Array = my_towers.selectPolesOtherThan(this);
    for (var i:int = 0; i&lt;otherTops.length; i++) {
        var eachTopDisk : HanoiDisk = otherTops[i];
        if (eachTopDisk.width &gt; this.width) return true;
    }
    return false;
}

public function bestMove() : HanoiDisk {
    var otherTops : Array = my_towers.selectPolesOtherThan(this);
    for (var i:int = 0; i&lt;otherTops.length; i++) {
        var eachTopDisk : HanoiDisk = otherTops[i];
        if ( (eachTopDisk.width &gt; this.width) &amp;&amp; (eachTopDisk.pole != my_previousPole) ) return eachTopDisk;
    }
    return null;
}

public override function moveUpon(destination : HanoiDisk) : void {
    my_previousPole = pole;

    super.moveUpon(destination);
}
</code></pre>

<p>}</p>

<p>} //package
```</p>

<p>Compared to the Smalltalk version of this, the main difference is we are creating Array objects instead of passing a function into an iterator.  Again this seems the more natural for Flex... but... it is starting to get annoying looking and has real performance impact, so later we should try to do an iterator + function-based version.</p>

<h4>AnimatedRulesTowerOfHanoi (No Animation)</h4>

<p>The change to the Tower code for Flex is two parts:</p>

<ul>
<li><p>Provide methods that support the rules that the smarter HanoiDiskRules has</p></li>
<li><p>Drive the algorithm in a way to enable Flex to render the intermediary results</p></li>
</ul>


<p>We can do these in two steps, with the current step focused on just the algorithm changes</p>

<p>```actionscript
package {</p>

<p>public class AnimatedRulesTowerOfHanoi extends AnimatedTowerOfHanoi {</p>

<pre><code>protected var my_oldDisk : HanoiDisk;
protected var my_currentDisk : HanoiDisk;
protected var my_destinationDisk : HanoiDisk;

protected override function moveTower(height : int, fromPin : *, toPin : *, usingPin : *) : void {
    //Now that the disks know all the rules... we can ignore all the arguments!

    while (!doNextMove_IsDone) {};
}

protected function doNextMove_IsDone() : Boolean {
    my_currentDisk = this.decide();

    (my_stacks[my_currentDisk.pole-1] as Array).pop();
    (my_stacks[my_destinationDisk.pole-1] as Array).push(my_currentDisk);
    my_currentDisk.moveUpon(my_destinationDisk);

    my_oldDisk = my_currentDisk;

    my_view.noteChange();

    return isAllOnOneTower();
}

protected function isAllOnOneTower() : Boolean {
    for (var i:int = 0; i&lt;my_stacks.length; i++) {
        var eachStack : Array = my_stacks[i];
        if (eachStack.length == my_height) return true;
    }
    return false;
}

public function selectTopsOtherThan(disk : HanoiDisk) : Array {
    var result : Array = new Array();
    for (var i:int = 0; i&lt;my_stacks.length; i++) {
        var eachStack : Array = my_stacks[i];

        if (eachStack.length == 0) continue;

        var topDisk : HanoiDisk = eachStack[eachStack.length-1];
        if (topDisk !== disk) {
            result.push(topDisk);
        }
    }
    return result;
}

public function selectPolesOtherThan(disk : HanoiDisk) : Array {
    var result : Array = new Array();
    for (var i:int = 0; i&lt;my_stacks.length; i++) {
        var eachStack : Array = my_stacks[i];

        if (i == disk.pole-1) continue;

        if (eachStack.length == 0)  {
            result.push(my_mockDisks[i]);
        } else {
            var topDisk : HanoiDisk = eachStack[eachStack.length-1];
            result.push(topDisk);
        }
    }
    return result;
}

protected function decide() : HanoiDisk {
    var tops : Array = selectTopsOtherThan(my_oldDisk);
    for (var i:int = 0; i&lt;tops.length; i++) {
        var movingDisk : HanoiDiskRules = tops[i];
        if (movingDisk.hasLegalMove()) {
            my_destinationDisk = movingDisk.bestMove();

            return movingDisk;
        }
    }
    //This should never happen
    return null;
}

protected override function createDisk() : HanoiDisk {
    var result : HanoiDiskRules = new HanoiDiskRules();
    result.setupTowers(this);
    return result;
}
</code></pre>

<p>}</p>

<p>} //package
```</p>

<p>As mentioned in HanoiDiskRules section, the main annoyance of this particular implementation of the new algorithm compared to Smalltalk is having to create intermediate array objects just to communicate between the Disk and the Tower.</p>

<p>But things should work again.  Except we will still get only one rendering because the whole algorithm is executed in one call within a "while" loop.</p>

<h3>Tower of Hanoi — With Rule Disks and Correct Animation -- Flex</h3>

<p>To make things work in Flex now, all we do is have to unwrap the immediacy [single call stack] of the while loop.  Instead of calling each 'doNextMove' immediately, we will wait for an event.  That event could be anything, like clicking a button or the server sending a response.  Each time we get an event, we will do the next step.  To be easy to present and view, we will make the events be driven by a simple timer.  Each time the timer fires an event, we will do the next step.  Repeating this until we are done.</p>

<p>The only method changes are to 'moveTower' and to 'handleTimer'.  Everything else works just the way it was.</p>

<h4>AnimatedRulesTowerOfHanoi (No Animation)</h4>

<p>```actionscript
package {</p>

<pre><code>import flash.events.TimerEvent;
import flash.utils.Timer;
</code></pre>

<p>public class AnimatedRulesTowerOfHanoi extends AnimatedTowerOfHanoi {</p>

<pre><code>protected var my_oldDisk : HanoiDisk;
protected var my_currentDisk : HanoiDisk;
protected var my_destinationDisk : HanoiDisk;

protected var my_timer : Timer;

protected override function moveTower(height : int, fromPin : *, toPin : *, usingPin : *) : void {
    //Now that the disks know all the rules... we can ignore all the arguments!

    my_timer = new Timer(300)
    my_timer.addEventListener(TimerEvent.TIMER, handleTimer);
    my_timer.start();

}

public function handleTimer(evt:TimerEvent):void {
    var isDone : Boolean = doNextMove_IsDone();

    if (isDone) {
        my_timer.stop();
        my_timer = null;
    }
}




protected function doNextMove_IsDone() : Boolean {
    my_currentDisk = this.decide();

    (my_stacks[my_currentDisk.pole-1] as Array).pop();
    (my_stacks[my_destinationDisk.pole-1] as Array).push(my_currentDisk);
    my_currentDisk.moveUpon(my_destinationDisk);

    my_oldDisk = my_currentDisk;

    my_view.noteChange();

    return isAllOnOneTower();
}

protected function isAllOnOneTower() : Boolean {
    for (var i:int = 0; i&lt;my_stacks.length; i++) {
        var eachStack : Array = my_stacks[i];
        if (eachStack.length == my_height) return true;
    }
    return false;
}

public function selectTopsOtherThan(disk : HanoiDisk) : Array {
    var result : Array = new Array();
    for (var i:int = 0; i&lt;my_stacks.length; i++) {
        var eachStack : Array = my_stacks[i];

        if (eachStack.length == 0) continue;

        var topDisk : HanoiDisk = eachStack[eachStack.length-1];
        if (topDisk !== disk) {
            result.push(topDisk);
        }
    }
    return result;
}

public function selectPolesOtherThan(disk : HanoiDisk) : Array {
    var result : Array = new Array();
    for (var i:int = 0; i&lt;my_stacks.length; i++) {
        var eachStack : Array = my_stacks[i];

        if (i == disk.pole-1) continue;

        if (eachStack.length == 0)  {
            result.push(my_mockDisks[i]);
        } else {
            var topDisk : HanoiDisk = eachStack[eachStack.length-1];
            result.push(topDisk);
        }
    }
    return result;
}

protected function decide() : HanoiDisk {
    var tops : Array = selectTopsOtherThan(my_oldDisk);
    for (var i:int = 0; i&lt;tops.length; i++) {
        var movingDisk : HanoiDiskRules = tops[i];
        if (movingDisk.hasLegalMove()) {
            my_destinationDisk = movingDisk.bestMove();

            return movingDisk;
        }
    }
    //This should never happen
    return null;
}

protected override function createDisk() : HanoiDisk {
    var result : HanoiDiskRules = new HanoiDiskRules();
    result.setupTowers(this);
    return result;
}
</code></pre>

<p>}</p>

<p>} //package
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Taste of Flex (Part 5)]]></title>
    <link href="http://markfussell.emenar.com/blog/a-taste-of-flex-part-5/"/>
    <updated>2008-09-02T07:44:00-07:00</updated>
    <id>http://markfussell.emenar.com/blog/a-taste-of-flex-part-5</id>
    <content type="html"><![CDATA[<p>This is a multi-part series.  The first in the series is <a href="/blog/a-taste-of-flex">here</a>.</p>

<h2>Tower of Hanoi — With Graphics</h2>

<p>To follow the flow of code progress within "A Taste of Smalltalk", we next need to include a graphical representation of the disks and their movement between the poles.  Flex lives inside a Flash player (or app), so it is inherently capable of doing sophisticated graphics.  Actually it is hard to 'contain' yourself to just doing the simplest possible thing when animating sprites around the screen is very easy.  But to try to compare Flex to Ruby and Smalltalk, we want to keep things in about the same ballpark -- and again study how different languages work with the same problem.</p>

<!-- more -->


<h3>Tower of Hanoi — With Graphics -- Flex</h3>

<p>Given our Flex version is already in a graphics environment, and the model (TowerOfHanoi) is already aware of having to talk the View, the changes are relatively minimal to get things working.  We need to render the disks in the Application/View and we need to notify the view whenever the model changes.</p>

<h4>Main Application</h4>

<p>To add rendering in, we just create a render canvas area and then create the UIComponents (shapes) on each redraw.  Normally we would be more likely to animate a single set of disks (vs. destroying them and recreating them), which would be both better in performance and be <em>much cooler</em>, but this matches the RubyShoes version better.</p>

<p>```xml
&lt;?xml version="1.0" encoding="utf-8"?>
&lt;mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" layout="vertical"</p>

<pre><code>creationComplete="handleCreationComplete()"
</code></pre>

<blockquote><p>&lt;mx:Script></p>

<pre><code>&lt;![CDATA[
    import mx.core.UIComponent;
    var my_model : AnimatedTowerOfHanoi;
</code></pre></blockquote>

<pre><code>    function handleCreationComplete() : void {
        Array.prototype.first = function():Object { return this[0]; }

        my_model = new AnimatedTowerOfHanoi();
        my_model.initView(this);
    }

    function handleDoItClicked() : void {
        logToConsole("\n=== Doing a Hanoi tower "+vTowerInput.text+" tall\n");
        my_model.doHanoi(new Number(vTowerInput.text));
    }

    public function logToConsole(string : String) : void {
        vConsole.text = vConsole.text+string;
    }

    public function noteChange() : void {
        vRenderArea.removeAllChildren();

        var stacks : Array = my_model.getStacks();
        for (var i : int = 0; i&lt;stacks.length; i++) {
            var eachStack : Array = stacks[i];
            var poleCenterX : Number = i*100 + 50;

            for (var j:int = 0; j&lt;eachStack.length; j++) {
                var eachDisk : HanoiDisk = eachStack[j];

                var diskHeight : int = 180 - (j * 15);
                var diskWidth  : int = eachDisk.width * 10;

                var eachShape : UIComponent = new UIComponent();
                eachShape.graphics.beginFill(0xA00000);
                eachShape.graphics.drawRect(poleCenterX - diskWidth / 2, diskHeight, diskWidth, 10);

                vRenderArea.addChild(eachShape);
            }
        }
    }
]]]]&gt;&lt;![CDATA[&gt;
</code></pre>

<p>&lt;/mx:Script>
&lt;mx:HBox></p>

<pre><code>&lt;mx:Text text="How tall a tower?" /&gt;
&lt;mx:TextInput id="vTowerInput" /&gt;
&lt;mx:Button label="Do It" click="handleDoItClicked()" /&gt;
</code></pre>

<p>&lt;/mx:HBox>
&lt;mx:Canvas id="vRenderArea" width="300" height="200" borderStyle="solid" />
&lt;mx:TextArea id="vConsole" width="100%" height="100%" />
&lt;/mx:Application>
```</p>

<h4>AnimatedTowerOfHanoi</h4>

<p>The AnimatedTower just needs to send out change events (via a simple callback vs. true event listeners that are in Flex).</p>

<p>```actionscript
package {</p>

<p>public class AnimatedTowerOfHanoi extends ModeledTowerOfHanoi {</p>

<pre><code>protected override function setupDisks() : void {
    super.setupDisks();

    my_view.noteChange();
}

public function getStacks() : Array {
    return my_stacks;
}

protected override function moveDisk(fromPin : *, toPin : *) : void {
    super.moveDisk(fromPin, toPin);

    my_view.noteChange();
}
</code></pre>

<p>}</p>

<p>} //package
```</p>

<h3>Super Easy...But doesn't work</h3>

<p>Well, that was really easy... except it doesn't really work :-(  You can only see the final result of all the nice disks on the last stack.  None of the intermediary steps before this last rendering are shown at all.</p>

<p>Clearly we are missing something... where is the "Sleep" equivalent?  If we could add a 'sleep' then everything would work right?  Unfortunately both "No" and "NO!".  When Flex/Flash are running user code, they are doing it between screen renderings and a bunch of other tasks Flash does.  So you can't just keep rendering things in the same thread (same stack) and have any of that be visible except the last version.  If you could 'sleep', you would just make Flash pause for no good reason.</p>

<p>The solution is to do each rendering on some kind of event.  Something simple like do the next step of the hanoi algorithm every 0.3 seconds.  That sounds easy but: (1) Flex doesn't have continuations either so you can't just 'pause' the stack and (2) The current hanoi algorithm is completely stack based.</p>

<p>Fortunately the fix is both "not that hard" and also happens to be the next chapter of "A Taste of Smalltalk" called "An Algorithm for the Rest of Us".  So for the moment, lets punt on getting the animation in Flex right until we get to the next part.</p>

<h3>What's Next</h3>

<p>A new non-stack algorithm.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Taste of Flex (Part 2)]]></title>
    <link href="http://markfussell.emenar.com/blog/a-taste-of-flex-part-2/"/>
    <updated>2008-09-02T04:12:00-07:00</updated>
    <id>http://markfussell.emenar.com/blog/a-taste-of-flex-part-2</id>
    <content type="html"><![CDATA[<p>This is a multi-part series.  The first in the series is <a href="/blog/a-taste-of-flex">here</a>.</p>

<h2>Tower of Hanoi -- Procedural With Input</h2>

<p>The second example from "A Taste of Smalltalk" is in Chapter 3, page 36 and does basic IO.  Except that Smalltalk-80 includes a Windowing graphics system so it can automatically open Dialogs and other things.    Fortunately Flex includes a Windowing system too, and can easily open up dialogs.  Opening up a Dialog might match the Smalltalk example the best, but given Flex is already running within a Window, opening up an extra dialog is a bit artificial.  Instead we can just add an input field for the value and a button to kick off the Hanoi.</p>

<!-- more -->


<h3>Tower of Hanoi -- Procedural With Input -- Flex</h3>

<p>```xml
&lt;mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" layout="vertical"</p>

<pre><code>creationComplete="handleCreationComplete()"
</code></pre>

<blockquote><p>&lt;mx:Script></p>

<pre><code>&lt;![CDATA[
    function moveTower(height : int, fromPin : *, toPin : *, usingPin : *) : void {
        if (height &gt; 0) {
            moveTower(height-1, fromPin, usingPin, toPin);
            moveDisk(fromPin, toPin);
            moveTower(height-1, usingPin, toPin, fromPin);
        }
    }
</code></pre></blockquote>

<pre><code>    function moveDisk(fromPin : *, toPin : *) : void {
        vConsole.text = vConsole.text+fromPin + "-&gt;" + toPin+"\n";
    }

    function handleCreationComplete() : void {
        //Don't need to do anything anymore
    }

    function handleDoItClicked() : void {
        vConsole.text = vConsole.text+"\n=== Doing a Hanoi tower "+vTowerInput.text+" tall\n";
        moveTower(new Number(vTowerInput.text), 1, 3, 2);
    }
]]]]&gt;&lt;![CDATA[&gt;
</code></pre>

<p>&lt;/mx:Script>
&lt;mx:HBox></p>

<pre><code>&lt;mx:Text text="How tall a tower?" /&gt;
&lt;mx:TextInput id="vTowerInput" /&gt;
&lt;mx:Button label="Do It" click="handleDoItClicked()" /&gt;
</code></pre>

<p>&lt;/mx:HBox>
&lt;mx:TextArea id="vConsole" width="100%" height="100%" />
&lt;/mx:Application>
```</p>

<p>To replace the dialog (in Smalltalk) or the command line request (in Ruby), we just create a horizontal row of a question label, an input field, and a Do It button.  Whenever a user clicks Do It, it takes the current value of the field and runs the Hanoi algorithm.</p>

<p>This is both pleasingly simply and also has the added benefit that we produced an interactive tool: you can just keep typing new numbers into it and it will give you new results.</p>

<h2>Comments</h2>

<p>Flex is highly capable with user input and interactivity.  It has a cleaner / simpler UI model than Smalltalk (IMO), which is good given we have had about 30 years of working with UIs to take things forward.  Compared to Ruby, Flex is as easy as RubyShoes for simple things like this example.</p>

<h3>Where Next?</h3>

<p>Next we should go to Chapter 4 — Page 44. The Third Example (with Real Hanoi Classes)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Taste of Ruby (Part 5)]]></title>
    <link href="http://markfussell.emenar.com/blog/a-taste-of-ruby-part-5/"/>
    <updated>2008-08-29T23:42:00-07:00</updated>
    <id>http://markfussell.emenar.com/blog/a-taste-of-ruby-part-5</id>
    <content type="html"><![CDATA[<p>This is a multi-part series.  The first in the series is <a href="/blog/a-taste-of-ruby">here</a>.</p>

<h2>Tower of Hanoi — With Graphics</h2>

<p>To follow the flow of code progress within "A Taste of Smalltalk", we next need to include a graphical representation of the disks and their movement between the poles.  As mentioned previously, converting this part to Ruby has a problem: Ruby doesn't include graphic capabilities.  So we have to pick an extension or add-on to Ruby that will enable us to hook into the graphics system.</p>

<!-- more -->


<p>Because it seems the easiest to work with, I chose 'Shoes' (<a href="http://code.whytheluckystiff.net/shoes/">http://code.whytheluckystiff.net/shoes/</a>).  The installation of Shoes is very simple and you just run your 'app' inside Shoes application world, which includes Ruby itself, the graphic capabilities, and the UI framework.</p>

<p>Shoes seems simple and clean, the only problem is it doesn't work within an IDE, so I lost a bit of tooling while doing this.  With the final running program, this isn't a problem but it can be painful if you are learning, tweaking, or studying things.  So because this could be painful to others as well, I made the main code base able to run inside a normal irb, and in that case it just logs to the console like it always has been.</p>

<p>The main new class is AnimatedTowerOfHanoi, which is really just a notifying version of ModeledTowerOfHanoi.  This pass also has some cleanup of the previous code of ModeledTowerOfHanoi.  So I include all three classes below</p>

<h3>The New Classes</h3>

<h4>TowerOfHanoi</h4>

<p>This is still the same as the original from 'Part 2'</p>

<p>```ruby</p>

<h1>A Taste of Ruby.  Based on a Taste of Smalltalk (Kaehler and Patterson)</h1>

<h1>Tower of Hanoi -- Variation 5</h1>

<h1>TowerOfHanoi</h1>

<p>#</p>

<h1>@stacks is an Array of DiskHolders (pins)</h1>

<p>class TowerOfHanoi &lt; Object
  #Tower of Hanoi program.
  def hanoi</p>

<pre><code># Do the tower
puts "How tall a tower?"
print "&gt;"
height = 5 #gets.to_i

@stacks = Array.new(3).collect { Array.new }
firstStack = @stacks[0]
1.upto(height) {|i| firstStack.unshift("Disk-#{(?A+i-1).chr}") }

move_tower(height,1,3,2)
</code></pre>

<p>  end</p>

<p>  # Recursive procedure to move the disk at a height
  # from one pin to another pin using a third pin
  def move_tower(height, fromPin, toPin, usingPin)</p>

<pre><code>if (height&gt;0) then
  move_tower(height-1, fromPin, usingPin, toPin)
  move_disk(fromPin, toPin)
  move_tower(height-1, usingPin, toPin, fromPin)
end
</code></pre>

<p>  end</p>

<p>  # Actually move the disk between the pins
  def move_disk(fromPin,toPin)</p>

<pre><code>disk = (@stacks[fromPin-1]).pop
@stacks[toPin-1].push(disk)
print disk, " moved ", fromPin.to_s, "-&gt;", toPin.to_s, "\n"
</code></pre>

<p>  end</p>

<p>end
```</p>

<h4>ModeledTowerOfHanoi</h4>

<p>The ModeledTowerOfHanoi has been cleaned up a little to make subclassing easier and just because it was the right thing to do.  Specifically,</p>

<ul>
<li><p>There was a fix to the 'move' algorithm, so we tell the disk onto which disk it is moving</p></li>
<li><p>Some common methods are pulled out</p></li>
<li><p>Disks are now responsible for describing the move</p></li>
</ul>


<p>```ruby</p>

<h1>A ModeledTowerOfHanoi is the TowerOfHanoi algorithm</h1>

<h1>but it actually keeps track of the state of the Disks</h1>

<h1>with actual objects.  This makes it suitable for</h1>

<h1>model-based behavior (say tracking moves, animation or</h1>

<h1>other event listening) on top of those Disks</h1>

<p>class ModeledTowerOfHanoi &lt; TowerOfHanoi
  def hanoi</p>

<pre><code>ask_for_height

setup_disks

puts "Start"
print_stacks

puts
move_tower(@height,1,3,2)
puts

puts "Result"
print_stacks
</code></pre>

<p>  end</p>

<p>  def print_stacks</p>

<pre><code>@stacks.each do | eachStack |
  puts "  "
  puts eachStack.reverse
  puts "  "
end
</code></pre>

<p>  end</p>

<p>  def ask_for_height</p>

<pre><code>puts "How tall a tower?"
print "&gt;"
height = 5 #gets.to_i
puts ""
@height = height
</code></pre>

<p>  end</p>

<p>  def setup_disks</p>

<pre><code>HanoiDisk.set_towers(self)

@stacks = Array.new(3).collect { Array.new }
firstStack = @stacks[0]
1.upto(@height) do |size|
  disk = createDisk.initWidth_pole(size,1)
  firstStack.unshift(disk)
end

@mockDisks = Array.new(3)
1.upto(3) do |i|
  @mockDisks[i-1]=(createDisk.initWidth_pole(1000,i))
end
</code></pre>

<p>  end</p>

<p>  def createDisk()</p>

<pre><code>return HanoiDisk.new
</code></pre>

<p>  end</p>

<p>  def move_disk(fromPin, toPin)</p>

<pre><code>supportDisk = if (@stacks[toPin-1].empty?) then
  @mockDisks[toPin-1]
else
  @stacks[toPin-1].last
end

disk = @stacks[fromPin-1].pop
@stacks[toPin-1].push(disk)
disk.move_upon(supportDisk)
</code></pre>

<p>  end</p>

<p>  def log(outString)</p>

<pre><code>print outString, "\n"
</code></pre>

<p>  end
end</p>

<p>class HanoiDisk
  attr_reader :name
  attr_reader :pole
  attr_reader :width</p>

<p>  def self.set_towers(owner)</p>

<pre><code>@@the_towers = owner
@@the_thickness = 14
@@the_diskgap = 2
</code></pre>

<p>  end</p>

<p>  def initWidth_pole(width, pole)</p>

<pre><code>@pole = pole
@width = width

if (width &lt; 1000) then
  @name="Disk-#{(?A+width-1).chr}"
else
  @name="Base-#{pole}"
end

@move_count = 0

return self
</code></pre>

<p>  end</p>

<p>  def to_s</p>

<pre><code>return "#{@name}(#{@pole},#{@move_count})" #{@@the_towers}
</code></pre>

<p>  end</p>

<p>  def move_upon(destination)</p>

<pre><code>@@the_towers.log( "#{self} moved #{@pole.to_s} -&gt; #{destination.pole.to_s}  (#{destination.to_s})" )

@pole = destination.pole
@move_count += 1
</code></pre>

<p>  end
end</p>

<p>```</p>

<h4>AnimatedTowerOfHanoi</h4>

<p>Now we are finally to the new "animated" class.  The main changes for this class are to enable it to talk to an owning 'application' if it exists and also it starts hooking into the Shoes code.  For convenience, I made the behavior of the class branch based on whether that '@app' exists.  The final change is that AnimatedHanoiDisk does a sleep so we can see the animation.  This affects both console and graphic behavior.</p>

<p>```ruby
class AnimatedTowerOfHanoi &lt; ModeledTowerOfHanoi
  attr_reader :stacks</p>

<p>  def initApp(shoesApp)</p>

<pre><code>@app = shoesApp

return self
</code></pre>

<p>  end</p>

<p>  def setup_disks</p>

<pre><code>super

@app.noteChange if @app
</code></pre>

<p>  end</p>

<p>  def createDisk()</p>

<pre><code>return AnimatedHanoiDisk.new
</code></pre>

<p>  end</p>

<p>  def ask_for_height</p>

<pre><code>@height = 5
return nil unless @app
answer ask("How Tall A Tower?")
</code></pre>

<p>  end</p>

<p>  def answer(v)</p>

<pre><code>@height = v.to_i
@app.answer(v)
</code></pre>

<p>  end</p>

<p>  def log(outString)</p>

<pre><code>super unless @app
@app.appendLog(outString) if @app
</code></pre>

<p>  end</p>

<p>  def move_disk(fromPin, toPin)</p>

<pre><code>super

@app.noteChange if @app
</code></pre>

<p>  end
end</p>

<p>class AnimatedHanoiDisk &lt; HanoiDisk
  def move_upon(destination)</p>

<pre><code>super(destination)

sleep 0.3
#@@the_towers.log("Foo")
#@@the_towers.draw_board
</code></pre>

<p>  end</p>

<p>end
```</p>

<h3>Running via 'irb'</h3>

<p>You can test the above code by running it in the normal Ruby console
<code>ruby
AnimatedTowerOfHanoi.new.hanoi
</code></p>

<h3>Putting on the Shoes</h3>

<p>If you have Shoes running successfully, you can combine the above code with a Shoes app which visualizes the state of the towers.  The Shoes code is:
```ruby
Shoes.app :width => 520, :height => 600, :resizable => false do</p>

<p>  def answer(v)</p>

<pre><code>@answer.replace "Doing a #{v} story Hanoi"
</code></pre>

<p>  end</p>

<p>  def appendLog(outString)</p>

<pre><code>@log.append { para outString }
</code></pre>

<p>  end</p>

<p>  def noteChange</p>

<pre><code>redrawStacks
</code></pre>

<p>  end</p>

<p>  #redraw the stacks by simply clearing the area and drawing them again
  def redrawStacks</p>

<pre><code>@render_area.clear do
  @towerOfHanoi.stacks.each_with_index do |eachStack,i|
    poleCenterX = i*100 + 50

    eachStack.each_with_index do |eachDisk,j|
      height = 180 - (j * 15)
      width = eachDisk.width * 10

      fill "#A00"
      rect(poleCenterX - width/2 , height, width, 10)
      j += 1
    end
    i += 1
  end
end
</code></pre>

<p>  end</p>

<p>  #=============================================</p>

<p>  @hanoiArea = stack do</p>

<pre><code>@answer = para "Answers appear here"

@render_area = flow :width =&gt; 300, :height =&gt; 200 do
  background "#999"
end
</code></pre>

<p>  end</p>

<p>  @log = stack</p>

<p>  @towerOfHanoi = AnimatedTowerOfHanoi.new.initApp(self)
  Thread.new do</p>

<pre><code>@towerOfHanoi.hanoi
</code></pre>

<p>  end
end
```</p>

<p>The Shoes app has the main drawing area at the top and then a logging area beneath it.  The HanoiStacks are cleared and redrawn any time they change.  The original Smalltalk code used deltas (disks were moved individually) but that didn't seem critical to match, and partially the code is relying on being on a black-and-white screen.</p>

<h3>Comments</h3>

<p>Not having a standard Graphics capability is not surprising or a problem for a scripting language (limited in context of usage) but is quite a problem for a language that wants to be mainstream.  There is a similar problem on the server-side with a standard (off-screen) image processing.  Shoes and RMagick and the like are trying to fill these holes but Ruby has been around for a long time for these aspects to not be addressed and part of the standard.</p>

<p>In terms of the resulting code with Shoes, the Ruby version is certainly nice and clean.</p>

<h3>Where Next?</h3>

<p>The last code-changing chapter deals with making the Algorithm a little more human-natural.  If people are interested, I may do that change too.  But comparatively it is a pretty minor change and does not bring out any interesting language aspects.</p>

<h3></h3>
]]></content>
  </entry>
  
</feed>
