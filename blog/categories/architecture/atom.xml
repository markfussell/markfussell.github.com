<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Architecture | Polyglot]]></title>
  <link href="http://markfussell.emenar.com/blog/categories/architecture/atom.xml" rel="self"/>
  <link href="http://markfussell.emenar.com/"/>
  <updated>2016-01-26T12:28:29-08:00</updated>
  <id>http://markfussell.emenar.com/</id>
  <author>
    <name><![CDATA[Mark Fussell]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Polyglot DevOps]]></title>
    <link href="http://markfussell.emenar.com/blog/devop-1/"/>
    <updated>2016-01-02T01:00:00-08:00</updated>
    <id>http://markfussell.emenar.com/blog/devop-1</id>
    <content type="html"><![CDATA[<p>During the last decade, I did quite a bit of launching IT and product operations for products as a 'sidelight' of my main product
development work.  Build the product, launch it operationally, and grow/maintain it going forward.  This pretty well matches
the responsibility of a DevOps role as people are now using the term, so I seem to be among the earlier 'DevOps' people.  At
first I had a Data Center (racks in Hurricane Electric), later VMWare ESX on the Data Center, later servers running in
other people's Data Centers (e.g. RackSpace), and then servers running in true clouds (e.g. AWS, GCE, etc.)</p>

<p>A number of tools have appeared to help automate operations, and each seems to have a fair number of acolytes.  One of the
issues with software is that there is a lot of it, and it takes quite a bit of time to become familiar with all of (a) software
design, (b) software languages and (c) the problem domain itself.</p>

<p>Although it was not really my 'direct intent', over a decade I put in thousands of hours into DevOps.  We needed a running
product and I was more and more concerned that the operations itself needed to be capable and software deployment seamless.  Part of this may have
kicked in when I lost all Thanksgiving vacation in a data center fixing someones very bad IT.</p>

<h2>Comparison</h2>

<p>You really shouldn't talk about something you don't know, and ideally you know quite a few different things so you can compare
them to each other.  Or you can try to leverage someone else's work and evaluation to help yourself go in the right direction.</p>

<p>The 'Taste Of' series is meant to help people compare different programming languages solving a similar problem.  The 'Architecture'
series is meant to help people see similarities and differences of architectures solving various problems.</p>

<p>This comparison describes a number of plausible ways to provision and deploy software systems.  Depending on your
goals and background, they are all viable.  Some are clearly better for most teams because they deal with critical needs very effectively,
where others handle needs some teams might have and other would never have.</p>

<p>A list of approaches is below.</p>

<ul>
<li>Copy-Paste Provision – Have a script designed to provision a machine, and copy-paste into the console to make it happen</li>
<li>Machine Image – Have a virtual machine image that you can clone and launch</li>
<li>SSH-Provision – Have a script that executes on any number of machines</li>
<li>Jenkins (Pipeline) Deploy – Have the automated pipeline automatically deploy/provision</li>
<li>Bash-Up – Have a script that a machine can automatically execute when baseline provisioned</li>
<li>Git-Deploy – Have one or more repositories with changing contents and machines watching (PushMePullYou)</li>
<li>Provisioning DSLs:

<ul>
<li>Chef</li>
<li>Puppet</li>
<li>Ansible</li>
<li>Salt</li>
</ul>
</li>
<li>BOSH</li>
<li>Docker</li>
<li>RightScale</li>
</ul>


<h3>Goals</h3>

<p>Software operations is software running.  Development operations is within the development team, and production operations
is for the benefit of users outside the development team.  DevOp Goals can be either for development or production.  Some
of them include:</p>

<ul>
<li>DOG-1: Running the software successfully with the intended amount of usage</li>
<li>DOG-2: Handling spikes of usage successfully/gracefully</li>
<li>DOG-3: Being easy to diagnose and repair issues</li>
<li>DOG-4: Knowing what version (of each/all components) is running in a given environment</li>
<li>DOG-5: Easily deploying new versions</li>
<li>DOG-6: Automatedly deploying new versions</li>
<li>DOG-7: Being able to tune system components to behave optimally</li>
<li>DOG-8: Being able to understand what the working environment looks like and how it works</li>
<li>DOG-9: Not having a single-point-of-failure (SPOF)</li>
<li>DOG-10: Having development and production mirror each other as much as possible</li>
<li>DOG-11: Being able to deploy to a new data center easily</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Micro-Services]]></title>
    <link href="http://markfussell.emenar.com/blog/microservice-1/"/>
    <updated>2016-01-01T01:00:00-08:00</updated>
    <id>http://markfussell.emenar.com/blog/microservice-1</id>
    <content type="html"><![CDATA[<p>In the last few years, a trendy new term has come up: "microservice" and a microservice architecture.
I have been building software for a long time, and have used a service-oriented-architecture (SOA)
and component-oriented-architecture (COA) for many of the applications / systems my teams have built.  Sometimes an industry is missing a shared term for things people have done for decades.  The microservice term
was new to me, so after having some discussions with people from ThoughtWorks and other companies, I wanted to get
a more definitive definition.</p>

<p>So far, this article seems a good intro: <a href="http://martinfowler.com/articles/microservices.html">Microservices by Lewis and Fowler</a></p>

<p>If you read through the core issues that a microservice architecture is trying to address, they seem to distill to this:</p>

<ul>
<li>Have an architecture where you produce working 'product' continuously</li>
<li>Your 'product' will be <em>deployed</em> and you need to be responsible for that being successful</li>
<li>Don't make the architectural components too big for a team to understand and successfully build and maintain</li>
</ul>


<p>These seem very practical and straightforward architectural guidelines.  In both startups and enterprises, you
are delivering products that the company needs or sells, so you should always have your focus be on achieving that.<br/>
I agree that some teams seem to lose this, so keeping them reminded is a good idea.</p>

<h2>Good Idea, Horrible Name</h2>

<p>Given the above reasonableness of the concept, this would be a good thing to have a good name for.  Maybe something
like:</p>

<ul>
<li>Service-Component Architecture</li>
<li>Business-Service Architecture</li>
<li>Right-Sized Service Architecture</li>
<li>Deployed Service Architecture</li>
<li>Composed-Service Architecture</li>
</ul>


<p>All of the above pull at least some interesting aspect of the solution or problem into the term.</p>

<p>Unfortunately using 'micro' with service doesn't do anything other than imply 'small' or 'very-small'.  A 'microscopic'
entity is too small to see.  A 'microprocessor' is a processor that is powerful in abilities but physically small.<br/>
I am not sure what word containing 'micro' that in any way implies what the 'micro' of 'microservice' is trying to imply.</p>

<h2>Bad names lead to bad architecture</h2>

<p>You might think this pedantic, but words are powerful.  And the first uses of microservice in the wild I heard were
for services <em>so tiny in functionality</em> that if you scaled to build a system out of them, you would have a nightmare
of managing components.  It is fine to do something small as a test run, but services need to be cohesive and as comprehensive
as possible to avoid spiralling out of control with dozens of service components wired together haphazardly.</p>

<h2>Trendy/Transitional vs. Foundational</h2>

<p>My guess is microservice is somewhat trendy and will die because it is a poor term.  A more appropriate word is again
'service' or 'service component' or 'right-sized'.  You want an architecture that has a reasonable number of services organized/composed in
a reasonably understandable way.  One way you might organize things is by business function, another is by core
infrastructure capability (e.g. caching), another is by 'rate-of-change', and another is by 'risk-of-change'.</p>

<p>Monoliths are incredibly easy to understand, so they are actually a good starting point.  Your goal is to deliver
a valuable product, so "start with" doing that.</p>

<p>As long as you are good at splitting monoliths (dealing with inter-service calls vs. in-memory calls, providing a facade that hides the change, etc.),
and leverage third-party service-components when suitable, you should have a pretty effective architecture.  You can
split early (before production) or later, but keep you eye on delivering valuable product to your company.</p>

<p>Basically review 'Design Patterns' and think at the service-component level.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PeerCase: Two Decades of Systems and Architectures]]></title>
    <link href="http://markfussell.emenar.com/blog/arch-8/"/>
    <updated>2015-12-08T01:00:00-08:00</updated>
    <id>http://markfussell.emenar.com/blog/arch-8</id>
    <content type="html"><![CDATA[<p>This is a series describing various architectures I have worked with in the last two decades and some of their
benefits and issues.  The table of contents of the series is <a href="/blog/arch-1">here</a>.</p>

<p>PeerCase was a mobile-first medical communication application that enabled community doctors to get expert
advice from specialists.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Epocrates: Two Decades of Systems and Architectures]]></title>
    <link href="http://markfussell.emenar.com/blog/arch-7/"/>
    <updated>2015-12-07T01:00:00-08:00</updated>
    <id>http://markfussell.emenar.com/blog/arch-7</id>
    <content type="html"><![CDATA[<p>This is a series describing various architectures I have worked with in the last two decades and some of their
benefits and issues.  The table of contents of the series is <a href="/blog/arch-1">here</a>.</p>

<p>Epocrates was building a mobile-capable EMR.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vive: Two Decades of Systems and Architectures]]></title>
    <link href="http://markfussell.emenar.com/blog/arch-6/"/>
    <updated>2015-12-06T01:00:00-08:00</updated>
    <id>http://markfussell.emenar.com/blog/arch-6</id>
    <content type="html"><![CDATA[<p>This is a series describing various architectures I have worked with in the last two decades and some of their
benefits and issues.  The table of contents of the series is <a href="/blog/arch-1">here</a>.</p>

<p>Vive had a single product: a wellness coaching system designed for both individuals and groups.  I was interested and
partially 'won' the interview process because I could help game-ify the product.</p>

<h2>Major System Aspects</h2>

<p>When I joined Vive, the system was implemented in Flash and Microsoft .Net on proprietary servers.  This had
a couple big issues:</p>

<ul>
<li>It was meant to be mobile, and especially iPhone</li>
<li>The server code was not really functional</li>
</ul>


<p>So the first architectural change was to move to an iPhone compatible front-end and a Linux based backend.  If the
backend code had been better, the second part wouldn't have been done, but given it was a restart, staying in the Linux stack
was a significant benefit, especially on cloud computing.</p>

<p>After doing a Rails project with FooMojo and a couple other ones on my own, I was pretty comfortable with Rails and liked
the productivity improvements it provided from being so opinionated.  At this point the Grails technology was mature enough
to be stable, so I leveraged that to make Vive.  After evaluating a number of front-end technologies, the team and I
picked YUI as being sophisticated enough for the kind of user interfaces we needed (or thought we needed).</p>

<p>Although the product was meant to support iPhones, it was also meant to be 'SMS compatible' and most of the messaging was expected to be through SMS vs. through email and web capabilities.</p>

<p>A couple more system aspects that 'came later' or were proposed included:</p>

<ul>
<li>A Unity or similar interactive game environment</li>
<li>Connecting to devices like FitBits</li>
</ul>


<h2>AA-1 : Unifying SMS and a Web UI</h2>

<h2>AA-2 : The curse of the UI, especially for mobile</h2>

<p>The UI on small-screen form factors is very constrained and with a platform like iOS, quite opinionated.  Unless your design team is experienced and skilled at this, it can cause a lot of issues and thrash.</p>

<p>Vive was at the very beginning of WebApps for mobile devices.  Technically, everything was correct:</p>

<ul>
<li>The payload was manifest-based, so updates happened correctly and behind the scenes</li>
<li>There was some amount of client detection to make sure features would work (including on a BlackBerry)</li>
<li>The layout was simple and widgets were large enough to interact with.</li>
<li>And a number of other mobile-oriented aspects</li>
</ul>


<p>Unfortunately there was a core problem of 'fancy', 'complex', 'changing', and 'confused' for the requirements with the mobile UI and its relation to the desktop UI.
Week upon week a slightly different approach was used that might be 'better' and needed to be tested out.  The functionality
was always the same: it wasn't much more than the SMS interface provided, except you could see what was happening better.
This continuous thrash was a significant overhead to development, slowing work in other functional areas.</p>

<h2>AA-3 : Gamification</h2>

<p>The game-enabling of Vive was important to me: I wanted a race-like environment, or a treasure hunt, or something similar.<br/>
The technologies behind FooMojo (Unity and similar) made this possible, but the prototypes were never moved forward with.
The one gamification that did make it in was that distance competitions (say first team to 100 miles combined) were plotted
out on a map that was a windy course and potentially had realistic terrain (there was a collection of maps,
some of which were terrain-based and others simply geometric)</p>

<h2>AA-4 : Connected devices</h2>

<p>Vive never decided to productize it, but architectural work was done on using connected devices for input.  The market
was still early but Garmin and others had some devices that you could pull data from.</p>

<h2>AA-5 : Grails</h2>

<p>Although not fully capable at the time, Grails was a great productivity booster and made it easy to transition the code to someone else by simply saying "It uses Grails, augmented by this".</p>
]]></content>
  </entry>
  
</feed>
