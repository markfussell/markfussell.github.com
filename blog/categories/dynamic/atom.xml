<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Dynamic | Polyglot]]></title>
  <link href="http://markfussell.emenar.com/blog/categories/dynamic/atom.xml" rel="self"/>
  <link href="http://markfussell.emenar.com/"/>
  <updated>2015-10-15T12:20:36-07:00</updated>
  <id>http://markfussell.emenar.com/</id>
  <author>
    <name><![CDATA[Mark Fussell]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A Taste of Ruby (Part 5)]]></title>
    <link href="http://markfussell.emenar.com/blog/a-taste-of-ruby-part-5/"/>
    <updated>2008-08-29T23:42:00-07:00</updated>
    <id>http://markfussell.emenar.com/blog/a-taste-of-ruby-part-5</id>
    <content type="html"><![CDATA[<p>This is a multi-part series.  The first in the series is <a href="/blog/a-taste-of-ruby">here</a>.</p>

<h2>Tower of Hanoi â€” With Graphics</h2>

<p>To follow the flow of code progress within "A Taste of Smalltalk", we next need to include a graphical representation of the disks and their movement between the poles.  As mentioned previously, converting this part to Ruby has a problem: Ruby doesn't include graphic capabilities.  So we have to pick an extension or add-on to Ruby that will enable us to hook into the graphics system.</p>

<!-- more -->


<p>Because it seems the easiest to work with, I chose 'Shoes' (<a href="http://code.whytheluckystiff.net/shoes/">http://code.whytheluckystiff.net/shoes/</a>).  The installation of Shoes is very simple and you just run your 'app' inside Shoes application world, which includes Ruby itself, the graphic capabilities, and the UI framework.</p>

<p>Shoes seems simple and clean, the only problem is it doesn't work within an IDE, so I lost a bit of tooling while doing this.  With the final running program, this isn't a problem but it can be painful if you are learning, tweaking, or studying things.  So because this could be painful to others as well, I made the main code base able to run inside a normal irb, and in that case it just logs to the console like it always has been.</p>

<p>The main new class is AnimatedTowerOfHanoi, which is really just a notifying version of ModeledTowerOfHanoi.  This pass also has some cleanup of the previous code of ModeledTowerOfHanoi.  So I include all three classes below</p>

<h3>The New Classes</h3>

<h4>TowerOfHanoi</h4>

<p>This is still the same as the original from 'Part 2'</p>

<p>```ruby</p>

<h1>A Taste of Ruby.  Based on a Taste of Smalltalk (Kaehler and Patterson)</h1>

<h1>Tower of Hanoi -- Variation 5</h1>

<h1>TowerOfHanoi</h1>

<p>#</p>

<h1>@stacks is an Array of DiskHolders (pins)</h1>

<p>class TowerOfHanoi &lt; Object
  #Tower of Hanoi program.
  def hanoi</p>

<pre><code># Do the tower
puts "How tall a tower?"
print "&gt;"
height = 5 #gets.to_i

@stacks = Array.new(3).collect { Array.new }
firstStack = @stacks[0]
1.upto(height) {|i| firstStack.unshift("Disk-#{(?A+i-1).chr}") }

move_tower(height,1,3,2)
</code></pre>

<p>  end</p>

<p>  # Recursive procedure to move the disk at a height
  # from one pin to another pin using a third pin
  def move_tower(height, fromPin, toPin, usingPin)</p>

<pre><code>if (height&gt;0) then
  move_tower(height-1, fromPin, usingPin, toPin)
  move_disk(fromPin, toPin)
  move_tower(height-1, usingPin, toPin, fromPin)
end
</code></pre>

<p>  end</p>

<p>  # Actually move the disk between the pins
  def move_disk(fromPin,toPin)</p>

<pre><code>disk = (@stacks[fromPin-1]).pop
@stacks[toPin-1].push(disk)
print disk, " moved ", fromPin.to_s, "-&gt;", toPin.to_s, "\n"
</code></pre>

<p>  end</p>

<p>end
```</p>

<h4>ModeledTowerOfHanoi</h4>

<p>The ModeledTowerOfHanoi has been cleaned up a little to make subclassing easier and just because it was the right thing to do.  Specifically,</p>

<ul>
<li><p>There was a fix to the 'move' algorithm, so we tell the disk onto which disk it is moving</p></li>
<li><p>Some common methods are pulled out</p></li>
<li><p>Disks are now responsible for describing the move</p></li>
</ul>


<p>```ruby</p>

<h1>A ModeledTowerOfHanoi is the TowerOfHanoi algorithm</h1>

<h1>but it actually keeps track of the state of the Disks</h1>

<h1>with actual objects.  This makes it suitable for</h1>

<h1>model-based behavior (say tracking moves, animation or</h1>

<h1>other event listening) on top of those Disks</h1>

<p>class ModeledTowerOfHanoi &lt; TowerOfHanoi
  def hanoi</p>

<pre><code>ask_for_height

setup_disks

puts "Start"
print_stacks

puts
move_tower(@height,1,3,2)
puts

puts "Result"
print_stacks
</code></pre>

<p>  end</p>

<p>  def print_stacks</p>

<pre><code>@stacks.each do | eachStack |
  puts "  "
  puts eachStack.reverse
  puts "  "
end
</code></pre>

<p>  end</p>

<p>  def ask_for_height</p>

<pre><code>puts "How tall a tower?"
print "&gt;"
height = 5 #gets.to_i
puts ""
@height = height
</code></pre>

<p>  end</p>

<p>  def setup_disks</p>

<pre><code>HanoiDisk.set_towers(self)

@stacks = Array.new(3).collect { Array.new }
firstStack = @stacks[0]
1.upto(@height) do |size|
  disk = createDisk.initWidth_pole(size,1)
  firstStack.unshift(disk)
end

@mockDisks = Array.new(3)
1.upto(3) do |i|
  @mockDisks[i-1]=(createDisk.initWidth_pole(1000,i))
end
</code></pre>

<p>  end</p>

<p>  def createDisk()</p>

<pre><code>return HanoiDisk.new
</code></pre>

<p>  end</p>

<p>  def move_disk(fromPin, toPin)</p>

<pre><code>supportDisk = if (@stacks[toPin-1].empty?) then
  @mockDisks[toPin-1]
else
  @stacks[toPin-1].last
end

disk = @stacks[fromPin-1].pop
@stacks[toPin-1].push(disk)
disk.move_upon(supportDisk)
</code></pre>

<p>  end</p>

<p>  def log(outString)</p>

<pre><code>print outString, "\n"
</code></pre>

<p>  end
end</p>

<p>class HanoiDisk
  attr_reader :name
  attr_reader :pole
  attr_reader :width</p>

<p>  def self.set_towers(owner)</p>

<pre><code>@@the_towers = owner
@@the_thickness = 14
@@the_diskgap = 2
</code></pre>

<p>  end</p>

<p>  def initWidth_pole(width, pole)</p>

<pre><code>@pole = pole
@width = width

if (width &lt; 1000) then
  @name="Disk-#{(?A+width-1).chr}"
else
  @name="Base-#{pole}"
end

@move_count = 0

return self
</code></pre>

<p>  end</p>

<p>  def to_s</p>

<pre><code>return "#{@name}(#{@pole},#{@move_count})" #{@@the_towers}
</code></pre>

<p>  end</p>

<p>  def move_upon(destination)</p>

<pre><code>@@the_towers.log( "#{self} moved #{@pole.to_s} -&gt; #{destination.pole.to_s}  (#{destination.to_s})" )

@pole = destination.pole
@move_count += 1
</code></pre>

<p>  end
end</p>

<p>```</p>

<h4>AnimatedTowerOfHanoi</h4>

<p>Now we are finally to the new "animated" class.  The main changes for this class are to enable it to talk to an owning 'application' if it exists and also it starts hooking into the Shoes code.  For convenience, I made the behavior of the class branch based on whether that '@app' exists.  The final change is that AnimatedHanoiDisk does a sleep so we can see the animation.  This affects both console and graphic behavior.</p>

<p>```ruby
class AnimatedTowerOfHanoi &lt; ModeledTowerOfHanoi
  attr_reader :stacks</p>

<p>  def initApp(shoesApp)</p>

<pre><code>@app = shoesApp

return self
</code></pre>

<p>  end</p>

<p>  def setup_disks</p>

<pre><code>super

@app.noteChange if @app
</code></pre>

<p>  end</p>

<p>  def createDisk()</p>

<pre><code>return AnimatedHanoiDisk.new
</code></pre>

<p>  end</p>

<p>  def ask_for_height</p>

<pre><code>@height = 5
return nil unless @app
answer ask("How Tall A Tower?")
</code></pre>

<p>  end</p>

<p>  def answer(v)</p>

<pre><code>@height = v.to_i
@app.answer(v)
</code></pre>

<p>  end</p>

<p>  def log(outString)</p>

<pre><code>super unless @app
@app.appendLog(outString) if @app
</code></pre>

<p>  end</p>

<p>  def move_disk(fromPin, toPin)</p>

<pre><code>super

@app.noteChange if @app
</code></pre>

<p>  end
end</p>

<p>class AnimatedHanoiDisk &lt; HanoiDisk
  def move_upon(destination)</p>

<pre><code>super(destination)

sleep 0.3
#@@the_towers.log("Foo")
#@@the_towers.draw_board
</code></pre>

<p>  end</p>

<p>end
```</p>

<h3>Running via 'irb'</h3>

<p>You can test the above code by running it in the normal Ruby console
<code>ruby
AnimatedTowerOfHanoi.new.hanoi
</code></p>

<h3>Putting on the Shoes</h3>

<p>If you have Shoes running successfully, you can combine the above code with a Shoes app which visualizes the state of the towers.  The Shoes code is:
```ruby
Shoes.app :width => 520, :height => 600, :resizable => false do</p>

<p>  def answer(v)</p>

<pre><code>@answer.replace "Doing a #{v} story Hanoi"
</code></pre>

<p>  end</p>

<p>  def appendLog(outString)</p>

<pre><code>@log.append { para outString }
</code></pre>

<p>  end</p>

<p>  def noteChange</p>

<pre><code>redrawStacks
</code></pre>

<p>  end</p>

<p>  #redraw the stacks by simply clearing the area and drawing them again
  def redrawStacks</p>

<pre><code>@render_area.clear do
  @towerOfHanoi.stacks.each_with_index do |eachStack,i|
    poleCenterX = i*100 + 50

    eachStack.each_with_index do |eachDisk,j|
      height = 180 - (j * 15)
      width = eachDisk.width * 10

      fill "#A00"
      rect(poleCenterX - width/2 , height, width, 10)
      j += 1
    end
    i += 1
  end
end
</code></pre>

<p>  end</p>

<p>  #=============================================</p>

<p>  @hanoiArea = stack do</p>

<pre><code>@answer = para "Answers appear here"

@render_area = flow :width =&gt; 300, :height =&gt; 200 do
  background "#999"
end
</code></pre>

<p>  end</p>

<p>  @log = stack</p>

<p>  @towerOfHanoi = AnimatedTowerOfHanoi.new.initApp(self)
  Thread.new do</p>

<pre><code>@towerOfHanoi.hanoi
</code></pre>

<p>  end
end
```</p>

<p>The Shoes app has the main drawing area at the top and then a logging area beneath it.  The HanoiStacks are cleared and redrawn any time they change.  The original Smalltalk code used deltas (disks were moved individually) but that didn't seem critical to match, and partially the code is relying on being on a black-and-white screen.</p>

<h3>Comments</h3>

<p>Not having a standard Graphics capability is not surprising or a problem for a scripting language (limited in context of usage) but is quite a problem for a language that wants to be mainstream.  There is a similar problem on the server-side with a standard (off-screen) image processing.  Shoes and RMagick and the like are trying to fill these holes but Ruby has been around for a long time for these aspects to not be addressed and part of the standard.</p>

<p>In terms of the resulting code with Shoes, the Ruby version is certainly nice and clean.</p>

<h3>Where Next?</h3>

<p>The last code-changing chapter deals with making the Algorithm a little more human-natural.  If people are interested, I may do that change too.  But comparatively it is a pretty minor change and does not bring out any interesting language aspects.</p>

<h3></h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Taste of Ruby (Part 4)]]></title>
    <link href="http://markfussell.emenar.com/blog/a-taste-of-ruby-part-4/"/>
    <updated>2008-08-29T02:53:00-07:00</updated>
    <id>http://markfussell.emenar.com/blog/a-taste-of-ruby-part-4</id>
    <content type="html"><![CDATA[<p>This is a multi-part series.  The first in the series is <a href="/blog/a-taste-of-ruby">here</a>.</p>

<h2>Tower of Hanoi â€” With Model Objects</h2>

<p>The book "A Taste of Smalltalk" jumps from showing a single 'TowerOfHanoi' object to both adding in Disk model objects and putting on a graphical representation of those Disk objects.  Given Ruby has no built-in graphic capability, I want to separate these two changes.  So first we can put in Disk objects and study that change.  This should work for anyone with a Ruby installation and does not require installing Tk or Shoes or anything.  After that, we can go into some GUI toolkit code just to finish up the comparison and have bonus points.</p>

<!-- more -->


<p>To make the adding of Disk objects to our Hanoi code a bit more 'realistic', a new bonus requirement (beyond the book) is that we track the number of times a given disk moves.</p>

<p>```ruby</p>

<h1>A ModeledTowerOfHanoi is the TowerOfHanoi algorithm</h1>

<h1>but it keeps track of the state of the Disks</h1>

<h1>with actual objects.  This makes it suitable for</h1>

<h1>model-based behavior (say tracking moves, animation or</h1>

<h1>other event listening) on top of those Disks</h1>

<p>class ModeledTowerOfHanoi &lt; TowerOfHanoi
  def hanoi</p>

<pre><code>ask_for_height

setup_disks

puts "Start"
print_stacks

puts
move_tower(@height,1,3,2)
puts

puts "Result"
print_stacks
</code></pre>

<p>  end</p>

<p>  def print_stacks</p>

<pre><code>@stacks.each do | eachStack |
  puts "  "
  puts eachStack.reverse
  puts "  "
end
</code></pre>

<p>  end</p>

<p>  def ask_for_height</p>

<pre><code>puts "How tall a tower?"
print "&gt;"
height = 5 #gets.to_i
puts ""
@height = height
</code></pre>

<p>  end</p>

<p>  def setup_disks</p>

<pre><code>HanoiDisk.set_towers(self)

@stacks = Array.new(3).collect { Array.new }
firstStack = @stacks[0]
1.upto(@height) do |size|
  disk = HanoiDisk.new.initWidth_pole(size,1)
  firstStack.unshift(disk)
end

@mockDisks = Array.new(3)
1.upto(3) do |i|
  @mockDisks[i-1]=(HanoiDisk.new.initWidth_pole(1000,i))
end
</code></pre>

<p>  end</p>

<p>  def move_disk(fromPin, toPin)</p>

<pre><code>supportDisk = if (@stacks[toPin-1].empty?) then
  @mockDisks[toPin-1]
else
  @stacks[toPin-1][0]
end

disk = @stacks[fromPin-1].pop
@stacks[toPin-1].push(disk)
disk.move_upon(supportDisk)

print disk, " moved ", fromPin.to_s, "-&gt;", toPin.to_s, "\n"
</code></pre>

<p>  end
end</p>

<p>class HanoiDisk
  attr_reader :name
  attr_reader :pole</p>

<p>  def self.set_towers(owner)</p>

<pre><code>@@the_towers = owner
@@the_thickness = 14
@@the_diskgap = 2
</code></pre>

<p>  end</p>

<p>  def initWidth_pole(width, pole)</p>

<pre><code>@pole = pole
@width = width

if (width &lt; 1000) then
  @name="Disk-#{(?A+width-1).chr}"
else
  @name="Base-#{pole}"
end

@move_count = 0

return self
</code></pre>

<p>  end</p>

<p>  def to_s</p>

<pre><code>return "#{@name}(#{@move_count})"
</code></pre>

<p>  end</p>

<p>  def move_upon(destination)</p>

<pre><code>@pole = destination.pole
@move_count += 1
</code></pre>

<p>  end
end</p>

<p>ModeledTowerOfHanoi.new.hanoi
```</p>

<p>Now things are somewhat interesting for comparison purposes.  With the new class 'HanoiDisk', we have:</p>

<ol>
<li><p>Public Attribute macros</p></li>
<li><p>Explicit return values</p></li>
<li><p>Class Object behavior ('set_towers')</p></li>
</ol>


<h3>Macros</h3>

<p>Of these topics, I think the 'macros' is the more interesting.  I have another post on 'Being Ephemeral' which quickly distills the concept, but Ruby (and Lisp before it) gets it right in that program generation (in a controlled fashion) is more powerful than having static programs.  The problem with Smalltalk <em>in its common usage</em> is that people want the image to be mostly static.  But the image is the expansion of all these macros (Smalltalk can have macros as easily as Lisp can) -- and so people are saying that macros must be developer tools (like the Refactoring tools) vs. taking you a level above.  But if you expand the macro and record <em>the results</em> you have lost the value of the macro from that point forward.  If Smalltalk execution environments would accept giving up the image (a snapshot of all previous expansions), it would be more capable than it is.  There is nothing in the language that prevents this, but the execution environments discourage going down this path.</p>

<p>It is purely a 'what is the source' question.  The Smalltalk equivalent of 'attr_reader' is simply:</p>

<ul>
<li>HanoiDisk attrReader: #name</li>
</ul>


<p>Seriously... it would be that short and sweet.  But unless the source of a running application is something other than the image, that line would never be executed.</p>

<p>This is a problem in a totally different-sounding but very similar area: Virtualized Computers (Xen, VMWare).  Snapshotting the 'image' of a virtualized computer sounds cool -- but it immediately causes you lots of havoc.  What if you need to upgrade just one thing in the Snapshot? ... it could be a real head-ache to uninstall and reinstall a new MySQL and is not as simple as 'yum install'.  And if you are doing the Kernel itself, you are totally hosed.  The better approach is to treat the virtualized computer as ephemeral, have scripts in a higher-level-language to rebuild it at any time, and then the only use of a snapshot is to make rebuilding it faster.  A snapshould should just be a cache of the built system vs. the system-of-record for what you want to run.</p>

<h3>Explicit return values</h3>

<p>What should a method return if not otherwise stated?  The right answer is 'nil'.  Why?  Because it is the right answer :-)  Actually, it is because the return value of a method may need to be non-trivially transmitted to the caller message.  Specifically the caller of a remote message.  So you want the return value to be as light-weight as possibly by default.  'nil' fits that bill.  Smalltalk gets this wrong but was long-before client-server issues made the problem rear its head, so it gets a pass.</p>

<p>OK... you don't like that answer.  The next 'almost right' answer is 'self'. Why?  Well, what else could possibly make sense?  I didn't say what to return, so just return me.  And this is almost as lightweight as 'nil' (but not quite).</p>

<p>Just because something is on the last line of a method, in <em>no way</em> indicates it is meant to be sent back to the caller.  For example, ending with:</p>

<ul>
<li>really_huge_and_private_object.do_some_command_that_happens_to_return_self</li>
</ul>


<p>does not in any way convey I intend to send 'really_huge_and_private_object' back to the caller.  As far as I stated... I don't want to send anything back to the caller.  I should have to say that I want to do something before the program just 'guesses' I want to do something I don't want to do.  Basically just guesses that whatever happens to be on the stack should be passed back to the caller.  Serious encapsulation breakage.  And I shouldn't have to say something like 'return self' to prevent the program from making that obnoxious guess.</p>

<p>Given the Smalltalk equivalent of a return declaration is a single character ('<sup>')</sup> (not too hard to type), and completely reveals the intent of the coder, the fact that Ruby chose neither of the above two variations of plausibly right answers is just bizarre and a source of errors.</p>

<h3>Class Object behavior</h3>

<p>The concept here is clean enough and the notation for Class Variables is nicely clean (and partially helps separate 'Class Variables' from 'Class Instance Variables').  I think 'def self' is less readable than 'class.def' (defining for the HanoiDisk.class vs. HanoiDisk), but that presumes that keywords like 'def' could be more easily understood as messages to classes (a 'Turtles all the way down' concept) as I wrote earlier.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Taste of Ruby (Part 3)]]></title>
    <link href="http://markfussell.emenar.com/blog/a-taste-of-ruby-part-3/"/>
    <updated>2008-08-29T00:27:00-07:00</updated>
    <id>http://markfussell.emenar.com/blog/a-taste-of-ruby-part-3</id>
    <content type="html"><![CDATA[<p>This is a multi-part series.  The first in the series is <a href="/blog/a-taste-of-ruby">here</a>.</p>

<h2>Tower of Hanoi -- With A Real Object</h2>

<p>The first two examples were not really object-based.  They are purely procedural, the algorithm is expressed completely recursively, and execution state is maintained on the call stack.  This works fine if we are just 'tracing' the algorithm, but it does not let us show the state of the towers at any given time.  We also don't see much in the way of real objects.  By adding the state of the towers in, we now have a reason to have stateful objects and new Classes of objects to maintain that state.  The added code with some explanation is in Chapter 4, Page 45.</p>

<!-- more -->


<p>```ruby</p>

<h1>A Taste of Ruby.  Based on a Taste of Smalltalk (Kaehler and Patterson)</h1>

<h1>Tower of Hanoi -- Variation 3</h1>

<h1>TowerOfHanoi</h1>

<p>#</p>

<h1>@stacks is an Array of DiskHolders (pins)</h1>

<p>class TowerOfHanoi &lt; Object
  #Tower of Hanoi program.
  def hanoi</p>

<pre><code># Do the tower
puts "How tall a tower?"
print "&gt;"
height = gets.to_i

@stacks = Array.new(3).collect { Array.new }
firstStack = @stacks[0]
1.upto(height) {|i| firstStack.unshift("Disk-#{(?A+i-1).chr}") }

move_tower(height,1,3,2)
</code></pre>

<p>  end</p>

<p>  # Recursive procedure to move the disk at a height
  # from one pin to another pin using a third pin
  def move_tower(height, fromPin, toPin, usingPin)</p>

<pre><code>if (height&gt;0) then
  move_tower(height-1, fromPin, usingPin, toPin)
  move_disk(fromPin, toPin)
  move_tower(height-1, usingPin, toPin, fromPin)
end
</code></pre>

<p>  end</p>

<p>  # Actually move the disk between the pins
  def move_disk(fromPin,toPin)</p>

<pre><code>disk = (@stacks[fromPin-1]).pop
@stacks[toPin-1].push(disk)
print disk, " moved ", fromPin.to_s, "-&gt;", toPin.to_s, "\n"
</code></pre>

<p>  end</p>

<p>end</p>

<p>TowerOfHanoi.new.hanoi
```</p>

<p>So we moved to adding state to an object by simply referencing an instance variable (notationally via the '@').  Again, I find that unpleasant and would rather the compiler (and human reader) was told a bit more formally what instance variables exist.  In quickly typing the above, I made a typo ("@stack") that caused a runtime error and should have been easily detected at compile time.</p>

<p>Comparing with Smalltalk, the similarities are extremely high again.  Basically the core method calls and flow (e.g. the bytecodes) would look almost identical and it is only syntactic differences (built-in keywords in Ruby, shortening of selectors/method-names, etc.) that make the two read differently.  The idioms can be maintained (1.upto(height)) during translation and both versions are natural for their own language.  There is no paradigm change, impedance mismatch, etc.</p>

<h3>Where Next?</h3>

<p>Next we should go to Chapter 5 (Animating the Program) â€” Page 64.  This involves some graphic work for the 'model' aspects to be realistic, so I guess I will go into the Tk toolkit or Shoes as among the easiest Ruby graphic extensions to use as an example.  If anyone has suggestions for other ones (meant to be super simple), please let me know.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Taste of Ruby (Part 2)]]></title>
    <link href="http://markfussell.emenar.com/blog/a-taste-of-ruby-part-2/"/>
    <updated>2008-08-29T00:08:00-07:00</updated>
    <id>http://markfussell.emenar.com/blog/a-taste-of-ruby-part-2</id>
    <content type="html"><![CDATA[<p>This is a multi-part series.  The first in the series is <a href="/blog/a-taste-of-ruby">here</a>.</p>

<h2>Tower of Hanoi -- Procedural With Input</h2>

<p>The second example from "A Taste of Smalltalk" is in Chapter 3, page 36 and does basic IO.  Except that Smalltalk-80 includes a Windowing graphics system so it can automatically open Dialogs and other things.  Smalltalk (started in 1972) was one of the environments that <em>created</em> personal computers and included abilities in its VM and Libraries that are now submerged into the operating system (some 30 years later).  Now that these abilities are 'intrisically' present, there are many different ways to access them -- so Ruby does not include graphics itself (in its own terms) but calls extensions that provide those graphics.  Given I don't really want to go into Tk or Web programming when discussing a language itself, I will simplify the problem and make it so we only need to get the value somehow... So 'gets' is fine.</p>

<!-- more -->


<h3>Tower of Hanoi -- Procedural with Input -- Ruby</h3>

<p>The only thing we need to do is get the height from the user, so we can just ask for it:
```ruby</p>

<h1>Do the tower</h1>

<p>puts "How tall a tower?"
print ">"
height = gets
move_tower(height.to_i,1,3,2)
```</p>

<p>Quite simple and probably the only interesting thing is that 'height' did not need to be declared at all.  Personally I find this <em>unpleasant</em> and bad for system stability, but I can see the convenience of it.  I would rather Ruby had a way to formally declare local variables, instance variables, etc. and in a 'strict' mode would give feedback.</p>

<p>Smalltalk does formally declare variables, so it is more compile-time checked than Ruby.  The Smalltalk IDEs also warn about things in a way that usually avoids typos, but that is not part of the language itself.  But I would think the simplicity of the syntax and programming model makes the Smalltalk compiler much easier to write and optimize, but that is just an impression.</p>

<h3>Where Next?</h3>

<p>Next we should go to Chapter 4 â€” Page 44. The Third Example (with Real Hanoi Classes)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Taste of Ruby]]></title>
    <link href="http://markfussell.emenar.com/blog/a-taste-of-ruby/"/>
    <updated>2008-08-28T18:00:00-07:00</updated>
    <id>http://markfussell.emenar.com/blog/a-taste-of-ruby</id>
    <content type="html"><![CDATA[<p>One of my favored books in the 1980s was 'A Taste of Smalltalk'.  This was a very short book that gave you the flavor of Smalltalk programming (the language and IDE) as compared to Pascal, C, and Lisp.  I believe it is always important to show multiple programming languages for concepts and this book followed that rule.  The goal of this post-series is to take 'A Taste of Smalltalk' and apply it to Ruby.</p>

<!-- more -->


<p>You can find the original book here:</p>

<ul>
<li><a href="http://www.iam.unibe.ch/~ducasse/FreeBooks/Taste/">A Taste of Smalltalk</a></li>
<li><a href="http://stephane.ducasse.free.fr/FreeBooks.html">Free Smalltalk Books</a></li>
</ul>


<p>Given the original book is available online, I will not repeat it.</p>

<p>You should have a Ruby interpreter, which you can find at <a href="http://www.ruby-lang.org/">http://www.ruby-lang.org/</a> or it may already be on your computer.  The code examples should work pasted directly into 'irb'.</p>

<p>For playing with Smalltalk, you can pick up Squeak from <a href="http://squeak.org/">http://squeak.org/</a>.  Squeak's UI is a bit different from Smalltalk-80 (in the book), but if you go through a quick Squeak tutorial, you should be able to connect the two.</p>

<h2>Tower of Hanoi -- Procedural</h2>

<p>The first example in 'A Taste' is in multiple languages (Chapter 1).  This is Tower of Hanoi done totally procedurally.  Converting to Ruby is very simple and clean:</p>

<h3>Tower of Hanoi -- Procedural -- Ruby</h3>

<p>```ruby</p>

<h1>A Taste of Ruby.  Based on a Taste of Smalltalk (Kaehler and Patterson)</h1>

<h1>Tower of Hanoi -- Variation 1</h1>

<h1>Recursive procedure to move the disk at a height</h1>

<h1>from one pin to another pin using a third pin</h1>

<p>def move_tower(height, fromPin, toPin, usingPin)
  if (height>0) then</p>

<pre><code>move_tower(height-1, fromPin, usingPin, toPin)
move_disk(fromPin, toPin)
move_tower(height-1, usingPin, toPin, fromPin)
</code></pre>

<p>  end
end</p>

<h1>Actually move the disk between the pins</h1>

<p>def move_disk(fromPin,toPin)
  print fromPin.to_s, "->", toPin.to_s, "\n"
end</p>

<h1>Do the tower</h1>

<p>move_tower(3,1,3,2)
```</p>

<p>You could simply paste this into irb to see it run.</p>

<h3>Smalltalk without the IDE</h3>

<p>Some people (many people) consider Smalltalk to mandatorily include an IDE and that you _must _ use an IDE to create Smalltalk code and to run a Smalltalk application.  This is clearly not true and there are many examples of Smalltalk running without any IDE at all.  For example, GNU Smalltalk, Little Smalltalk, GemStone, and 'Headless Smalltalk' (when you deploy VisualWorks you frequently strip the IDE code out) are all valid Smalltalks that do not have an IDE in themselves and if you wanted them to run a program, you would just 'File it in' from a file.  I mention this because the next chapter of "A Taste of Smalltalk" shows the Smalltalk-80 IDE as the way to create the Smalltalk code.  If you download <a href="squeak.org">Squeak</a> you can follow fairly similar  steps to the one in the book.</p>

<p>To make inter-language comparisons easier, I will instead use the 'File In' format when talking about Smalltalk programs.  Since that is missing from the book, here it is.  Note that the lines starting with '!' are not Smalltalk language syntax but are part of the standard library for being able to 'file in' changes.  For most programming languages the two would be equivalent, but Smalltalk allows multiple ways of creating a program so the coupling is softer.</p>

<h3>Tower of Hanoi -- Procedural -- Smalltalk</h3>

<p>```smalltalk</p>

<pre><code>!Object methodsFor: 'hanoi' stamp: 'MLF 8/28/2008 10:31'!
moveTower: height from: fromPin to: toPin using: usingPin
    (height &gt; 0) ifTrue: [
        self moveTower: (height-1) from: fromPin to: usingPin using: toPin.
        self moveDisk: fromPin to: toPin.
        self moveTower: (height-1) from: usingPin to: toPin using: fromPin
    ]
!

moveDisk: fromPin to: toPin
    Transcript show: (fromPin printString, ' -&gt; ', toPin printString); cr.

! !

"Do the tower
(Object new) moveTower: 3 from: 1 to: 3 using: 2
!
</code></pre>

<p>```</p>

<p>Now an interesting thing about the Smalltalk version is that we had to create an object to execute our code.  Smalltalk does not have functions or procedures: it only has objects and messages that get sent to objects.  So we need some object to respond to the message.  There could be an implicit object associated with the 'File In' format -- but there isn't.  A second interesting thing about the Smalltalk version is that we modified Object itself.  So any of:</p>

<ul>
<li><p>'Foo' moveTower: 3 from: 1 to: 3 using: 2</p></li>
<li><p>3 moveTower: 3 from: 1 to: 3 using: 2</p></li>
<li><p>false moveTower: 3 from: 1 to: 3 using: 2</p></li>
<li><p>nil moveTower: 3 from: 1 to: 3 using: 2</p></li>
</ul>


<p>would work.  So because we modified Object and there are well known objects of type Object (and descendants) in the system, we didn't have to actually create an Object at all.</p>

<h3>Ruby is cleaner</h3>

<p>In this particular case, Ruby is:</p>

<ul>
<li>Doing a much cleaner thing by default (for this file-in approach)</li>
<li>But can do exactly the same thing if told to</li>
</ul>


<p>The "cleaner thing by default" is that Ruby statements (commands) when being executed are always talking to some object, and the default object is an object called 'main'.  So statements without an explicit object <em>receiving</em> the message send those messages to 'main' -- and the message "move_tower" is sent to main.  And although Ruby doesn't describe itself quite like this, effectively 'def' could be viewed as a message and it is also sent to 'main'.  'def' creates a method on a Class -- either the eigen-class of the receiving object or on a Class object.  So Ruby behaves almost identically to Smalltalk except it:</p>

<ul>
<li>Has a default object for 'File In' format</li>
<li>Creates methods on the eigen-class if a non-class is the target of the def 'message'</li>
</ul>


<p>Probably the simplest way for Smalltalk to match this cleaner scripting approach is for a Smalltalk 'terminal' (called IRS :-) to define 'self' as being itself and then the method definitions would automatically happen on itself.  So you would have lines like:</p>

<ul>
<li>'!self methodsFor: 'hanoi' ...</li>
<li>self moveTower: 3 from: 1 ...</li>
</ul>


<p>and applying to Object would no longer be necessary.  This 'scripting' need has not been important to the Smalltalk community in general although someone may have something very like this.</p>

<h3>Ruby being a bit more Smalltalkish</h3>

<p>The second point above was that Ruby can do exactly what the Smalltalk code does.  This isn't to show that this is a better approach (in this case it is not), but to show the incredible similarity between the two languages.</p>

<p>```ruby</p>

<h1>A Taste of Ruby.  Based on a Taste of Smalltalk (Kaehler and Patterson)</h1>

<h1>Tower of Hanoi -- Variation 1b</h1>

<p>class Object</p>

<h1>Recursive procedure to move the disk at a height</h1>

<h1>from one pin to another pin using a third pin</h1>

<p>def move_tower(height, fromPin, toPin, usingPin)
  if (height>0) then</p>

<pre><code>move_tower(height-1, fromPin, usingPin, toPin)
move_disk(fromPin, toPin)
move_tower(height-1, usingPin, toPin, fromPin)
</code></pre>

<p>  end
end</p>

<h1>Actually move the disk between the pins</h1>

<p>def move_disk(fromPin,toPin)
  print fromPin.to_s, "->", toPin.to_s, "\n"
end</p>

<p>end</p>

<h1>Do the tower</h1>

<p>(Object.new).move_tower(3,1,3,2)
puts "---"
"HiThere".move_tower(3,1,3,2)
puts "---"
nil.move_tower(3,1,3,2)
```</p>

<p>This similarity is way beyond casual similarity -- enabling 'nil' to have a method by augmenting Object with almost exactly the same incantation makes for a very similar DNA.  Basically it seems like the Ruby language is a pure syntactic mutation on Smalltalk.</p>

<h3>Fun with Ducks</h3>

<p>The term "Duck Typing" was not around in the 80s (AFAIK), but instead people talked about 'Dynamic Typing' where the Duckness was hidden under that Dynamic-ness.  There are certainly other terms too (I used the term 'protocol' where protocol was just obeying the required messages and semantics properly -- i.e. acting like a Duck).  This Hanoi example has a nice Duck property -- We don't care what the stacks are as long as they can be converted to Strings:</p>

<pre><code>#Bizarre Hanoi Showing Duck Typing
move_tower(3,"Tower-1", nil, Proc.new {|| "Tower" })
</code></pre>

<h3>Tower of Hanoi -- Procedural -- Java</h3>

<p>For completeness, we should do the example in Java as well.  Given Java execution starts at some static 'main' method/procedure, it seems like the most natural version of this Procedural code is to stay on that static side.</p>

<p>```java
class Hanoi {
   static public void main(String[] args) {</p>

<pre><code>  moveTower(3,1,3,2);
</code></pre>

<p>   }</p>

<p>   static public void moveTower(int height, Object fromPin, Object toPin, Object usingPin) {</p>

<pre><code>  if (height &gt; 0) {
     moveTower(height-1, fromPin, usingPin, toPin);
     moveDisk(fromPin, toPin);
     moveTower(height-1, usingPin, toPin, fromPin);
  }
</code></pre>

<p>   }</p>

<p>   static public void moveDisk(Object fromPin, Object toPin) {</p>

<pre><code>  System.out.println(""+fromPin+"-&gt;"+toPin);
</code></pre>

<p>   }
}</p>

<p>```</p>

<h2>Comments</h2>

<p>This example from "A Taste of Smalltalk" is the highly procedural version.  It is not meant to be a particularly good program, but it is a simple and good introductory example.  Because Ruby is an interpreter-oriented (scripting-oriented) language, it does quite well in making the example look simple and clean.  But even better (IMO) is that the developer has unknowingly shifted into a much more powerful programming model without any pain-of-entry.  I have never found Smalltalk to be hard but many people do and any barrier that prevents people from entering a community can harm both sides.</p>

<p>I believe the syntactic mutation in Ruby that hides an implicit object ('main') actually helps tremendously with accessibility of the language.  It would only be a problem if the syntactic mutation later penalized the experienced developer.</p>

<h3>Logo, Turtles, and 'main'</h3>

<p>I recently decided my daughters (4 and 7) might as well learn how to program, so I fired up a version of <a href="http://en.wikipedia.org/wiki/Logo_(programming_language">Logo</a>) for them to play with.  Logo has a pleasing characteristic where you are talking to a graphical Turtle by default -- you can program the turtle by telling it what to do directly and can then start working your way up in programming sophistication.  The Ruby 'main' seems to lend itself to the same thing.  You are by default talking to a (more boring :-) ) turtle, which makes the first level of accessibility easier.</p>

<p>At one point I wanted to test something quickly in Smalltalk and actually forgot what object I had to talk to to do a simple 'print'.  Likewise with Java, 'System.out' is extremely obscure.  The 'Turtle' approach seems to help alleviate these kinds of issues a bit.</p>

<h3>Where Next?</h3>

<p>Next we should go to Chapter 3 -- Page 36.  The Second Example.</p>
]]></content>
  </entry>
  
</feed>
