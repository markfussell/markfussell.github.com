<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ephemeral | Polyglot]]></title>
  <link href="http://markfussell.emenar.com/blog/categories/ephemeral/atom.xml" rel="self"/>
  <link href="http://markfussell.emenar.com/"/>
  <updated>2015-12-14T18:11:35-08:00</updated>
  <id>http://markfussell.emenar.com/</id>
  <author>
    <name><![CDATA[Mark Fussell]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Being Ephemeral]]></title>
    <link href="http://markfussell.emenar.com/blog/being-ephemeral/"/>
    <updated>2008-08-28T04:34:00-07:00</updated>
    <id>http://markfussell.emenar.com/blog/being-ephemeral</id>
    <content type="html"><![CDATA[<p>There are lots of topics in programming languages, IT infrastructure, and system design that turn out to be all about persistence vs. being ephemeral.  I don't believe people realize it, but "being ephemeral" is the core question and the standard answer should be?  42.  Which given it is >0 is 'Yes'.  So "Be Ephemeral" unless you can't possibly be ephemeral.</p>

<!-- more -->


<p>When can't you be ephemeral?... turns out it is in a very small number of cases.  Ruby is more ephemeral than the standard Smalltalk 'image' approach, so it wins.  Xen/VMWare is more ephemeral than a physical machine, so it wins.  <em>Scripted</em> vm image building is more ephemeral than image snapshots, so its win.  Credit-card receipts in a retail store... well those have to be remembered (persistent) or you could lose money or customers or both.   So make that persistent :-)</p>

<p>Performance is always a consideration: 'rebuilding' an image could be time-expensive, but the old adage [annotated] of:
   * Make it work (ephemerally if possible)
   * Make it right
   * Make it fast (pull the ephemerally <em>iff necessary</em>)
is the right approach.   You may be amazed at how ephemeral things can be.  NowUR built virtual desktop in less than 30 seconds -- by being ephemeral.  An with Amazon EC2, for many things I can just plug in a script and have lots of 'yummy' things happen in the same amount of time.</p>

<p>Why is "Being Ephemeral" right?  Well, there is one simple reason:
   * Inventory of outdated parts is very expensive (Theory Of Constraints, Lean Methods, etc.)</p>

<p>And if you can make it through the old adage without needing any Inventory, you have a better (less expensive, more agile, higher velocity) solution than someone that cheats by using Inventory.</p>
]]></content>
  </entry>
  
</feed>
